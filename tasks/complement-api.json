{
  "openapi": "3.0.1",
  "info": {
    "title": "Opencell Portal Consumed APIs",
    "version": "1.0.0",
    "description": "Synthese generee automatiquement des endpoints REST appeles par le portail Opencell."
  },
  "servers": [
    {
      "url": "https://{host}/opencell/api/rest",
      "description": "URL du serveur backend",
      "variables": {
        "host": {
          "default": "example.com"
        }
      }
    }
  ],
  "paths": {
    "/{SERVER_URL}/opencell/api/rest/admin/files/downloadFile": {
      "get": {
        "tags": [
          "src/components/GenericRenderer"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- sendRequest (src/components/GenericRenderer/Widgets/FileExplorerWidget/index.js#L139) -> {SERVER_URL}/opencell/api/rest/admin/files/downloadFile?file={preparePath_name_path_} | request: sendRequest.method: GET | sendRequest.options: {\n  method: 'GET'\n} / info: sendRequest.fileOptions: {\n  filename: `${name}`\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "parameters": [
          {
            "name": "file",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-request-hints": [
          "sendRequest.method: GET",
          "sendRequest.options: {\n  method: 'GET'\n}"
        ],
        "x-dev-notes": [
          "sendRequest.fileOptions: {\n  filename: `${name}`\n}"
        ]
      }
    },
    "/offerManager/offers": {
      "get": {
        "tags": [
          "src/components/GenericRenderer"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- fetch (src/components/GenericRenderer/Widgets/PrestationEditorWidget.js#L420) -> http://localhost:9000/offerManager/offers",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/{finalUrl}": {
      "get": {
        "tags": [
          "src/configuration/roles",
          "src/user/hooks"
        ],
        "summary": "Used in 4 frontend location(s)",
        "description": "- fetch (src/configuration/roles/hooks/useLoadAppRolesConfiguration.tsx#L30) -> {finalUrl} | request: fetch.options: {\n  headers,\n  maxRetry: 3,\n  timeout: 5000\n}\n- fetch (src/user/hooks/usePermissions.tsx#L38) -> {finalUrl} | request: fetch.options: {\n  headers,\n  maxRetry: 3,\n  timeout: 5000\n}\n- fetch (src/user/hooks/usePermissionsKEYCLOAK.tsx#L50) -> {finalUrl} | request: fetch.options: {\n  headers,\n  maxRetry: 3,\n  timeout: 5000\n}\n- fetch (src/user/hooks/usePermissionsKEYCLOAKAndSetProfile.tsx#L52) -> {finalUrl} | request: fetch.options: {\n  headers,\n  maxRetry: 3,\n  timeout: 5000\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-request-hints": [
          "fetch.options: {\n  headers,\n  maxRetry: 3,\n  timeout: 5000\n}"
        ]
      }
    },
    "/{url}": {
      "get": {
        "tags": [
          "src/providers/sendRequest.js",
          "src/utils/fetch.js"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- fetch (src/providers/sendRequest.js#L34) -> {url}\n- window.fetch (src/utils/fetch.js#L17) -> {url} | request: fetch.options: {\n  ...options,\n  signal\n}\n- fetch (src/utils/fetch.js#L33) -> {url} | request: fetch.options: {\n  ...options,\n  maxRetry: maxRetry - 1\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-request-hints": [
          "fetch.options: {\n  ...options,\n  signal\n}",
          "fetch.options: {\n  ...options,\n  maxRetry: maxRetry - 1\n}"
        ]
      },
      "post": {
        "tags": [
          "catalog/matrix-columns"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/catalog/modules/matrix-columns/provider/provider.js#L45) -> {url} | request: helper.method: POST / response: helper.responseContainer: pricePlanMatrixColumnDto / info: helper: getCreateProvider | helperArgs: {\n  url,\n  method: 'POST',\n  responseContainer: 'pricePlanMatrixColumnDto'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: pricePlanMatrixColumnDto",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pricePlanMatrixColumnDto": {
                      "type": "object",
                      "properties": {
                        "version": {
                          "type": "string"
                        },
                        "startDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "endDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "priority": {
                          "type": "string"
                        },
                        "price": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url,\n  method: 'POST',\n  responseContainer: 'pricePlanMatrixColumnDto'\n}"
        ]
      },
      "put": {
        "tags": [
          "catalog/matrix-columns"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/catalog/modules/matrix-columns/provider/provider.js#L52) -> {url} | request: helper.method: PUT / response: helper.responseContainer: pricePlanMatrixColumnDto / info: helper: getUpdateProvider | helperArgs: {\n  url,\n  method: 'PUT',\n  responseContainer: 'pricePlanMatrixColumnDto'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: pricePlanMatrixColumnDto",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pricePlanMatrixColumnDto": {
                      "type": "object",
                      "properties": {
                        "version": {
                          "type": "string"
                        },
                        "startDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "endDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "priority": {
                          "type": "string"
                        },
                        "price": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getUpdateProvider",
          "helperArgs: {\n  url,\n  method: 'PUT',\n  responseContainer: 'pricePlanMatrixColumnDto'\n}"
        ]
      }
    },
    "/{swUrl}": {
      "get": {
        "tags": [
          "src/serviceWorker.ts"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- fetch (src/serviceWorker.ts#L108) -> {swUrl} | request: fetch.options: {\n  headers: {\n    'Service-Worker': 'script'\n  }\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-request-hints": [
          "fetch.options: {\n  headers: {\n    'Service-Worker': 'script'\n  }\n}"
        ]
      }
    },
    "/v2/generic/all/OCCTemplate": {
      "post": {
        "tags": [
          "B2B-customer-care/account-operations-types",
          "administration/account-operations-types",
          "finance/account-operations-types"
        ],
        "summary": "Used in 6 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/administration/modules/account-operations-types/provider/provider.js#L40) -> v2/generic/all/OCCTemplate | request: prepareParams: params => {\n  const {\n    sort = {},\n    ...restParams\n  } = params;\n  const transformSort = {\n    ...sort,\n    field: 'code',\n    order: 'ASC'\n  };\n  return {\n    sort: get(sort, 'field') === 'id' ? transformSort : sort,\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/OCCTemplate',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/administration/modules/account-operations-types/provider/provider.js#L61) -> v2/generic/all/OCCTemplate | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/OCCTemplate',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/account-operations-types/provider/provider.js#L40) -> v2/generic/all/OCCTemplate | request: prepareParams: params => {\n  const {\n    sort = {},\n    ...restParams\n  } = params;\n  const transformSort = {\n    ...sort,\n    field: 'code',\n    order: 'ASC'\n  };\n  return {\n    sort: get(sort, 'field') === 'id' ? transformSort : sort,\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/OCCTemplate',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/account-operations-types/provider/provider.js#L61) -> v2/generic/all/OCCTemplate | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/OCCTemplate',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/finance/modules/account-operations-types/provider/provider.js#L40) -> v2/generic/all/OCCTemplate | request: prepareParams: params => {\n  const {\n    sort = {},\n    ...restParams\n  } = params;\n  const transformSort = {\n    ...sort,\n    field: 'code',\n    order: 'ASC'\n  };\n  return {\n    sort: get(sort, 'field') === 'id' ? transformSort : sort,\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/OCCTemplate',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/finance/modules/account-operations-types/provider/provider.js#L61) -> v2/generic/all/OCCTemplate | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/OCCTemplate',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "occCategory": {
                            "type": "string"
                          },
                          "accountingCode": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              }
                            }
                          },
                          "contraAccountingCode": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string"
                                  }
                                }
                              },
                              {
                                "type": "string"
                              }
                            ]
                          },
                          "journal": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    sort = {},\n    ...restParams\n  } = params;\n  const transformSort = {\n    ...sort,\n    field: 'code',\n    order: 'ASC'\n  };\n  return {\n    sort: get(sort, 'field') === 'id' ? transformSort : sort,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    sort = {},\n    ...restParams\n  } = params;\n  const transformSort = {\n    ...sort,\n    field: 'code',\n    order: 'ASC'\n  };\n  return {\n    sort: get(sort, 'field') === 'id' ? transformSort : sort,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/OCCTemplate',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/OCCTemplate/": {
      "post": {
        "tags": [
          "B2B-customer-care/account-operations-types",
          "administration/account-operations-types",
          "finance/account-operations-types"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/administration/modules/account-operations-types/provider/provider.js#L69) -> v2/generic/OCCTemplate/ | request: helper.nestedEntities: nestedEntities / info: keyColumn: keyColumn | helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/OCCTemplate/',\n  nestedEntities\n}\n- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/account-operations-types/provider/provider.js#L69) -> v2/generic/OCCTemplate/ | request: helper.nestedEntities: nestedEntities / info: keyColumn: keyColumn | helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/OCCTemplate/',\n  nestedEntities\n}\n- GET_ONE (src/srcProject/layout/finance/modules/account-operations-types/provider/provider.js#L69) -> v2/generic/OCCTemplate/ | request: helper.nestedEntities: nestedEntities / info: keyColumn: keyColumn | helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/OCCTemplate/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "occCategory": {
                      "type": "string"
                    },
                    "accountingCode": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "contraAccountingCode": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "journal": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/OCCTemplate/',\n  nestedEntities\n}"
        ]
      }
    },
    "/occTemplate": {
      "post": {
        "tags": [
          "B2B-customer-care/account-operations-types",
          "administration/account-operations-types",
          "finance/account-operations-types"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/administration/modules/account-operations-types/provider/provider.js#L73) -> occTemplate | request: helper.method: POST / response: responseContainer: 'occTemplate' / info: keyColumn: keyColumn | helper: getCreateProvider | helperArgs: {\n  url: 'occTemplate',\n  method: 'POST'\n}\n- CREATE (src/srcProject/layout/B2B-customer-care/modules/account-operations-types/provider/provider.js#L73) -> occTemplate | request: helper.method: POST / response: responseContainer: 'occTemplate' / info: keyColumn: keyColumn | helper: getCreateProvider | helperArgs: {\n  url: 'occTemplate',\n  method: 'POST'\n}\n- CREATE (src/srcProject/layout/finance/modules/account-operations-types/provider/provider.js#L73) -> occTemplate | request: helper.method: POST / response: responseContainer: 'occTemplate' / info: keyColumn: keyColumn | helper: getCreateProvider | helperArgs: {\n  url: 'occTemplate',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response. responseContainer: 'occTemplate'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "occTemplate": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "occCategory": {
                          "type": "string"
                        },
                        "accountingCode": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "contraAccountingCode": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "string"
                            }
                          ]
                        },
                        "journal": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'occTemplate',\n  method: 'POST'\n}"
        ]
      },
      "put": {
        "tags": [
          "B2B-customer-care/account-operations-types",
          "administration/account-operations-types",
          "finance/account-operations-types"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/administration/modules/account-operations-types/provider/provider.js#L82) -> occTemplate | request: helper.method: PUT / response: responseContainer: 'occTemplate' / info: keyColumn: keyColumn | helper: getUpdateProvider | helperArgs: {\n  url: 'occTemplate',\n  method: 'PUT'\n}\n- UPDATE (src/srcProject/layout/B2B-customer-care/modules/account-operations-types/provider/provider.js#L82) -> occTemplate | request: helper.method: PUT / response: responseContainer: 'occTemplate' / info: keyColumn: keyColumn | helper: getUpdateProvider | helperArgs: {\n  url: 'occTemplate',\n  method: 'PUT'\n}\n- UPDATE (src/srcProject/layout/finance/modules/account-operations-types/provider/provider.js#L82) -> occTemplate | request: helper.method: PUT / response: responseContainer: 'occTemplate' / info: keyColumn: keyColumn | helper: getUpdateProvider | helperArgs: {\n  url: 'occTemplate',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response. responseContainer: 'occTemplate'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "occTemplate": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "occCategory": {
                          "type": "string"
                        },
                        "accountingCode": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "contraAccountingCode": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "string"
                            }
                          ]
                        },
                        "journal": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'occTemplate',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/v2/generic/all/accountingCode": {
      "post": {
        "tags": [
          "administration/accounting-codes",
          "administration/chart-of-accounts",
          "finance/accounting-codes",
          "finance/chart-of-accounts"
        ],
        "summary": "Used in 8 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/administration/modules/accounting-codes/provider/provider.js#L13) -> v2/generic/all/accountingCode | request: prepareParams: params => {\n  const {\n    sort = {},\n    ...restParams\n  } = params;\n  const transformSort = {\n    ...sort,\n    field: 'code',\n    order: 'ASC'\n  };\n  return {\n    sort: transformSort,\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/accountingCode',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/administration/modules/accounting-codes/provider/provider.js#L33) -> v2/generic/all/accountingCode | request: prepareParams: params => {\n  const {\n    sort = {},\n    ...restParams\n  } = params;\n  const transformSort = {\n    ...sort,\n    field: 'code',\n    order: 'ASC'\n  };\n  return {\n    sort: get(sort, 'field') === 'id' ? transformSort : sort,\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/accountingCode',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/administration/modules/chart-of-accounts/provider/provider.js#L36) -> v2/generic/all/accountingCode | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    active = true,\n    ...restFilter\n  } = filter;\n  const activeValue = active === 'ACTIVED';\n  const filterTransformed = {\n    ...(active !== true ? {\n      disabled: !activeValue\n    } : {}),\n    ...restFilter\n  };\n  return {\n    filter: filterTransformed,\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/accountingCode',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/administration/modules/chart-of-accounts/provider/provider.js#L58) -> v2/generic/all/accountingCode | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/accountingCode',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/finance/modules/accounting-codes/provider/provider.js#L12) -> v2/generic/all/accountingCode | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/accountingCode',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/finance/modules/accounting-codes/provider/provider.js#L19) -> v2/generic/all/accountingCode | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/accountingCode',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/finance/modules/chart-of-accounts/provider/provider.js#L34) -> v2/generic/all/accountingCode | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    active,\n    ...restFilter\n  } = filter;\n  const filterTransformed = {\n    ...(filter.hasOwnProperty('active') ? {\n      disabled: !active\n    } : {}),\n    ...restFilter\n  };\n  return {\n    filter: filterTransformed,\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/accountingCode',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/finance/modules/chart-of-accounts/provider/provider.js#L54) -> v2/generic/all/accountingCode | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/accountingCode',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data | transformResponse: transformResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "chartOfAccountTypeEnum": {
                                "type": "string"
                              },
                              "chartOfAccountViewTypeEnum": {
                                "type": "string"
                              },
                              "parentAccountingCode": {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string"
                                  }
                                }
                              },
                              "active": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "chartOfAccountTypeEnum": {
                                "type": "string"
                              },
                              "reportingAccount": {
                                "type": "string"
                              },
                              "chartOfAccountViewTypeEnum": {
                                "type": "string"
                              },
                              "migrated": {
                                "type": "boolean"
                              },
                              "disabled": {
                                "type": "boolean"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    sort = {},\n    ...restParams\n  } = params;\n  const transformSort = {\n    ...sort,\n    field: 'code',\n    order: 'ASC'\n  };\n  return {\n    sort: transformSort,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities\nprepareParams: params => {\n  const {\n    sort = {},\n    ...restParams\n  } = params;\n  const transformSort = {\n    ...sort,\n    field: 'code',\n    order: 'ASC'\n  };\n  return {\n    sort: get(sort, 'field') === 'id' ? transformSort : sort,\n    ...restParams\n  };\n}\nprepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    active = true,\n    ...restFilter\n  } = filter;\n  const activeValue = active === 'ACTIVED';\n  const filterTransformed = {\n    ...(active !== true ? {\n      disabled: !activeValue\n    } : {}),\n    ...restFilter\n  };\n  return {\n    filter: filterTransformed,\n    ...restParams\n  };\n}\nprepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    active,\n    ...restFilter\n  } = filter;\n  const filterTransformed = {\n    ...(filter.hasOwnProperty('active') ? {\n      disabled: !active\n    } : {}),\n    ...restFilter\n  };\n  return {\n    filter: filterTransformed,\n    ...restParams\n  };\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    sort = {},\n    ...restParams\n  } = params;\n  const transformSort = {\n    ...sort,\n    field: 'code',\n    order: 'ASC'\n  };\n  return {\n    sort: transformSort,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities\nprepareParams: params => {\n  const {\n    sort = {},\n    ...restParams\n  } = params;\n  const transformSort = {\n    ...sort,\n    field: 'code',\n    order: 'ASC'\n  };\n  return {\n    sort: get(sort, 'field') === 'id' ? transformSort : sort,\n    ...restParams\n  };\n}\nprepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    active = true,\n    ...restFilter\n  } = filter;\n  const activeValue = active === 'ACTIVED';\n  const filterTransformed = {\n    ...(active !== true ? {\n      disabled: !activeValue\n    } : {}),\n    ...restFilter\n  };\n  return {\n    filter: filterTransformed,\n    ...restParams\n  };\n}\nprepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    active,\n    ...restFilter\n  } = filter;\n  const filterTransformed = {\n    ...(filter.hasOwnProperty('active') ? {\n      disabled: !active\n    } : {}),\n    ...restFilter\n  };\n  return {\n    filter: filterTransformed,\n    ...restParams\n  };\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/accountingCode',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/accountingCode/": {
      "post": {
        "tags": [
          "administration/accounting-codes",
          "administration/chart-of-accounts",
          "finance/chart-of-accounts"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/administration/modules/accounting-codes/provider/provider.js#L53) -> v2/generic/accountingCode/ | request: helper.nestedEntities: nestedEntities / info: keyColumn: keyColumn | helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/accountingCode/',\n  nestedEntities\n}\n- GET_ONE (src/srcProject/layout/administration/modules/chart-of-accounts/provider/provider.js#L65) -> v2/generic/accountingCode/ | request: helper.keyColumn: keyColumn | helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  keyColumn,\n  url: 'v2/generic/accountingCode/',\n  nestedEntities\n}\n- GET_ONE (src/srcProject/layout/finance/modules/chart-of-accounts/provider/provider.js#L61) -> v2/generic/accountingCode/ | request: helper.keyColumn: keyColumn | helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  keyColumn,\n  url: 'v2/generic/accountingCode/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "chartOfAccountTypeEnum": {
                          "type": "string"
                        },
                        "chartOfAccountViewTypeEnum": {
                          "type": "string"
                        },
                        "parentAccountingCode": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "active": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: keyColumn",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: keyColumn"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/accountingCode/',\n  nestedEntities\n}",
          "helperArgs: {\n  keyColumn,\n  url: 'v2/generic/accountingCode/',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/all/articleMapping": {
      "post": {
        "tags": [
          "B2B-customer-care/article-mapping",
          "administration/article-mapping",
          "catalog/article-mapping"
        ],
        "summary": "Used in 6 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/administration/modules/article-mapping/provider/provider.js#L17) -> v2/generic/all/articleMapping | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  return {\n    filter: filter,\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/articleMapping',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/administration/modules/article-mapping/provider/provider.js#L29) -> v2/generic/all/articleMapping | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/articleMapping',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/article-mapping/provider/provider.js#L17) -> v2/generic/all/articleMapping | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  return {\n    filter: filter,\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/articleMapping',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/article-mapping/provider/provider.js#L29) -> v2/generic/all/articleMapping | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/articleMapping',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/catalog/modules/article-mapping/provider/provider.js#L17) -> v2/generic/all/articleMapping | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  return {\n    filter: filter,\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/articleMapping',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/catalog/modules/article-mapping/provider/provider.js#L29) -> v2/generic/all/articleMapping | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/articleMapping',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "articleMapping": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              }
                            }
                          },
                          "product": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  return {\n    filter: filter,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  return {\n    filter: filter,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/articleMapping',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/articleMapping/": {
      "post": {
        "tags": [
          "B2B-customer-care/article-mapping",
          "administration/article-mapping",
          "catalog/article-mapping"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/administration/modules/article-mapping/provider/provider.js#L34) -> v2/generic/articleMapping/ | request: helper.nestedEntities: nestedEntities / info: keyColumn: keyColumn | helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/articleMapping/',\n  nestedEntities\n}\n- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/article-mapping/provider/provider.js#L34) -> v2/generic/articleMapping/ | request: helper.nestedEntities: nestedEntities / info: keyColumn: keyColumn | helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/articleMapping/',\n  nestedEntities\n}\n- GET_ONE (src/srcProject/layout/catalog/modules/article-mapping/provider/provider.js#L34) -> v2/generic/articleMapping/ | request: helper.nestedEntities: nestedEntities / info: keyColumn: keyColumn | helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/articleMapping/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "articleMapping": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "product": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/articleMapping/',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/articleMapping/": {
      "post": {
        "tags": [
          "B2B-customer-care/article-mapping",
          "administration/article-mapping",
          "catalog/article-mapping"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/administration/modules/article-mapping/provider/provider.js#L39) -> v2/articleMapping/ | request: helper.method: POST / info: keyColumn: keyColumn | helper: getCreateProvider | helperArgs: {\n  url: 'v2/articleMapping/',\n  method: 'POST'\n}\n- CREATE (src/srcProject/layout/B2B-customer-care/modules/article-mapping/provider/provider.js#L39) -> v2/articleMapping/ | request: helper.method: POST / info: keyColumn: keyColumn | helper: getCreateProvider | helperArgs: {\n  url: 'v2/articleMapping/',\n  method: 'POST'\n}\n- CREATE (src/srcProject/layout/catalog/modules/article-mapping/provider/provider.js#L39) -> v2/articleMapping/ | request: helper.method: POST / info: keyColumn: keyColumn | helper: getCreateProvider | helperArgs: {\n  url: 'v2/articleMapping/',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "articleMapping": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "product": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/articleMapping/',\n  method: 'POST'\n}"
        ]
      },
      "delete": {
        "tags": [
          "B2B-customer-care/article-mapping",
          "administration/article-mapping",
          "catalog/article-mapping"
        ],
        "summary": "Used in 6 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/administration/modules/article-mapping/provider/provider.js#L52) -> v2/articleMapping/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'v2/articleMapping/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/administration/modules/article-mapping/provider/provider.js#L60) -> v2/articleMapping/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'v2/articleMapping/',\n  method: 'DELETE'\n}\n- DELETE (src/srcProject/layout/B2B-customer-care/modules/article-mapping/provider/provider.js#L52) -> v2/articleMapping/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'v2/articleMapping/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/article-mapping/provider/provider.js#L60) -> v2/articleMapping/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'v2/articleMapping/',\n  method: 'DELETE'\n}\n- DELETE (src/srcProject/layout/catalog/modules/article-mapping/provider/provider.js#L52) -> v2/articleMapping/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'v2/articleMapping/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/catalog/modules/article-mapping/provider/provider.js#L60) -> v2/articleMapping/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'v2/articleMapping/',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "articleMapping": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "product": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'v2/articleMapping/',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/articleMapping": {
      "put": {
        "tags": [
          "B2B-customer-care/article-mapping",
          "administration/article-mapping",
          "catalog/article-mapping"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/administration/modules/article-mapping/provider/provider.js#L47) -> v2/articleMapping | request: helper.method: PUT / info: keyColumn: keyColumn | helper: getUpdateProvider | helperArgs: {\n  url: 'v2/articleMapping',\n  method: 'PUT'\n}\n- UPDATE (src/srcProject/layout/B2B-customer-care/modules/article-mapping/provider/provider.js#L47) -> v2/articleMapping | request: helper.method: PUT / info: keyColumn: keyColumn | helper: getUpdateProvider | helperArgs: {\n  url: 'v2/articleMapping',\n  method: 'PUT'\n}\n- UPDATE (src/srcProject/layout/catalog/modules/article-mapping/provider/provider.js#L47) -> v2/articleMapping | request: helper.method: PUT / info: keyColumn: keyColumn | helper: getUpdateProvider | helperArgs: {\n  url: 'v2/articleMapping',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "articleMapping": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "product": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'v2/articleMapping',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/v2/generic/all/articleMappingLine": {
      "post": {
        "tags": [
          "B2B-customer-care/article-from-article-mapping",
          "B2B-customer-care/article-mapping-line",
          "administration/article-mapping-line",
          "catalog/article-from-article-mapping",
          "catalog/article-mapping-line"
        ],
        "summary": "Used in 10 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/administration/modules/article-mapping-line/provider/provider.js#L19) -> v2/generic/all/articleMappingLine | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  return {\n    filter: filter,\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/articleMappingLine',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/administration/modules/article-mapping-line/provider/provider.js#L31) -> v2/generic/all/articleMappingLine | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/articleMappingLine',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/article-from-article-mapping/provider/provider.js#L43) -> v2/generic/all/articleMappingLine | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  return {\n    filter: filter,\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities | helper.genericFields: genericFields / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/articleMappingLine',\n  nestedEntities,\n  genericFields\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/article-from-article-mapping/provider/provider.js#L57) -> v2/generic/all/articleMappingLine | request: helper.nestedEntities: nestedEntities | helper.genericFields: genericFields | helper.keyColumn: 'accountingArticle.code' / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/articleMappingLine',\n  nestedEntities,\n  genericFields,\n  keyColumn: 'accountingArticle.code'\n}\n- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/article-mapping-line/provider/provider.js#L19) -> v2/generic/all/articleMappingLine | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  return {\n    filter: filter,\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/articleMappingLine',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/article-mapping-line/provider/provider.js#L31) -> v2/generic/all/articleMappingLine | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/articleMappingLine',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/catalog/modules/article-from-article-mapping/provider/provider.js#L43) -> v2/generic/all/articleMappingLine | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  return {\n    filter: filter,\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities | helper.genericFields: genericFields / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/articleMappingLine',\n  nestedEntities,\n  genericFields\n}\n- GET_MANY (src/srcProject/layout/catalog/modules/article-from-article-mapping/provider/provider.js#L57) -> v2/generic/all/articleMappingLine | request: helper.nestedEntities: nestedEntities | helper.genericFields: genericFields | helper.keyColumn: 'accountingArticle.code' / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/articleMappingLine',\n  nestedEntities,\n  genericFields,\n  keyColumn: 'accountingArticle.code'\n}\n- GET_LIST (src/srcProject/layout/catalog/modules/article-mapping-line/provider/provider.js#L19) -> v2/generic/all/articleMappingLine | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  return {\n    filter: filter,\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/articleMappingLine',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/catalog/modules/article-mapping-line/provider/provider.js#L31) -> v2/generic/all/articleMappingLine | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/articleMappingLine',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data | transformResponse: transformResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "articleMapping": {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string"
                                  },
                                  "description": {
                                    "type": "string"
                                  }
                                }
                              },
                              "offerTemplate": {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string"
                                  },
                                  "description": {
                                    "type": "string"
                                  }
                                }
                              },
                              "product": {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string"
                                  },
                                  "description": {
                                    "type": "string"
                                  }
                                }
                              },
                              "chargeTemplate": {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string"
                                  },
                                  "description": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "articleMapping": {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string"
                                  },
                                  "description": {
                                    "type": "string"
                                  }
                                }
                              },
                              "product": {
                                "anyOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "code": {
                                        "type": "string"
                                      },
                                      "description": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  {
                                    "type": "string"
                                  }
                                ]
                              },
                              "description": {
                                "type": "string"
                              },
                              "offer": {
                                "type": "string"
                              },
                              "charge": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "articleMapping": {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string"
                                  },
                                  "description": {
                                    "type": "string"
                                  }
                                }
                              },
                              "product": {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string"
                                  },
                                  "description": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  return {\n    filter: filter,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities\nhelper.genericFields: genericFields\nhelper.keyColumn: 'accountingArticle.code'",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  return {\n    filter: filter,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities\nhelper.genericFields: genericFields\nhelper.keyColumn: 'accountingArticle.code'"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/articleMappingLine',\n  nestedEntities\n}",
          "helperArgs: {\n  url: 'v2/generic/all/articleMappingLine',\n  nestedEntities,\n  genericFields\n}",
          "helperArgs: {\n  url: 'v2/generic/all/articleMappingLine',\n  nestedEntities,\n  genericFields,\n  keyColumn: 'accountingArticle.code'\n}"
        ]
      }
    },
    "/v2/generic/articleMappingLine/": {
      "post": {
        "tags": [
          "B2B-customer-care/article-from-article-mapping",
          "B2B-customer-care/article-mapping-line",
          "administration/article-mapping-line",
          "catalog/article-from-article-mapping",
          "catalog/article-mapping-line"
        ],
        "summary": "Used in 5 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/administration/modules/article-mapping-line/provider/provider.js#L36) -> v2/generic/articleMappingLine/ | request: helper.nestedEntities: nestedEntities / info: keyColumn: keyColumn | helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/articleMappingLine/',\n  nestedEntities\n}\n- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/article-from-article-mapping/provider/provider.js#L67) -> v2/generic/articleMappingLine/ | request: helper.nestedEntities: nestedEntities / info: keyColumn: keyColumn | helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/articleMappingLine/',\n  nestedEntities\n}\n- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/article-mapping-line/provider/provider.js#L36) -> v2/generic/articleMappingLine/ | request: helper.nestedEntities: nestedEntities / info: keyColumn: keyColumn | helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/articleMappingLine/',\n  nestedEntities\n}\n- GET_ONE (src/srcProject/layout/catalog/modules/article-from-article-mapping/provider/provider.js#L67) -> v2/generic/articleMappingLine/ | request: helper.nestedEntities: nestedEntities / info: keyColumn: keyColumn | helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/articleMappingLine/',\n  nestedEntities\n}\n- GET_ONE (src/srcProject/layout/catalog/modules/article-mapping-line/provider/provider.js#L36) -> v2/generic/articleMappingLine/ | request: helper.nestedEntities: nestedEntities / info: keyColumn: keyColumn | helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/articleMappingLine/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "articleMapping": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "offerTemplate": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "product": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "chargeTemplate": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "articleMapping": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "product": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                },
                                "description": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "string"
                            }
                          ]
                        },
                        "description": {
                          "type": "string"
                        },
                        "offer": {
                          "type": "string"
                        },
                        "charge": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "articleMapping": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "product": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/articleMappingLine/',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/articleMappingLines/": {
      "post": {
        "tags": [
          "B2B-customer-care/article-mapping-line",
          "administration/article-mapping-line",
          "catalog/article-mapping-line"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/administration/modules/article-mapping-line/provider/provider.js#L41) -> v2/articleMappingLines/ | request: helper.method: POST / info: keyColumn: keyColumn | excludeProperties: ['code'] | helper: getCreateProvider | helperArgs: {\n  url: 'v2/articleMappingLines/',\n  method: 'POST'\n}\n- CREATE (src/srcProject/layout/B2B-customer-care/modules/article-mapping-line/provider/provider.js#L41) -> v2/articleMappingLines/ | request: helper.method: POST / info: keyColumn: keyColumn | excludeProperties: ['code'] | helper: getCreateProvider | helperArgs: {\n  url: 'v2/articleMappingLines/',\n  method: 'POST'\n}\n- CREATE (src/srcProject/layout/catalog/modules/article-mapping-line/provider/provider.js#L41) -> v2/articleMappingLines/ | request: helper.method: POST / info: keyColumn: keyColumn | excludeProperties: ['code'] | helper: getCreateProvider | helperArgs: {\n  url: 'v2/articleMappingLines/',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "articleMapping": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "offerTemplate": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "product": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "chargeTemplate": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "articleMapping": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "product": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                },
                                "description": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "string"
                            }
                          ]
                        },
                        "description": {
                          "type": "string"
                        },
                        "offer": {
                          "type": "string"
                        },
                        "charge": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "articleMapping": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "product": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "excludeProperties: ['code']",
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/articleMappingLines/',\n  method: 'POST'\n}"
        ]
      },
      "delete": {
        "tags": [
          "B2B-customer-care/article-mapping-line",
          "administration/article-mapping-line",
          "catalog/article-mapping-line"
        ],
        "summary": "Used in 6 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/administration/modules/article-mapping-line/provider/provider.js#L59) -> v2/articleMappingLines/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'v2/articleMappingLines/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/administration/modules/article-mapping-line/provider/provider.js#L67) -> v2/articleMappingLines/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'v2/articleMappingLines/',\n  method: 'DELETE'\n}\n- DELETE (src/srcProject/layout/B2B-customer-care/modules/article-mapping-line/provider/provider.js#L59) -> v2/articleMappingLines/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'v2/articleMappingLines/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/article-mapping-line/provider/provider.js#L67) -> v2/articleMappingLines/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'v2/articleMappingLines/',\n  method: 'DELETE'\n}\n- DELETE (src/srcProject/layout/catalog/modules/article-mapping-line/provider/provider.js#L59) -> v2/articleMappingLines/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'v2/articleMappingLines/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/catalog/modules/article-mapping-line/provider/provider.js#L67) -> v2/articleMappingLines/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'v2/articleMappingLines/',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "articleMapping": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "offerTemplate": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "product": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "chargeTemplate": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "articleMapping": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "product": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                },
                                "description": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "string"
                            }
                          ]
                        },
                        "description": {
                          "type": "string"
                        },
                        "offer": {
                          "type": "string"
                        },
                        "charge": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "articleMapping": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "product": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'v2/articleMappingLines/',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/generic/all/accountingArticle": {
      "post": {
        "tags": [
          "B2B-customer-care/articles",
          "administration/articles",
          "catalog/articles"
        ],
        "summary": "Used in 6 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/administration/modules/articles/provider/provider.js#L45) -> v2/generic/all/accountingArticle | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    unitPrice = {},\n    ...restFilter\n  } = filter;\n  const transformedFilter = {\n    ...restFilter,\n    ...(!isEmpty(unitPrice) ? getMinMaxFromRangeNumber(unitPrice, 'unitPrice') : {})\n  };\n  return {\n    filter: transformedFilter,\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/accountingArticle',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/administration/modules/articles/provider/provider.js#L65) -> v2/generic/all/accountingArticle | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/accountingArticle',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/articles/provider/provider.js#L20) -> v2/generic/all/accountingArticle | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/accountingArticle',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/articles/provider/provider.js#L25) -> v2/generic/all/accountingArticle | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/accountingArticle',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/catalog/modules/articles/provider/provider.js#L25) -> v2/generic/all/accountingArticle | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/accountingArticle',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/catalog/modules/articles/provider/provider.js#L30) -> v2/generic/all/accountingArticle | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/accountingArticle',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "taxClass": {
                                "type": "object",
                                "properties": {
                                  "description": {
                                    "type": "string"
                                  }
                                }
                              },
                              "cfValues": {
                                "type": "object",
                                "properties": {
                                  "valuesByCode": {
                                    "type": "object",
                                    "properties": {
                                      "CF_CODE_ORACLE": {
                                        "type": "object",
                                        "properties": {
                                          "0": {
                                            "type": "object",
                                            "properties": {
                                              "value": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "accountingCode": {
                                "type": "string"
                              },
                              "invoiceType": {
                                "type": "string"
                              },
                              "unitPrice": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "invoiceSubCategory": {
                                "type": "object",
                                "properties": {
                                  "description": {
                                    "type": "string"
                                  }
                                }
                              },
                              "description": {
                                "type": "string"
                              },
                              "taxClass": {
                                "type": "object",
                                "properties": {
                                  "description": {
                                    "type": "string"
                                  }
                                }
                              },
                              "accountingCode": {
                                "type": "string"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    unitPrice = {},\n    ...restFilter\n  } = filter;\n  const transformedFilter = {\n    ...restFilter,\n    ...(!isEmpty(unitPrice) ? getMinMaxFromRangeNumber(unitPrice, 'unitPrice') : {})\n  };\n  return {\n    filter: transformedFilter,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    unitPrice = {},\n    ...restFilter\n  } = filter;\n  const transformedFilter = {\n    ...restFilter,\n    ...(!isEmpty(unitPrice) ? getMinMaxFromRangeNumber(unitPrice, 'unitPrice') : {})\n  };\n  return {\n    filter: transformedFilter,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/accountingArticle',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/accountingArticle/": {
      "post": {
        "tags": [
          "B2B-customer-care/articles",
          "administration/articles",
          "catalog/articles"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/administration/modules/articles/provider/provider.js#L73) -> v2/generic/accountingArticle/ | request: helper.sync: true | helper.transformResponse: aggregateArticle | urls[0].params: {\n  nestedEntities\n} / info: helper: getOneV2 | helperArgs: {\n  urls: [{\n    url: 'v2/generic/accountingArticle/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'v2/generic/all/articleMappingLine/',\n    responseContainer: 'data',\n    autoAppendId: false,\n    params: {\n      filters: {\n        'accountingArticle->id': '@res.id'\n      }\n    }\n  }, {\n    url: 'v2/generic/all/AccountingCodeMapping/',\n    responseContainer: 'data',\n    autoAppendId: false,\n    params: {\n      filters: {\n        'accountingArticle->id': '@res.id'\n      }\n    }\n  }],\n  sync: true,\n  transformResponse: aggregateArticle\n}\n- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/articles/provider/provider.js#L33) -> v2/generic/accountingArticle/ | request: helper.sync: true | helper.transformResponse: aggregateArticle | urls[0].params: {\n  nestedEntities\n} / info: helper: getOneV2 | helperArgs: {\n  urls: [{\n    url: 'v2/generic/accountingArticle/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'v2/generic/all/articleMappingLine/',\n    responseContainer: 'data',\n    autoAppendId: false,\n    params: {\n      filters: {\n        'accountingArticle->id': '@res.id'\n      }\n    }\n  }],\n  sync: true,\n  transformResponse: aggregateArticle\n}\n- GET_ONE (src/srcProject/layout/catalog/modules/articles/provider/provider.js#L38) -> v2/generic/accountingArticle/ | request: helper.sync: true | helper.transformResponse: aggregateArticle | urls[0].params: {\n  nestedEntities\n} / info: helper: getOneV2 | helperArgs: {\n  urls: [{\n    url: 'v2/generic/accountingArticle/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'v2/generic/all/articleMappingLine/',\n    responseContainer: 'data',\n    autoAppendId: false,\n    params: {\n      filters: {\n        'accountingArticle->id': '@res.id'\n      }\n    }\n  }],\n  sync: true,\n  transformResponse: aggregateArticle\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "taxClass": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "cfValues": {
                          "type": "object",
                          "properties": {
                            "valuesByCode": {
                              "type": "object",
                              "properties": {
                                "CF_CODE_ORACLE": {
                                  "type": "object",
                                  "properties": {
                                    "0": {
                                      "type": "object",
                                      "properties": {
                                        "value": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "accountingCode": {
                          "type": "string"
                        },
                        "invoiceType": {
                          "type": "string"
                        },
                        "unitPrice": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "invoiceSubCategory": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "description": {
                          "type": "string"
                        },
                        "taxClass": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "accountingCode": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.sync: true\nhelper.transformResponse: aggregateArticle\nurls[0].params: {\n  nestedEntities\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "nestedEntities": {
                    "description": "Identifier reference: nestedEntities",
                    "x-expression": "nestedEntities"
                  }
                }
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  urls: [{\n    url: 'v2/generic/accountingArticle/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'v2/generic/all/articleMappingLine/',\n    responseContainer: 'data',\n    autoAppendId: false,\n    params: {\n      filters: {\n        'accountingArticle->id': '@res.id'\n      }\n    }\n  }, {\n    url: 'v2/generic/all/AccountingCodeMapping/',\n    responseContainer: 'data',\n    autoAppendId: false,\n    params: {\n      filters: {\n        'accountingArticle->id': '@res.id'\n      }\n    }\n  }],\n  sync: true,\n  transformResponse: aggregateArticle\n}",
          "helperArgs: {\n  urls: [{\n    url: 'v2/generic/accountingArticle/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'v2/generic/all/articleMappingLine/',\n    responseContainer: 'data',\n    autoAppendId: false,\n    params: {\n      filters: {\n        'accountingArticle->id': '@res.id'\n      }\n    }\n  }],\n  sync: true,\n  transformResponse: aggregateArticle\n}"
        ]
      }
    },
    "/v2/generic/all/articleMappingLine/": {
      "post": {
        "tags": [
          "B2B-customer-care/articles",
          "administration/articles",
          "catalog/articles"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/administration/modules/articles/provider/provider.js#L73) -> v2/generic/all/articleMappingLine/ | request: helper.sync: true | helper.transformResponse: aggregateArticle | urls[1].autoAppendId: false | urls[1].params: {\n  filters: {\n    'accountingArticle->id': '@res.id'\n  }\n} / response: urls[1].responseContainer: data / info: helper: getOneV2 | helperArgs: {\n  urls: [{\n    url: 'v2/generic/accountingArticle/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'v2/generic/all/articleMappingLine/',\n    responseContainer: 'data',\n    autoAppendId: false,\n    params: {\n      filters: {\n        'accountingArticle->id': '@res.id'\n      }\n    }\n  }, {\n    url: 'v2/generic/all/AccountingCodeMapping/',\n    responseContainer: 'data',\n    autoAppendId: false,\n    params: {\n      filters: {\n        'accountingArticle->id': '@res.id'\n      }\n    }\n  }],\n  sync: true,\n  transformResponse: aggregateArticle\n}\n- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/articles/provider/provider.js#L33) -> v2/generic/all/articleMappingLine/ | request: helper.sync: true | helper.transformResponse: aggregateArticle | urls[1].autoAppendId: false | urls[1].params: {\n  filters: {\n    'accountingArticle->id': '@res.id'\n  }\n} / response: urls[1].responseContainer: data / info: helper: getOneV2 | helperArgs: {\n  urls: [{\n    url: 'v2/generic/accountingArticle/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'v2/generic/all/articleMappingLine/',\n    responseContainer: 'data',\n    autoAppendId: false,\n    params: {\n      filters: {\n        'accountingArticle->id': '@res.id'\n      }\n    }\n  }],\n  sync: true,\n  transformResponse: aggregateArticle\n}\n- GET_ONE (src/srcProject/layout/catalog/modules/articles/provider/provider.js#L38) -> v2/generic/all/articleMappingLine/ | request: helper.sync: true | helper.transformResponse: aggregateArticle | urls[1].autoAppendId: false | urls[1].params: {\n  filters: {\n    'accountingArticle->id': '@res.id'\n  }\n} / response: urls[1].responseContainer: data / info: helper: getOneV2 | helperArgs: {\n  urls: [{\n    url: 'v2/generic/accountingArticle/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'v2/generic/all/articleMappingLine/',\n    responseContainer: 'data',\n    autoAppendId: false,\n    params: {\n      filters: {\n        'accountingArticle->id': '@res.id'\n      }\n    }\n  }],\n  sync: true,\n  transformResponse: aggregateArticle\n}",
        "responses": {
          "200": {
            "description": "Successful response. urls[1].responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "taxClass": {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string"
                                }
                              }
                            },
                            "cfValues": {
                              "type": "object",
                              "properties": {
                                "valuesByCode": {
                                  "type": "object",
                                  "properties": {
                                    "CF_CODE_ORACLE": {
                                      "type": "object",
                                      "properties": {
                                        "0": {
                                          "type": "object",
                                          "properties": {
                                            "value": {
                                              "type": "string"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "accountingCode": {
                              "type": "string"
                            },
                            "invoiceType": {
                              "type": "string"
                            },
                            "unitPrice": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "invoiceSubCategory": {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string"
                                }
                              }
                            },
                            "description": {
                              "type": "string"
                            },
                            "taxClass": {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string"
                                }
                              }
                            },
                            "accountingCode": {
                              "type": "string"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.sync: true\nhelper.transformResponse: aggregateArticle\nurls[1].autoAppendId: false\nurls[1].params: {\n  filters: {\n    'accountingArticle->id': '@res.id'\n  }\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filters": {
                    "type": "object",
                    "properties": {
                      "accountingArticle->id": {
                        "type": "string",
                        "example": "@res.id"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  urls: [{\n    url: 'v2/generic/accountingArticle/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'v2/generic/all/articleMappingLine/',\n    responseContainer: 'data',\n    autoAppendId: false,\n    params: {\n      filters: {\n        'accountingArticle->id': '@res.id'\n      }\n    }\n  }, {\n    url: 'v2/generic/all/AccountingCodeMapping/',\n    responseContainer: 'data',\n    autoAppendId: false,\n    params: {\n      filters: {\n        'accountingArticle->id': '@res.id'\n      }\n    }\n  }],\n  sync: true,\n  transformResponse: aggregateArticle\n}",
          "helperArgs: {\n  urls: [{\n    url: 'v2/generic/accountingArticle/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'v2/generic/all/articleMappingLine/',\n    responseContainer: 'data',\n    autoAppendId: false,\n    params: {\n      filters: {\n        'accountingArticle->id': '@res.id'\n      }\n    }\n  }],\n  sync: true,\n  transformResponse: aggregateArticle\n}"
        ]
      }
    },
    "/v2/generic/all/AccountingCodeMapping/": {
      "post": {
        "tags": [
          "administration/articles"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/administration/modules/articles/provider/provider.js#L73) -> v2/generic/all/AccountingCodeMapping/ | request: helper.sync: true | helper.transformResponse: aggregateArticle | urls[2].autoAppendId: false | urls[2].params: {\n  filters: {\n    'accountingArticle->id': '@res.id'\n  }\n} / response: urls[2].responseContainer: data / info: helper: getOneV2 | helperArgs: {\n  urls: [{\n    url: 'v2/generic/accountingArticle/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'v2/generic/all/articleMappingLine/',\n    responseContainer: 'data',\n    autoAppendId: false,\n    params: {\n      filters: {\n        'accountingArticle->id': '@res.id'\n      }\n    }\n  }, {\n    url: 'v2/generic/all/AccountingCodeMapping/',\n    responseContainer: 'data',\n    autoAppendId: false,\n    params: {\n      filters: {\n        'accountingArticle->id': '@res.id'\n      }\n    }\n  }],\n  sync: true,\n  transformResponse: aggregateArticle\n}",
        "responses": {
          "200": {
            "description": "Successful response. urls[2].responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "taxClass": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "cfValues": {
                          "type": "object",
                          "properties": {
                            "valuesByCode": {
                              "type": "object",
                              "properties": {
                                "CF_CODE_ORACLE": {
                                  "type": "object",
                                  "properties": {
                                    "0": {
                                      "type": "object",
                                      "properties": {
                                        "value": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "accountingCode": {
                          "type": "string"
                        },
                        "invoiceType": {
                          "type": "string"
                        },
                        "unitPrice": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.sync: true\nhelper.transformResponse: aggregateArticle\nurls[2].autoAppendId: false\nurls[2].params: {\n  filters: {\n    'accountingArticle->id': '@res.id'\n  }\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filters": {
                    "type": "object",
                    "properties": {
                      "accountingArticle->id": {
                        "type": "string",
                        "example": "@res.id"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  urls: [{\n    url: 'v2/generic/accountingArticle/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'v2/generic/all/articleMappingLine/',\n    responseContainer: 'data',\n    autoAppendId: false,\n    params: {\n      filters: {\n        'accountingArticle->id': '@res.id'\n      }\n    }\n  }, {\n    url: 'v2/generic/all/AccountingCodeMapping/',\n    responseContainer: 'data',\n    autoAppendId: false,\n    params: {\n      filters: {\n        'accountingArticle->id': '@res.id'\n      }\n    }\n  }],\n  sync: true,\n  transformResponse: aggregateArticle\n}"
        ]
      }
    },
    "/v2/articles": {
      "post": {
        "tags": [
          "B2B-customer-care/articles",
          "administration/articles",
          "catalog/articles"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/administration/modules/articles/provider/provider.js#L103) -> v2/articles | request: helper.method: POST / response: helper.responseContainerId: id / info: keyColumn: keyColumn | helper: getCreateProvider | helperArgs: {\n  url: 'v2/articles',\n  method: 'POST',\n  responseContainerId: 'id'\n}\n- CREATE (src/srcProject/layout/B2B-customer-care/modules/articles/provider/provider.js#L53) -> v2/articles | request: helper.method: POST / response: helper.responseContainerId: id / info: keyColumn: keyColumn | helper: getCreateProvider | helperArgs: {\n  url: 'v2/articles',\n  method: 'POST',\n  responseContainerId: 'id'\n}\n- CREATE (src/srcProject/layout/catalog/modules/articles/provider/provider.js#L58) -> v2/articles | request: helper.method: POST / response: helper.responseContainerId: id / info: keyColumn: keyColumn | helper: getCreateProvider | helperArgs: {\n  url: 'v2/articles',\n  method: 'POST',\n  responseContainerId: 'id'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainerId: id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "taxClass": {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string"
                                }
                              }
                            },
                            "cfValues": {
                              "type": "object",
                              "properties": {
                                "valuesByCode": {
                                  "type": "object",
                                  "properties": {
                                    "CF_CODE_ORACLE": {
                                      "type": "object",
                                      "properties": {
                                        "0": {
                                          "type": "object",
                                          "properties": {
                                            "value": {
                                              "type": "string"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "accountingCode": {
                              "type": "string"
                            },
                            "invoiceType": {
                              "type": "string"
                            },
                            "unitPrice": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "invoiceSubCategory": {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string"
                                }
                              }
                            },
                            "description": {
                              "type": "string"
                            },
                            "taxClass": {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string"
                                }
                              }
                            },
                            "accountingCode": {
                              "type": "string"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/articles',\n  method: 'POST',\n  responseContainerId: 'id'\n}"
        ]
      }
    },
    "/v2/articles/{id}": {
      "put": {
        "tags": [
          "B2B-customer-care/articles",
          "administration/articles",
          "catalog/articles"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/administration/modules/articles/provider/provider.js#L112) -> v2/articles/:id | request: helper.keyColumn: keyColumn | helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  keyColumn,\n  url: 'v2/articles/:id',\n  method: 'PUT'\n}\n- UPDATE (src/srcProject/layout/B2B-customer-care/modules/articles/provider/provider.js#L62) -> v2/articles/:id | request: helper.keyColumn: keyColumn | helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  keyColumn,\n  url: 'v2/articles/:id',\n  method: 'PUT'\n}\n- UPDATE (src/srcProject/layout/catalog/modules/articles/provider/provider.js#L67) -> v2/articles/:id | request: helper.keyColumn: keyColumn | helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  keyColumn,\n  url: 'v2/articles/:id',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "taxClass": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "cfValues": {
                          "type": "object",
                          "properties": {
                            "valuesByCode": {
                              "type": "object",
                              "properties": {
                                "CF_CODE_ORACLE": {
                                  "type": "object",
                                  "properties": {
                                    "0": {
                                      "type": "object",
                                      "properties": {
                                        "value": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "accountingCode": {
                          "type": "string"
                        },
                        "invoiceType": {
                          "type": "string"
                        },
                        "unitPrice": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "invoiceSubCategory": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "description": {
                          "type": "string"
                        },
                        "taxClass": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "accountingCode": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.keyColumn: keyColumn\nhelper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.keyColumn: keyColumn\nhelper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getUpdateProvider",
          "helperArgs: {\n  keyColumn,\n  url: 'v2/articles/:id',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/v2/articles/": {
      "delete": {
        "tags": [
          "B2B-customer-care/articles",
          "administration/articles",
          "catalog/articles"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/administration/modules/articles/provider/provider.js#L120) -> v2/articles/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'v2/articles/',\n  method: 'DELETE'\n}\n- DELETE (src/srcProject/layout/B2B-customer-care/modules/articles/provider/provider.js#L70) -> v2/articles/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'v2/articles/',\n  method: 'DELETE'\n}\n- DELETE (src/srcProject/layout/catalog/modules/articles/provider/provider.js#L75) -> v2/articles/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'v2/articles/',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "taxClass": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "cfValues": {
                          "type": "object",
                          "properties": {
                            "valuesByCode": {
                              "type": "object",
                              "properties": {
                                "CF_CODE_ORACLE": {
                                  "type": "object",
                                  "properties": {
                                    "0": {
                                      "type": "object",
                                      "properties": {
                                        "value": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "accountingCode": {
                          "type": "string"
                        },
                        "invoiceType": {
                          "type": "string"
                        },
                        "unitPrice": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "invoiceSubCategory": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "description": {
                          "type": "string"
                        },
                        "taxClass": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "accountingCode": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'v2/articles/',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/articles/": {
      "delete": {
        "tags": [
          "B2B-customer-care/articles",
          "administration/articles",
          "catalog/articles"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- DELETE_MANY (src/srcProject/layout/administration/modules/articles/provider/provider.js#L128) -> articles/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'articles/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/articles/provider/provider.js#L78) -> articles/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'articles/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/catalog/modules/articles/provider/provider.js#L83) -> articles/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'articles/',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "taxClass": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "cfValues": {
                          "type": "object",
                          "properties": {
                            "valuesByCode": {
                              "type": "object",
                              "properties": {
                                "CF_CODE_ORACLE": {
                                  "type": "object",
                                  "properties": {
                                    "0": {
                                      "type": "object",
                                      "properties": {
                                        "value": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "accountingCode": {
                          "type": "string"
                        },
                        "invoiceType": {
                          "type": "string"
                        },
                        "unitPrice": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "invoiceSubCategory": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "description": {
                          "type": "string"
                        },
                        "taxClass": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "accountingCode": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'articles/',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/articles/accountingCodeMapping": {
      "post": {
        "tags": [
          "administration/articles",
          "catalog/articles"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- ACCOUNITNG_CODE_CREATE (src/srcProject/layout/administration/modules/articles/provider/provider.js#L147) -> v2/articles/accountingCodeMapping | request: helper.method: POST / response: helper.responseContainerId: id / info: keyColumn: keyColumn | helper: getCreateProvider | helperArgs: {\n  url: 'v2/articles/accountingCodeMapping',\n  method: 'POST',\n  responseContainerId: 'id'\n}\n- ACCOUNITNG_CODE_CREATE (src/srcProject/layout/catalog/modules/articles/provider/provider.js#L102) -> v2/articles/accountingCodeMapping | request: helper.method: POST / response: helper.responseContainerId: id / info: keyColumn: keyColumn | helper: getCreateProvider | helperArgs: {\n  url: 'v2/articles/accountingCodeMapping',\n  method: 'POST',\n  responseContainerId: 'id'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainerId: id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "taxClass": {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string"
                                }
                              }
                            },
                            "cfValues": {
                              "type": "object",
                              "properties": {
                                "valuesByCode": {
                                  "type": "object",
                                  "properties": {
                                    "CF_CODE_ORACLE": {
                                      "type": "object",
                                      "properties": {
                                        "0": {
                                          "type": "object",
                                          "properties": {
                                            "value": {
                                              "type": "string"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "accountingCode": {
                              "type": "string"
                            },
                            "invoiceType": {
                              "type": "string"
                            },
                            "unitPrice": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "invoiceSubCategory": {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string"
                                }
                              }
                            },
                            "description": {
                              "type": "string"
                            },
                            "taxClass": {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string"
                                }
                              }
                            },
                            "accountingCode": {
                              "type": "string"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/articles/accountingCodeMapping',\n  method: 'POST',\n  responseContainerId: 'id'\n}"
        ]
      }
    },
    "/v2/generic/all/billingRun": {
      "post": {
        "tags": [
          "administration/billing-run",
          "operation/billing-run",
          "operation/cycle-run"
        ],
        "summary": "Used in 7 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/administration/modules/billing-run/provider/provider.js#L108) -> v2/generic/all/billingRun | request: prepareParams: params => {\n  const {\n    sort = {},\n    ...restParams\n  } = params;\n  const transformSort = {\n    ...sort,\n    field: 'id',\n    order: 'DESC'\n  };\n  return {\n    sort: {\n      ...transformSort\n    },\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/billingRun',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/administration/modules/billing-run/provider/provider.js#L125) -> v2/generic/all/billingRun | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/billingRun',\n  nestedEntities\n}\n- GET_LIST_ORIGINAL (src/srcProject/layout/administration/modules/billing-run/provider/provider.js#L299) -> v2/generic/all/billingRun | response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | totalContainer: 'total' | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/billingRun'\n}\n- GET_LIST (src/srcProject/layout/operation/modules/billing-run/provider/provider.js#L98) -> v2/generic/all/billingRun | request: prepareParams: params => {\n  const {\n    sort = {},\n    ...restParams\n  } = params;\n  const transformSort = {\n    ...sort,\n    field: 'id',\n    order: 'DESC'\n  };\n  return {\n    sort: {\n      ...transformSort\n    },\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/billingRun',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/operation/modules/billing-run/provider/provider.js#L114) -> v2/generic/all/billingRun | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/billingRun',\n  nestedEntities\n}\n- GET_LIST_ORIGINAL (src/srcProject/layout/operation/modules/billing-run/provider/provider.js#L287) -> v2/generic/all/billingRun | response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | totalContainer: 'total' | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/billingRun'\n}\n- GET_LIST (src/srcProject/layout/operation/modules/cycle-run/provider/provider.js#L11) -> v2/generic/all/billingRun | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/billingRun',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "number"
                                  },
                                  "billingCycle": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "description": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      {
                                        "type": "string"
                                      }
                                    ]
                                  },
                                  "runType": {
                                    "type": "string"
                                  },
                                  "processDate": {
                                    "type": "string",
                                    "format": "date"
                                  },
                                  "processType": {
                                    "type": "string"
                                  },
                                  "status": {
                                    "type": "string"
                                  },
                                  "invoiceDate": {
                                    "type": "string",
                                    "format": "date"
                                  },
                                  "billableBillingAcountNumber": {
                                    "type": "number"
                                  },
                                  "invoicesSize": {
                                    "type": "string"
                                  },
                                  "prAmountWithoutTax": {
                                    "type": "number"
                                  },
                                  "prAmountWithTax": {
                                    "type": "number"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "number"
                                  },
                                  "billingCycle": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "description": {
                                            "type": "string"
                                          },
                                          "type": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      {
                                        "type": "string"
                                      }
                                    ]
                                  },
                                  "processDate": {
                                    "type": "string",
                                    "format": "date"
                                  },
                                  "processType": {
                                    "type": "string"
                                  },
                                  "runType": {
                                    "type": "string"
                                  },
                                  "status": {
                                    "type": "string"
                                  },
                                  "invoiceDate": {
                                    "type": "string",
                                    "format": "date"
                                  },
                                  "lastTransactionDate": {
                                    "type": "string",
                                    "format": "date"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "number"
                                },
                                "billingCycle": {
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "description": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ]
                                },
                                "runType": {
                                  "type": "string"
                                },
                                "processDate": {
                                  "type": "string",
                                  "format": "date"
                                },
                                "processType": {
                                  "type": "string"
                                },
                                "status": {
                                  "type": "string"
                                },
                                "invoiceDate": {
                                  "type": "string",
                                  "format": "date"
                                },
                                "billableBillingAcountNumber": {
                                  "type": "number"
                                },
                                "invoicesSize": {
                                  "type": "string"
                                },
                                "prAmountWithoutTax": {
                                  "type": "number"
                                },
                                "prAmountWithTax": {
                                  "type": "number"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "number"
                                },
                                "billingCycle": {
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "description": {
                                          "type": "string"
                                        },
                                        "type": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ]
                                },
                                "processDate": {
                                  "type": "string",
                                  "format": "date"
                                },
                                "processType": {
                                  "type": "string"
                                },
                                "runType": {
                                  "type": "string"
                                },
                                "status": {
                                  "type": "string"
                                },
                                "invoiceDate": {
                                  "type": "string",
                                  "format": "date"
                                },
                                "lastTransactionDate": {
                                  "type": "string",
                                  "format": "date"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    sort = {},\n    ...restParams\n  } = params;\n  const transformSort = {\n    ...sort,\n    field: 'id',\n    order: 'DESC'\n  };\n  return {\n    sort: {\n      ...transformSort\n    },\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    sort = {},\n    ...restParams\n  } = params;\n  const transformSort = {\n    ...sort,\n    field: 'id',\n    order: 'DESC'\n  };\n  return {\n    sort: {\n      ...transformSort\n    },\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/billingRun',\n  nestedEntities\n}",
          "totalContainer: 'total'",
          "helperArgs: {\n  url: 'v2/generic/all/billingRun'\n}"
        ]
      }
    },
    "/v2/billing/invoicing/exceptionalBillingRun": {
      "post": {
        "tags": [
          "administration/billing-run",
          "operation/billing-run"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/administration/modules/billing-run/provider/provider.js#L133) -> v2/billing/invoicing/exceptionalBillingRun | request: helper.nestedEntities: nestedEntities / info: helper: getCreateProvider | helperArgs: {\n  url: 'v2/billing/invoicing/exceptionalBillingRun',\n  nestedEntities\n}\n- CREATE (src/srcProject/layout/operation/modules/billing-run/provider/provider.js#L122) -> v2/billing/invoicing/exceptionalBillingRun | request: helper.nestedEntities: nestedEntities / info: helper: getCreateProvider | helperArgs: {\n  url: 'v2/billing/invoicing/exceptionalBillingRun',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number"
                    },
                    "billingCycle": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "runType": {
                      "type": "string"
                    },
                    "processDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "processType": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "invoiceDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "billableBillingAcountNumber": {
                      "type": "number"
                    },
                    "invoicesSize": {
                      "type": "string"
                    },
                    "prAmountWithoutTax": {
                      "type": "number"
                    },
                    "prAmountWithTax": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/billing/invoicing/exceptionalBillingRun',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/BillingRun/": {
      "post": {
        "tags": [
          "administration/billing-run",
          "operation/billing-run"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/administration/modules/billing-run/provider/provider.js#L139) -> v2/generic/BillingRun/ | request: helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/BillingRun/',\n  nestedEntities\n}\n- GET_ONE (src/srcProject/layout/operation/modules/billing-run/provider/provider.js#L128) -> v2/generic/BillingRun/ | request: helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/BillingRun/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number"
                    },
                    "billingCycle": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "runType": {
                      "type": "string"
                    },
                    "processDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "processType": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "invoiceDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "billableBillingAcountNumber": {
                      "type": "number"
                    },
                    "invoicesSize": {
                      "type": "string"
                    },
                    "prAmountWithoutTax": {
                      "type": "number"
                    },
                    "prAmountWithTax": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/BillingRun/',\n  nestedEntities\n}"
        ]
      }
    },
    "/billing/invoicing/createOrUpdateBillingRun": {
      "post": {
        "tags": [
          "administration/billing-run",
          "operation/billing-run"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/administration/modules/billing-run/provider/provider.js#L145) -> billing/invoicing/createOrUpdateBillingRun | request: helper.method: POST | helper.showErrorFromContainer: true / info: helper: getUpdateProvider | helperArgs: {\n  url: 'billing/invoicing/createOrUpdateBillingRun',\n  method: 'POST',\n  showErrorFromContainer: true\n}\n- UPDATE (src/srcProject/layout/operation/modules/billing-run/provider/provider.js#L134) -> billing/invoicing/createOrUpdateBillingRun | request: helper.method: POST | helper.showErrorFromContainer: true / info: helper: getUpdateProvider | helperArgs: {\n  url: 'billing/invoicing/createOrUpdateBillingRun',\n  method: 'POST',\n  showErrorFromContainer: true\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number"
                    },
                    "billingCycle": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "runType": {
                      "type": "string"
                    },
                    "processDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "processType": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "invoiceDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "billableBillingAcountNumber": {
                      "type": "number"
                    },
                    "invoicesSize": {
                      "type": "string"
                    },
                    "prAmountWithoutTax": {
                      "type": "number"
                    },
                    "prAmountWithTax": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST\nhelper.showErrorFromContainer: true",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST\nhelper.showErrorFromContainer: true"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'billing/invoicing/createOrUpdateBillingRun',\n  method: 'POST',\n  showErrorFromContainer: true\n}"
        ]
      }
    },
    "/job/execution": {
      "get": {
        "tags": [
          "administration/billing-run",
          "operation/billing-run"
        ],
        "summary": "Used in 4 frontend location(s)",
        "description": "- GENERATE_XML (src/srcProject/layout/administration/modules/billing-run/provider/provider.js#L174) -> job/execution | request: prepareParams: params => {\n  const {\n    data = {},\n    ...restParams\n  } = params;\n  const {\n    id,\n    ...restData\n  } = data;\n  const customFieldsStatus = {\n    customField: [{\n      code: 'invoicesToProcess',\n      value: allowedInvoiceStatus\n    }]\n  };\n  const dataTransformed = {\n    parameters: id,\n    code: 'XMLInvoiceGenerationJobV2',\n    customFields: customFieldsStatus,\n    ...restData\n  };\n  return {\n    data: dataTransformed,\n    ...restParams\n  };\n} / info: excludeProperties: ['id', 'invalidatePDFInvoices', 'invalidateXMLInvoices']\n- GENERATE_PDF (src/srcProject/layout/administration/modules/billing-run/provider/provider.js#L263) -> job/execution | request: prepareParams: params => {\n  const {\n    data = {},\n    ...restParams\n  } = params;\n  const {\n    id,\n    ...restData\n  } = data;\n  const customFieldsStatus = {\n    customField: [{\n      code: 'invoicesToProcess',\n      description: 'Invoices To Process',\n      fieldType: 'LIST',\n      stringValue: 'FinalOnly'\n    }]\n  };\n  const dataTransformed = {\n    parameters: id,\n    code: 'PDF_Job',\n    customFields: customFieldsStatus,\n    ...restData\n  };\n  return {\n    data: dataTransformed,\n    ...restParams\n  };\n} / info: excludeProperties: ['id', 'invalidatePDFInvoices', 'invalidateXMLInvoices']\n- GENERATE_XML (src/srcProject/layout/operation/modules/billing-run/provider/provider.js#L163) -> job/execution | request: prepareParams: params => {\n  const {\n    data = {},\n    ...restParams\n  } = params;\n  const {\n    id,\n    ...restData\n  } = data;\n  const customFieldsStatus = {\n    customField: [{\n      code: 'invoicesToProcess',\n      value: allowedInvoiceStatus\n    }]\n  };\n  const dataTransformed = {\n    parameters: id,\n    code: 'XMLInvoiceGenerationJobV2',\n    customFields: customFieldsStatus,\n    ...restData\n  };\n  return {\n    data: dataTransformed,\n    ...restParams\n  };\n} / info: excludeProperties: ['id', 'invalidatePDFInvoices', 'invalidateXMLInvoices']\n- GENERATE_PDF (src/srcProject/layout/operation/modules/billing-run/provider/provider.js#L252) -> job/execution | request: prepareParams: params => {\n  const {\n    data = {},\n    ...restParams\n  } = params;\n  const {\n    id,\n    ...restData\n  } = data;\n  const customFieldsStatus = {\n    customField: [{\n      code: 'invoicesToProcess',\n      description: 'Invoices To Process',\n      fieldType: 'LIST',\n      stringValue: 'FinalOnly'\n    }]\n  };\n  const dataTransformed = {\n    parameters: id,\n    code: 'PDF_Job',\n    customFields: customFieldsStatus,\n    ...restData\n  };\n  return {\n    data: dataTransformed,\n    ...restParams\n  };\n} / info: excludeProperties: ['id', 'invalidatePDFInvoices', 'invalidateXMLInvoices']",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number"
                    },
                    "billingCycle": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "runType": {
                      "type": "string"
                    },
                    "processDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "processType": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "invoiceDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "billableBillingAcountNumber": {
                      "type": "number"
                    },
                    "invoicesSize": {
                      "type": "string"
                    },
                    "prAmountWithoutTax": {
                      "type": "number"
                    },
                    "prAmountWithTax": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "x-request-hints": [
          "prepareParams: params => {\n  const {\n    data = {},\n    ...restParams\n  } = params;\n  const {\n    id,\n    ...restData\n  } = data;\n  const customFieldsStatus = {\n    customField: [{\n      code: 'invoicesToProcess',\n      value: allowedInvoiceStatus\n    }]\n  };\n  const dataTransformed = {\n    parameters: id,\n    code: 'XMLInvoiceGenerationJobV2',\n    customFields: customFieldsStatus,\n    ...restData\n  };\n  return {\n    data: dataTransformed,\n    ...restParams\n  };\n}",
          "prepareParams: params => {\n  const {\n    data = {},\n    ...restParams\n  } = params;\n  const {\n    id,\n    ...restData\n  } = data;\n  const customFieldsStatus = {\n    customField: [{\n      code: 'invoicesToProcess',\n      description: 'Invoices To Process',\n      fieldType: 'LIST',\n      stringValue: 'FinalOnly'\n    }]\n  };\n  const dataTransformed = {\n    parameters: id,\n    code: 'PDF_Job',\n    customFields: customFieldsStatus,\n    ...restData\n  };\n  return {\n    data: dataTransformed,\n    ...restParams\n  };\n}"
        ],
        "x-dev-notes": [
          "excludeProperties: ['id', 'invalidatePDFInvoices', 'invalidateXMLInvoices']"
        ]
      },
      "post": {
        "tags": [
          "MACO/job-instances-v1",
          "MACO/maco-elecOperationTraitement",
          "MACO/maco-elecPoDEvents",
          "MACO/maco-feesF15",
          "MACO/maco-fluxEvents",
          "MACO/maco-fluxFees",
          "MACO/maco-fluxXmlR15",
          "MACO/maco-fluxXmlR151",
          "MACO/maco-reliefR15"
        ],
        "summary": "Used in 9 frontend location(s)",
        "description": "- CUSTOM_EXECUTE (src/srcProject/layout/MACO/modules/job-instances-v1/provider/provider.js#L30) -> job/execution | request: options: {\n  method: 'POST'\n}\n- CUSTOM_REPLAY (src/srcProject/layout/MACO/modules/maco-elecOperationTraitement/provider/provider.js#L115) -> job/execution | request: options: {\n  method: 'POST'\n} | prepareParams: (params = {}) => {\n  const {\n    data\n  } = params;\n  const {\n    code,\n    ids,\n    jobsDetails\n  } = data;\n  const jobDetail = jobsDetails[code];\n  const jobCustomFields = jobDetail.customFields.customField;\n  const jobVariablesIndex = jobCustomFields.findIndex(cf => cf.code === 'ScriptingJob_variables');\n  set(jobDetail, `customFields.customField[${jobVariablesIndex}].mapValue.cf_job_replay_ids.value`, ids.join());\n  return {\n    data: {\n      code: code,\n      customFields: jobDetail.customFields\n    }\n  };\n}\n- CUSTOM_REPLAY (src/srcProject/layout/MACO/modules/maco-elecPoDEvents/provider/provider.js#L116) -> job/execution | request: options: {\n  method: 'POST'\n} | prepareParams: (params = {}) => {\n  const {\n    data\n  } = params;\n  const {\n    code,\n    ids,\n    jobsDetails\n  } = data;\n  const jobDetail = jobsDetails[code];\n  const jobCustomFields = jobDetail.customFields.customField;\n  const jobVariablesIndex = jobCustomFields.findIndex(cf => cf.code === 'ScriptingJob_variables');\n  set(jobDetail, `customFields.customField[${jobVariablesIndex}].mapValue.cf_job_replay_ids.value`, ids.join());\n  return {\n    data: {\n      code: code,\n      customFields: jobDetail.customFields\n    }\n  };\n}\n- CUSTOM_REPLAY (src/srcProject/layout/MACO/modules/maco-feesF15/provider/provider.js#L98) -> job/execution | request: options: {\n  method: 'POST'\n} | prepareParams: (params = {}) => {\n  const {\n    data\n  } = params;\n  const {\n    code,\n    ids,\n    jobsDetails\n  } = data;\n  const jobDetail = jobsDetails[code];\n  const jobCustomFields = jobDetail.customFields.customField;\n  const jobVariablesIndex = jobCustomFields.findIndex(cf => cf.code === 'ScriptingJob_variables');\n  set(jobDetail, `customFields.customField[${jobVariablesIndex}].mapValue.cf_job_replay_ids.value`, ids.join());\n  return {\n    data: {\n      code: code,\n      customFields: jobDetail.customFields\n    }\n  };\n}\n- CUSTOM_REPLAY (src/srcProject/layout/MACO/modules/maco-fluxEvents/provider/provider.js#L97) -> job/execution | request: options: {\n  method: 'POST'\n} | prepareParams: (params = {}) => {\n  const {\n    data\n  } = params;\n  const {\n    code,\n    ids,\n    jobsDetails\n  } = data;\n  const jobDetail = jobsDetails[code];\n  const jobCustomFields = jobDetail.customFields.customField;\n  const jobVariablesIndex = jobCustomFields.findIndex(cf => cf.code === 'ScriptingJob_variables');\n  set(jobDetail, `customFields.customField[${jobVariablesIndex}].mapValue.cf_job_replay_ids.value`, ids.join());\n  return {\n    data: {\n      code: code,\n      customFields: jobDetail.customFields\n    }\n  };\n}\n- CUSTOM_REPLAY (src/srcProject/layout/MACO/modules/maco-fluxFees/provider/provider.js#L96) -> job/execution | request: options: {\n  method: 'POST'\n} | prepareParams: (params = {}) => {\n  const {\n    data\n  } = params;\n  const {\n    code,\n    ids,\n    jobsDetails\n  } = data;\n  const jobDetail = jobsDetails[code];\n  const jobCustomFields = jobDetail.customFields.customField;\n  const jobVariablesIndex = jobCustomFields.findIndex(cf => cf.code === 'ScriptingJob_variables');\n  set(jobDetail, `customFields.customField[${jobVariablesIndex}].mapValue.cf_job_replay_ids.value`, ids.join());\n  return {\n    data: {\n      code: code,\n      customFields: jobDetail.customFields\n    }\n  };\n}\n- CUSTOM_REPLAY (src/srcProject/layout/MACO/modules/maco-fluxXmlR15/provider/provider.js#L88) -> job/execution | request: options: {\n  method: 'POST'\n} | prepareParams: (params = {}) => {\n  const {\n    data\n  } = params;\n  const {\n    code,\n    ids,\n    jobsDetails\n  } = data;\n  const jobDetail = jobsDetails[code];\n  const jobCustomFields = jobDetail.customFields.customField;\n  const jobVariablesIndex = jobCustomFields.findIndex(cf => cf.code === 'ScriptingJob_variables');\n  set(jobDetail, `customFields.customField[${jobVariablesIndex}].mapValue.cf_job_replay_ids.value`, ids.join());\n  return {\n    data: {\n      code: code,\n      customFields: jobDetail.customFields\n    }\n  };\n}\n- CUSTOM_REPLAY (src/srcProject/layout/MACO/modules/maco-fluxXmlR151/provider/provider.js#L68) -> job/execution | request: options: {\n  method: 'POST'\n} | prepareParams: (params = {}) => {\n  const {\n    data\n  } = params;\n  const {\n    code,\n    ids,\n    jobsDetails\n  } = data;\n  const jobDetail = jobsDetails[code];\n  const jobCustomFields = jobDetail.customFields.customField;\n  const jobVariablesIndex = jobCustomFields.findIndex(cf => cf.code === 'ScriptingJob_variables');\n  set(jobDetail, `customFields.customField[${jobVariablesIndex}].mapValue.cf_job_replay_ids.value`, ids.join());\n  return {\n    data: {\n      code: code,\n      customFields: jobDetail.customFields\n    }\n  };\n}\n- CUSTOM_REPLAY (src/srcProject/layout/MACO/modules/maco-reliefR15/provider/provider.js#L139) -> job/execution | request: options: {\n  method: 'POST'\n} | prepareParams: (params = {}) => {\n  const {\n    data\n  } = params;\n  const {\n    code,\n    ids,\n    jobsDetails\n  } = data;\n  const jobDetail = jobsDetails[code];\n  const jobCustomFields = jobDetail.customFields.customField;\n  const jobVariablesIndex = jobCustomFields.findIndex(cf => cf.code === 'ScriptingJob_variables');\n  set(jobDetail, `customFields.customField[${jobVariablesIndex}].mapValue.cf_job_replay_ids.value`, ids.join());\n  return {\n    data: {\n      code: code,\n      customFields: jobDetail.customFields\n    }\n  };\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "prmId": {
                          "type": "string"
                        },
                        "startDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "endDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "operationType": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "prmId": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "statusCode": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "errorCode": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "integrationUserCode": {
                          "type": "string"
                        },
                        "statusUpdateDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "payload": {
                          "type": "string"
                        },
                        "headerId": {
                          "type": "object",
                          "properties": {
                            "fileName": {
                              "type": "string"
                            },
                            "creationDate": {
                              "type": "string",
                              "format": "date"
                            },
                            "loadingDate": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "extId": {
                          "type": "string"
                        },
                        "eventType": {
                          "type": "string"
                        },
                        "eventDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "eventNature": {
                          "type": "string"
                        },
                        "idAffaire": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "arpEicCode": {
                          "type": "string"
                        },
                        "gridContract": {
                          "type": "string"
                        },
                        "supplierEicCode": {
                          "type": "string"
                        },
                        "segmentPrm": {
                          "type": "string"
                        },
                        "etatContractuelEnedis": {
                          "type": "string"
                        },
                        "numDepannage": {
                          "type": "string"
                        },
                        "lastFtaUpdate": {
                          "type": "string",
                          "format": "date"
                        },
                        "lastPsAugmentation": {
                          "type": "string",
                          "format": "date"
                        },
                        "lastPsDiminution": {
                          "type": "string",
                          "format": "date"
                        },
                        "jourFixeReleve": {
                          "type": "string"
                        },
                        "periodiciteReleve": {
                          "type": "string"
                        },
                        "rangReleve": {
                          "type": "string"
                        },
                        "gpsLongitude": {
                          "type": "string"
                        },
                        "gpsLatitude": {
                          "type": "string"
                        },
                        "gpsAltitudeValeur": {
                          "type": "string"
                        },
                        "gpsAltitudeUnite": {
                          "type": "string"
                        },
                        "gpsQuality": {
                          "type": "string"
                        },
                        "datePremierePoseLinky": {
                          "type": "string",
                          "format": "date"
                        },
                        "nivOuvertCompt": {
                          "type": "string"
                        },
                        "dateChangementNiveauOuvertureServices": {
                          "type": "string",
                          "format": "date"
                        },
                        "teleOper": {
                          "type": "string"
                        },
                        "borneFixe": {
                          "type": "string"
                        },
                        "autoproducteur": {
                          "type": "string"
                        },
                        "autoconsoCollectif": {
                          "type": "string"
                        },
                        "typeHebergement": {
                          "type": "string"
                        },
                        "origineEvenement": {
                          "type": "string"
                        },
                        "addressStreetNum": {
                          "type": "string"
                        },
                        "addressStreet": {
                          "type": "string"
                        },
                        "addressStaircase": {
                          "type": "string"
                        },
                        "addressFloor": {
                          "type": "string"
                        },
                        "addressBuilding": {
                          "type": "string"
                        },
                        "city": {
                          "type": "string"
                        },
                        "country": {
                          "type": "string"
                        },
                        "locality": {
                          "type": "string"
                        },
                        "zipCode": {
                          "type": "string"
                        },
                        "codeInsee": {
                          "type": "string"
                        },
                        "refSitContract": {
                          "type": "string"
                        },
                        "numSequence": {
                          "type": "string"
                        },
                        "fta": {
                          "type": "string"
                        },
                        "puissSouscrite": {
                          "type": "string"
                        },
                        "puissSouscriteUnite": {
                          "type": "string"
                        },
                        "idStructureHorosaisonniere": {
                          "type": "string"
                        },
                        "calDist": {
                          "type": "string"
                        },
                        "calFour": {
                          "type": "string"
                        },
                        "calDistCalculated": {
                          "type": "string"
                        },
                        "calFourCalculated": {
                          "type": "string"
                        },
                        "idPlageHeuresCreuses": {
                          "type": "string"
                        },
                        "plageHeuresCreuses": {
                          "type": "string"
                        },
                        "idGroupePeriodeMobile": {
                          "type": "string"
                        },
                        "catClient": {
                          "type": "string"
                        },
                        "residClient": {
                          "type": "boolean"
                        },
                        "tensionLivraison": {
                          "type": "string"
                        },
                        "puissRaccord": {
                          "type": "string"
                        },
                        "domaineTension": {
                          "type": "string"
                        },
                        "branchementProvisoire": {
                          "type": "string"
                        },
                        "etatAlimPrm": {
                          "type": "string"
                        },
                        "dateDebutEtatAlimentation": {
                          "type": "string",
                          "format": "date"
                        },
                        "puissLim": {
                          "type": "string"
                        },
                        "localCoup": {
                          "type": "string"
                        },
                        "dateCoup": {
                          "type": "string",
                          "format": "date"
                        },
                        "motifCoup": {
                          "type": "string"
                        },
                        "motifLim": {
                          "type": "string"
                        },
                        "modeAlimentation": {
                          "type": "string"
                        },
                        "typeCompt": {
                          "type": "string"
                        },
                        "sousTypeCompt": {
                          "type": "string"
                        },
                        "tensionFonctionnementCompt": {
                          "type": "string"
                        },
                        "constructeurCompt": {
                          "type": "string"
                        },
                        "numSerieCompt": {
                          "type": "string"
                        },
                        "calibreCompt": {
                          "type": "string"
                        },
                        "nbCadransCompt": {
                          "type": "string"
                        },
                        "coeffLectureCompt": {
                          "type": "string"
                        },
                        "accessCompt": {
                          "type": "string"
                        },
                        "natureDisjoncteur": {
                          "type": "string"
                        },
                        "numSerieDisjoncteur": {
                          "type": "string"
                        },
                        "calibreDisjoncteur": {
                          "type": "string"
                        },
                        "intensiteDisjoncteur": {
                          "type": "string"
                        },
                        "pptCompt": {
                          "type": "string"
                        },
                        "idXmlC15": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "userCodeIntegration": {
                          "type": "string"
                        },
                        "creationDateIntegration": {
                          "type": "string",
                          "format": "date"
                        },
                        "userCodeTraitement": {
                          "type": "string"
                        },
                        "creationDateTraitement": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}\nprepareParams: (params = {}) => {\n  const {\n    data\n  } = params;\n  const {\n    code,\n    ids,\n    jobsDetails\n  } = data;\n  const jobDetail = jobsDetails[code];\n  const jobCustomFields = jobDetail.customFields.customField;\n  const jobVariablesIndex = jobCustomFields.findIndex(cf => cf.code === 'ScriptingJob_variables');\n  set(jobDetail, `customFields.customField[${jobVariablesIndex}].mapValue.cf_job_replay_ids.value`, ids.join());\n  return {\n    data: {\n      code: code,\n      customFields: jobDetail.customFields\n    }\n  };\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}\nprepareParams: (params = {}) => {\n  const {\n    data\n  } = params;\n  const {\n    code,\n    ids,\n    jobsDetails\n  } = data;\n  const jobDetail = jobsDetails[code];\n  const jobCustomFields = jobDetail.customFields.customField;\n  const jobVariablesIndex = jobCustomFields.findIndex(cf => cf.code === 'ScriptingJob_variables');\n  set(jobDetail, `customFields.customField[${jobVariablesIndex}].mapValue.cf_job_replay_ids.value`, ids.join());\n  return {\n    data: {\n      code: code,\n      customFields: jobDetail.customFields\n    }\n  };\n}"
              }
            }
          }
        }
      }
    },
    "/job/jobReport/": {
      "get": {
        "tags": [
          "administration/billing-run",
          "operation/billing-run"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_JOB (src/srcProject/layout/administration/modules/billing-run/provider/provider.js#L200) -> job/jobReport/? | request: options: {\n  method: 'GET'\n}\n- GET_JOB (src/srcProject/layout/operation/modules/billing-run/provider/provider.js#L189) -> job/jobReport/? | request: options: {\n  method: 'GET'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number"
                    },
                    "billingCycle": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "runType": {
                      "type": "string"
                    },
                    "processDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "processType": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "invoiceDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "billableBillingAcountNumber": {
                      "type": "number"
                    },
                    "invoicesSize": {
                      "type": "string"
                    },
                    "prAmountWithoutTax": {
                      "type": "number"
                    },
                    "prAmountWithTax": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ]
      }
    },
    "/job/stop/XMLInvoiceGenerationJobV2": {
      "put": {
        "tags": [
          "administration/billing-run",
          "operation/billing-run"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- CANCEL_JOB (src/srcProject/layout/administration/modules/billing-run/provider/provider.js#L234) -> job/stop/XMLInvoiceGenerationJobV2 | request: options: {\n  method: 'PUT'\n} / info: excludeProperties: ['id', 'invalidateXMLInvoices', 'invalidatePDFInvoices']\n- CANCEL_JOB (src/srcProject/layout/operation/modules/billing-run/provider/provider.js#L223) -> job/stop/XMLInvoiceGenerationJobV2 | request: options: {\n  method: 'PUT'\n} / info: excludeProperties: ['id', 'invalidateXMLInvoices', 'invalidatePDFInvoices']",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number"
                    },
                    "billingCycle": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "runType": {
                      "type": "string"
                    },
                    "processDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "processType": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "invoiceDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "billableBillingAcountNumber": {
                      "type": "number"
                    },
                    "invoicesSize": {
                      "type": "string"
                    },
                    "prAmountWithoutTax": {
                      "type": "number"
                    },
                    "prAmountWithTax": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "excludeProperties: ['id', 'invalidateXMLInvoices', 'invalidatePDFInvoices']"
        ]
      }
    },
    "/job/stop/PDF_Job": {
      "put": {
        "tags": [
          "administration/billing-run",
          "operation/billing-run"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- CANCEL_JOB_PDF (src/srcProject/layout/administration/modules/billing-run/provider/provider.js#L292) -> job/stop/PDF_Job | request: options: {\n  method: 'PUT'\n} / info: excludeProperties: ['id', 'invalidateXMLInvoices', 'invalidatePDFInvoices']\n- CANCEL_JOB_PDF (src/srcProject/layout/operation/modules/billing-run/provider/provider.js#L280) -> job/stop/PDF_Job | request: options: {\n  method: 'PUT'\n} / info: excludeProperties: ['id', 'invalidateXMLInvoices', 'invalidatePDFInvoices']",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number"
                    },
                    "billingCycle": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "runType": {
                      "type": "string"
                    },
                    "processDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "processType": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "invoiceDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "billableBillingAcountNumber": {
                      "type": "number"
                    },
                    "invoicesSize": {
                      "type": "string"
                    },
                    "prAmountWithoutTax": {
                      "type": "number"
                    },
                    "prAmountWithTax": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "excludeProperties: ['id', 'invalidateXMLInvoices', 'invalidatePDFInvoices']"
        ]
      }
    },
    "/v2/generic/all/attribute": {
      "post": {
        "tags": [
          "administration/business-attributes",
          "catalog/attributes"
        ],
        "summary": "Used in 4 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/administration/modules/business-attributes/provider/provider.js#L43) -> v2/generic/all/attribute | request: prepareParams: params => prepareSendedParams(params) / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/attribute'\n}\n- GET_MANY (src/srcProject/layout/administration/modules/business-attributes/provider/provider.js#L51) -> v2/generic/all/attribute | response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/attribute'\n}\n- GET_LIST (src/srcProject/layout/catalog/modules/attributes/provider/provider.js#L26) -> v2/generic/all/attribute | request: prepareParams: params => {\n  const {\n    sort = {},\n    filter = {},\n    ...restParams\n  } = params;\n  const transformSort = {\n    ...sort,\n    field: 'auditable.created',\n    order: 'DESC'\n  };\n  const {\n    isBusiness,\n    disabled = false,\n    ...restFilters\n  } = filter;\n  const {\n    __filterParams = {}\n  } = restFilters;\n  const isBusinessFilter = get(__filterParams, 'isBusiness', {});\n  return {\n    filter: {\n      ...(isNil(isBusiness) ? {\n        ...restFilters\n      } : !!isBusiness ? {\n        ...omit(restFilters, 'inList id'),\n        attributeCategory: ATTRIBUTES_CATEGORIES.business,\n        ...isBusinessFilter\n      } : {\n        ...restFilters,\n        disabled,\n        attributeCategory: ATTRIBUTES_CATEGORIES.regular\n      })\n    },\n    sort: {\n      ...transformSort\n    },\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/attribute',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/catalog/modules/attributes/provider/provider.js#L64) -> v2/generic/all/attribute | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/attribute',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "active": {
                                "type": "string"
                              },
                              "elValue": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "attributeType": {
                                "type": "string"
                              },
                              "auditable": {
                                "type": "object",
                                "properties": {
                                  "created": {
                                    "type": "string",
                                    "format": "date"
                                  }
                                }
                              },
                              "disabled": {
                                "type": "boolean"
                              },
                              "creationDate": {
                                "type": "string"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: params => prepareSendedParams(params)\nprepareParams: params => {\n  const {\n    sort = {},\n    filter = {},\n    ...restParams\n  } = params;\n  const transformSort = {\n    ...sort,\n    field: 'auditable.created',\n    order: 'DESC'\n  };\n  const {\n    isBusiness,\n    disabled = false,\n    ...restFilters\n  } = filter;\n  const {\n    __filterParams = {}\n  } = restFilters;\n  const isBusinessFilter = get(__filterParams, 'isBusiness', {});\n  return {\n    filter: {\n      ...(isNil(isBusiness) ? {\n        ...restFilters\n      } : !!isBusiness ? {\n        ...omit(restFilters, 'inList id'),\n        attributeCategory: ATTRIBUTES_CATEGORIES.business,\n        ...isBusinessFilter\n      } : {\n        ...restFilters,\n        disabled,\n        attributeCategory: ATTRIBUTES_CATEGORIES.regular\n      })\n    },\n    sort: {\n      ...transformSort\n    },\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => prepareSendedParams(params)\nprepareParams: params => {\n  const {\n    sort = {},\n    filter = {},\n    ...restParams\n  } = params;\n  const transformSort = {\n    ...sort,\n    field: 'auditable.created',\n    order: 'DESC'\n  };\n  const {\n    isBusiness,\n    disabled = false,\n    ...restFilters\n  } = filter;\n  const {\n    __filterParams = {}\n  } = restFilters;\n  const isBusinessFilter = get(__filterParams, 'isBusiness', {});\n  return {\n    filter: {\n      ...(isNil(isBusiness) ? {\n        ...restFilters\n      } : !!isBusiness ? {\n        ...omit(restFilters, 'inList id'),\n        attributeCategory: ATTRIBUTES_CATEGORIES.business,\n        ...isBusinessFilter\n      } : {\n        ...restFilters,\n        disabled,\n        attributeCategory: ATTRIBUTES_CATEGORIES.regular\n      })\n    },\n    sort: {\n      ...transformSort\n    },\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/attribute'\n}",
          "helperArgs: {\n  url: 'v2/generic/all/attribute',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/attribute/": {
      "post": {
        "tags": [
          "administration/business-attributes",
          "catalog/attributes"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/administration/modules/business-attributes/provider/provider.js#L57) -> v2/generic/attribute/ | info: keyColumn: keyColumn | helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/attribute/'\n}\n- GET_ONE (src/srcProject/layout/catalog/modules/attributes/provider/provider.js#L95) -> v2/generic/attribute/ | request: helper.sync: true | helper.transformResponse: aggregateCommercialRules | urls[0].params: {\n  nestedEntities\n} / info: helper: getOneV2 | helperArgs: {\n  urls: [{\n    url: 'v2/generic/attribute/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'commercialRules/attributeRules?attributeCode=:@res.code',\n    responseContainer: 'commercialRules',\n    autoAppendId: false\n  }],\n  sync: true,\n  transformResponse: aggregateCommercialRules\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "active": {
                          "type": "string"
                        },
                        "elValue": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "attributeType": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "disabled": {
                          "type": "boolean"
                        },
                        "creationDate": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.sync: true\nhelper.transformResponse: aggregateCommercialRules\nurls[0].params: {\n  nestedEntities\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "nestedEntities": {
                    "description": "Identifier reference: nestedEntities",
                    "x-expression": "nestedEntities"
                  }
                }
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/attribute/'\n}",
          "helperArgs: {\n  urls: [{\n    url: 'v2/generic/attribute/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'commercialRules/attributeRules?attributeCode=:@res.code',\n    responseContainer: 'commercialRules',\n    autoAppendId: false\n  }],\n  sync: true,\n  transformResponse: aggregateCommercialRules\n}"
        ]
      }
    },
    "/attributes/": {
      "delete": {
        "tags": [
          "administration/business-attributes",
          "catalog/attributes"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/administration/modules/business-attributes/provider/provider.js#L61) -> attributes/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'attributes/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/administration/modules/business-attributes/provider/provider.js#L66) -> attributes/ | request: helper.method: DELETE | helper.showErrorFromContainer: true / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'attributes/',\n  method: 'DELETE',\n  showErrorFromContainer: true\n}\n- DELETE (src/srcProject/layout/catalog/modules/attributes/provider/provider.js#L87) -> attributes/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'attributes/',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "active": {
                          "type": "string"
                        },
                        "elValue": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "attributeType": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "disabled": {
                          "type": "boolean"
                        },
                        "creationDate": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE\nhelper.showErrorFromContainer: true",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE\nhelper.showErrorFromContainer: true"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'attributes/',\n  method: 'DELETE'\n}",
          "helperArgs: {\n  url: 'attributes/',\n  method: 'DELETE',\n  showErrorFromContainer: true\n}"
        ]
      }
    },
    "/attributes": {
      "post": {
        "tags": [
          "administration/business-attributes",
          "catalog/attributes"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/administration/modules/business-attributes/provider/provider.js#L74) -> attributes | request: helper.keyColumn: keyColumn | helper.showErrorFromContainer: true / response: helper.responseContainerId: id / info: helper: getCreateProvider | helperArgs: {\n  keyColumn,\n  url: 'attributes',\n  showErrorFromContainer: true,\n  responseContainerId: 'id'\n}\n- CREATE (src/srcProject/layout/catalog/modules/attributes/provider/provider.js#L71) -> attributes | request: helper.keyColumn: keyColumn | helper.showErrorFromContainer: true / response: helper.responseContainerId: id / info: helper: getCreateProvider | helperArgs: {\n  keyColumn,\n  url: 'attributes',\n  showErrorFromContainer: true,\n  responseContainerId: 'id'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainerId: id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "active": {
                              "type": "string"
                            },
                            "elValue": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "attributeType": {
                              "type": "string"
                            },
                            "auditable": {
                              "type": "object",
                              "properties": {
                                "created": {
                                  "type": "string",
                                  "format": "date"
                                }
                              }
                            },
                            "disabled": {
                              "type": "boolean"
                            },
                            "creationDate": {
                              "type": "string"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.keyColumn: keyColumn\nhelper.showErrorFromContainer: true",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.keyColumn: keyColumn\nhelper.showErrorFromContainer: true"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  keyColumn,\n  url: 'attributes',\n  showErrorFromContainer: true,\n  responseContainerId: 'id'\n}"
        ]
      },
      "put": {
        "tags": [
          "administration/business-attributes",
          "catalog/attributes"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/administration/modules/business-attributes/provider/provider.js#L82) -> attributes | request: helper.keyColumn: keyColumn | helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  keyColumn,\n  url: 'attributes',\n  method: 'PUT'\n}\n- UPDATE (src/srcProject/layout/catalog/modules/attributes/provider/provider.js#L79) -> attributes | request: helper.keyColumn: keyColumn | helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  keyColumn,\n  url: 'attributes',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "active": {
                          "type": "string"
                        },
                        "elValue": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "attributeType": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "disabled": {
                          "type": "boolean"
                        },
                        "creationDate": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.keyColumn: keyColumn\nhelper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.keyColumn: keyColumn\nhelper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getUpdateProvider",
          "helperArgs: {\n  keyColumn,\n  url: 'attributes',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/v2/generic/all/productLine": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq",
          "administration/catalog",
          "catalog/products-line"
        ],
        "summary": "Used in 5 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/administration/modules/catalog/products-line/provider/provider.js#L13) -> v2/generic/all/productLine | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/productLine',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/administration/modules/catalog/products-line/provider/provider.js#L20) -> v2/generic/all/productLine | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/productLine',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_PRODUCTLINE_BY_FILTER (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L745) -> v2/generic/all/productLine | request: options: {\n  method: 'POST'\n}\n- GET_LIST (src/srcProject/layout/catalog/modules/products-line/provider/provider.js#L51) -> v2/generic/all/productLine | request: prepareParams: filterParams | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/productLine',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/catalog/modules/products-line/provider/provider.js#L58) -> v2/generic/all/productLine | request: prepareParams: filterParams | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/productLine',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "description": {
                                "type": "string"
                              },
                              "parentLine": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "code": {
                                    "type": "string"
                                  }
                                }
                              },
                              "seller": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "code": {
                                    "type": "string"
                                  }
                                }
                              },
                              "code": {
                                "type": "string"
                              },
                              "longDescription": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            },
                            "parentLine": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "code": {
                                  "type": "string"
                                }
                              }
                            },
                            "seller": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "code": {
                                  "type": "string"
                                }
                              }
                            },
                            "code": {
                              "type": "string"
                            },
                            "longDescription": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: 'code'\noptions: {\n  method: 'POST'\n}\nprepareParams: filterParams",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: 'code'\noptions: {\n  method: 'POST'\n}\nprepareParams: filterParams"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/productLine',\n  nestedEntities\n}",
          "helperArgs: {\n  url: 'v2/generic/all/productLine',\n  nestedEntities,\n  keyColumn: 'code'\n}"
        ]
      }
    },
    "/v2/generic/productLine/": {
      "post": {
        "tags": [
          "administration/catalog",
          "catalog/products-line"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/administration/modules/catalog/products-line/provider/provider.js#L28) -> v2/generic/productLine/ | request: helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/productLine/',\n  nestedEntities\n}\n- GET_ONE (src/srcProject/layout/catalog/modules/products-line/provider/provider.js#L66) -> v2/generic/productLine/ | request: helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/productLine/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string"
                    },
                    "parentLine": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "seller": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "code": {
                      "type": "string"
                    },
                    "longDescription": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/productLine/',\n  nestedEntities\n}"
        ]
      }
    },
    "/catalog/product/productLine": {
      "post": {
        "tags": [
          "administration/catalog"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/administration/modules/catalog/products-line/provider/provider.js#L32) -> catalog/product/productLine | request: helper.method: POST / info: helper: getCreateProvider | helperArgs: {\n  url: 'catalog/product/productLine',\n  method: 'POST'\n}\n- UPDATE (src/srcProject/layout/administration/modules/catalog/products-line/provider/provider.js#L36) -> catalog/product/productLine | request: prepareParams: params => {\n  const {\n    data,\n    ...restParams\n  } = params;\n  const {\n    seller = {},\n    parentLine = {},\n    code,\n    description,\n    ...restData\n  } = data;\n  const dataTransformed = {\n    ...restData,\n    sellerCode: seller.code || null,\n    idCodeParentLine: parentLine.id || null,\n    codeProductLine: code || null,\n    label: description || null\n  };\n  return {\n    data: dataTransformed,\n    ...restParams\n  };\n} | helper.method: POST / info: helper: getUpdateProvider | helperArgs: {\n  url: 'catalog/product/productLine',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: POST\nprepareParams: params => {\n  const {\n    data,\n    ...restParams\n  } = params;\n  const {\n    seller = {},\n    parentLine = {},\n    code,\n    description,\n    ...restData\n  } = data;\n  const dataTransformed = {\n    ...restData,\n    sellerCode: seller.code || null,\n    idCodeParentLine: parentLine.id || null,\n    codeProductLine: code || null,\n    label: description || null\n  };\n  return {\n    data: dataTransformed,\n    ...restParams\n  };\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST\nprepareParams: params => {\n  const {\n    data,\n    ...restParams\n  } = params;\n  const {\n    seller = {},\n    parentLine = {},\n    code,\n    description,\n    ...restData\n  } = data;\n  const dataTransformed = {\n    ...restData,\n    sellerCode: seller.code || null,\n    idCodeParentLine: parentLine.id || null,\n    codeProductLine: code || null,\n    label: description || null\n  };\n  return {\n    data: dataTransformed,\n    ...restParams\n  };\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'catalog/product/productLine',\n  method: 'POST'\n}",
          "helper: getUpdateProvider"
        ]
      }
    },
    "/catalog/product/productLine/": {
      "delete": {
        "tags": [
          "administration/catalog"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/administration/modules/catalog/products-line/provider/provider.js#L66) -> catalog/product/productLine/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'catalog/product/productLine/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/administration/modules/catalog/products-line/provider/provider.js#L73) -> catalog/product/productLine/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'catalog/product/productLine/',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'catalog/product/productLine/',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/generic/all/tag": {
      "post": {
        "tags": [
          "B2B-customer-care/tags",
          "administration/catalog",
          "catalog/tags",
          "finance/tags"
        ],
        "summary": "Used in 8 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/administration/modules/catalog/tags/provider/provider.js#L12) -> v2/generic/all/tag | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/tag',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/administration/modules/catalog/tags/provider/provider.js#L15) -> v2/generic/all/tag | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/tag',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/tags/provider/provider.js#L32) -> v2/generic/all/tag | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    q,\n    ...restFilter\n  } = filter;\n  if (!isEmpty(q)) {\n    return {\n      filter: {\n        ...restFilter,\n        'wildcardOrIgnoreCase code': q,\n        ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n          'seller.code': ENGIE_MYPOWER_seller\n        } : {}),\n        ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n          'seller.code': ENGIE_EKKO_seller\n        } : {})\n      },\n      ...restParams\n    };\n  }\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n        'seller.code': ENGIE_MYPOWER_seller\n      } : {}),\n      ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n        'seller.code': ENGIE_EKKO_seller\n      } : {})\n    },\n    ...restParams\n  };\n  return transformedFilters;\n} | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/tag',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/tags/provider/provider.js#L71) -> v2/generic/all/tag | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/tag',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_LIST (src/srcProject/layout/catalog/modules/tags/provider/provider.js#L32) -> v2/generic/all/tag | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    q,\n    ...restFilter\n  } = filter;\n  if (!isEmpty(q)) {\n    return {\n      filter: {\n        ...restFilter,\n        'wildcardOrIgnoreCase code': q,\n        ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n          'seller.code': ENGIE_MYPOWER_seller\n        } : {}),\n        ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n          'seller.code': ENGIE_EKKO_seller\n        } : {})\n      },\n      ...restParams\n    };\n  }\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n        'seller.code': ENGIE_MYPOWER_seller\n      } : {}),\n      ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n        'seller.code': ENGIE_EKKO_seller\n      } : {})\n    },\n    ...restParams\n  };\n  return transformedFilters;\n} | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/tag',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/catalog/modules/tags/provider/provider.js#L71) -> v2/generic/all/tag | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/tag',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_LIST (src/srcProject/layout/finance/modules/tags/provider/provider.js#L32) -> v2/generic/all/tag | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    q,\n    ...restFilter\n  } = filter;\n  if (!isEmpty(q)) {\n    return {\n      filter: {\n        ...restFilter,\n        'wildcardOrIgnoreCase code': q,\n        ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n          'seller.code': ENGIE_MYPOWER_seller\n        } : {}),\n        ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n          'seller.code': ENGIE_EKKO_seller\n        } : {})\n      },\n      ...restParams\n    };\n  }\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n        'seller.code': ENGIE_MYPOWER_seller\n      } : {}),\n      ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n        'seller.code': ENGIE_EKKO_seller\n      } : {})\n    },\n    ...restParams\n  };\n  return transformedFilters;\n} | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/tag',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/finance/modules/tags/provider/provider.js#L71) -> v2/generic/all/tag | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/tag',\n  nestedEntities,\n  keyColumn: 'code'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "name": {
                            "type": "string"
                          },
                          "tagType": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              }
                            }
                          },
                          "parentTag": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "id": {
                                "type": "string"
                              }
                            }
                          },
                          "filterEl": {
                            "type": "string"
                          },
                          "seller": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "id": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: 'code'\nprepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    q,\n    ...restFilter\n  } = filter;\n  if (!isEmpty(q)) {\n    return {\n      filter: {\n        ...restFilter,\n        'wildcardOrIgnoreCase code': q,\n        ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n          'seller.code': ENGIE_MYPOWER_seller\n        } : {}),\n        ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n          'seller.code': ENGIE_EKKO_seller\n        } : {})\n      },\n      ...restParams\n    };\n  }\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n        'seller.code': ENGIE_MYPOWER_seller\n      } : {}),\n      ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n        'seller.code': ENGIE_EKKO_seller\n      } : {})\n    },\n    ...restParams\n  };\n  return transformedFilters;\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: 'code'\nprepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    q,\n    ...restFilter\n  } = filter;\n  if (!isEmpty(q)) {\n    return {\n      filter: {\n        ...restFilter,\n        'wildcardOrIgnoreCase code': q,\n        ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n          'seller.code': ENGIE_MYPOWER_seller\n        } : {}),\n        ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n          'seller.code': ENGIE_EKKO_seller\n        } : {})\n      },\n      ...restParams\n    };\n  }\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n        'seller.code': ENGIE_MYPOWER_seller\n      } : {}),\n      ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n        'seller.code': ENGIE_EKKO_seller\n      } : {})\n    },\n    ...restParams\n  };\n  return transformedFilters;\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/tag',\n  nestedEntities\n}",
          "helperArgs: {\n  url: 'v2/generic/all/tag',\n  nestedEntities,\n  keyColumn: 'code'\n}"
        ]
      }
    },
    "/v2/generic/tag/": {
      "post": {
        "tags": [
          "B2B-customer-care/tags",
          "administration/catalog",
          "catalog/tags",
          "finance/tags"
        ],
        "summary": "Used in 4 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/administration/modules/catalog/tags/provider/provider.js#L22) -> v2/generic/tag/ | request: helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/tag/',\n  nestedEntities\n}\n- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/tags/provider/provider.js#L78) -> v2/generic/tag/ | request: helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/tag/',\n  nestedEntities\n}\n- GET_ONE (src/srcProject/layout/catalog/modules/tags/provider/provider.js#L78) -> v2/generic/tag/ | request: helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/tag/',\n  nestedEntities\n}\n- GET_ONE (src/srcProject/layout/finance/modules/tags/provider/provider.js#L78) -> v2/generic/tag/ | request: helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/tag/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "tagType": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "parentTag": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "filterEl": {
                      "type": "string"
                    },
                    "seller": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/tag/',\n  nestedEntities\n}"
        ]
      }
    },
    "/cpq/tags": {
      "post": {
        "tags": [
          "B2B-customer-care/tags",
          "administration/catalog",
          "catalog/tags",
          "finance/tags"
        ],
        "summary": "Used in 4 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/administration/modules/catalog/tags/provider/provider.js#L26) -> cpq/tags | request: helper.method: POST / info: helper: getCreateProvider | helperArgs: {\n  url: 'cpq/tags',\n  method: 'POST'\n}\n- CREATE (src/srcProject/layout/B2B-customer-care/modules/tags/provider/provider.js#L82) -> cpq/tags | request: prepareParams: prepareParams | helper.method: POST / info: helper: getCreateProvider | helperArgs: {\n  url: 'cpq/tags',\n  method: 'POST'\n}\n- CREATE (src/srcProject/layout/catalog/modules/tags/provider/provider.js#L82) -> cpq/tags | request: prepareParams: prepareParams | helper.method: POST / info: helper: getCreateProvider | helperArgs: {\n  url: 'cpq/tags',\n  method: 'POST'\n}\n- CREATE (src/srcProject/layout/finance/modules/tags/provider/provider.js#L82) -> cpq/tags | request: prepareParams: prepareParams | helper.method: POST / info: helper: getCreateProvider | helperArgs: {\n  url: 'cpq/tags',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "tagType": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "parentTag": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "filterEl": {
                      "type": "string"
                    },
                    "seller": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST\nprepareParams: prepareParams",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST\nprepareParams: prepareParams"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'cpq/tags',\n  method: 'POST'\n}"
        ]
      },
      "put": {
        "tags": [
          "B2B-customer-care/tags",
          "administration/catalog",
          "catalog/tags",
          "finance/tags"
        ],
        "summary": "Used in 4 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/administration/modules/catalog/tags/provider/provider.js#L29) -> cpq/tags | request: prepareParams: params => {\n  const {\n    data = {},\n    ...restParams\n  } = params;\n  const {\n    seller = {},\n    parentTag = {},\n    tagType = {},\n    description = {},\n    ...restData\n  } = data;\n  const dataTransformed = {\n    ...restData,\n    sellerCode: seller.code || null,\n    parentTagCode: parentTag.code || null,\n    tagTypeCode: tagType.code || null,\n    label: description || null\n  };\n  return {\n    data: dataTransformed,\n    ...restParams\n  };\n} | helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  url: 'cpq/tags',\n  method: 'PUT'\n}\n- UPDATE (src/srcProject/layout/B2B-customer-care/modules/tags/provider/provider.js#L86) -> cpq/tags | request: prepareParams: prepareParams | helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  url: 'cpq/tags',\n  method: 'PUT'\n}\n- UPDATE (src/srcProject/layout/catalog/modules/tags/provider/provider.js#L86) -> cpq/tags | request: prepareParams: prepareParams | helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  url: 'cpq/tags',\n  method: 'PUT'\n}\n- UPDATE (src/srcProject/layout/finance/modules/tags/provider/provider.js#L86) -> cpq/tags | request: prepareParams: prepareParams | helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  url: 'cpq/tags',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "tagType": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "parentTag": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "filterEl": {
                      "type": "string"
                    },
                    "seller": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    data = {},\n    ...restParams\n  } = params;\n  const {\n    seller = {},\n    parentTag = {},\n    tagType = {},\n    description = {},\n    ...restData\n  } = data;\n  const dataTransformed = {\n    ...restData,\n    sellerCode: seller.code || null,\n    parentTagCode: parentTag.code || null,\n    tagTypeCode: tagType.code || null,\n    label: description || null\n  };\n  return {\n    data: dataTransformed,\n    ...restParams\n  };\n}\nhelper.method: PUT\nprepareParams: prepareParams",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    data = {},\n    ...restParams\n  } = params;\n  const {\n    seller = {},\n    parentTag = {},\n    tagType = {},\n    description = {},\n    ...restData\n  } = data;\n  const dataTransformed = {\n    ...restData,\n    sellerCode: seller.code || null,\n    parentTagCode: parentTag.code || null,\n    tagTypeCode: tagType.code || null,\n    label: description || null\n  };\n  return {\n    data: dataTransformed,\n    ...restParams\n  };\n}\nhelper.method: PUT\nprepareParams: prepareParams"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'cpq/tags',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/cpq/tags/": {
      "delete": {
        "tags": [
          "B2B-customer-care/tags",
          "administration/catalog",
          "catalog/tags",
          "finance/tags"
        ],
        "summary": "Used in 8 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/administration/modules/catalog/tags/provider/provider.js#L56) -> cpq/tags/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'cpq/tags/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/administration/modules/catalog/tags/provider/provider.js#L60) -> cpq/tags/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'cpq/tags/',\n  method: 'DELETE'\n}\n- DELETE (src/srcProject/layout/B2B-customer-care/modules/tags/provider/provider.js#L94) -> cpq/tags/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'cpq/tags/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/tags/provider/provider.js#L98) -> cpq/tags/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'cpq/tags/',\n  method: 'DELETE'\n}\n- DELETE (src/srcProject/layout/catalog/modules/tags/provider/provider.js#L94) -> cpq/tags/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'cpq/tags/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/catalog/modules/tags/provider/provider.js#L98) -> cpq/tags/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'cpq/tags/',\n  method: 'DELETE'\n}\n- DELETE (src/srcProject/layout/finance/modules/tags/provider/provider.js#L94) -> cpq/tags/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'cpq/tags/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/finance/modules/tags/provider/provider.js#L98) -> cpq/tags/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'cpq/tags/',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "tagType": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "parentTag": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "filterEl": {
                      "type": "string"
                    },
                    "seller": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'cpq/tags/',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/generic/all/tagType": {
      "post": {
        "tags": [
          "administration/catalog",
          "catalog/type-tags"
        ],
        "summary": "Used in 4 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/administration/modules/catalog/type-tags/provider/provider.js#L12) -> v2/generic/all/tagType | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/tagType',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/administration/modules/catalog/type-tags/provider/provider.js#L15) -> v2/generic/all/tagType | request: helper.keyColumn: 'code' | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/tagType',\n  keyColumn: 'code',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/catalog/modules/type-tags/provider/provider.js#L30) -> v2/generic/all/tagType | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    seller = {},\n    ...restFilter\n  } = filter;\n  const {\n    code: sellerCode\n  } = seller;\n  const transformedFilters = {\n    filter: {\n      ...(!isUndefined(sellerCode) ? {\n        'seller.code': sellerCode\n      } : {}),\n      ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n        'seller.code': ENGIE_MYPOWER_seller\n      } : {}),\n      ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n        'seller.code': ENGIE_EKKO_seller\n      } : {}),\n      ...restFilter\n    },\n    ...restParams\n  };\n  return transformedFilters;\n} | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/tagType',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/catalog/modules/type-tags/provider/provider.js#L54) -> v2/generic/all/tagType | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/tagType',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "seller": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: 'code'\nprepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    seller = {},\n    ...restFilter\n  } = filter;\n  const {\n    code: sellerCode\n  } = seller;\n  const transformedFilters = {\n    filter: {\n      ...(!isUndefined(sellerCode) ? {\n        'seller.code': sellerCode\n      } : {}),\n      ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n        'seller.code': ENGIE_MYPOWER_seller\n      } : {}),\n      ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n        'seller.code': ENGIE_EKKO_seller\n      } : {}),\n      ...restFilter\n    },\n    ...restParams\n  };\n  return transformedFilters;\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: 'code'\nprepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    seller = {},\n    ...restFilter\n  } = filter;\n  const {\n    code: sellerCode\n  } = seller;\n  const transformedFilters = {\n    filter: {\n      ...(!isUndefined(sellerCode) ? {\n        'seller.code': sellerCode\n      } : {}),\n      ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n        'seller.code': ENGIE_MYPOWER_seller\n      } : {}),\n      ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n        'seller.code': ENGIE_EKKO_seller\n      } : {}),\n      ...restFilter\n    },\n    ...restParams\n  };\n  return transformedFilters;\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/tagType',\n  nestedEntities\n}",
          "helperArgs: {\n  url: 'v2/generic/all/tagType',\n  keyColumn: 'code',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/tagType/": {
      "post": {
        "tags": [
          "administration/catalog",
          "catalog/type-tags"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/administration/modules/catalog/type-tags/provider/provider.js#L22) -> v2/generic/tagType/ | request: helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/tagType/',\n  nestedEntities\n}\n- GET_ONE (src/srcProject/layout/catalog/modules/type-tags/provider/provider.js#L60) -> v2/generic/tagType/ | request: helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/tagType/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "seller": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/tagType/',\n  nestedEntities\n}"
        ]
      }
    },
    "/cpq/tags/tagType": {
      "post": {
        "tags": [
          "administration/catalog"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/administration/modules/catalog/type-tags/provider/provider.js#L25) -> cpq/tags/tagType | request: helper.method: POST / info: helper: getCreateProvider | helperArgs: {\n  url: 'cpq/tags/tagType',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'cpq/tags/tagType',\n  method: 'POST'\n}"
        ]
      },
      "put": {
        "tags": [
          "administration/catalog"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/administration/modules/catalog/type-tags/provider/provider.js#L31) -> cpq/tags/tagType | request: prepareParams: params => {\n  const {\n    data = {},\n    ...restParams\n  } = params;\n  const {\n    seller = {},\n    ...restData\n  } = data;\n  const dataTransformed = {\n    ...restData,\n    sellerCode: seller.code || null\n  };\n  return {\n    data: dataTransformed,\n    ...restParams\n  };\n} | helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  url: 'cpq/tags/tagType',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    data = {},\n    ...restParams\n  } = params;\n  const {\n    seller = {},\n    ...restData\n  } = data;\n  const dataTransformed = {\n    ...restData,\n    sellerCode: seller.code || null\n  };\n  return {\n    data: dataTransformed,\n    ...restParams\n  };\n}\nhelper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    data = {},\n    ...restParams\n  } = params;\n  const {\n    seller = {},\n    ...restData\n  } = data;\n  const dataTransformed = {\n    ...restData,\n    sellerCode: seller.code || null\n  };\n  return {\n    data: dataTransformed,\n    ...restParams\n  };\n}\nhelper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'cpq/tags/tagType',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/cpq/tags/tagType/": {
      "delete": {
        "tags": [
          "administration/catalog"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/administration/modules/catalog/type-tags/provider/provider.js#L49) -> cpq/tags/tagType/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'cpq/tags/tagType/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/administration/modules/catalog/type-tags/provider/provider.js#L53) -> cpq/tags/tagType/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'cpq/tags/tagType/',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'cpq/tags/tagType/',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/billing/accountingCode": {
      "post": {
        "tags": [
          "administration/chart-of-accounts",
          "finance/chart-of-accounts"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/administration/modules/chart-of-accounts/provider/provider.js#L72) -> v2/billing/accountingCode | request: helper.method: POST / info: helper: getCreateProvider | helperArgs: {\n  url: 'v2/billing/accountingCode',\n  method: 'POST'\n}\n- CREATE (src/srcProject/layout/finance/modules/chart-of-accounts/provider/provider.js#L68) -> v2/billing/accountingCode | request: helper.method: POST / info: helper: getCreateProvider | helperArgs: {\n  url: 'v2/billing/accountingCode',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "chartOfAccountTypeEnum": {
                      "type": "string"
                    },
                    "chartOfAccountViewTypeEnum": {
                      "type": "string"
                    },
                    "parentAccountingCode": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "active": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/billing/accountingCode',\n  method: 'POST'\n}"
        ]
      },
      "delete": {
        "tags": [
          "administration/chart-of-accounts",
          "finance/chart-of-accounts"
        ],
        "summary": "Used in 4 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/administration/modules/chart-of-accounts/provider/provider.js#L78) -> v2/billing/accountingCode | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'v2/billing/accountingCode',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/administration/modules/chart-of-accounts/provider/provider.js#L85) -> v2/billing/accountingCode | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/billing/accountingCode',\n  method: 'DELETE'\n}\n- DELETE (src/srcProject/layout/finance/modules/chart-of-accounts/provider/provider.js#L74) -> v2/billing/accountingCode | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'v2/billing/accountingCode',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/finance/modules/chart-of-accounts/provider/provider.js#L81) -> v2/billing/accountingCode | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/billing/accountingCode',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "chartOfAccountTypeEnum": {
                      "type": "string"
                    },
                    "chartOfAccountViewTypeEnum": {
                      "type": "string"
                    },
                    "parentAccountingCode": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "active": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'v2/billing/accountingCode',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/generic/entities/RatedTransaction": {
      "get": {
        "tags": [
          "administration/configuration-kc",
          "administration/entities"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_ENTITIES (src/srcProject/layout/administration/modules/configuration-kc/provider/provider.js#L6) -> v2/generic/entities/RatedTransaction | request: options: {\n  method: 'GET'\n}\n- GET_ENTITIES (src/srcProject/layout/administration/modules/entities/provider/provider.js#L6) -> v2/generic/entities/RatedTransaction | request: options: {\n  method: 'GET'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ]
      }
    },
    "/v2/generic/entities/{entityName}": {
      "get": {
        "tags": [
          "administration/configuration-kc",
          "administration/entities",
          "finance/entities",
          "operation/entities"
        ],
        "summary": "Used in 4 frontend location(s)",
        "description": "- GET_ONE_ENTITY (src/srcProject/layout/administration/modules/configuration-kc/provider/provider.js#L12) -> v2/generic/entities/:entityName | request: options: {\n  method: 'GET'\n}\n- GET_ONE_ENTITY (src/srcProject/layout/administration/modules/entities/provider/provider.js#L12) -> v2/generic/entities/:entityName | request: options: {\n  method: 'GET'\n}\n- GET_ONE_ENTITY (src/srcProject/layout/finance/modules/entities/provider/provider.js#L12) -> v2/generic/entities/:entityName | request: options: {\n  method: 'GET'\n}\n- GET_ONE_ENTITY (src/srcProject/layout/operation/modules/entities/provider/provider.js#L14) -> v2/generic/entities/:entityName | request: options: {\n  method: 'GET'\n} / info: keyColumn: keyColumn",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ],
        "x-dev-notes": [
          "keyColumn: keyColumn"
        ]
      }
    },
    "/v2/generic/all/contactCategory": {
      "post": {
        "tags": [
          "administration/contact-catgories"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/administration/modules/contact-catgories/provider/provider.js#L13) -> v2/generic/all/contactCategory | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/contactCategory',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/administration/modules/contact-catgories/provider/provider.js#L20) -> v2/generic/all/contactCategory | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/contactCategory',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "description": {
                            "type": "string"
                          },
                          "searchBar": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/contactCategory',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/account/contactCategory": {
      "post": {
        "tags": [
          "administration/contact-catgories"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/administration/modules/contact-catgories/provider/provider.js#L27) -> v2/account/contactCategory | request: helper.nestedEntities: nestedEntities / response: helper.responseContainerId: entityId / info: helper: getCreateProvider | helperArgs: {\n  url: 'v2/account/contactCategory',\n  responseContainerId: 'entityId',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainerId: entityId",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "entityId": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        },
                        "searchBar": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/account/contactCategory',\n  responseContainerId: 'entityId',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/contactCategory/": {
      "post": {
        "tags": [
          "administration/contact-catgories"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/administration/modules/contact-catgories/provider/provider.js#L34) -> v2/generic/contactCategory/ | request: helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/contactCategory/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string"
                    },
                    "searchBar": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/contactCategory/',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/account/contactCategory/": {
      "delete": {
        "tags": [
          "administration/contact-catgories"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/administration/modules/contact-catgories/provider/provider.js#L51) -> v2/account/contactCategory/ | request: helper.method: DELETE / info: helper: getUpdateProvider | helperArgs: {\n  url: 'v2/account/contactCategory/',\n  method: 'delete'\n}\n- DELETE_MANY (src/srcProject/layout/administration/modules/contact-catgories/provider/provider.js#L57) -> v2/account/contactCategory/ | request: helper.method: DELETE / info: helper: getUpdateProvider | helperArgs: {\n  url: 'v2/account/contactCategory/',\n  method: 'delete'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string"
                    },
                    "searchBar": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'v2/account/contactCategory/',\n  method: 'delete'\n}"
        ]
      }
    },
    "/v2/generic/all/DunningPauseReason": {
      "post": {
        "tags": [
          "administration/dunning-pause-reasons"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/administration/modules/dunning-pause-reasons/provider/provider.js#L6) -> v2/generic/all/DunningPauseReason\n- GET_MANY (src/srcProject/layout/administration/modules/dunning-pause-reasons/provider/provider.js#L12) -> v2/generic/all/DunningPauseReason | info: keyColumn: 'id'",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: 'id'"
        ]
      }
    },
    "/v2/generic/DunningPauseReason/": {
      "get": {
        "tags": [
          "administration/dunning-pause-reasons"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/administration/modules/dunning-pause-reasons/provider/provider.js#L9) -> v2/generic/DunningPauseReason/",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/v2/generic/all/ExchangeRate": {
      "post": {
        "tags": [
          "administration/exchange-rates"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/administration/modules/exchange-rates/provider.js#L37) -> v2/generic/all/ExchangeRate | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/ExchangeRate',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/administration/modules/exchange-rates/provider.js#L45) -> v2/generic/all/ExchangeRate | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/ExchangeRate',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/ExchangeRate',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/ExchangeRate/": {
      "post": {
        "tags": [
          "administration/exchange-rates"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/administration/modules/exchange-rates/provider.js#L53) -> v2/generic/ExchangeRate/ | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse / info: keyColumn: keyColumn | helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/ExchangeRate/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/ExchangeRate/',\n  nestedEntities\n}"
        ]
      }
    },
    "/currency/addExchangeRate": {
      "post": {
        "tags": [
          "administration/exchange-rates"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/administration/modules/exchange-rates/provider.js#L61) -> currency/addExchangeRate | request: helper.method: POST / response: helper.responseContainerId: entityId / info: keyColumn: keyColumn | helper: getCreateProvider | helperArgs: {\n  url: 'currency/addExchangeRate',\n  method: 'POST',\n  responseContainerId: 'entityId'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainerId: entityId"
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'currency/addExchangeRate',\n  method: 'POST',\n  responseContainerId: 'entityId'\n}"
        ]
      }
    },
    "/currency/updateExchangeRate/{id}": {
      "put": {
        "tags": [
          "administration/exchange-rates"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/administration/modules/exchange-rates/provider.js#L69) -> currency/updateExchangeRate/:id | request: helper.method: PUT / info: keyColumn: keyColumn | excludeProperties: ['id'] | helper: getUpdateProvider | helperArgs: {\n  url: 'currency/updateExchangeRate/:id',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "excludeProperties: ['id']",
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'currency/updateExchangeRate/:id',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/v2/generic/all/invoiceType": {
      "post": {
        "tags": [
          "B2B-customer-care/invoice-subtotals",
          "administration/invoice-subtotals",
          "operation/invoice-validation"
        ],
        "summary": "Used in 6 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/administration/modules/invoice-subtotals/provider/provider.js#L128) -> v2/generic/all/invoiceType | response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/invoiceType'\n}\n- GET_MANY (src/srcProject/layout/administration/modules/invoice-subtotals/provider/provider.js#L132) -> v2/generic/all/invoiceType | response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/invoiceType'\n}\n- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/invoice-subtotals/provider/provider.js#L128) -> v2/generic/all/invoiceType | response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/invoiceType'\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/invoice-subtotals/provider/provider.js#L132) -> v2/generic/all/invoiceType | response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/invoiceType'\n}\n- GET_LIST (src/srcProject/layout/operation/modules/invoice-validation/provider/provider.js#L39) -> v2/generic/all/invoiceType | request: helper.nestedEntities: nestedEntities | helper.genericFields: genericFields / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/invoiceType',\n  nestedEntities,\n  genericFields\n}\n- GET_MANY (src/srcProject/layout/operation/modules/invoice-validation/provider/provider.js#L48) -> v2/generic/all/invoiceType | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/invoiceType',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data | transformResponse: transformResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "auditable": {
                                "type": "object",
                                "properties": {
                                  "created": {
                                    "type": "string",
                                    "format": "date"
                                  }
                                }
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "number"
                              },
                              "code": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "invoiceValidationScript": {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string"
                                  }
                                }
                              },
                              "invoiceValidationRulesNumber": {
                                "type": "string"
                              },
                              "hasValidationScript": {
                                "type": "boolean"
                              },
                              "hasRules": {
                                "type": "boolean"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities\nhelper.genericFields: genericFields",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities\nhelper.genericFields: genericFields"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/invoiceType'\n}",
          "helperArgs: {\n  url: 'v2/generic/all/invoiceType',\n  nestedEntities,\n  genericFields\n}",
          "helperArgs: {\n  url: 'v2/generic/all/invoiceType',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/invoiceType/": {
      "post": {
        "tags": [
          "B2B-customer-care/invoice-subtotals",
          "administration/invoice-subtotals",
          "operation/invoice-validation"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/administration/modules/invoice-subtotals/provider/provider.js#L136) -> v2/generic/invoiceType/ | request: helper.sync: true | helper.transformResponse: transformRecord | urls[0].params: {\n  nestedEntities\n} / info: keyColumn: keyColumn | helper: getOneV2 | helperArgs: {\n  urls: [{\n    url: 'v2/generic/invoiceType/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'v2/generic/all/invoiceSubTotals',\n    params: {\n      nestedEntities,\n      filters: {\n        'invoiceType.id': '@responses[0].data.id'\n      }\n    },\n    autoAppendId: false\n  }, {\n    url: 'v2/generic/all/tradingLanguage',\n    params: {},\n    autoAppendId: false\n  }],\n  sync: true,\n  transformResponse: transformRecord\n}\n- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/invoice-subtotals/provider/provider.js#L136) -> v2/generic/invoiceType/ | request: helper.sync: true | helper.transformResponse: transformRecord | urls[0].params: {\n  nestedEntities\n} / info: keyColumn: keyColumn | helper: getOneV2 | helperArgs: {\n  urls: [{\n    url: 'v2/generic/invoiceType/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'v2/generic/all/invoiceSubTotals',\n    params: {\n      nestedEntities,\n      filters: {\n        'invoiceType.id': '@responses[0].data.id'\n      }\n    },\n    autoAppendId: false\n  }, {\n    url: 'v2/generic/all/tradingLanguage',\n    params: {},\n    autoAppendId: false\n  }],\n  sync: true,\n  transformResponse: transformRecord\n}\n- GET_ONE (src/srcProject/layout/operation/modules/invoice-validation/provider/provider.js#L55) -> v2/generic/invoiceType/ | request: helper.nestedEntities: nestedEntities | helper.otherParams: {\n  sortBy: 'invoiceValidationRules.priority',\n  sortOrder: 'ASCENDING'\n} / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/invoiceType/',\n  responseContainer: 'data',\n  nestedEntities,\n  otherParams: {\n    sortBy: 'invoiceValidationRules.priority',\n    sortOrder: 'ASCENDING'\n  }\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "auditable": {
                              "type": "object",
                              "properties": {
                                "created": {
                                  "type": "string",
                                  "format": "date"
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "number"
                            },
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "invoiceValidationScript": {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                }
                              }
                            },
                            "invoiceValidationRulesNumber": {
                              "type": "string"
                            },
                            "hasValidationScript": {
                              "type": "boolean"
                            },
                            "hasRules": {
                              "type": "boolean"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.sync: true\nhelper.transformResponse: transformRecord\nurls[0].params: {\n  nestedEntities\n}\nhelper.nestedEntities: nestedEntities\nhelper.otherParams: {\n  sortBy: 'invoiceValidationRules.priority',\n  sortOrder: 'ASCENDING'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "nestedEntities": {
                    "description": "Identifier reference: nestedEntities",
                    "x-expression": "nestedEntities"
                  }
                }
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getOneV2",
          "helperArgs: {\n  urls: [{\n    url: 'v2/generic/invoiceType/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'v2/generic/all/invoiceSubTotals',\n    params: {\n      nestedEntities,\n      filters: {\n        'invoiceType.id': '@responses[0].data.id'\n      }\n    },\n    autoAppendId: false\n  }, {\n    url: 'v2/generic/all/tradingLanguage',\n    params: {},\n    autoAppendId: false\n  }],\n  sync: true,\n  transformResponse: transformRecord\n}",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/invoiceType/',\n  responseContainer: 'data',\n  nestedEntities,\n  otherParams: {\n    sortBy: 'invoiceValidationRules.priority',\n    sortOrder: 'ASCENDING'\n  }\n}"
        ]
      }
    },
    "/v2/generic/all/invoiceSubTotals": {
      "post": {
        "tags": [
          "B2B-customer-care/invoice-subtotals",
          "administration/invoice-subtotals"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/administration/modules/invoice-subtotals/provider/provider.js#L136) -> v2/generic/all/invoiceSubTotals | request: helper.sync: true | helper.transformResponse: transformRecord | urls[1].params: {\n  nestedEntities,\n  filters: {\n    'invoiceType.id': '@responses[0].data.id'\n  }\n} | urls[1].autoAppendId: false / info: keyColumn: keyColumn | helper: getOneV2 | helperArgs: {\n  urls: [{\n    url: 'v2/generic/invoiceType/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'v2/generic/all/invoiceSubTotals',\n    params: {\n      nestedEntities,\n      filters: {\n        'invoiceType.id': '@responses[0].data.id'\n      }\n    },\n    autoAppendId: false\n  }, {\n    url: 'v2/generic/all/tradingLanguage',\n    params: {},\n    autoAppendId: false\n  }],\n  sync: true,\n  transformResponse: transformRecord\n}\n- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/invoice-subtotals/provider/provider.js#L136) -> v2/generic/all/invoiceSubTotals | request: helper.sync: true | helper.transformResponse: transformRecord | urls[1].params: {\n  nestedEntities,\n  filters: {\n    'invoiceType.id': '@responses[0].data.id'\n  }\n} | urls[1].autoAppendId: false / info: keyColumn: keyColumn | helper: getOneV2 | helperArgs: {\n  urls: [{\n    url: 'v2/generic/invoiceType/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'v2/generic/all/invoiceSubTotals',\n    params: {\n      nestedEntities,\n      filters: {\n        'invoiceType.id': '@responses[0].data.id'\n      }\n    },\n    autoAppendId: false\n  }, {\n    url: 'v2/generic/all/tradingLanguage',\n    params: {},\n    autoAppendId: false\n  }],\n  sync: true,\n  transformResponse: transformRecord\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.sync: true\nhelper.transformResponse: transformRecord\nurls[1].params: {\n  nestedEntities,\n  filters: {\n    'invoiceType.id': '@responses[0].data.id'\n  }\n}\nurls[1].autoAppendId: false",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "nestedEntities": {
                    "description": "Identifier reference: nestedEntities",
                    "x-expression": "nestedEntities"
                  },
                  "filters": {
                    "type": "object",
                    "properties": {
                      "invoiceType.id": {
                        "type": "string",
                        "example": "@responses[0].data.id"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getOneV2",
          "helperArgs: {\n  urls: [{\n    url: 'v2/generic/invoiceType/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'v2/generic/all/invoiceSubTotals',\n    params: {\n      nestedEntities,\n      filters: {\n        'invoiceType.id': '@responses[0].data.id'\n      }\n    },\n    autoAppendId: false\n  }, {\n    url: 'v2/generic/all/tradingLanguage',\n    params: {},\n    autoAppendId: false\n  }],\n  sync: true,\n  transformResponse: transformRecord\n}"
        ]
      }
    },
    "/v2/generic/all/tradingLanguage": {
      "post": {
        "tags": [
          "B2B-customer-care/invoice-subtotals",
          "administration/invoice-subtotals"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/administration/modules/invoice-subtotals/provider/provider.js#L136) -> v2/generic/all/tradingLanguage | request: helper.sync: true | helper.transformResponse: transformRecord | urls[2].params: {} | urls[2].autoAppendId: false / info: keyColumn: keyColumn | helper: getOneV2 | helperArgs: {\n  urls: [{\n    url: 'v2/generic/invoiceType/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'v2/generic/all/invoiceSubTotals',\n    params: {\n      nestedEntities,\n      filters: {\n        'invoiceType.id': '@responses[0].data.id'\n      }\n    },\n    autoAppendId: false\n  }, {\n    url: 'v2/generic/all/tradingLanguage',\n    params: {},\n    autoAppendId: false\n  }],\n  sync: true,\n  transformResponse: transformRecord\n}\n- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/invoice-subtotals/provider/provider.js#L136) -> v2/generic/all/tradingLanguage | request: helper.sync: true | helper.transformResponse: transformRecord | urls[2].params: {} | urls[2].autoAppendId: false / info: keyColumn: keyColumn | helper: getOneV2 | helperArgs: {\n  urls: [{\n    url: 'v2/generic/invoiceType/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'v2/generic/all/invoiceSubTotals',\n    params: {\n      nestedEntities,\n      filters: {\n        'invoiceType.id': '@responses[0].data.id'\n      }\n    },\n    autoAppendId: false\n  }, {\n    url: 'v2/generic/all/tradingLanguage',\n    params: {},\n    autoAppendId: false\n  }],\n  sync: true,\n  transformResponse: transformRecord\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.sync: true\nhelper.transformResponse: transformRecord\nurls[2].params: {}\nurls[2].autoAppendId: false",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getOneV2",
          "helperArgs: {\n  urls: [{\n    url: 'v2/generic/invoiceType/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'v2/generic/all/invoiceSubTotals',\n    params: {\n      nestedEntities,\n      filters: {\n        'invoiceType.id': '@responses[0].data.id'\n      }\n    },\n    autoAppendId: false\n  }, {\n    url: 'v2/generic/all/tradingLanguage',\n    params: {},\n    autoAppendId: false\n  }],\n  sync: true,\n  transformResponse: transformRecord\n}"
        ]
      }
    },
    "/v2/billing/invoices/addSubTotals": {
      "post": {
        "tags": [
          "B2B-customer-care/invoice-subtotals",
          "administration/invoice-subtotals"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/administration/modules/invoice-subtotals/provider/provider.js#L166) -> v2/billing/invoices/addSubTotals | request: helper.method: POST / info: helper: getCreateProvider | helperArgs: {\n  url: 'v2/billing/invoices/addSubTotals',\n  method: 'POST'\n}\n- CREATE (src/srcProject/layout/B2B-customer-care/modules/invoice-subtotals/provider/provider.js#L166) -> v2/billing/invoices/addSubTotals | request: helper.method: POST / info: helper: getCreateProvider | helperArgs: {\n  url: 'v2/billing/invoices/addSubTotals',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/billing/invoices/addSubTotals',\n  method: 'POST'\n}"
        ]
      }
    },
    "/v2/billing/invoices/deleteSubTotals": {
      "post": {
        "tags": [
          "B2B-customer-care/invoice-subtotals",
          "administration/invoice-subtotals"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DELETE_SUBTOTALS (src/srcProject/layout/administration/modules/invoice-subtotals/provider/provider.js#L172) -> v2/billing/invoices/deleteSubTotals | request: options: {\n  method: 'POST'\n}\n- DELETE_SUBTOTALS (src/srcProject/layout/B2B-customer-care/modules/invoice-subtotals/provider/provider.js#L172) -> v2/billing/invoices/deleteSubTotals | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/generic/all/Journal": {
      "post": {
        "tags": [
          "administration/journal",
          "finance/journal"
        ],
        "summary": "Used in 4 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/administration/modules/journal/provider/provider.js#L12) -> v2/generic/all/Journal | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/Journal',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/administration/modules/journal/provider/provider.js#L20) -> v2/generic/all/Journal | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/Journal',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_LIST (src/srcProject/layout/finance/modules/journal/provider/provider.js#L12) -> v2/generic/all/Journal | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/Journal',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/finance/modules/journal/provider/provider.js#L20) -> v2/generic/all/Journal | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/Journal',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'code'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: 'code'",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: 'code'"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/Journal',\n  responseContainer: 'data',\n  nestedEntities\n}",
          "helperArgs: {\n  url: 'v2/generic/all/Journal',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'code'\n}"
        ]
      }
    },
    "/v2/generic/all/provider": {
      "post": {
        "tags": [
          "administration/portal-message"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/administration/modules/portal-message/provider/provider.js#L16) -> v2/generic/all/provider | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/provider',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/provider',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/provider/": {
      "post": {
        "tags": [
          "administration/portal-message"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/administration/modules/portal-message/provider/provider.js#L43) -> v2/generic/provider/ | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/provider/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/provider/',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/all/product": {
      "post": {
        "tags": [
          "B2B-customer-care/products",
          "CPQ-marketing-manager/product-models",
          "CPQ-marketing-manager/products",
          "administration/products",
          "catalog/products"
        ],
        "summary": "Used in 8 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/administration/modules/products/provider/provider.js#L84) -> v2/generic/all/product | request: prepareParams: params => {\n  const {\n    filter = {},\n    sort = {},\n    ...restParams\n  } = params;\n  const {\n    productLine = {},\n    currentVersion = {},\n    ...restFilter\n  } = filter;\n  const filterTransformed = {\n    ...restFilter,\n    ...(!isEmpty(productLine) ? {\n      'productLine.id': get(productLine, 'id')\n    } : {}),\n    ...(!isEmpty(currentVersion.currentVersion) ? {\n      'currentVersion.currentVersion': parseInt(get(currentVersion, 'currentVersion'))\n    } : {}),\n    ...(!isEmpty(currentVersion.tags) ? {\n      'inList currentVersion.tags': [{\n        id: get(currentVersion, 'tags.id')\n      }]\n    } : {})\n  };\n  const transformSort = get(sort, 'field') === 'currentVersion.tags' ? {\n    ...sort,\n    field: 'currentVersion.tags.description'\n  } : sort;\n  return {\n    filter: filterTransformed,\n    sort: {\n      ...transformSort\n    },\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities | helper.keyColumn: keyColumn / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/product',\n  nestedEntities,\n  keyColumn\n}\n- GET_MANY (src/srcProject/layout/administration/modules/products/provider/provider.js#L127) -> v2/generic/all/product | request: helper.nestedEntities: nestedEntities | helper.keyColumn: keyColumn / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/product',\n  nestedEntities,\n  keyColumn\n}\n- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/products/provider/provider.js#L85) -> v2/generic/all/product | request: prepareParams: params => {\n  const {\n    filter = {},\n    sort = {},\n    ...restParams\n  } = params;\n  const {\n    productLine = {},\n    currentVersion = {},\n    status,\n    ...restFilter\n  } = filter;\n  const filterTransformed = {\n    ...(status ? {\n      ...omit(restFilter, ['not-inList status']),\n      status\n    } : restFilter),\n    ...(!isEmpty(productLine) ? {\n      'productLine.id': get(productLine, 'id')\n    } : {}),\n    ...(!isEmpty(currentVersion.currentVersion) ? {\n      'currentVersion.currentVersion': parseInt(get(currentVersion, 'currentVersion'))\n    } : {}),\n    ...(!isEmpty(currentVersion.tags) ? {\n      'inList currentVersion.tags': [{\n        id: get(currentVersion, 'tags.id')\n      }]\n    } : {})\n  };\n  const transformSort = get(sort, 'field') === 'currentVersion.tags' ? {\n    ...sort,\n    field: 'currentVersion.tags.description'\n  } : sort;\n  return {\n    filter: filterTransformed,\n    sort: {\n      ...transformSort\n    },\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities | helper.keyColumn: keyColumn / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/product',\n  nestedEntities,\n  keyColumn\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/products/provider/provider.js#L135) -> v2/generic/all/product | request: helper.nestedEntities: nestedEntities | helper.keyColumn: keyColumn / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/product',\n  nestedEntities,\n  keyColumn\n}\n- GET_LIST (src/srcProject/layout/catalog/modules/products/provider/provider.js#L101) -> v2/generic/all/product | request: prepareParams: params => {\n  const {\n    filter = {},\n    sort = {},\n    ...restParams\n  } = params;\n  const {\n    productLine = {},\n    currentVersion = {},\n    ...restFilter\n  } = filter;\n  const filterTransformed = {\n    ...restFilter,\n    ...(!isEmpty(productLine) ? {\n      'productLine.id': get(productLine, 'id')\n    } : {}),\n    ...(!isEmpty(currentVersion.currentVersion) ? {\n      'currentVersion.currentVersion': parseInt(get(currentVersion, 'currentVersion'))\n    } : {}),\n    ...(!isEmpty(currentVersion.tags) ? {\n      'inList currentVersion.tags': {\n        id: get(currentVersion, 'tags.id')\n      }\n    } : {}),\n    ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n      'productLine.seller.code': ENGIE_MYPOWER_seller\n    } : {}),\n    ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n      'productLine.seller.code': ENGIE_EKKO_seller\n    } : {})\n  };\n  const transformSort = get(sort, 'field') === 'currentVersion.tags' ? {\n    ...sort,\n    field: 'currentVersion.tags.description'\n  } : get(sort, 'field') === 'medias' ? {\n    ...sort,\n    field: 'medias.mediaName'\n  } : sort;\n  return {\n    filter: filterTransformed,\n    sort: {\n      ...transformSort\n    },\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities | helper.keyColumn: keyColumn / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/product',\n  nestedEntities,\n  keyColumn\n}\n- GET_MANY (src/srcProject/layout/catalog/modules/products/provider/provider.js#L152) -> v2/generic/all/product | request: params: {\n  limit: 999999\n} | helper.nestedEntities: nestedEntities | helper.keyColumn: keyColumn / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/product',\n  nestedEntities,\n  keyColumn\n}\n- GET_LIST (src/srcProject/layout/CPQ-marketing-manager/modules/product-models/provider/provider.js#L82) -> v2/generic/all/product | request: prepareParams: params => {\n  const {\n    filter = {},\n    sort = {},\n    ...restParams\n  } = params;\n  const {\n    productLine = {},\n    currentVersion = {},\n    ...restFilter\n  } = filter;\n  const filterTransformed = {\n    ...restFilter,\n    ...(!isEmpty(productLine) ? {\n      'productLine.id': get(productLine, 'id')\n    } : {}),\n    ...(!isEmpty(currentVersion.currentVersion) ? {\n      'currentVersion.currentVersion': parseInt(get(currentVersion, 'currentVersion'))\n    } : {}),\n    ...(!isEmpty(currentVersion.tags) ? {\n      'inList currentVersion.tags': {\n        id: get(currentVersion, 'tags.id')\n      }\n    } : {}),\n    ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n      'productLine.seller.code': ENGIE_MYPOWER_seller\n    } : {}),\n    ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n      'productLine.seller.code': ENGIE_EKKO_seller\n    } : {})\n  };\n  const transformSort = get(sort, 'field') === 'currentVersion.tags' ? {\n    ...sort,\n    field: 'currentVersion.tags.description'\n  } : sort;\n  return {\n    filter: {\n      ...filterTransformed,\n      isModel: true,\n      status: 'ACTIVE'\n    },\n    sort: {\n      ...transformSort\n    },\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities | helper.keyColumn: 'id' / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/product',\n  nestedEntities,\n  keyColumn: 'id'\n}\n- GET_LIST (src/srcProject/layout/CPQ-marketing-manager/modules/products/provider/provider.js#L82) -> v2/generic/all/product | request: prepareParams: params => {\n  const {\n    filter = {},\n    sort = {},\n    ...restParams\n  } = params;\n  const {\n    productLine = {},\n    currentVersion = {},\n    ...restFilter\n  } = filter;\n  const filterTransformed = {\n    ...restFilter,\n    ...(!isEmpty(productLine) ? {\n      'productLine.id': get(productLine, 'id')\n    } : {}),\n    ...(!isEmpty(currentVersion.currentVersion) ? {\n      'currentVersion.currentVersion': parseInt(get(currentVersion, 'currentVersion'))\n    } : {}),\n    ...(!isEmpty(currentVersion.tags) ? {\n      'inList currentVersion.tags': {\n        id: get(currentVersion, 'tags.id')\n      }\n    } : {}),\n    ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n      'productLine.seller.code': ENGIE_MYPOWER_seller\n    } : {}),\n    ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n      'productLine.seller.code': ENGIE_EKKO_seller\n    } : {})\n  };\n  const transformSort = get(sort, 'field') === 'currentVersion.tags' ? {\n    ...sort,\n    field: 'currentVersion.tags.description'\n  } : sort;\n  return {\n    filter: {\n      ...filterTransformed\n    },\n    sort: {\n      ...transformSort\n    },\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/product',\n  nestedEntities,\n  keyColumn: 'code'\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "status": {
                                "type": "string"
                              },
                              "productLine": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  }
                                }
                              },
                              "currentVersion": {
                                "type": "object",
                                "properties": {
                                  "currentVersion": {
                                    "type": "number"
                                  },
                                  "tags": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "medias": {
                                "type": "string"
                              },
                              "auditable": {
                                "type": "object",
                                "properties": {
                                  "created": {
                                    "type": "string",
                                    "format": "date"
                                  }
                                }
                              },
                              "name": {
                                "type": "string"
                              },
                              "reference": {
                                "type": "string"
                              },
                              "isModel": {
                                "type": "boolean"
                              },
                              "instanceCode": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "productLine": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  }
                                }
                              },
                              "medias": {
                                "type": "string"
                              },
                              "currentVersion": {
                                "type": "object",
                                "properties": {
                                  "currentVersion": {
                                    "type": "number"
                                  },
                                  "tags": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "reference": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "status": {
                                "type": "string"
                              },
                              "productLine": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  }
                                }
                              },
                              "currentVersion": {
                                "type": "object",
                                "properties": {
                                  "currentVersion": {
                                    "type": "number"
                                  },
                                  "tags": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "medias": {
                                "type": "string"
                              },
                              "reference": {
                                "type": "string"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    filter = {},\n    sort = {},\n    ...restParams\n  } = params;\n  const {\n    productLine = {},\n    currentVersion = {},\n    ...restFilter\n  } = filter;\n  const filterTransformed = {\n    ...restFilter,\n    ...(!isEmpty(productLine) ? {\n      'productLine.id': get(productLine, 'id')\n    } : {}),\n    ...(!isEmpty(currentVersion.currentVersion) ? {\n      'currentVersion.currentVersion': parseInt(get(currentVersion, 'currentVersion'))\n    } : {}),\n    ...(!isEmpty(currentVersion.tags) ? {\n      'inList currentVersion.tags': [{\n        id: get(currentVersion, 'tags.id')\n      }]\n    } : {})\n  };\n  const transformSort = get(sort, 'field') === 'currentVersion.tags' ? {\n    ...sort,\n    field: 'currentVersion.tags.description'\n  } : sort;\n  return {\n    filter: filterTransformed,\n    sort: {\n      ...transformSort\n    },\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities\nhelper.keyColumn: keyColumn\nprepareParams: params => {\n  const {\n    filter = {},\n    sort = {},\n    ...restParams\n  } = params;\n  const {\n    productLine = {},\n    currentVersion = {},\n    status,\n    ...restFilter\n  } = filter;\n  const filterTransformed = {\n    ...(status ? {\n      ...omit(restFilter, ['not-inList status']),\n      status\n    } : restFilter),\n    ...(!isEmpty(productLine) ? {\n      'productLine.id': get(productLine, 'id')\n    } : {}),\n    ...(!isEmpty(currentVersion.currentVersion) ? {\n      'currentVersion.currentVersion': parseInt(get(currentVersion, 'currentVersion'))\n    } : {}),\n    ...(!isEmpty(currentVersion.tags) ? {\n      'inList currentVersion.tags': [{\n        id: get(currentVersion, 'tags.id')\n      }]\n    } : {})\n  };\n  const transformSort = get(sort, 'field') === 'currentVersion.tags' ? {\n    ...sort,\n    field: 'currentVersion.tags.description'\n  } : sort;\n  return {\n    filter: filterTransformed,\n    sort: {\n      ...transformSort\n    },\n    ...restParams\n  };\n}\nprepareParams: params => {\n  const {\n    filter = {},\n    sort = {},\n    ...restParams\n  } = params;\n  const {\n    productLine = {},\n    currentVersion = {},\n    ...restFilter\n  } = filter;\n  const filterTransformed = {\n    ...restFilter,\n    ...(!isEmpty(productLine) ? {\n      'productLine.id': get(productLine, 'id')\n    } : {}),\n    ...(!isEmpty(currentVersion.currentVersion) ? {\n      'currentVersion.currentVersion': parseInt(get(currentVersion, 'currentVersion'))\n    } : {}),\n    ...(!isEmpty(currentVersion.tags) ? {\n      'inList currentVersion.tags': {\n        id: get(currentVersion, 'tags.id')\n      }\n    } : {}),\n    ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n      'productLine.seller.code': ENGIE_MYPOWER_seller\n    } : {}),\n    ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n      'productLine.seller.code': ENGIE_EKKO_seller\n    } : {})\n  };\n  const transformSort = get(sort, 'field') === 'currentVersion.tags' ? {\n    ...sort,\n    field: 'currentVersion.tags.description'\n  } : get(sort, 'field') === 'medias' ? {\n    ...sort,\n    field: 'medias.mediaName'\n  } : sort;\n  return {\n    filter: filterTransformed,\n    sort: {\n      ...transformSort\n    },\n    ...restParams\n  };\n}\nparams: {\n  limit: 999999\n}\nprepareParams: params => {\n  const {\n    filter = {},\n    sort = {},\n    ...restParams\n  } = params;\n  const {\n    productLine = {},\n    currentVersion = {},\n    ...restFilter\n  } = filter;\n  const filterTransformed = {\n    ...restFilter,\n    ...(!isEmpty(productLine) ? {\n      'productLine.id': get(productLine, 'id')\n    } : {}),\n    ...(!isEmpty(currentVersion.currentVersion) ? {\n      'currentVersion.currentVersion': parseInt(get(currentVersion, 'currentVersion'))\n    } : {}),\n    ...(!isEmpty(currentVersion.tags) ? {\n      'inList currentVersion.tags': {\n        id: get(currentVersion, 'tags.id')\n      }\n    } : {}),\n    ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n      'productLine.seller.code': ENGIE_MYPOWER_seller\n    } : {}),\n    ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n      'productLine.seller.code': ENGIE_EKKO_seller\n    } : {})\n  };\n  const transformSort = get(sort, 'field') === 'currentVersion.tags' ? {\n    ...sort,\n    field: 'currentVersion.tags.description'\n  } : sort;\n  return {\n    filter: {\n      ...filterTransformed,\n      isModel: true,\n      status: 'ACTIVE'\n    },\n    sort: {\n      ...transformSort\n    },\n    ...restParams\n  };\n}\nhelper.keyColumn: 'id'\nprepareParams: params => {\n  const {\n    filter = {},\n    sort = {},\n    ...restParams\n  } = params;\n  const {\n    productLine = {},\n    currentVersion = {},\n    ...restFilter\n  } = filter;\n  const filterTransformed = {\n    ...restFilter,\n    ...(!isEmpty(productLine) ? {\n      'productLine.id': get(productLine, 'id')\n    } : {}),\n    ...(!isEmpty(currentVersion.currentVersion) ? {\n      'currentVersion.currentVersion': parseInt(get(currentVersion, 'currentVersion'))\n    } : {}),\n    ...(!isEmpty(currentVersion.tags) ? {\n      'inList currentVersion.tags': {\n        id: get(currentVersion, 'tags.id')\n      }\n    } : {}),\n    ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n      'productLine.seller.code': ENGIE_MYPOWER_seller\n    } : {}),\n    ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n      'productLine.seller.code': ENGIE_EKKO_seller\n    } : {})\n  };\n  const transformSort = get(sort, 'field') === 'currentVersion.tags' ? {\n    ...sort,\n    field: 'currentVersion.tags.description'\n  } : sort;\n  return {\n    filter: {\n      ...filterTransformed\n    },\n    sort: {\n      ...transformSort\n    },\n    ...restParams\n  };\n}\nhelper.keyColumn: 'code'",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": "integer",
                    "example": 999999
                  }
                }
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/product',\n  nestedEntities,\n  keyColumn\n}",
          "helperArgs: {\n  url: 'v2/generic/all/product',\n  nestedEntities,\n  keyColumn: 'id'\n}",
          "helperArgs: {\n  url: 'v2/generic/all/product',\n  nestedEntities,\n  keyColumn: 'code'\n}"
        ]
      }
    },
    "/catalog/products/": {
      "post": {
        "tags": [
          "B2B-customer-care/products",
          "administration/products",
          "catalog/products"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/administration/modules/products/provider/provider.js#L136) -> catalog/products/ | request: helper.method: POST / response: helper.responseContainerId: id / info: keyColumn: keyColumn | helper: getCreateProvider | helperArgs: {\n  url: 'catalog/products/',\n  method: 'POST',\n  responseContainerId: 'id'\n}\n- CREATE (src/srcProject/layout/B2B-customer-care/modules/products/provider/provider.js#L144) -> catalog/products/ | request: helper.method: POST / response: helper.responseContainerId: id / info: keyColumn: keyColumn | helper: getCreateProvider | helperArgs: {\n  url: 'catalog/products/',\n  method: 'POST',\n  responseContainerId: 'id'\n}\n- CREATE (src/srcProject/layout/catalog/modules/products/provider/provider.js#L194) -> catalog/products/ | request: helper.method: POST / response: helper.responseContainerId: id / info: keyColumn: keyColumn | helper: getCreateProvider | helperArgs: {\n  url: 'catalog/products/',\n  method: 'POST',\n  responseContainerId: 'id'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainerId: id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "productLine": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "currentVersion": {
                          "type": "object",
                          "properties": {
                            "currentVersion": {
                              "type": "number"
                            },
                            "tags": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "medias": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "name": {
                          "type": "string"
                        },
                        "reference": {
                          "type": "string"
                        },
                        "isModel": {
                          "type": "boolean"
                        },
                        "instanceCode": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'catalog/products/',\n  method: 'POST',\n  responseContainerId: 'id'\n}"
        ]
      },
      "delete": {
        "tags": [
          "B2B-customer-care/products",
          "administration/products",
          "catalog/products"
        ],
        "summary": "Used in 6 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/administration/modules/products/provider/provider.js#L158) -> catalog/products/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'catalog/products/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/administration/modules/products/provider/provider.js#L163) -> catalog/products/ | request: helper.method: DELETE | helper.showErrorFromContainer: true / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'catalog/products/',\n  method: 'DELETE',\n  showErrorFromContainer: true\n}\n- DELETE (src/srcProject/layout/B2B-customer-care/modules/products/provider/provider.js#L196) -> catalog/products/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'catalog/products/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/products/provider/provider.js#L201) -> catalog/products/ | request: helper.method: DELETE | helper.showErrorFromContainer: true / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'catalog/products/',\n  method: 'DELETE',\n  showErrorFromContainer: true\n}\n- DELETE (src/srcProject/layout/catalog/modules/products/provider/provider.js#L217) -> catalog/products/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'catalog/products/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/catalog/modules/products/provider/provider.js#L222) -> catalog/products/ | request: helper.method: DELETE | helper.showErrorFromContainer: true / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'catalog/products/',\n  method: 'DELETE',\n  showErrorFromContainer: true\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "productLine": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "currentVersion": {
                      "type": "object",
                      "properties": {
                        "currentVersion": {
                          "type": "number"
                        },
                        "tags": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "medias": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "name": {
                      "type": "string"
                    },
                    "reference": {
                      "type": "string"
                    },
                    "isModel": {
                      "type": "boolean"
                    },
                    "instanceCode": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE\nhelper.showErrorFromContainer: true",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE\nhelper.showErrorFromContainer: true"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'catalog/products/',\n  method: 'DELETE'\n}",
          "helperArgs: {\n  url: 'catalog/products/',\n  method: 'DELETE',\n  showErrorFromContainer: true\n}"
        ]
      }
    },
    "/catalog/products/{codeProduct}/status/{toStatus}": {
      "put": {
        "tags": [
          "B2B-customer-care/products",
          "administration/products",
          "catalog/products"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- UPDATE_STATUS (src/srcProject/layout/administration/modules/products/provider/provider.js#L171) -> catalog/products/:codeProduct/status/:toStatus | request: options: {\n  method: 'PUT'\n}\n- UPDATE_STATUS (src/srcProject/layout/B2B-customer-care/modules/products/provider/provider.js#L209) -> catalog/products/:codeProduct/status/:toStatus | request: options: {\n  method: 'PUT'\n}\n- UPDATE_STATUS (src/srcProject/layout/catalog/modules/products/provider/provider.js#L230) -> catalog/products/:codeProduct/status/:toStatus | request: options: {\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "productLine": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "currentVersion": {
                      "type": "object",
                      "properties": {
                        "currentVersion": {
                          "type": "number"
                        },
                        "tags": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "medias": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "name": {
                      "type": "string"
                    },
                    "reference": {
                      "type": "string"
                    },
                    "isModel": {
                      "type": "boolean"
                    },
                    "instanceCode": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        }
      }
    },
    "/catalog/products/productVersion": {
      "get": {
        "tags": [
          "B2B-customer-care/products",
          "administration/products",
          "catalog/products"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- CREATE_VERSION (src/srcProject/layout/administration/modules/products/provider/provider.js#L177) -> catalog/products/productVersion | request: prepareParams: params => {\n  const {\n    data = {},\n    ...restParams\n  } = params;\n  const {\n    productVersions = [],\n    ...restData\n  } = data;\n  const productVersionsArray = Array.isArray(productVersions) ? productVersions : [];\n  const currentVersionBiggest = getMaxCurrentVersion(productVersionsArray);\n  const nextVersion = !isNil(currentVersionBiggest) ? currentVersionBiggest + 1 : 0;\n  const dataTransformed = {\n    ...restData,\n    currentVersion: nextVersion\n  };\n  return {\n    data: dataTransformed,\n    ...restParams\n  };\n}\n- CREATE_VERSION (src/srcProject/layout/B2B-customer-care/modules/products/provider/provider.js#L215) -> catalog/products/productVersion | request: prepareParams: params => {\n  const {\n    data = {},\n    ...restParams\n  } = params;\n  const {\n    productVersions = [],\n    ...restData\n  } = data;\n  const productVersionsArray = Array.isArray(productVersions) ? productVersions : [];\n  const currentVersionBiggest = getMaxCurrentVersion(productVersionsArray);\n  const nextVersion = !isNil(currentVersionBiggest) ? currentVersionBiggest + 1 : 0;\n  const dataTransformed = {\n    ...restData,\n    currentVersion: nextVersion\n  };\n  return {\n    data: dataTransformed,\n    ...restParams\n  };\n}\n- CREATE_VERSION (src/srcProject/layout/catalog/modules/products/provider/provider.js#L236) -> catalog/products/productVersion | request: prepareParams: params => {\n  const {\n    data = {},\n    ...restParams\n  } = params;\n  const {\n    productVersions = [],\n    ...restData\n  } = data;\n  const productVersionsArray = Array.isArray(productVersions) ? productVersions : [];\n  const currentVersionBiggest = getMaxCurrentVersion(productVersionsArray);\n  const nextVersion = !isNil(currentVersionBiggest) ? currentVersionBiggest + 1 : 0;\n  const dataTransformed = {\n    ...restData,\n    currentVersion: nextVersion\n  };\n  return {\n    data: dataTransformed,\n    ...restParams\n  };\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "productLine": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "currentVersion": {
                      "type": "object",
                      "properties": {
                        "currentVersion": {
                          "type": "number"
                        },
                        "tags": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "medias": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "name": {
                      "type": "string"
                    },
                    "reference": {
                      "type": "string"
                    },
                    "isModel": {
                      "type": "boolean"
                    },
                    "instanceCode": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "x-request-hints": [
          "prepareParams: params => {\n  const {\n    data = {},\n    ...restParams\n  } = params;\n  const {\n    productVersions = [],\n    ...restData\n  } = data;\n  const productVersionsArray = Array.isArray(productVersions) ? productVersions : [];\n  const currentVersionBiggest = getMaxCurrentVersion(productVersionsArray);\n  const nextVersion = !isNil(currentVersionBiggest) ? currentVersionBiggest + 1 : 0;\n  const dataTransformed = {\n    ...restData,\n    currentVersion: nextVersion\n  };\n  return {\n    data: dataTransformed,\n    ...restParams\n  };\n}"
        ]
      }
    },
    "/catalog/products/{codeProduct}/productVersions/{codeVersion}": {
      "delete": {
        "tags": [
          "B2B-customer-care/products",
          "administration/products",
          "catalog/products"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- DELETE_VERSION (src/srcProject/layout/administration/modules/products/provider/provider.js#L204) -> catalog/products/:codeProduct/productVersions/:codeVersion | request: method: DELETE\n- DELETE_VERSION (src/srcProject/layout/B2B-customer-care/modules/products/provider/provider.js#L242) -> catalog/products/:codeProduct/productVersions/:codeVersion | request: method: DELETE\n- DELETE_VERSION (src/srcProject/layout/catalog/modules/products/provider/provider.js#L263) -> catalog/products/:codeProduct/productVersions/:codeVersion | request: method: DELETE",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "productLine": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "currentVersion": {
                      "type": "object",
                      "properties": {
                        "currentVersion": {
                          "type": "number"
                        },
                        "tags": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "medias": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "name": {
                      "type": "string"
                    },
                    "reference": {
                      "type": "string"
                    },
                    "isModel": {
                      "type": "boolean"
                    },
                    "instanceCode": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "method: DELETE"
              }
            }
          }
        }
      }
    },
    "/catalog/products/{codeProduct}/productVersions/{codeVersion}/duplication": {
      "get": {
        "tags": [
          "B2B-customer-care/products",
          "administration/products",
          "catalog/products"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- DUPLICATE_VERSION (src/srcProject/layout/administration/modules/products/provider/provider.js#L208) -> catalog/products/:codeProduct/productVersions/:codeVersion/duplication\n- DUPLICATE_VERSION (src/srcProject/layout/B2B-customer-care/modules/products/provider/provider.js#L246) -> catalog/products/:codeProduct/productVersions/:codeVersion/duplication\n- DUPLICATE_VERSION (src/srcProject/layout/catalog/modules/products/provider/provider.js#L267) -> catalog/products/:codeProduct/productVersions/:codeVersion/duplication",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "productLine": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "currentVersion": {
                      "type": "object",
                      "properties": {
                        "currentVersion": {
                          "type": "number"
                        },
                        "tags": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "medias": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "name": {
                      "type": "string"
                    },
                    "reference": {
                      "type": "string"
                    },
                    "isModel": {
                      "type": "boolean"
                    },
                    "instanceCode": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/catalog/products/{codeProduct}/productVersions/{codeVersion}/status/{versionStatus}": {
      "put": {
        "tags": [
          "B2B-customer-care/products",
          "administration/products",
          "catalog/products"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- UPDATE_VERSION_STATUS (src/srcProject/layout/administration/modules/products/provider/provider.js#L211) -> catalog/products/:codeProduct/productVersions/:codeVersion/status/:versionStatus | request: options: {\n  method: 'PUT'\n}\n- UPDATE_VERSION_STATUS (src/srcProject/layout/B2B-customer-care/modules/products/provider/provider.js#L249) -> catalog/products/:codeProduct/productVersions/:codeVersion/status/:versionStatus | request: options: {\n  method: 'PUT'\n}\n- UPDATE_VERSION_STATUS (src/srcProject/layout/catalog/modules/products/provider/provider.js#L270) -> catalog/products/:codeProduct/productVersions/:codeVersion/status/:versionStatus | request: options: {\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "productLine": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "currentVersion": {
                      "type": "object",
                      "properties": {
                        "currentVersion": {
                          "type": "number"
                        },
                        "tags": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "medias": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "name": {
                      "type": "string"
                    },
                    "reference": {
                      "type": "string"
                    },
                    "isModel": {
                      "type": "boolean"
                    },
                    "instanceCode": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/generic/all/tax": {
      "post": {
        "tags": [
          "B2B-customer-care/tax",
          "administration/taxes"
        ],
        "summary": "Used in 4 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/administration/modules/taxes/provider/provider.js#L16) -> v2/generic/all/tax | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/tax',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/administration/modules/taxes/provider/provider.js#L23) -> v2/generic/all/tax | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/tax',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/tax/provider/provider.js#L7) -> v2/generic/all/tax | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/tax',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/tax/provider/provider.js#L21) -> v2/generic/all/tax | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/tax',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "percent": {
                            "type": "string"
                          },
                          "accountingCode": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              }
                            }
                          },
                          "composite": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "searchBar": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/tax',\n  nestedEntities\n}"
        ]
      }
    },
    "/tax/createOrUpdate": {
      "post": {
        "tags": [
          "administration/taxes"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/administration/modules/taxes/provider/provider.js#L30) -> tax/createOrUpdate | request: helper.keyColumn: keyColumn | helper.method: POST / response: helper.responseContainer: {responseContainer} | helper.responseContainerId: {responseContainerId} / info: helper: getCreateProvider | helperArgs: {\n  keyColumn,\n  url: 'tax/createOrUpdate',\n  responseContainer,\n  responseContainerId,\n  method: 'POST'\n}\n- UPDATE (src/srcProject/layout/administration/modules/taxes/provider/provider.js#L39) -> tax/createOrUpdate | request: helper.keyColumn: keyColumn | helper.method: POST / response: helper.responseContainer: {responseContainer} | helper.responseContainerId: {responseContainerId} / info: helper: getUpdateProvider | helperArgs: {\n  keyColumn,\n  url: 'tax/createOrUpdate',\n  responseContainer,\n  responseContainerId,\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: {responseContainer} | helper.responseContainerId: {responseContainerId}",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "percent": {
                      "type": "string"
                    },
                    "accountingCode": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "composite": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "searchBar": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.keyColumn: keyColumn\nhelper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.keyColumn: keyColumn\nhelper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  keyColumn,\n  url: 'tax/createOrUpdate',\n  responseContainer,\n  responseContainerId,\n  method: 'POST'\n}",
          "helper: getUpdateProvider"
        ]
      }
    },
    "/v2/generic/tax/": {
      "post": {
        "tags": [
          "B2B-customer-care/tax",
          "administration/taxes"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/administration/modules/taxes/provider/provider.js#L48) -> v2/generic/tax/ | request: helper.keyColumn: keyColumn | helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  keyColumn,\n  url: 'v2/generic/tax/',\n  nestedEntities\n}\n- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/tax/provider/provider.js#L14) -> v2/generic/tax/ | request: helper.nestedEntities: nestedEntities / info: keyColumn: keyColumn | helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/tax/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "percent": {
                      "type": "string"
                    },
                    "accountingCode": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "composite": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "searchBar": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.keyColumn: keyColumn\nhelper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.keyColumn: keyColumn\nhelper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  keyColumn,\n  url: 'v2/generic/tax/',\n  nestedEntities\n}",
          "keyColumn: keyColumn",
          "helperArgs: {\n  url: 'v2/generic/tax/',\n  nestedEntities\n}"
        ]
      }
    },
    "/v1/taxes/": {
      "delete": {
        "tags": [
          "administration/taxes"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/administration/modules/taxes/provider/provider.js#L51) -> v1/taxes/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v1/taxes/',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "percent": {
                      "type": "string"
                    },
                    "accountingCode": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "composite": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "searchBar": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'v1/taxes/',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/generic/all/tradingCurrency": {
      "post": {
        "tags": [
          "administration/trading-currencies",
          "customer-care/trading-currencies",
          "finance/trading-currencies"
        ],
        "summary": "Used in 6 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/administration/modules/trading-currencies/provider.js#L76) -> v2/generic/all/tradingCurrency | request: prepareParams: prepareParams | helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/tradingCurrency',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/administration/modules/trading-currencies/provider.js#L85) -> v2/generic/all/tradingCurrency | request: prepareParams: prepareParams | helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/tradingCurrency',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/customer-care/modules/trading-currencies/provider.js#L52) -> v2/generic/all/tradingCurrency | request: prepareParams: prepareParams | helper.nestedEntities: nestedEntities | helper.genericFields: genericFields / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/tradingCurrency',\n  nestedEntities,\n  genericFields\n}\n- GET_MANY (src/srcProject/layout/customer-care/modules/trading-currencies/provider.js#L61) -> v2/generic/all/tradingCurrency | request: prepareParams: prepareParams | helper.nestedEntities: nestedEntities | helper.genericFields: genericFields | helper.keyColumn: 'currencyCode' / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/tradingCurrency',\n  nestedEntities,\n  genericFields,\n  keyColumn: 'currencyCode'\n}\n- GET_LIST (src/srcProject/layout/finance/modules/trading-currencies/provider.js#L51) -> v2/generic/all/tradingCurrency | request: prepareParams: prepareParams | helper.nestedEntities: nestedEntities | helper.genericFields: genericFields / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/tradingCurrency',\n  nestedEntities,\n  genericFields\n}\n- GET_MANY (src/srcProject/layout/finance/modules/trading-currencies/provider.js#L60) -> v2/generic/all/tradingCurrency | request: prepareParams: prepareParams | helper.nestedEntities: nestedEntities | helper.genericFields: genericFields | helper.keyColumn: 'currencyCode' / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/tradingCurrency',\n  nestedEntities,\n  genericFields,\n  keyColumn: 'currencyCode'\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "prepareParams: prepareParams\nhelper.nestedEntities: nestedEntities\nhelper.genericFields: genericFields\nhelper.keyColumn: 'currencyCode'",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: prepareParams\nhelper.nestedEntities: nestedEntities\nhelper.genericFields: genericFields\nhelper.keyColumn: 'currencyCode'"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/tradingCurrency',\n  nestedEntities\n}",
          "helperArgs: {\n  url: 'v2/generic/all/tradingCurrency',\n  nestedEntities,\n  genericFields\n}",
          "helperArgs: {\n  url: 'v2/generic/all/tradingCurrency',\n  nestedEntities,\n  genericFields,\n  keyColumn: 'currencyCode'\n}"
        ]
      }
    },
    "/v2/generic/tradingCurrency/": {
      "post": {
        "tags": [
          "administration/trading-currencies"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/administration/modules/trading-currencies/provider.js#L94) -> v2/generic/tradingCurrency/ | request: helper.nestedEntities: nestedEntities / info: keyColumn: keyColumn | helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/tradingCurrency/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/tradingCurrency/',\n  nestedEntities\n}"
        ]
      }
    },
    "/currency": {
      "post": {
        "tags": [
          "administration/trading-currencies"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/administration/modules/trading-currencies/provider.js#L101) -> currency | request: helper.method: POST / response: helper.responseContainerId: entityId / info: keyColumn: keyColumn | helper: getCreateProvider | helperArgs: {\n  url: 'currency',\n  method: 'POST',\n  responseContainerId: 'entityId'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainerId: entityId"
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'currency',\n  method: 'POST',\n  responseContainerId: 'entityId'\n}"
        ]
      },
      "put": {
        "tags": [
          "administration/trading-currencies"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/administration/modules/trading-currencies/provider.js#L109) -> currency | request: helper.method: PUT / info: keyColumn: keyColumn | helper: getUpdateProvider | helperArgs: {\n  url: 'currency',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'currency',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/currency/{code}/disable": {
      "post": {
        "tags": [
          "administration/trading-currencies"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- ARCHIVE (src/srcProject/layout/administration/modules/trading-currencies/provider.js#L113) -> currency/:code/disable | request: helper.method: POST / info: excludeProperties: ['code'] | keyColumn: keyColumn | helper: getUpdateProvider | helperArgs: {\n  url: 'currency/:code/disable',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "excludeProperties: ['code']",
          "keyColumn: keyColumn",
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'currency/:code/disable',\n  method: 'POST'\n}"
        ]
      }
    },
    "/currency/{code}/enable": {
      "post": {
        "tags": [
          "administration/trading-currencies"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- ENABLE (src/srcProject/layout/administration/modules/trading-currencies/provider.js#L121) -> currency/:code/enable | request: helper.method: POST / info: excludeProperties: ['code'] | keyColumn: keyColumn | helper: getUpdateProvider | helperArgs: {\n  url: 'currency/:code/enable',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "excludeProperties: ['code']",
          "keyColumn: keyColumn",
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'currency/:code/enable',\n  method: 'POST'\n}"
        ]
      }
    },
    "/v2/generic/all/accountEntity": {
      "post": {
        "tags": [
          "B2B-customer-care/account-entity"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/account-entity/provider/provider.js#L59) -> v2/generic/all/accountEntity | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/accountEntity',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "status": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "contractDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "auditable": {
                            "type": "object",
                            "properties": {
                              "created": {
                                "type": "string",
                                "format": "date"
                              }
                            }
                          },
                          "seller": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              }
                            }
                          },
                          "customer": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              }
                            }
                          },
                          "customerAccount": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              }
                            }
                          },
                          "billingAccount": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              }
                            }
                          },
                          "beginDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "endDate": {
                            "type": "string",
                            "format": "date"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/accountEntity',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/all/contract": {
      "post": {
        "tags": [
          "B2B-customer-care/account-entity",
          "B2B-customer-care/contracts"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/account-entity/provider/provider.js#L80) -> v2/generic/all/contract | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/contract',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/contracts/provider/provider.js#L55) -> v2/generic/all/contract | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    ...restFilter\n  } = filter;\n  const transformDateFilters = key => has(filter, key) && {\n    [key]: getGenericFormatDate(get(filter, key))\n  };\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      ...transformDateFilters('fromRangeInclusive beginDate'),\n      ...transformDateFilters('toRangeInclusive endDate')\n    },\n    ...restParams\n  };\n  return transformedFilters;\n} | helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/contract',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/contracts/provider/provider.js#L76) -> v2/generic/all/contract | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/contract',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data | transformResponse: transformResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "status": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "contractDate": {
                                "type": "string",
                                "format": "date"
                              },
                              "auditable": {
                                "type": "object",
                                "properties": {
                                  "created": {
                                    "type": "string",
                                    "format": "date"
                                  }
                                }
                              },
                              "seller": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  }
                                }
                              },
                              "customer": {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string"
                                  }
                                }
                              },
                              "customerAccount": {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string"
                                  }
                                }
                              },
                              "billingAccount": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  }
                                }
                              },
                              "beginDate": {
                                "type": "string",
                                "format": "date"
                              },
                              "endDate": {
                                "type": "string",
                                "format": "date"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "status": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "contractDate": {
                                "type": "string",
                                "format": "date"
                              },
                              "auditable": {
                                "type": "object",
                                "properties": {
                                  "created": {
                                    "type": "string",
                                    "format": "date"
                                  }
                                }
                              },
                              "level": {
                                "type": "string"
                              },
                              "holder": {
                                "type": "string"
                              },
                              "beginDate": {
                                "type": "string",
                                "format": "date"
                              },
                              "endDate": {
                                "type": "string",
                                "format": "date"
                              },
                              "seller": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  }
                                }
                              },
                              "customer": {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string"
                                  }
                                }
                              },
                              "customerAccount": {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string"
                                  }
                                }
                              },
                              "billingAccount": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities\nprepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    ...restFilter\n  } = filter;\n  const transformDateFilters = key => has(filter, key) && {\n    [key]: getGenericFormatDate(get(filter, key))\n  };\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      ...transformDateFilters('fromRangeInclusive beginDate'),\n      ...transformDateFilters('toRangeInclusive endDate')\n    },\n    ...restParams\n  };\n  return transformedFilters;\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities\nprepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    ...restFilter\n  } = filter;\n  const transformDateFilters = key => has(filter, key) && {\n    [key]: getGenericFormatDate(get(filter, key))\n  };\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      ...transformDateFilters('fromRangeInclusive beginDate'),\n      ...transformDateFilters('toRangeInclusive endDate')\n    },\n    ...restParams\n  };\n  return transformedFilters;\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/contract',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/contract/": {
      "post": {
        "tags": [
          "B2B-customer-care/account-entity",
          "B2B-customer-care/contracts"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/account-entity/provider/provider.js#L84) -> v2/generic/contract/ | request: helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/contract/',\n  nestedEntities\n}\n- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/contracts/provider/provider.js#L81) -> v2/generic/contract/ | request: helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/contract/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "contractDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "seller": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "customer": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "customerAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "billingAccount": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "beginDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "endDate": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "contractDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "level": {
                          "type": "string"
                        },
                        "holder": {
                          "type": "string"
                        },
                        "beginDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "endDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "seller": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "customer": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "customerAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "billingAccount": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/contract/',\n  nestedEntities\n}"
        ]
      }
    },
    "/cpq/contracts": {
      "post": {
        "tags": [
          "B2B-customer-care/account-entity",
          "B2B-customer-care/contracts"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/account-entity/provider/provider.js#L88) -> cpq/contracts | request: helper.method: POST / info: helper: getCreateProvider | helperArgs: {\n  url: 'cpq/contracts',\n  method: 'POST'\n}\n- CREATE (src/srcProject/layout/B2B-customer-care/modules/contracts/provider/provider.js#L85) -> cpq/contracts | request: helper.method: POST / info: helper: getCreateProvider | helperArgs: {\n  url: 'cpq/contracts',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "contractDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "seller": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "customer": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "customerAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "billingAccount": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "beginDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "endDate": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "contractDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "level": {
                          "type": "string"
                        },
                        "holder": {
                          "type": "string"
                        },
                        "beginDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "endDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "seller": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "customer": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "customerAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "billingAccount": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'cpq/contracts',\n  method: 'POST'\n}"
        ]
      },
      "put": {
        "tags": [
          "B2B-customer-care/account-entity",
          "B2B-customer-care/contracts"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/B2B-customer-care/modules/account-entity/provider/provider.js#L95) -> cpq/contracts | request: helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  url: 'cpq/contracts',\n  method: 'PUT'\n}\n- UPDATE (src/srcProject/layout/B2B-customer-care/modules/contracts/provider/provider.js#L92) -> cpq/contracts | request: helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  url: 'cpq/contracts',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "contractDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "seller": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "customer": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "customerAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "billingAccount": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "beginDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "endDate": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "contractDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "level": {
                          "type": "string"
                        },
                        "holder": {
                          "type": "string"
                        },
                        "beginDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "endDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "seller": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "customer": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "customerAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "billingAccount": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'cpq/contracts',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/v2/generic/contract": {
      "delete": {
        "tags": [
          "B2B-customer-care/account-entity",
          "B2B-customer-care/contracts"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/B2B-customer-care/modules/account-entity/provider/provider.js#L102) -> v2/generic/contract | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/generic/contract',\n  method: 'DELETE'\n}\n- DELETE (src/srcProject/layout/B2B-customer-care/modules/contracts/provider/provider.js#L99) -> v2/generic/contract | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/generic/contract',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "contractDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "seller": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "customer": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "customerAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "billingAccount": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "beginDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "endDate": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "contractDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "level": {
                          "type": "string"
                        },
                        "holder": {
                          "type": "string"
                        },
                        "beginDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "endDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "seller": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "customer": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "customerAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "billingAccount": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'v2/generic/contract',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/cpq/contracts/": {
      "delete": {
        "tags": [
          "B2B-customer-care/account-entity",
          "B2B-customer-care/contracts"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/account-entity/provider/provider.js#L109) -> cpq/contracts/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'cpq/contracts/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/contracts/provider/provider.js#L106) -> cpq/contracts/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'cpq/contracts/',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "contractDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "seller": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "customer": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "customerAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "billingAccount": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "beginDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "endDate": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "contractDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "level": {
                          "type": "string"
                        },
                        "holder": {
                          "type": "string"
                        },
                        "beginDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "endDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "seller": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "customer": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "customerAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "billingAccount": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'cpq/contracts/',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/cpq/contracts/{code}/status/{toStatus}": {
      "put": {
        "tags": [
          "B2B-customer-care/account-entity",
          "B2B-customer-care/contracts"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- UPDATE_STATUS (src/srcProject/layout/B2B-customer-care/modules/account-entity/provider/provider.js#L116) -> cpq/contracts/:code/status/:toStatus | request: options: {\n  method: 'PUT'\n}\n- UPDATE_STATUS (src/srcProject/layout/B2B-customer-care/modules/contracts/provider/provider.js#L113) -> cpq/contracts/:code/status/:toStatus | request: options: {\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "contractDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "seller": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "customer": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "customerAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "billingAccount": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "beginDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "endDate": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "contractDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "level": {
                          "type": "string"
                        },
                        "holder": {
                          "type": "string"
                        },
                        "beginDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "endDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "seller": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "customer": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "customerAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "billingAccount": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/generic/all/AddressBookContact": {
      "post": {
        "tags": [
          "B2B-customer-care/address-book-contact"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/address-book-contact/provider/provider.js#L6) -> v2/generic/all/AddressBookContact | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/AddressBookContact',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/address-book-contact/provider/provider.js#L9) -> v2/generic/all/AddressBookContact | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/AddressBookContact',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/AddressBookContact',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/articleMappingLine/": {
      "post": {
        "tags": [
          "B2B-customer-care/article-from-article-mapping",
          "catalog/article-from-article-mapping"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/article-from-article-mapping/provider/provider.js#L72) -> v2/articleMappingLine/ | request: helper.method: POST / info: keyColumn: keyColumn | helper: getCreateProvider | helperArgs: {\n  url: 'v2/articleMappingLine/',\n  method: 'POST'\n}\n- CREATE (src/srcProject/layout/catalog/modules/article-from-article-mapping/provider/provider.js#L72) -> v2/articleMappingLine/ | request: helper.method: POST / info: keyColumn: keyColumn | helper: getCreateProvider | helperArgs: {\n  url: 'v2/articleMappingLine/',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/articleMappingLine/',\n  method: 'POST'\n}"
        ]
      },
      "delete": {
        "tags": [
          "B2B-customer-care/article-from-article-mapping",
          "catalog/article-from-article-mapping"
        ],
        "summary": "Used in 4 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/B2B-customer-care/modules/article-from-article-mapping/provider/provider.js#L85) -> v2/articleMappingLine/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'v2/articleMappingLine/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/article-from-article-mapping/provider/provider.js#L93) -> v2/articleMappingLine/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'v2/articleMappingLine/',\n  method: 'DELETE'\n}\n- DELETE (src/srcProject/layout/catalog/modules/article-from-article-mapping/provider/provider.js#L85) -> v2/articleMappingLine/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'v2/articleMappingLine/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/catalog/modules/article-from-article-mapping/provider/provider.js#L93) -> v2/articleMappingLine/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'v2/articleMappingLine/',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'v2/articleMappingLine/',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/articleMappingLine": {
      "put": {
        "tags": [
          "B2B-customer-care/article-from-article-mapping",
          "catalog/article-from-article-mapping"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/B2B-customer-care/modules/article-from-article-mapping/provider/provider.js#L80) -> v2/articleMappingLine | request: helper.method: PUT / info: keyColumn: keyColumn | helper: getUpdateProvider | helperArgs: {\n  url: 'v2/articleMappingLine',\n  method: 'PUT'\n}\n- UPDATE (src/srcProject/layout/catalog/modules/article-from-article-mapping/provider/provider.js#L80) -> v2/articleMappingLine | request: helper.method: PUT / info: keyColumn: keyColumn | helper: getUpdateProvider | helperArgs: {\n  url: 'v2/articleMappingLine',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'v2/articleMappingLine',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/v2/generic/all/AuditLog": {
      "post": {
        "tags": [
          "B2B-customer-care/audit-log",
          "B2B-customer-care/dunning-policies",
          "catalog/audit-log",
          "finance/audit-log",
          "finance/dunning-policies"
        ],
        "summary": "Used in 8 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/audit-log/provider/provider.js#L39) -> v2/generic/all/AuditLog | request: helper.nestedEntities: nestedEntities | helper.genericFields: genericFields / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/AuditLog',\n  nestedEntities,\n  genericFields\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/audit-log/provider/provider.js#L47) -> v2/generic/all/AuditLog | request: helper.nestedEntities: nestedEntities | helper.genericFields: genericFields / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/AuditLog',\n  nestedEntities,\n  genericFields\n}\n- HISTORY (src/srcProject/layout/B2B-customer-care/modules/dunning-policies/provider/provider.js#L103) -> v2/generic/all/AuditLog | response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/AuditLog'\n}\n- GET_LIST (src/srcProject/layout/catalog/modules/audit-log/provider/provider.js#L46) -> v2/generic/all/AuditLog | request: helper.nestedEntities: nestedEntities | helper.genericFields: genericFields / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/AuditLog',\n  nestedEntities,\n  genericFields\n}\n- GET_MANY (src/srcProject/layout/catalog/modules/audit-log/provider/provider.js#L54) -> v2/generic/all/AuditLog | request: helper.nestedEntities: nestedEntities | helper.genericFields: genericFields / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/AuditLog',\n  nestedEntities,\n  genericFields\n}\n- GET_LIST (src/srcProject/layout/finance/modules/audit-log/provider/provider.js#L46) -> v2/generic/all/AuditLog | request: helper.nestedEntities: nestedEntities | helper.genericFields: genericFields / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/AuditLog',\n  nestedEntities,\n  genericFields\n}\n- GET_MANY (src/srcProject/layout/finance/modules/audit-log/provider/provider.js#L54) -> v2/generic/all/AuditLog | request: helper.nestedEntities: nestedEntities | helper.genericFields: genericFields / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/AuditLog',\n  nestedEntities,\n  genericFields\n}\n- HISTORY (src/srcProject/layout/finance/modules/dunning-policies/provider/provider.js#L88) -> v2/generic/all/AuditLog | response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/AuditLog'\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "label": {
                                    "type": "string"
                                  },
                                  "createdAt": {
                                    "type": "string",
                                    "format": "date"
                                  },
                                  "author": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string"
                                      },
                                      "email": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "amountWithoutTax": {
                                    "type": "number"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "policyName": {
                                    "type": "string"
                                  },
                                  "policyDescription": {
                                    "type": "string"
                                  },
                                  "totalDunningLevels": {
                                    "type": "number"
                                  },
                                  "minBalanceTrigger": {
                                    "type": "number"
                                  },
                                  "interestForDelaySequence": {
                                    "type": "number"
                                  },
                                  "policyPriority": {
                                    "type": "number"
                                  },
                                  "isDefaultPolicy": {
                                    "type": "boolean"
                                  },
                                  "isActivePolicy": {
                                    "type": "boolean"
                                  },
                                  "disable": {
                                    "type": "boolean"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  },
                                  "label": {
                                    "type": "string"
                                  },
                                  "createdAt": {
                                    "type": "string",
                                    "format": "date"
                                  },
                                  "author": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string"
                                      },
                                      "email": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "label": {
                                  "type": "string"
                                },
                                "createdAt": {
                                  "type": "string",
                                  "format": "date"
                                },
                                "author": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string"
                                    },
                                    "email": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "amountWithoutTax": {
                                  "type": "number"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "policyName": {
                                  "type": "string"
                                },
                                "policyDescription": {
                                  "type": "string"
                                },
                                "totalDunningLevels": {
                                  "type": "number"
                                },
                                "minBalanceTrigger": {
                                  "type": "number"
                                },
                                "interestForDelaySequence": {
                                  "type": "number"
                                },
                                "policyPriority": {
                                  "type": "number"
                                },
                                "isDefaultPolicy": {
                                  "type": "boolean"
                                },
                                "isActivePolicy": {
                                  "type": "boolean"
                                },
                                "disable": {
                                  "type": "boolean"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                },
                                "label": {
                                  "type": "string"
                                },
                                "createdAt": {
                                  "type": "string",
                                  "format": "date"
                                },
                                "author": {
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string"
                                    },
                                    "email": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities\nhelper.genericFields: genericFields",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities\nhelper.genericFields: genericFields"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/AuditLog',\n  nestedEntities,\n  genericFields\n}",
          "keyColumn: keyColumn",
          "helperArgs: {\n  url: 'v2/generic/all/AuditLog'\n}"
        ]
      }
    },
    "/v2/generic/all/billingAccount": {
      "post": {
        "tags": [
          "B2B-customer-care/billing-accounts"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/billing-accounts/provider/provider.js#L161) -> v2/generic/all/billingAccount | request: prepareParams: params => {\n  const {\n    filter = {},\n    sort = {},\n    ...restParams\n  } = params;\n  const {\n    name = {},\n    address = {},\n    customerAccount = {}\n  } = filter;\n  const {\n    field = {}\n  } = sort;\n  const {\n    customer = {}\n  } = customerAccount;\n  const {\n    ['description|name.firstName+name.lastName']: descriptionOrFullName,\n    description,\n    customerDescription,\n    ['name.firstName+name.lastName']: customerName,\n    SQL: oldQuery,\n    search,\n    ...restFilter\n  } = flatten(filter);\n  const customerDescriptionQuery = `(lower(customerAccount.description) LIKE lower('%${customerDescription}%'))`;\n  const filterCustomerDescriptionQuery = !!customerDescription ? customerDescriptionQuery : null;\n  const customerNameQuery = transformCustomerNameFilter(customerName);\n  const filterCustomerNameQuery = !!customerName ? customerNameQuery : null;\n  const filterDescriptionParams = transformFilterValue(description || descriptionOrFullName);\n  const finalSQLQuery = concatSQLQueries([oldQuery, filterCustomerDescriptionQuery, filterCustomerNameQuery, filterDescriptionParams], 'AND');\n  const fitlerTransformed = {\n    ...unflatten(restFilter),\n    'or code description registrationNo tradingCountry.description tradingCountry.code name.firstName name.lastName customerAccount.customer.code customerAccount.customer.description customerAccount.customer.name.lastName customerAccount.customer.name.firstName': search,\n    ...(!filterDescriptionParams ? {\n      'wildcardOrIgnoreCase name->firstName name->lastName': description\n    } : {}),\n    //disable this possiblty of filter from the pikcer, it's not work correctly #245\n    // ...(!isEmpty(descriptionOrFullName)\n    //   ? {\n    //       'likeCriterias description name.firstName name.lastName': `*${descriptionOrFullName}*`\n    //     }\n    //   : {}),\n    ...(!isEmpty(address) ? getAddressFilters(address) : {}),\n    ...(!isEmpty(name) ? {\n      'wildcardOrIgnoreCase name.lastName': get(name, 'lastName')\n    } : {}),\n    ...(!isEmpty(customer) ? {\n      'wildcardOrIgnoreCase customerAccount.customer.registrationNo': get(customer, 'registrationNo')\n    } : {}),\n    ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n      'customerAccount.customer.seller.code': ENGIE_MYPOWER_seller\n    } : {}),\n    ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n      'customerAccount.customer.seller.code': ENGIE_EKKO_seller\n    } : {}),\n    ...(!!finalSQLQuery ? {\n      SQL: finalSQLQuery\n    } : {})\n  };\n  const sortTransformed = {\n    ...sort,\n    ...(!isEmpty(field) && field === 'description|name.firstName+name.lastName' ? {\n      field: 'name.firstName'\n    } : {})\n  };\n  return {\n    filter: fitlerTransformed,\n    sort: sortTransformed,\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/billingAccount',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/billing-accounts/provider/provider.js#L265) -> v2/generic/all/billingAccount | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/billingAccount',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_BILLING_ACCOUNTS_IN_CLIENT_FCTURE_DIALOG (src/srcProject/layout/B2B-customer-care/modules/billing-accounts/provider/provider.js#L461) -> v2/generic/all/billingAccount | request: options: {\n  method: 'POST'\n} / response: responseContainer: 'data'",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data | responseContainer: 'data'",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "customerInfo": {
                                "type": "string"
                              },
                              "address": {
                                "type": "object",
                                "properties": {
                                  "address1": {
                                    "type": "string"
                                  },
                                  "zipCode": {
                                    "type": "string"
                                  },
                                  "city": {
                                    "type": "string"
                                  }
                                }
                              },
                              "registrationNo": {
                                "type": "string"
                              },
                              "externalRef1": {
                                "type": "string"
                              },
                              "auditable": {
                                "type": "object",
                                "properties": {
                                  "created": {
                                    "type": "string",
                                    "format": "date"
                                  }
                                }
                              },
                              "description": {
                                "type": "string"
                              },
                              "subscriptionDate": {
                                "type": "string",
                                "format": "date"
                              },
                              "isConsumer": {
                                "type": "boolean"
                              },
                              "status": {
                                "type": "string"
                              },
                              "endAgreementDate": {
                                "type": "string",
                                "format": "date"
                              },
                              "validity": {
                                "type": "object",
                                "properties": {
                                  "from": {
                                    "type": "string",
                                    "format": "date"
                                  },
                                  "to": {
                                    "type": "string",
                                    "format": "date"
                                  }
                                }
                              },
                              "versionNumber": {
                                "type": "number"
                              },
                              "subscription": {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string"
                                  }
                                }
                              },
                              "serviceInstance": {
                                "type": "object",
                                "properties": {
                                  "productVersion": {
                                    "type": "object",
                                    "properties": {
                                      "product": {
                                        "type": "object",
                                        "properties": {
                                          "code": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "id": {
                                    "type": "string"
                                  }
                                }
                              },
                              "usageDate": {
                                "type": "string",
                                "format": "date"
                              },
                              "quantity": {
                                "type": "number"
                              },
                              "unitAmountWithoutTax": {
                                "type": "number"
                              },
                              "amountWithoutTax": {
                                "type": "number"
                              },
                              "amountWithTax": {
                                "type": "number"
                              },
                              "parameter1": {
                                "type": "string"
                              },
                              "parameter2": {
                                "type": "string"
                              },
                              "parameter3": {
                                "type": "string"
                              },
                              "parameterExtra": {
                                "type": "string"
                              },
                              "quoteDate": {
                                "type": "string",
                                "format": "date"
                              },
                              "quoteNumber": {
                                "type": "string"
                              },
                              "amount": {
                                "type": "number"
                              },
                              "orderNumber": {
                                "type": "string"
                              },
                              "orderType": {
                                "type": "object",
                                "properties": {
                                  "description": {
                                    "type": "string"
                                  }
                                }
                              },
                              "orderDate": {
                                "type": "string",
                                "format": "date"
                              },
                              "label": {
                                "type": "string"
                              },
                              "invoiceNumber": {
                                "type": "string"
                              },
                              "invoiceDate": {
                                "type": "string",
                                "format": "date"
                              },
                              "invoiceType": {
                                "type": "object",
                                "properties": {
                                  "description": {
                                    "type": "string"
                                  }
                                }
                              },
                              "dueDate": {
                                "type": "string",
                                "format": "date"
                              },
                              "paymentStatus": {
                                "type": "string"
                              },
                              "reference": {
                                "type": "string"
                              },
                              "collectionDate": {
                                "type": "string",
                                "format": "date"
                              },
                              "type": {
                                "type": "string"
                              },
                              "accountingDate": {
                                "type": "string",
                                "format": "date"
                              },
                              "OA_debit": {
                                "type": "number"
                              },
                              "OA_credit": {
                                "type": "number"
                              },
                              "matchingStatus": {
                                "type": "string"
                              },
                              "unMatchingAmount": {
                                "type": "number"
                              },
                              "matchingAmount": {
                                "type": "number"
                              },
                              "operationDate": {
                                "type": "string",
                                "format": "date"
                              },
                              "securityDepositInvoice": {
                                "type": "string"
                              },
                              "securityDepositAdjustment": {
                                "type": "string"
                              },
                              "currency": {
                                "type": "object",
                                "properties": {
                                  "currencyCode": {
                                    "type": "string"
                                  }
                                }
                              },
                              "currentBalance": {
                                "type": "number"
                              },
                              "externalReference": {
                                "type": "string"
                              },
                              "amountDebit": {
                                "type": "number"
                              },
                              "amountCredit": {
                                "type": "number"
                              },
                              "operation": {
                                "type": "string"
                              },
                              "accountOperation": {
                                "type": "object",
                                "properties": {
                                  "reference": {
                                    "type": "string"
                                  }
                                }
                              },
                              "transactionDate": {
                                "type": "string"
                              },
                              "startDate": {
                                "type": "string",
                                "format": "date"
                              },
                              "endDate": {
                                "type": "string",
                                "format": "date"
                              },
                              "amountToRecover": {
                                "type": "number"
                              },
                              "contact": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "object",
                                    "properties": {
                                      "firstName": {
                                        "type": "string"
                                      },
                                      "lastName": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "contactInformation": {
                                    "type": "object",
                                    "properties": {
                                      "mobile": {
                                        "type": "string"
                                      },
                                      "email": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "position": {
                                "type": "string"
                              },
                              "mainContact": {
                                "type": "string"
                              },
                              "searchBar": {
                                "type": "string"
                              },
                              "allAddress": {
                                "type": "string"
                              },
                              "addressCity": {
                                "type": "string"
                              },
                              "addressZipCode": {
                                "type": "string"
                              },
                              "addressCountry": {
                                "type": "string"
                              },
                              "addressState": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "customerInfo": {
                              "type": "string"
                            },
                            "address": {
                              "type": "object",
                              "properties": {
                                "address1": {
                                  "type": "string"
                                },
                                "zipCode": {
                                  "type": "string"
                                },
                                "city": {
                                  "type": "string"
                                }
                              }
                            },
                            "registrationNo": {
                              "type": "string"
                            },
                            "externalRef1": {
                              "type": "string"
                            },
                            "auditable": {
                              "type": "object",
                              "properties": {
                                "created": {
                                  "type": "string",
                                  "format": "date"
                                }
                              }
                            },
                            "description": {
                              "type": "string"
                            },
                            "subscriptionDate": {
                              "type": "string",
                              "format": "date"
                            },
                            "isConsumer": {
                              "type": "boolean"
                            },
                            "status": {
                              "type": "string"
                            },
                            "endAgreementDate": {
                              "type": "string",
                              "format": "date"
                            },
                            "validity": {
                              "type": "object",
                              "properties": {
                                "from": {
                                  "type": "string",
                                  "format": "date"
                                },
                                "to": {
                                  "type": "string",
                                  "format": "date"
                                }
                              }
                            },
                            "versionNumber": {
                              "type": "number"
                            },
                            "subscription": {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                }
                              }
                            },
                            "serviceInstance": {
                              "type": "object",
                              "properties": {
                                "productVersion": {
                                  "type": "object",
                                  "properties": {
                                    "product": {
                                      "type": "object",
                                      "properties": {
                                        "code": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  }
                                },
                                "id": {
                                  "type": "string"
                                }
                              }
                            },
                            "usageDate": {
                              "type": "string",
                              "format": "date"
                            },
                            "quantity": {
                              "type": "number"
                            },
                            "unitAmountWithoutTax": {
                              "type": "number"
                            },
                            "amountWithoutTax": {
                              "type": "number"
                            },
                            "amountWithTax": {
                              "type": "number"
                            },
                            "parameter1": {
                              "type": "string"
                            },
                            "parameter2": {
                              "type": "string"
                            },
                            "parameter3": {
                              "type": "string"
                            },
                            "parameterExtra": {
                              "type": "string"
                            },
                            "quoteDate": {
                              "type": "string",
                              "format": "date"
                            },
                            "quoteNumber": {
                              "type": "string"
                            },
                            "amount": {
                              "type": "number"
                            },
                            "orderNumber": {
                              "type": "string"
                            },
                            "orderType": {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string"
                                }
                              }
                            },
                            "orderDate": {
                              "type": "string",
                              "format": "date"
                            },
                            "label": {
                              "type": "string"
                            },
                            "invoiceNumber": {
                              "type": "string"
                            },
                            "invoiceDate": {
                              "type": "string",
                              "format": "date"
                            },
                            "invoiceType": {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string"
                                }
                              }
                            },
                            "dueDate": {
                              "type": "string",
                              "format": "date"
                            },
                            "paymentStatus": {
                              "type": "string"
                            },
                            "reference": {
                              "type": "string"
                            },
                            "collectionDate": {
                              "type": "string",
                              "format": "date"
                            },
                            "type": {
                              "type": "string"
                            },
                            "accountingDate": {
                              "type": "string",
                              "format": "date"
                            },
                            "OA_debit": {
                              "type": "number"
                            },
                            "OA_credit": {
                              "type": "number"
                            },
                            "matchingStatus": {
                              "type": "string"
                            },
                            "unMatchingAmount": {
                              "type": "number"
                            },
                            "matchingAmount": {
                              "type": "number"
                            },
                            "operationDate": {
                              "type": "string",
                              "format": "date"
                            },
                            "securityDepositInvoice": {
                              "type": "string"
                            },
                            "securityDepositAdjustment": {
                              "type": "string"
                            },
                            "currency": {
                              "type": "object",
                              "properties": {
                                "currencyCode": {
                                  "type": "string"
                                }
                              }
                            },
                            "currentBalance": {
                              "type": "number"
                            },
                            "externalReference": {
                              "type": "string"
                            },
                            "amountDebit": {
                              "type": "number"
                            },
                            "amountCredit": {
                              "type": "number"
                            },
                            "operation": {
                              "type": "string"
                            },
                            "accountOperation": {
                              "type": "object",
                              "properties": {
                                "reference": {
                                  "type": "string"
                                }
                              }
                            },
                            "transactionDate": {
                              "type": "string"
                            },
                            "startDate": {
                              "type": "string",
                              "format": "date"
                            },
                            "endDate": {
                              "type": "string",
                              "format": "date"
                            },
                            "amountToRecover": {
                              "type": "number"
                            },
                            "contact": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "object",
                                  "properties": {
                                    "firstName": {
                                      "type": "string"
                                    },
                                    "lastName": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "contactInformation": {
                                  "type": "object",
                                  "properties": {
                                    "mobile": {
                                      "type": "string"
                                    },
                                    "email": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "position": {
                              "type": "string"
                            },
                            "mainContact": {
                              "type": "string"
                            },
                            "searchBar": {
                              "type": "string"
                            },
                            "allAddress": {
                              "type": "string"
                            },
                            "addressCity": {
                              "type": "string"
                            },
                            "addressZipCode": {
                              "type": "string"
                            },
                            "addressCountry": {
                              "type": "string"
                            },
                            "addressState": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    filter = {},\n    sort = {},\n    ...restParams\n  } = params;\n  const {\n    name = {},\n    address = {},\n    customerAccount = {}\n  } = filter;\n  const {\n    field = {}\n  } = sort;\n  const {\n    customer = {}\n  } = customerAccount;\n  const {\n    ['description|name.firstName+name.lastName']: descriptionOrFullName,\n    description,\n    customerDescription,\n    ['name.firstName+name.lastName']: customerName,\n    SQL: oldQuery,\n    search,\n    ...restFilter\n  } = flatten(filter);\n  const customerDescriptionQuery = `(lower(customerAccount.description) LIKE lower('%${customerDescription}%'))`;\n  const filterCustomerDescriptionQuery = !!customerDescription ? customerDescriptionQuery : null;\n  const customerNameQuery = transformCustomerNameFilter(customerName);\n  const filterCustomerNameQuery = !!customerName ? customerNameQuery : null;\n  const filterDescriptionParams = transformFilterValue(description || descriptionOrFullName);\n  const finalSQLQuery = concatSQLQueries([oldQuery, filterCustomerDescriptionQuery, filterCustomerNameQuery, filterDescriptionParams], 'AND');\n  const fitlerTransformed = {\n    ...unflatten(restFilter),\n    'or code description registrationNo tradingCountry.description tradingCountry.code name.firstName name.lastName customerAccount.customer.code customerAccount.customer.description customerAccount.customer.name.lastName customerAccount.customer.name.firstName': search,\n    ...(!filterDescriptionParams ? {\n      'wildcardOrIgnoreCase name->firstName name->lastName': description\n    } : {}),\n    //disable this possiblty of filter from the pikcer, it's not work correctly #245\n    // ...(!isEmpty(descriptionOrFullName)\n    //   ? {\n    //       'likeCriterias description name.firstName name.lastName': `*${descriptionOrFullName}*`\n    //     }\n    //   : {}),\n    ...(!isEmpty(address) ? getAddressFilters(address) : {}),\n    ...(!isEmpty(name) ? {\n      'wildcardOrIgnoreCase name.lastName': get(name, 'lastName')\n    } : {}),\n    ...(!isEmpty(customer) ? {\n      'wildcardOrIgnoreCase customerAccount.customer.registrationNo': get(customer, 'registrationNo')\n    } : {}),\n    ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n      'customerAccount.customer.seller.code': ENGIE_MYPOWER_seller\n    } : {}),\n    ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n      'customerAccount.customer.seller.code': ENGIE_EKKO_seller\n    } : {}),\n    ...(!!finalSQLQuery ? {\n      SQL: finalSQLQuery\n    } : {})\n  };\n  const sortTransformed = {\n    ...sort,\n    ...(!isEmpty(field) && field === 'description|name.firstName+name.lastName' ? {\n      field: 'name.firstName'\n    } : {})\n  };\n  return {\n    filter: fitlerTransformed,\n    sort: sortTransformed,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities\noptions: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    filter = {},\n    sort = {},\n    ...restParams\n  } = params;\n  const {\n    name = {},\n    address = {},\n    customerAccount = {}\n  } = filter;\n  const {\n    field = {}\n  } = sort;\n  const {\n    customer = {}\n  } = customerAccount;\n  const {\n    ['description|name.firstName+name.lastName']: descriptionOrFullName,\n    description,\n    customerDescription,\n    ['name.firstName+name.lastName']: customerName,\n    SQL: oldQuery,\n    search,\n    ...restFilter\n  } = flatten(filter);\n  const customerDescriptionQuery = `(lower(customerAccount.description) LIKE lower('%${customerDescription}%'))`;\n  const filterCustomerDescriptionQuery = !!customerDescription ? customerDescriptionQuery : null;\n  const customerNameQuery = transformCustomerNameFilter(customerName);\n  const filterCustomerNameQuery = !!customerName ? customerNameQuery : null;\n  const filterDescriptionParams = transformFilterValue(description || descriptionOrFullName);\n  const finalSQLQuery = concatSQLQueries([oldQuery, filterCustomerDescriptionQuery, filterCustomerNameQuery, filterDescriptionParams], 'AND');\n  const fitlerTransformed = {\n    ...unflatten(restFilter),\n    'or code description registrationNo tradingCountry.description tradingCountry.code name.firstName name.lastName customerAccount.customer.code customerAccount.customer.description customerAccount.customer.name.lastName customerAccount.customer.name.firstName': search,\n    ...(!filterDescriptionParams ? {\n      'wildcardOrIgnoreCase name->firstName name->lastName': description\n    } : {}),\n    //disable this possiblty of filter from the pikcer, it's not work correctly #245\n    // ...(!isEmpty(descriptionOrFullName)\n    //   ? {\n    //       'likeCriterias description name.firstName name.lastName': `*${descriptionOrFullName}*`\n    //     }\n    //   : {}),\n    ...(!isEmpty(address) ? getAddressFilters(address) : {}),\n    ...(!isEmpty(name) ? {\n      'wildcardOrIgnoreCase name.lastName': get(name, 'lastName')\n    } : {}),\n    ...(!isEmpty(customer) ? {\n      'wildcardOrIgnoreCase customerAccount.customer.registrationNo': get(customer, 'registrationNo')\n    } : {}),\n    ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n      'customerAccount.customer.seller.code': ENGIE_MYPOWER_seller\n    } : {}),\n    ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n      'customerAccount.customer.seller.code': ENGIE_EKKO_seller\n    } : {}),\n    ...(!!finalSQLQuery ? {\n      SQL: finalSQLQuery\n    } : {})\n  };\n  const sortTransformed = {\n    ...sort,\n    ...(!isEmpty(field) && field === 'description|name.firstName+name.lastName' ? {\n      field: 'name.firstName'\n    } : {})\n  };\n  return {\n    filter: fitlerTransformed,\n    sort: sortTransformed,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities\noptions: {\n  method: 'POST'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/billingAccount',\n  responseContainer: 'data',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/billingAccount/": {
      "post": {
        "tags": [
          "B2B-customer-care/billing-accounts"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/billing-accounts/provider/provider.js#L258) -> v2/generic/billingAccount/ | request: helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/billingAccount/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "customerInfo": {
                      "type": "string"
                    },
                    "address": {
                      "type": "object",
                      "properties": {
                        "address1": {
                          "type": "string"
                        },
                        "zipCode": {
                          "type": "string"
                        },
                        "city": {
                          "type": "string"
                        }
                      }
                    },
                    "registrationNo": {
                      "type": "string"
                    },
                    "externalRef1": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "description": {
                      "type": "string"
                    },
                    "subscriptionDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "isConsumer": {
                      "type": "boolean"
                    },
                    "status": {
                      "type": "string"
                    },
                    "endAgreementDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "validity": {
                      "type": "object",
                      "properties": {
                        "from": {
                          "type": "string",
                          "format": "date"
                        },
                        "to": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "versionNumber": {
                      "type": "number"
                    },
                    "subscription": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "serviceInstance": {
                      "type": "object",
                      "properties": {
                        "productVersion": {
                          "type": "object",
                          "properties": {
                            "product": {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "usageDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "quantity": {
                      "type": "number"
                    },
                    "unitAmountWithoutTax": {
                      "type": "number"
                    },
                    "amountWithoutTax": {
                      "type": "number"
                    },
                    "amountWithTax": {
                      "type": "number"
                    },
                    "parameter1": {
                      "type": "string"
                    },
                    "parameter2": {
                      "type": "string"
                    },
                    "parameter3": {
                      "type": "string"
                    },
                    "parameterExtra": {
                      "type": "string"
                    },
                    "quoteDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "quoteNumber": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "number"
                    },
                    "orderNumber": {
                      "type": "string"
                    },
                    "orderType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "orderDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "label": {
                      "type": "string"
                    },
                    "invoiceNumber": {
                      "type": "string"
                    },
                    "invoiceDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "invoiceType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "dueDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "paymentStatus": {
                      "type": "string"
                    },
                    "reference": {
                      "type": "string"
                    },
                    "collectionDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "type": {
                      "type": "string"
                    },
                    "accountingDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "OA_debit": {
                      "type": "number"
                    },
                    "OA_credit": {
                      "type": "number"
                    },
                    "matchingStatus": {
                      "type": "string"
                    },
                    "unMatchingAmount": {
                      "type": "number"
                    },
                    "matchingAmount": {
                      "type": "number"
                    },
                    "operationDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "securityDepositInvoice": {
                      "type": "string"
                    },
                    "securityDepositAdjustment": {
                      "type": "string"
                    },
                    "currency": {
                      "type": "object",
                      "properties": {
                        "currencyCode": {
                          "type": "string"
                        }
                      }
                    },
                    "currentBalance": {
                      "type": "number"
                    },
                    "externalReference": {
                      "type": "string"
                    },
                    "amountDebit": {
                      "type": "number"
                    },
                    "amountCredit": {
                      "type": "number"
                    },
                    "operation": {
                      "type": "string"
                    },
                    "accountOperation": {
                      "type": "object",
                      "properties": {
                        "reference": {
                          "type": "string"
                        }
                      }
                    },
                    "transactionDate": {
                      "type": "string"
                    },
                    "startDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "endDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "amountToRecover": {
                      "type": "number"
                    },
                    "contact": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "object",
                          "properties": {
                            "firstName": {
                              "type": "string"
                            },
                            "lastName": {
                              "type": "string"
                            }
                          }
                        },
                        "contactInformation": {
                          "type": "object",
                          "properties": {
                            "mobile": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "position": {
                      "type": "string"
                    },
                    "mainContact": {
                      "type": "string"
                    },
                    "searchBar": {
                      "type": "string"
                    },
                    "allAddress": {
                      "type": "string"
                    },
                    "addressCity": {
                      "type": "string"
                    },
                    "addressZipCode": {
                      "type": "string"
                    },
                    "addressCountry": {
                      "type": "string"
                    },
                    "addressState": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/billingAccount/',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/billingAccount": {
      "delete": {
        "tags": [
          "B2B-customer-care/billing-accounts"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/B2B-customer-care/modules/billing-accounts/provider/provider.js#L376) -> v2/generic/billingAccount | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/generic/billingAccount',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/billing-accounts/provider/provider.js#L382) -> v2/generic/billingAccount | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/generic/billingAccount',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "customerInfo": {
                      "type": "string"
                    },
                    "address": {
                      "type": "object",
                      "properties": {
                        "address1": {
                          "type": "string"
                        },
                        "zipCode": {
                          "type": "string"
                        },
                        "city": {
                          "type": "string"
                        }
                      }
                    },
                    "registrationNo": {
                      "type": "string"
                    },
                    "externalRef1": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "description": {
                      "type": "string"
                    },
                    "subscriptionDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "isConsumer": {
                      "type": "boolean"
                    },
                    "status": {
                      "type": "string"
                    },
                    "endAgreementDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "validity": {
                      "type": "object",
                      "properties": {
                        "from": {
                          "type": "string",
                          "format": "date"
                        },
                        "to": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "versionNumber": {
                      "type": "number"
                    },
                    "subscription": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "serviceInstance": {
                      "type": "object",
                      "properties": {
                        "productVersion": {
                          "type": "object",
                          "properties": {
                            "product": {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "usageDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "quantity": {
                      "type": "number"
                    },
                    "unitAmountWithoutTax": {
                      "type": "number"
                    },
                    "amountWithoutTax": {
                      "type": "number"
                    },
                    "amountWithTax": {
                      "type": "number"
                    },
                    "parameter1": {
                      "type": "string"
                    },
                    "parameter2": {
                      "type": "string"
                    },
                    "parameter3": {
                      "type": "string"
                    },
                    "parameterExtra": {
                      "type": "string"
                    },
                    "quoteDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "quoteNumber": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "number"
                    },
                    "orderNumber": {
                      "type": "string"
                    },
                    "orderType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "orderDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "label": {
                      "type": "string"
                    },
                    "invoiceNumber": {
                      "type": "string"
                    },
                    "invoiceDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "invoiceType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "dueDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "paymentStatus": {
                      "type": "string"
                    },
                    "reference": {
                      "type": "string"
                    },
                    "collectionDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "type": {
                      "type": "string"
                    },
                    "accountingDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "OA_debit": {
                      "type": "number"
                    },
                    "OA_credit": {
                      "type": "number"
                    },
                    "matchingStatus": {
                      "type": "string"
                    },
                    "unMatchingAmount": {
                      "type": "number"
                    },
                    "matchingAmount": {
                      "type": "number"
                    },
                    "operationDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "securityDepositInvoice": {
                      "type": "string"
                    },
                    "securityDepositAdjustment": {
                      "type": "string"
                    },
                    "currency": {
                      "type": "object",
                      "properties": {
                        "currencyCode": {
                          "type": "string"
                        }
                      }
                    },
                    "currentBalance": {
                      "type": "number"
                    },
                    "externalReference": {
                      "type": "string"
                    },
                    "amountDebit": {
                      "type": "number"
                    },
                    "amountCredit": {
                      "type": "number"
                    },
                    "operation": {
                      "type": "string"
                    },
                    "accountOperation": {
                      "type": "object",
                      "properties": {
                        "reference": {
                          "type": "string"
                        }
                      }
                    },
                    "transactionDate": {
                      "type": "string"
                    },
                    "startDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "endDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "amountToRecover": {
                      "type": "number"
                    },
                    "contact": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "object",
                          "properties": {
                            "firstName": {
                              "type": "string"
                            },
                            "lastName": {
                              "type": "string"
                            }
                          }
                        },
                        "contactInformation": {
                          "type": "object",
                          "properties": {
                            "mobile": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "position": {
                      "type": "string"
                    },
                    "mainContact": {
                      "type": "string"
                    },
                    "searchBar": {
                      "type": "string"
                    },
                    "allAddress": {
                      "type": "string"
                    },
                    "addressCity": {
                      "type": "string"
                    },
                    "addressZipCode": {
                      "type": "string"
                    },
                    "addressCountry": {
                      "type": "string"
                    },
                    "addressState": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'v2/generic/billingAccount',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/payment/paymentMethod": {
      "post": {
        "tags": [
          "B2B-customer-care/billing-accounts",
          "B2B-customer-care/mdp-clients",
          "B2B-customer-care/payment-methods"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- ADD_PAYMENT_METHOD (src/srcProject/layout/B2B-customer-care/modules/billing-accounts/provider/provider.js#L436) -> payment/paymentMethod | request: helper.method: POST / info: helper: getDeleteProvider | helperArgs: {\n  url: 'payment/paymentMethod',\n  method: 'POST'\n}\n- ADD_PAYMENT_METHOD (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L303) -> payment/paymentMethod | request: options: {\n  method: 'POST'\n}\n- CREATE (src/srcProject/layout/B2B-customer-care/modules/payment-methods/provider/provider.js#L54) -> payment/paymentMethod | request: helper.keyColumn: keyColumn / response: responseContainer: 'paymentMethod' / info: helper: getCreateProvider | helperArgs: {\n  url: 'payment/paymentMethod',\n  keyColumn\n}",
        "responses": {
          "200": {
            "description": "Successful response. responseContainer: 'paymentMethod'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "paymentMethod": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "customerInfo": {
                          "type": "string"
                        },
                        "address": {
                          "type": "object",
                          "properties": {
                            "address1": {
                              "type": "string"
                            },
                            "zipCode": {
                              "type": "string"
                            },
                            "city": {
                              "type": "string"
                            }
                          }
                        },
                        "registrationNo": {
                          "type": "string"
                        },
                        "externalRef1": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "description": {
                          "type": "string"
                        },
                        "subscriptionDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "isConsumer": {
                          "type": "boolean"
                        },
                        "status": {
                          "type": "string"
                        },
                        "endAgreementDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "validity": {
                          "type": "object",
                          "properties": {
                            "from": {
                              "type": "string",
                              "format": "date"
                            },
                            "to": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "versionNumber": {
                          "type": "number"
                        },
                        "subscription": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "serviceInstance": {
                          "type": "object",
                          "properties": {
                            "productVersion": {
                              "type": "object",
                              "properties": {
                                "product": {
                                  "type": "object",
                                  "properties": {
                                    "code": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "usageDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "quantity": {
                          "type": "number"
                        },
                        "unitAmountWithoutTax": {
                          "type": "number"
                        },
                        "amountWithoutTax": {
                          "type": "number"
                        },
                        "amountWithTax": {
                          "type": "number"
                        },
                        "parameter1": {
                          "type": "string"
                        },
                        "parameter2": {
                          "type": "string"
                        },
                        "parameter3": {
                          "type": "string"
                        },
                        "parameterExtra": {
                          "type": "string"
                        },
                        "quoteDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "quoteNumber": {
                          "type": "string"
                        },
                        "amount": {
                          "type": "number"
                        },
                        "orderNumber": {
                          "type": "string"
                        },
                        "orderType": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "orderDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "label": {
                          "type": "string"
                        },
                        "invoiceNumber": {
                          "type": "string"
                        },
                        "invoiceDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "invoiceType": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "dueDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "paymentStatus": {
                          "type": "string"
                        },
                        "reference": {
                          "type": "string"
                        },
                        "collectionDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "type": {
                          "type": "string"
                        },
                        "accountingDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "OA_debit": {
                          "type": "number"
                        },
                        "OA_credit": {
                          "type": "number"
                        },
                        "matchingStatus": {
                          "type": "string"
                        },
                        "unMatchingAmount": {
                          "type": "number"
                        },
                        "matchingAmount": {
                          "type": "number"
                        },
                        "operationDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "securityDepositInvoice": {
                          "type": "string"
                        },
                        "securityDepositAdjustment": {
                          "type": "string"
                        },
                        "currency": {
                          "type": "object",
                          "properties": {
                            "currencyCode": {
                              "type": "string"
                            }
                          }
                        },
                        "currentBalance": {
                          "type": "number"
                        },
                        "externalReference": {
                          "type": "string"
                        },
                        "amountDebit": {
                          "type": "number"
                        },
                        "amountCredit": {
                          "type": "number"
                        },
                        "operation": {
                          "type": "string"
                        },
                        "accountOperation": {
                          "type": "object",
                          "properties": {
                            "reference": {
                              "type": "string"
                            }
                          }
                        },
                        "transactionDate": {
                          "type": "string"
                        },
                        "startDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "endDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "amountToRecover": {
                          "type": "number"
                        },
                        "contact": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "object",
                              "properties": {
                                "firstName": {
                                  "type": "string"
                                },
                                "lastName": {
                                  "type": "string"
                                }
                              }
                            },
                            "contactInformation": {
                              "type": "object",
                              "properties": {
                                "mobile": {
                                  "type": "string"
                                },
                                "email": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "position": {
                          "type": "string"
                        },
                        "mainContact": {
                          "type": "string"
                        },
                        "searchBar": {
                          "type": "string"
                        },
                        "allAddress": {
                          "type": "string"
                        },
                        "addressCity": {
                          "type": "string"
                        },
                        "addressZipCode": {
                          "type": "string"
                        },
                        "addressCountry": {
                          "type": "string"
                        },
                        "addressState": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST\noptions: {\n  method: 'POST'\n}\nhelper.keyColumn: keyColumn",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST\noptions: {\n  method: 'POST'\n}\nhelper.keyColumn: keyColumn"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'payment/paymentMethod',\n  method: 'POST'\n}",
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'payment/paymentMethod',\n  keyColumn\n}"
        ]
      },
      "put": {
        "tags": [
          "B2B-customer-care/mdp-clients",
          "B2B-customer-care/payment-methods"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- UPDATE_PAYMENT_METHOD (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L309) -> payment/paymentMethod | request: options: {\n  method: 'PUT'\n}\n- UPDATE (src/srcProject/layout/B2B-customer-care/modules/payment-methods/provider/provider.js#L61) -> payment/paymentMethod | request: helper.keyColumn: keyColumn | helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  url: 'payment/paymentMethod',\n  keyColumn,\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}\nhelper.keyColumn: keyColumn\nhelper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}\nhelper.keyColumn: keyColumn\nhelper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'payment/paymentMethod',\n  keyColumn,\n  method: 'PUT'\n}"
        ]
      },
      "delete": {
        "tags": [
          "B2B-customer-care/payment-methods"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/payment-methods/provider/provider.js#L79) -> payment/paymentMethod | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getDeleteProvider | helperArgs: {\n  url: 'payment/paymentMethod',\n  responseContainer: 'data',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'payment/paymentMethod',\n  responseContainer: 'data',\n  nestedEntities\n}"
        ]
      }
    },
    "/inbound/file": {
      "get": {
        "tags": [
          "B2B-customer-care/billing-accounts"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- MANDAT_SEPA (src/srcProject/layout/B2B-customer-care/modules/billing-accounts/provider/provider.js#L442) -> /inbound/file?encoding=base64&name=:mandateIdentification.pdf | request: helper.method: GET / info: helper: getDeleteProvider | helperArgs: {\n  url: '/inbound/file?encoding=base64&name=:mandateIdentification.pdf',\n  method: 'GET'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "customerInfo": {
                      "type": "string"
                    },
                    "address": {
                      "type": "object",
                      "properties": {
                        "address1": {
                          "type": "string"
                        },
                        "zipCode": {
                          "type": "string"
                        },
                        "city": {
                          "type": "string"
                        }
                      }
                    },
                    "registrationNo": {
                      "type": "string"
                    },
                    "externalRef1": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "description": {
                      "type": "string"
                    },
                    "subscriptionDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "isConsumer": {
                      "type": "boolean"
                    },
                    "status": {
                      "type": "string"
                    },
                    "endAgreementDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "validity": {
                      "type": "object",
                      "properties": {
                        "from": {
                          "type": "string",
                          "format": "date"
                        },
                        "to": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "versionNumber": {
                      "type": "number"
                    },
                    "subscription": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "serviceInstance": {
                      "type": "object",
                      "properties": {
                        "productVersion": {
                          "type": "object",
                          "properties": {
                            "product": {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "usageDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "quantity": {
                      "type": "number"
                    },
                    "unitAmountWithoutTax": {
                      "type": "number"
                    },
                    "amountWithoutTax": {
                      "type": "number"
                    },
                    "amountWithTax": {
                      "type": "number"
                    },
                    "parameter1": {
                      "type": "string"
                    },
                    "parameter2": {
                      "type": "string"
                    },
                    "parameter3": {
                      "type": "string"
                    },
                    "parameterExtra": {
                      "type": "string"
                    },
                    "quoteDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "quoteNumber": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "number"
                    },
                    "orderNumber": {
                      "type": "string"
                    },
                    "orderType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "orderDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "label": {
                      "type": "string"
                    },
                    "invoiceNumber": {
                      "type": "string"
                    },
                    "invoiceDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "invoiceType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "dueDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "paymentStatus": {
                      "type": "string"
                    },
                    "reference": {
                      "type": "string"
                    },
                    "collectionDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "type": {
                      "type": "string"
                    },
                    "accountingDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "OA_debit": {
                      "type": "number"
                    },
                    "OA_credit": {
                      "type": "number"
                    },
                    "matchingStatus": {
                      "type": "string"
                    },
                    "unMatchingAmount": {
                      "type": "number"
                    },
                    "matchingAmount": {
                      "type": "number"
                    },
                    "operationDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "securityDepositInvoice": {
                      "type": "string"
                    },
                    "securityDepositAdjustment": {
                      "type": "string"
                    },
                    "currency": {
                      "type": "object",
                      "properties": {
                        "currencyCode": {
                          "type": "string"
                        }
                      }
                    },
                    "currentBalance": {
                      "type": "number"
                    },
                    "externalReference": {
                      "type": "string"
                    },
                    "amountDebit": {
                      "type": "number"
                    },
                    "amountCredit": {
                      "type": "number"
                    },
                    "operation": {
                      "type": "string"
                    },
                    "accountOperation": {
                      "type": "object",
                      "properties": {
                        "reference": {
                          "type": "string"
                        }
                      }
                    },
                    "transactionDate": {
                      "type": "string"
                    },
                    "startDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "endDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "amountToRecover": {
                      "type": "number"
                    },
                    "contact": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "object",
                          "properties": {
                            "firstName": {
                              "type": "string"
                            },
                            "lastName": {
                              "type": "string"
                            }
                          }
                        },
                        "contactInformation": {
                          "type": "object",
                          "properties": {
                            "mobile": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "position": {
                      "type": "string"
                    },
                    "mainContact": {
                      "type": "string"
                    },
                    "searchBar": {
                      "type": "string"
                    },
                    "allAddress": {
                      "type": "string"
                    },
                    "addressCity": {
                      "type": "string"
                    },
                    "addressZipCode": {
                      "type": "string"
                    },
                    "addressCountry": {
                      "type": "string"
                    },
                    "addressState": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "encoding",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-request-hints": [
          "helper.method: GET"
        ],
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: '/inbound/file?encoding=base64&name=:mandateIdentification.pdf',\n  method: 'GET'\n}"
        ]
      }
    },
    "/account/accountHierarchy/updateCRMAccountHierarchy": {
      "post": {
        "tags": [
          "B2B-customer-care/billing-accounts"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- TERMINATE (src/srcProject/layout/B2B-customer-care/modules/billing-accounts/provider/provider.js#L448) -> account/accountHierarchy/updateCRMAccountHierarchy | request: options: {\n  method: 'POST'\n} | bodyParams: {\n  crmAccountType: 'BA',\n  //@record.customerAccount.accountType',\n  code: '@record.code',\n  terminationDate: '@record.terminationDate',\n  terminationReason: '@record.terminationReason',\n  caStatus: 'CLOSE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "customerInfo": {
                      "type": "string"
                    },
                    "address": {
                      "type": "object",
                      "properties": {
                        "address1": {
                          "type": "string"
                        },
                        "zipCode": {
                          "type": "string"
                        },
                        "city": {
                          "type": "string"
                        }
                      }
                    },
                    "registrationNo": {
                      "type": "string"
                    },
                    "externalRef1": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "description": {
                      "type": "string"
                    },
                    "subscriptionDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "isConsumer": {
                      "type": "boolean"
                    },
                    "status": {
                      "type": "string"
                    },
                    "endAgreementDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "validity": {
                      "type": "object",
                      "properties": {
                        "from": {
                          "type": "string",
                          "format": "date"
                        },
                        "to": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "versionNumber": {
                      "type": "number"
                    },
                    "subscription": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "serviceInstance": {
                      "type": "object",
                      "properties": {
                        "productVersion": {
                          "type": "object",
                          "properties": {
                            "product": {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "usageDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "quantity": {
                      "type": "number"
                    },
                    "unitAmountWithoutTax": {
                      "type": "number"
                    },
                    "amountWithoutTax": {
                      "type": "number"
                    },
                    "amountWithTax": {
                      "type": "number"
                    },
                    "parameter1": {
                      "type": "string"
                    },
                    "parameter2": {
                      "type": "string"
                    },
                    "parameter3": {
                      "type": "string"
                    },
                    "parameterExtra": {
                      "type": "string"
                    },
                    "quoteDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "quoteNumber": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "number"
                    },
                    "orderNumber": {
                      "type": "string"
                    },
                    "orderType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "orderDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "label": {
                      "type": "string"
                    },
                    "invoiceNumber": {
                      "type": "string"
                    },
                    "invoiceDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "invoiceType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "dueDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "paymentStatus": {
                      "type": "string"
                    },
                    "reference": {
                      "type": "string"
                    },
                    "collectionDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "type": {
                      "type": "string"
                    },
                    "accountingDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "OA_debit": {
                      "type": "number"
                    },
                    "OA_credit": {
                      "type": "number"
                    },
                    "matchingStatus": {
                      "type": "string"
                    },
                    "unMatchingAmount": {
                      "type": "number"
                    },
                    "matchingAmount": {
                      "type": "number"
                    },
                    "operationDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "securityDepositInvoice": {
                      "type": "string"
                    },
                    "securityDepositAdjustment": {
                      "type": "string"
                    },
                    "currency": {
                      "type": "object",
                      "properties": {
                        "currencyCode": {
                          "type": "string"
                        }
                      }
                    },
                    "currentBalance": {
                      "type": "number"
                    },
                    "externalReference": {
                      "type": "string"
                    },
                    "amountDebit": {
                      "type": "number"
                    },
                    "amountCredit": {
                      "type": "number"
                    },
                    "operation": {
                      "type": "string"
                    },
                    "accountOperation": {
                      "type": "object",
                      "properties": {
                        "reference": {
                          "type": "string"
                        }
                      }
                    },
                    "transactionDate": {
                      "type": "string"
                    },
                    "startDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "endDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "amountToRecover": {
                      "type": "number"
                    },
                    "contact": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "object",
                          "properties": {
                            "firstName": {
                              "type": "string"
                            },
                            "lastName": {
                              "type": "string"
                            }
                          }
                        },
                        "contactInformation": {
                          "type": "object",
                          "properties": {
                            "mobile": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "position": {
                      "type": "string"
                    },
                    "mainContact": {
                      "type": "string"
                    },
                    "searchBar": {
                      "type": "string"
                    },
                    "allAddress": {
                      "type": "string"
                    },
                    "addressCity": {
                      "type": "string"
                    },
                    "addressZipCode": {
                      "type": "string"
                    },
                    "addressCountry": {
                      "type": "string"
                    },
                    "addressState": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}\nbodyParams: {\n  crmAccountType: 'BA',\n  //@record.customerAccount.accountType',\n  code: '@record.code',\n  terminationDate: '@record.terminationDate',\n  terminationReason: '@record.terminationReason',\n  caStatus: 'CLOSE'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "crmAccountType": {
                    "type": "string",
                    "example": "BA"
                  },
                  "code": {
                    "type": "string",
                    "example": "@record.code"
                  },
                  "terminationDate": {
                    "type": "string",
                    "example": "@record.terminationDate"
                  },
                  "terminationReason": {
                    "type": "string",
                    "example": "@record.terminationReason"
                  },
                  "caStatus": {
                    "type": "string",
                    "example": "CLOSE"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/account/billingAccount/createOrUpdate": {
      "post": {
        "tags": [
          "B2B-customer-care/billing-accounts"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE_BA_INFO (src/srcProject/layout/B2B-customer-care/modules/billing-accounts/provider/provider.js#L468) -> account/billingAccount/createOrUpdate | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "customerInfo": {
                      "type": "string"
                    },
                    "address": {
                      "type": "object",
                      "properties": {
                        "address1": {
                          "type": "string"
                        },
                        "zipCode": {
                          "type": "string"
                        },
                        "city": {
                          "type": "string"
                        }
                      }
                    },
                    "registrationNo": {
                      "type": "string"
                    },
                    "externalRef1": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "description": {
                      "type": "string"
                    },
                    "subscriptionDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "isConsumer": {
                      "type": "boolean"
                    },
                    "status": {
                      "type": "string"
                    },
                    "endAgreementDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "validity": {
                      "type": "object",
                      "properties": {
                        "from": {
                          "type": "string",
                          "format": "date"
                        },
                        "to": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "versionNumber": {
                      "type": "number"
                    },
                    "subscription": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "serviceInstance": {
                      "type": "object",
                      "properties": {
                        "productVersion": {
                          "type": "object",
                          "properties": {
                            "product": {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "usageDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "quantity": {
                      "type": "number"
                    },
                    "unitAmountWithoutTax": {
                      "type": "number"
                    },
                    "amountWithoutTax": {
                      "type": "number"
                    },
                    "amountWithTax": {
                      "type": "number"
                    },
                    "parameter1": {
                      "type": "string"
                    },
                    "parameter2": {
                      "type": "string"
                    },
                    "parameter3": {
                      "type": "string"
                    },
                    "parameterExtra": {
                      "type": "string"
                    },
                    "quoteDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "quoteNumber": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "number"
                    },
                    "orderNumber": {
                      "type": "string"
                    },
                    "orderType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "orderDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "label": {
                      "type": "string"
                    },
                    "invoiceNumber": {
                      "type": "string"
                    },
                    "invoiceDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "invoiceType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "dueDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "paymentStatus": {
                      "type": "string"
                    },
                    "reference": {
                      "type": "string"
                    },
                    "collectionDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "type": {
                      "type": "string"
                    },
                    "accountingDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "OA_debit": {
                      "type": "number"
                    },
                    "OA_credit": {
                      "type": "number"
                    },
                    "matchingStatus": {
                      "type": "string"
                    },
                    "unMatchingAmount": {
                      "type": "number"
                    },
                    "matchingAmount": {
                      "type": "number"
                    },
                    "operationDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "securityDepositInvoice": {
                      "type": "string"
                    },
                    "securityDepositAdjustment": {
                      "type": "string"
                    },
                    "currency": {
                      "type": "object",
                      "properties": {
                        "currencyCode": {
                          "type": "string"
                        }
                      }
                    },
                    "currentBalance": {
                      "type": "number"
                    },
                    "externalReference": {
                      "type": "string"
                    },
                    "amountDebit": {
                      "type": "number"
                    },
                    "amountCredit": {
                      "type": "number"
                    },
                    "operation": {
                      "type": "string"
                    },
                    "accountOperation": {
                      "type": "object",
                      "properties": {
                        "reference": {
                          "type": "string"
                        }
                      }
                    },
                    "transactionDate": {
                      "type": "string"
                    },
                    "startDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "endDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "amountToRecover": {
                      "type": "number"
                    },
                    "contact": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "object",
                          "properties": {
                            "firstName": {
                              "type": "string"
                            },
                            "lastName": {
                              "type": "string"
                            }
                          }
                        },
                        "contactInformation": {
                          "type": "object",
                          "properties": {
                            "mobile": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "position": {
                      "type": "string"
                    },
                    "mainContact": {
                      "type": "string"
                    },
                    "searchBar": {
                      "type": "string"
                    },
                    "allAddress": {
                      "type": "string"
                    },
                    "addressCity": {
                      "type": "string"
                    },
                    "addressZipCode": {
                      "type": "string"
                    },
                    "addressCountry": {
                      "type": "string"
                    },
                    "addressState": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/generic/all/billingRule": {
      "post": {
        "tags": [
          "B2B-customer-care/billing-rules"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/billing-rules/provider/provider.js#L12) -> v2/generic/all/billingRule | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/billingRule',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/billing-rules/provider/provider.js#L15) -> v2/generic/all/billingRule | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/billingRule',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/billingRule',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/billingRule/": {
      "post": {
        "tags": [
          "B2B-customer-care/billing-rules"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/billing-rules/provider/provider.js#L19) -> v2/generic/billingRule/ | request: helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/billingRule/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/billingRule/',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/all/chargeInstance": {
      "post": {
        "tags": [
          "B2B-customer-care/charge-instances"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/charge-instances/provider/provider.js#L6) -> v2/generic/all/chargeInstance | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/chargeInstance',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/charge-instances/provider/provider.js#L9) -> v2/generic/all/chargeInstance | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/chargeInstance',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/chargeInstance',\n  nestedEntities\n}"
        ]
      }
    },
    "/customTable/list/CE_CENTRE_DE_COUT": {
      "post": {
        "tags": [
          "B2B-customer-care/coast-center"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/coast-center/provider/provider.js#L14) -> customTable/list/CE_CENTRE_DE_COUT | request: prepareParams: params => {\n  return {\n    ...params\n  };\n} | helper.nestedEntities: nestedEntities / response: responseContainer: 'tableData.record' | helper.responseContainer: data / info: specificAPIEnabled: true | keyColumn: 'id' | customTableCode: 'CE_CENTRE_DE_COUT' | nestedContainer: 'values' | helper: getListV2 | helperArgs: {\n  url: 'customTable/list/CE_CENTRE_DE_COUT',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/coast-center/provider/provider.js#L30) -> customTable/list/CE_CENTRE_DE_COUT | request: prepareParams: params => {\n  return {\n    ...params\n  };\n} | helper.nestedEntities: nestedEntities / response: responseContainer: 'tableData.record' | helper.responseContainer: data / info: specificAPIEnabled: true | keyColumn: 'id' | customTableCode: 'CE_CENTRE_DE_COUT' | nestedContainer: 'values' | helper: getListV2 | helperArgs: {\n  url: 'customTable/list/CE_CENTRE_DE_COUT',\n  nestedEntities\n}\n- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/coast-center/provider/provider.js#L47) -> customTable/list/CE_CENTRE_DE_COUT | request: prepareParams: params => {\n  return {\n    ...params\n  };\n} | helper.nestedEntities: nestedEntities / response: responseContainer: 'tableData.record' | helper.responseContainer: data / info: specificAPIEnabled: true | keyColumn: 'id' | customTableCode: 'CE_CENTRE_DE_COUT' | nestedContainer: 'values' | helper: getListV2 | helperArgs: {\n  url: 'customTable/list/CE_CENTRE_DE_COUT',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. responseContainer: 'tableData.record' | helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "tableData.record": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "cf_code": {
                                "type": "string"
                              },
                              "cf_description": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "cf_code": {
                                "type": "string"
                              },
                              "cf_description": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "tableData.record": {
                          "type": "object",
                          "properties": {
                            "cf_code": {
                              "type": "string"
                            },
                            "cf_description": {
                              "type": "string"
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "cf_code": {
                              "type": "string"
                            },
                            "cf_description": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  return {\n    ...params\n  };\n}\nhelper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  return {\n    ...params\n  };\n}\nhelper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true",
          "keyColumn: 'id'",
          "customTableCode: 'CE_CENTRE_DE_COUT'",
          "nestedContainer: 'values'",
          "helper: getListV2",
          "helperArgs: {\n  url: 'customTable/list/CE_CENTRE_DE_COUT',\n  nestedEntities\n}"
        ]
      }
    },
    "/customTable/list/CE_CENTRE_DE_COUT_MULTI": {
      "post": {
        "tags": [
          "B2B-customer-care/coast-center"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_CENTRE_COUT_MULTI (src/srcProject/layout/B2B-customer-care/modules/coast-center/provider/provider.js#L63) -> customTable/list/CE_CENTRE_DE_COUT_MULTI | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "cf_code": {
                      "type": "string"
                    },
                    "cf_description": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/customTable/createOrUpdate": {
      "post": {
        "tags": [
          "B2B-customer-care/coast-center",
          "B2B-customer-care/mdp-clients"
        ],
        "summary": "Used in 4 frontend location(s)",
        "description": "- POST_CENTRE_COUT_MULTI (src/srcProject/layout/B2B-customer-care/modules/coast-center/provider/provider.js#L79) -> customTable/createOrUpdate | request: helper.method: POST / info: helper: getCreateProvider | helperArgs: {\n  url: 'customTable/createOrUpdate',\n  method: 'POST'\n}\n- PUT_CENTRE_COUT_MULTI (src/srcProject/layout/B2B-customer-care/modules/coast-center/provider/provider.js#L86) -> customTable/createOrUpdate | request: helper.method: POST / info: helper: getUpdateProvider | helperArgs: {\n  url: 'customTable/createOrUpdate',\n  method: 'POST'\n}\n- POST_EXECUTED_SERVICE_AND_LEGAL_COMMITMENT (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L25) -> customTable/createOrUpdate | request: helper.method: POST / info: helper: getCreateProvider | helperArgs: {\n  url: 'customTable/createOrUpdate',\n  method: 'POST'\n}\n- PUT_EXECUTED_SERVICE_AND_LEGAL_COMMITMENT (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L32) -> customTable/createOrUpdate | request: helper.method: POST / info: helper: getUpdateProvider | helperArgs: {\n  url: 'customTable/createOrUpdate',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "cf_code": {
                      "type": "string"
                    },
                    "cf_description": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'customTable/createOrUpdate',\n  method: 'POST'\n}",
          "helper: getUpdateProvider"
        ]
      }
    },
    "/v2/generic/all/walletOperation": {
      "post": {
        "tags": [
          "B2B-customer-care/commercial-gestures",
          "B2B-customer-care/wallet-operations",
          "operation/wallet-operations"
        ],
        "summary": "Used in 8 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/commercial-gestures/provider/provider.js#L10) -> v2/generic/all/walletOperation | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/walletOperation',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/commercial-gestures/provider/provider.js#L17) -> v2/generic/all/walletOperation | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/walletOperation',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/wallet-operations/provider/provider.js#L12) -> v2/generic/all/walletOperation | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/walletOperation',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/wallet-operations/provider/provider.js#L19) -> v2/generic/all/walletOperation | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/walletOperation',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/B2B-customer-care/modules/wallet-operations/provider/provider.js#L26) -> v2/generic/all/walletOperation | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/walletOperation',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/operation/modules/wallet-operations/provider/provider.js#L46) -> v2/generic/all/walletOperation | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/walletOperation',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/operation/modules/wallet-operations/provider/provider.js#L54) -> v2/generic/all/walletOperation | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/walletOperation',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/operation/modules/wallet-operations/provider/provider.js#L61) -> v2/generic/all/walletOperation | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/walletOperation',\n  responseContainer: 'data',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data | transformResponse: transformResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "oneShotChargeTemplateType": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "invoiceId": {
                                "type": "string"
                              },
                              "billingAccountCode": {
                                "type": "string"
                              },
                              "invoiceNumber": {
                                "type": "string"
                              },
                              "paymentMethod": {
                                "type": "string"
                              },
                              "dueDate": {
                                "type": "string",
                                "format": "date"
                              },
                              "amountWithTax": {
                                "type": "number"
                              },
                              "pdfFilename": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "status": {
                                "type": "string"
                              },
                              "id": {
                                "type": "string"
                              },
                              "quantity": {
                                "type": "string"
                              },
                              "amountWithoutTax": {
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              },
                              "subscription": {
                                "type": "object",
                                "properties": {
                                  "order": {
                                    "type": "string"
                                  }
                                }
                              },
                              "chargeInstance": {
                                "type": "string"
                              },
                              "product": {
                                "type": "string"
                              },
                              "currency": {
                                "type": "object",
                                "properties": {
                                  "currencyCode": {
                                    "type": "string"
                                  }
                                }
                              },
                              "offerTemplate": {
                                "type": "string"
                              },
                              "contract": {
                                "type": "string"
                              },
                              "orderNumber": {
                                "type": "string"
                              },
                              "billingAccount": {
                                "type": "string"
                              },
                              "unbilled": {
                                "type": "string"
                              },
                              "operationDate": {
                                "type": "string"
                              },
                              "serviceInstance": {
                                "type": "string"
                              },
                              "parameter1": {
                                "type": "string"
                              },
                              "parameter2": {
                                "type": "string"
                              },
                              "parameter3": {
                                "type": "string"
                              },
                              "billed": {
                                "type": "string"
                              },
                              "pricePlanMatrixVersion": {
                                "type": "string"
                              },
                              "jobInstance": {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string"
                                  }
                                }
                              },
                              "startDate": {
                                "type": "string"
                              },
                              "endDate": {
                                "type": "string"
                              },
                              "nbItemsToProcess": {
                                "type": "string"
                              },
                              "nbItemsCorrectlyProcessed": {
                                "type": "string"
                              },
                              "nbItemsProcessedWithWarning": {
                                "type": "string"
                              },
                              "nbItemsProcessedWithError": {
                                "type": "string"
                              },
                              "report": {
                                "type": "string"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/walletOperation',\n  responseContainer: 'data',\n  nestedEntities\n}"
        ]
      }
    },
    "/billing/subscription/applyOneShotChargeInstance": {
      "post": {
        "tags": [
          "B2B-customer-care/commercial-gestures",
          "B2B-customer-care/osho"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/commercial-gestures/provider/provider.js#L24) -> billing/subscription/applyOneShotChargeInstance | request: helper.nestedEntities: [] / response: helper.responseContainer: '' / info: helper: getCreateProvider | helperArgs: {\n  url: 'billing/subscription/applyOneShotChargeInstance',\n  responseContainer: '',\n  nestedEntities: []\n}\n- CREATE (src/srcProject/layout/B2B-customer-care/modules/osho/provider/provider.js#L49) -> billing/subscription/applyOneShotChargeInstance | request: helper.nestedEntities: [] / response: helper.responseContainer: '' / info: helper: getCreateProvider | helperArgs: {\n  url: 'billing/subscription/applyOneShotChargeInstance',\n  responseContainer: '',\n  nestedEntities: []\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: ''",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "oneShotChargeTemplateType": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: []",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: []"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'billing/subscription/applyOneShotChargeInstance',\n  responseContainer: '',\n  nestedEntities: []\n}"
        ]
      }
    },
    "/v2/generic/all/": {
      "post": {
        "tags": [
          "B2B-customer-care/consumers"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/consumers/provider/provider.js#L12) -> v2/generic/all/ | request: helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/',\n  responseContainer: 'data',\n  keyColumn: 'code'\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/consumers/provider/provider.js#L25) -> v2/generic/all/ | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/B2B-customer-care/modules/consumers/provider/provider.js#L32) -> v2/generic/all/ | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/',\n  responseContainer: 'data',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.keyColumn: 'code'\nhelper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.keyColumn: 'code'\nhelper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/',\n  responseContainer: 'data',\n  keyColumn: 'code'\n}",
          "helperArgs: {\n  url: 'v2/generic/all/',\n  responseContainer: 'data',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/all/contact": {
      "post": {
        "tags": [
          "B2B-customer-care/contacts"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/contacts/provider/provider.js#L24) -> v2/generic/all/contact | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/contact',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/contacts/provider/provider.js#L31) -> v2/generic/all/contact | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/contact',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "object",
                            "properties": {
                              "firstName": {
                                "type": "string"
                              },
                              "lastName": {
                                "type": "string"
                              }
                            }
                          },
                          "companies": {
                            "type": "string"
                          },
                          "contactInformation": {
                            "type": "object",
                            "properties": {
                              "mobile": {
                                "type": "string"
                              },
                              "email": {
                                "type": "string"
                              }
                            }
                          },
                          "searchBar": {
                            "type": "string"
                          },
                          "addressCountryDescription": {
                            "type": "string"
                          },
                          "addressCity": {
                            "type": "string"
                          },
                          "addressZipCode": {
                            "type": "string"
                          },
                          "nameFirstName": {
                            "type": "string"
                          },
                          "nameLastName": {
                            "type": "string"
                          },
                          "reference": {
                            "type": "string"
                          },
                          "contactInformationMobile": {
                            "type": "string"
                          },
                          "contactInformationEmail": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/contact',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/contact/": {
      "post": {
        "tags": [
          "B2B-customer-care/contacts"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/contacts/provider/provider.js#L38) -> v2/generic/contact/ | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/contact/',\n  responseContainer: 'data',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "object",
                          "properties": {
                            "firstName": {
                              "type": "string"
                            },
                            "lastName": {
                              "type": "string"
                            }
                          }
                        },
                        "companies": {
                          "type": "string"
                        },
                        "contactInformation": {
                          "type": "object",
                          "properties": {
                            "mobile": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            }
                          }
                        },
                        "searchBar": {
                          "type": "string"
                        },
                        "addressCountryDescription": {
                          "type": "string"
                        },
                        "addressCity": {
                          "type": "string"
                        },
                        "addressZipCode": {
                          "type": "string"
                        },
                        "nameFirstName": {
                          "type": "string"
                        },
                        "nameLastName": {
                          "type": "string"
                        },
                        "reference": {
                          "type": "string"
                        },
                        "contactInformationMobile": {
                          "type": "string"
                        },
                        "contactInformationEmail": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/contact/',\n  responseContainer: 'data',\n  nestedEntities\n}"
        ]
      }
    },
    "/contact": {
      "post": {
        "tags": [
          "B2B-customer-care/contacts"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/contacts/provider/provider.js#L45) -> contact | request: helper.method: POST / response: helper.responseContainerId: {responseContainerId} / info: keyColumn: keyColumn | helper: getCreateProvider | helperArgs: {\n  url: 'contact',\n  method: 'POST',\n  responseContainerId\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainerId: {responseContainerId}",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "object",
                      "properties": {
                        "firstName": {
                          "type": "string"
                        },
                        "lastName": {
                          "type": "string"
                        }
                      }
                    },
                    "companies": {
                      "type": "string"
                    },
                    "contactInformation": {
                      "type": "object",
                      "properties": {
                        "mobile": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        }
                      }
                    },
                    "searchBar": {
                      "type": "string"
                    },
                    "addressCountryDescription": {
                      "type": "string"
                    },
                    "addressCity": {
                      "type": "string"
                    },
                    "addressZipCode": {
                      "type": "string"
                    },
                    "nameFirstName": {
                      "type": "string"
                    },
                    "nameLastName": {
                      "type": "string"
                    },
                    "reference": {
                      "type": "string"
                    },
                    "contactInformationMobile": {
                      "type": "string"
                    },
                    "contactInformationEmail": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'contact',\n  method: 'POST',\n  responseContainerId\n}"
        ]
      },
      "put": {
        "tags": [
          "B2B-customer-care/contacts"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/B2B-customer-care/modules/contacts/provider/provider.js#L53) -> contact | request: helper.method: PUT / info: keyColumn: keyColumn | helper: getUpdateProvider | helperArgs: {\n  url: 'contact',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "object",
                      "properties": {
                        "firstName": {
                          "type": "string"
                        },
                        "lastName": {
                          "type": "string"
                        }
                      }
                    },
                    "companies": {
                      "type": "string"
                    },
                    "contactInformation": {
                      "type": "object",
                      "properties": {
                        "mobile": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        }
                      }
                    },
                    "searchBar": {
                      "type": "string"
                    },
                    "addressCountryDescription": {
                      "type": "string"
                    },
                    "addressCity": {
                      "type": "string"
                    },
                    "addressZipCode": {
                      "type": "string"
                    },
                    "nameFirstName": {
                      "type": "string"
                    },
                    "nameLastName": {
                      "type": "string"
                    },
                    "reference": {
                      "type": "string"
                    },
                    "contactInformationMobile": {
                      "type": "string"
                    },
                    "contactInformationEmail": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'contact',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/contact/{code}": {
      "get": {
        "tags": [
          "B2B-customer-care/contacts"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/B2B-customer-care/modules/contacts/provider/provider.js#L60) -> contact/:code | response: responseContainer: 'contact'",
        "responses": {
          "200": {
            "description": "Successful response. responseContainer: 'contact'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "contact": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "object",
                          "properties": {
                            "firstName": {
                              "type": "string"
                            },
                            "lastName": {
                              "type": "string"
                            }
                          }
                        },
                        "companies": {
                          "type": "string"
                        },
                        "contactInformation": {
                          "type": "object",
                          "properties": {
                            "mobile": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            }
                          }
                        },
                        "searchBar": {
                          "type": "string"
                        },
                        "addressCountryDescription": {
                          "type": "string"
                        },
                        "addressCity": {
                          "type": "string"
                        },
                        "addressZipCode": {
                          "type": "string"
                        },
                        "nameFirstName": {
                          "type": "string"
                        },
                        "nameLastName": {
                          "type": "string"
                        },
                        "reference": {
                          "type": "string"
                        },
                        "contactInformationMobile": {
                          "type": "string"
                        },
                        "contactInformationEmail": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/generic/all/contractItem": {
      "post": {
        "tags": [
          "B2B-customer-care/contracts-line"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/contracts-line/provider/provider.js#L30) -> v2/generic/all/contractItem | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  return {\n    filter: filter,\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/contractItem',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/contracts-line/provider/provider.js#L43) -> v2/generic/all/contractItem | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/contractItem',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "TBC_serviceDelivery": {
                            "type": "string"
                          },
                          "TBC_product": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "TBC_quantity": {
                            "type": "string"
                          },
                          "TBC_recurringPrice": {
                            "type": "string"
                          },
                          "TBC_oneshotPrice": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  return {\n    filter: filter,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  return {\n    filter: filter,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/contractItem',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/contractItem/": {
      "post": {
        "tags": [
          "B2B-customer-care/contracts-line"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/contracts-line/provider/provider.js#L52) -> v2/generic/contractItem/ | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse / info: keyColumn: keyColumn | helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/contractItem/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "TBC_serviceDelivery": {
                      "type": "string"
                    },
                    "TBC_product": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "TBC_quantity": {
                      "type": "string"
                    },
                    "TBC_recurringPrice": {
                      "type": "string"
                    },
                    "TBC_oneshotPrice": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/contractItem/',\n  nestedEntities\n}"
        ]
      }
    },
    "/cpq/contracts/contractLines": {
      "post": {
        "tags": [
          "B2B-customer-care/contracts-line"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/contracts-line/provider/provider.js#L61) -> cpq/contracts/contractLines | request: helper.method: POST / info: keyColumn: keyColumn | helper: getCreateProvider | helperArgs: {\n  url: 'cpq/contracts/contractLines',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "TBC_serviceDelivery": {
                      "type": "string"
                    },
                    "TBC_product": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "TBC_quantity": {
                      "type": "string"
                    },
                    "TBC_recurringPrice": {
                      "type": "string"
                    },
                    "TBC_oneshotPrice": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'cpq/contracts/contractLines',\n  method: 'POST'\n}"
        ]
      },
      "put": {
        "tags": [
          "B2B-customer-care/contracts-line"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/B2B-customer-care/modules/contracts-line/provider/provider.js#L69) -> cpq/contracts/contractLines | request: helper.method: PUT / info: keyColumn: keyColumn | helper: getUpdateProvider | helperArgs: {\n  url: 'cpq/contracts/contractLines',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "TBC_serviceDelivery": {
                      "type": "string"
                    },
                    "TBC_product": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "TBC_quantity": {
                      "type": "string"
                    },
                    "TBC_recurringPrice": {
                      "type": "string"
                    },
                    "TBC_oneshotPrice": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'cpq/contracts/contractLines',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/cpq/contracts/contractLines/{code}": {
      "delete": {
        "tags": [
          "B2B-customer-care/contracts-line"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- DELETE_CONTRACT_LINE (src/srcProject/layout/B2B-customer-care/modules/contracts-line/provider/provider.js#L74) -> cpq/contracts/contractLines/:code | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'cpq/contracts/contractLines/:code',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "TBC_serviceDelivery": {
                      "type": "string"
                    },
                    "TBC_product": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "TBC_quantity": {
                      "type": "string"
                    },
                    "TBC_recurringPrice": {
                      "type": "string"
                    },
                    "TBC_oneshotPrice": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'cpq/contracts/contractLines/:code',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/generic/all/counterInstance": {
      "post": {
        "tags": [
          "B2B-customer-care/counter-instance"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/counter-instance/provider/provider.js#L13) -> v2/generic/all/counterInstance | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/counterInstance',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/counter-instance/provider/provider.js#L19) -> v2/generic/all/counterInstance | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/counterInstance',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "startDate": {
                            "type": "string"
                          },
                          "endDate": {
                            "type": "string"
                          },
                          "level": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "accumulatedValues": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/counterInstance',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/counterInstance/": {
      "post": {
        "tags": [
          "B2B-customer-care/counter-instance"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/counter-instance/provider/provider.js#L25) -> v2/generic/counterInstance/ | request: helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/counterInstance/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "startDate": {
                      "type": "string"
                    },
                    "endDate": {
                      "type": "string"
                    },
                    "level": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    },
                    "accumulatedValues": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/counterInstance/',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/all/counterPeriod": {
      "post": {
        "tags": [
          "B2B-customer-care/counters"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/counters/provider/provider.js#L31) -> v2/generic/all/counterPeriod | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  return {\n    filter: filter,\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/counterPeriod',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/counters/provider/provider.js#L44) -> v2/generic/all/counterPeriod | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/counterPeriod',\n  nestedEntities\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/B2B-customer-care/modules/counters/provider/provider.js#L52) -> v2/generic/all/counterPeriod | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/counterPeriod',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "counterType": {
                            "type": "string"
                          },
                          "periodStartDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "periodEndDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "level": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "accumulatedValues": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  return {\n    filter: filter,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  return {\n    filter: filter,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/counterPeriod',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/counterPeriod/": {
      "post": {
        "tags": [
          "B2B-customer-care/counters"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/counters/provider/provider.js#L61) -> v2/generic/counterPeriod/ | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse / info: keyColumn: keyColumn | helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/counterPeriod/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "counterType": {
                      "type": "string"
                    },
                    "periodStartDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "periodEndDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "level": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    },
                    "accumulatedValues": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/counterPeriod/',\n  nestedEntities\n}"
        ]
      }
    },
    "/cpq/contracts/counterPeriod": {
      "post": {
        "tags": [
          "B2B-customer-care/counters"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/counters/provider/provider.js#L70) -> cpq/contracts/counterPeriod | request: helper.method: POST / info: keyColumn: keyColumn | helper: getCreateProvider | helperArgs: {\n  url: 'cpq/contracts/counterPeriod',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "counterType": {
                      "type": "string"
                    },
                    "periodStartDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "periodEndDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "level": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    },
                    "accumulatedValues": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'cpq/contracts/counterPeriod',\n  method: 'POST'\n}"
        ]
      },
      "put": {
        "tags": [
          "B2B-customer-care/counters"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/B2B-customer-care/modules/counters/provider/provider.js#L78) -> cpq/contracts/counterPeriod | request: helper.method: PUT / info: keyColumn: keyColumn | helper: getUpdateProvider | helperArgs: {\n  url: 'cpq/contracts/counterPeriod',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "counterType": {
                      "type": "string"
                    },
                    "periodStartDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "periodEndDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "level": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    },
                    "accumulatedValues": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'cpq/contracts/counterPeriod',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/cpq/contracts/counterPeriod/{code}": {
      "delete": {
        "tags": [
          "B2B-customer-care/counters"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- DELETE_CONTRACT_LINE (src/srcProject/layout/B2B-customer-care/modules/counters/provider/provider.js#L83) -> cpq/contracts/counterPeriod/:code | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'cpq/contracts/counterPeriod/:code',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "counterType": {
                      "type": "string"
                    },
                    "periodStartDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "periodEndDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "level": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    },
                    "accumulatedValues": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'cpq/contracts/counterPeriod/:code',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/generic/all/quoteOffer": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq",
          "B2B-customer-care/quote-offers"
        ],
        "summary": "Used in 6 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/cpq/catalogBrowsing/provider/provider.js#L298) -> v2/generic/all/quoteOffer | request: helper.nestedEntities: quoteOfferNestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/quoteOffer',\n  nestedEntities: quoteOfferNestedEntities\n}\n- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L567) -> v2/generic/all/quoteOffer | request: helper.nestedEntities: quoteOfferNestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/quoteOffer',\n  nestedEntities: quoteOfferNestedEntities\n}\n- GET_CUSTOMIZEDQUOTE_OFFER (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L927) -> v2/generic/all/quoteOffer | request: options: {\n  method: 'POST'\n}\n- GET_ORDER (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L1021) -> v2/generic/all/quoteOffer | request: options: {\n  method: 'POST'\n}\n- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/quote-offers/provider/provider.js#L41) -> v2/generic/all/quoteOffer | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/quoteOffer',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/quote-offers/provider/provider.js#L49) -> v2/generic/all/quoteOffer | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/quoteOffer',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "TBC_serviceDelivery": {
                                "type": "string"
                              },
                              "TBC_product": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "TBC_quantity": {
                                "type": "string"
                              },
                              "TBC_recurringPrice": {
                                "type": "string"
                              },
                              "TBC_oneshotPrice": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "TBC_serviceDelivery": {
                              "type": "string"
                            },
                            "TBC_product": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "TBC_quantity": {
                              "type": "string"
                            },
                            "TBC_recurringPrice": {
                              "type": "string"
                            },
                            "TBC_oneshotPrice": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: quoteOfferNestedEntities\noptions: {\n  method: 'POST'\n}\nhelper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: quoteOfferNestedEntities\noptions: {\n  method: 'POST'\n}\nhelper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/quoteOffer',\n  nestedEntities: quoteOfferNestedEntities\n}",
          "helperArgs: {\n  url: 'v2/generic/all/quoteOffer',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/quoteOffer/": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq",
          "B2B-customer-care/quote-offers"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/cpq/catalogBrowsing/provider/provider.js#L306) -> v2/generic/quoteOffer/ | request: helper.nestedEntities: quoteOfferNestedEntities / response: transformResponse: transformResponse / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/quoteOffer/',\n  nestedEntities: quoteOfferNestedEntities\n}\n- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L575) -> v2/generic/quoteOffer/ | request: helper.nestedEntities: quoteOfferNestedEntitiesGetOne / response: transformResponse: transformResponse / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/quoteOffer/',\n  nestedEntities: quoteOfferNestedEntitiesGetOne\n}\n- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/quote-offers/provider/provider.js#L55) -> v2/generic/quoteOffer/ | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse / info: keyColumn: keyColumn | helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/quoteOffer/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "TBC_serviceDelivery": {
                      "type": "string"
                    },
                    "TBC_product": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "TBC_quantity": {
                      "type": "string"
                    },
                    "TBC_recurringPrice": {
                      "type": "string"
                    },
                    "TBC_oneshotPrice": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: quoteOfferNestedEntities\nhelper.nestedEntities: quoteOfferNestedEntitiesGetOne\nhelper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: quoteOfferNestedEntities\nhelper.nestedEntities: quoteOfferNestedEntitiesGetOne\nhelper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/quoteOffer/',\n  nestedEntities: quoteOfferNestedEntities\n}",
          "helperArgs: {\n  url: 'v2/generic/quoteOffer/',\n  nestedEntities: quoteOfferNestedEntitiesGetOne\n}",
          "keyColumn: keyColumn",
          "helperArgs: {\n  url: 'v2/generic/quoteOffer/',\n  nestedEntities\n}"
        ]
      }
    },
    "/quote/create/quoteitems": {
      "put": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L582) -> quote/create/quoteitems | request: prepareParams: prepareParams | helper.method: PUT / response: responseContainer: 'quoteOfferDto' | responseContainerId: 'quoteOfferId' / info: excludeProperties: ['quoteId', 'redirectAfterSave'] | helper: getCreateProvider | helperArgs: {\n  url: 'quote/create/quoteitems',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response. responseContainer: 'quoteOfferDto' | responseContainerId: 'quoteOfferId'"
          }
        },
        "requestBody": {
          "description": "prepareParams: prepareParams\nhelper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: prepareParams\nhelper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "excludeProperties: ['quoteId', 'redirectAfterSave']",
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'quote/create/quoteitems',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/quote/update/quoteitems": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L592) -> quote/update/quoteitems | request: prepareParams: prepareParams | helper.keyColumn: keyColumn | helper.method: POST / info: excludeProperties: ['quoteId', 'redirectAfterSave'] | helper: getUpdateProvider | helperArgs: {\n  keyColumn,\n  url: 'quote/update/quoteitems',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "prepareParams: prepareParams\nhelper.keyColumn: keyColumn\nhelper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: prepareParams\nhelper.keyColumn: keyColumn\nhelper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "excludeProperties: ['quoteId', 'redirectAfterSave']",
          "helper: getUpdateProvider",
          "helperArgs: {\n  keyColumn,\n  url: 'quote/update/quoteitems',\n  method: 'POST'\n}"
        ]
      }
    },
    "/cpq/quotes/quoteItems/": {
      "delete": {
        "tags": [
          "B2B-customer-care/cpq",
          "B2B-customer-care/quote-offers"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L601) -> cpq/quotes/quoteItems/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'cpq/quotes/quoteItems/',\n  method: 'DELETE'\n}\n- DELETE (src/srcProject/layout/B2B-customer-care/modules/quote-offers/provider/provider.js#L80) -> cpq/quotes/quoteItems/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'cpq/quotes/quoteItems/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/quote-offers/provider/provider.js#L88) -> cpq/quotes/quoteItems/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'cpq/quotes/quoteItems/',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "TBC_serviceDelivery": {
                      "type": "string"
                    },
                    "TBC_product": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "TBC_quantity": {
                      "type": "string"
                    },
                    "TBC_recurringPrice": {
                      "type": "string"
                    },
                    "TBC_oneshotPrice": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'cpq/quotes/quoteItems/',\n  method: 'DELETE'\n}",
          "keyColumn: keyColumn"
        ]
      },
      "post": {
        "tags": [
          "B2B-customer-care/quote-offers"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/quote-offers/provider/provider.js#L61) -> cpq/quotes/quoteItems/ | request: helper.method: POST / response: helper.responseContainer: quoteOfferDto | helper.responseContainerId: quoteOfferId / info: keyColumn: keyColumn | helper: getCreateProvider | helperArgs: {\n  url: 'cpq/quotes/quoteItems/',\n  method: 'POST',\n  responseContainer: 'quoteOfferDto',\n  responseContainerId: 'quoteOfferId'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: quoteOfferDto | helper.responseContainerId: quoteOfferId",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "quoteOfferDto": {
                      "type": "object",
                      "properties": {
                        "TBC_serviceDelivery": {
                          "type": "string"
                        },
                        "TBC_product": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "TBC_quantity": {
                          "type": "string"
                        },
                        "TBC_recurringPrice": {
                          "type": "string"
                        },
                        "TBC_oneshotPrice": {
                          "type": "string"
                        }
                      }
                    },
                    "quoteOfferId": {
                      "type": "object",
                      "properties": {
                        "TBC_serviceDelivery": {
                          "type": "string"
                        },
                        "TBC_product": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "TBC_quantity": {
                          "type": "string"
                        },
                        "TBC_recurringPrice": {
                          "type": "string"
                        },
                        "TBC_oneshotPrice": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'cpq/quotes/quoteItems/',\n  method: 'POST',\n  responseContainer: 'quoteOfferDto',\n  responseContainerId: 'quoteOfferId'\n}"
        ]
      }
    },
    "/catalog/offerTemplate/cpq/list": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_OFFERS (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L604) -> catalog/offerTemplate/cpq/list | request: options: {\n  method: 'POST'\n} / info: keyColumn: keyColumn",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn"
        ]
      }
    },
    "/catalog/products/cpq/offers": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_PRODUCT_CONFIG (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L612) -> catalog/products/cpq/offers | request: options: {\n  method: 'POST'\n} / info: keyColumn: keyColumn\n- GET_OFFER_ATTRIBUTES (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L643) -> catalog/products/cpq/offers | request: options: {\n  method: 'POST'\n} / info: keyColumn: keyColumn",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn"
        ]
      }
    },
    "/v2/generic/cpqQuote/{id}": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_QUOTE (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L620) -> v2/generic/cpqQuote/:id | request: options: {\n  method: 'POST',\n  body: quoteBody\n} / info: keyColumn: keyColumn",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST',\n  body: quoteBody\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "description": "Identifier reference: quoteBody",
                "x-expression": "quoteBody"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn"
        ]
      }
    },
    "/v2/generic/product/{id}": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_PRODUCT (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L628) -> v2/generic/product/:id | request: options: {\n  method: 'POST',\n  body: productBody\n} / info: keyColumn: keyColumn",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST',\n  body: productBody\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "description": "Identifier reference: productBody",
                "x-expression": "productBody"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn"
        ]
      }
    },
    "/attributes/cpq/offers/{productCode}/{productVersion}": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ATTRIBUTE_CONFIG (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L636) -> attributes/cpq/offers/:productCode/:productVersion | request: options: {\n  method: 'POST'\n} / info: keyColumn: keyColumn",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn"
        ]
      }
    },
    "/v2/generic/all/offerTemplate": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq",
          "B2B-customer-care/offers",
          "CPQ-marketing-manager/offer-models",
          "CPQ-marketing-manager/offers",
          "catalog/offers",
          "catalog/offers-available"
        ],
        "summary": "Used in 9 frontend location(s)",
        "description": "- GET_OFFER_ID (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L650) -> v2/generic/all/offerTemplate | request: options: {\n  method: 'POST'\n}\n- GET_OFFER_TEMPLATE (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L859) -> v2/generic/all/offerTemplate | request: options: {\n  method: 'POST'\n}\n- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/offers/provider/provider.js#L18) -> v2/generic/all/offerTemplate | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    ...restFilter\n  } = filter;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: getGenericFormatDate(get(validity, key))\n  };\n  const transformedFilters = {\n    filter: {\n      lifeCycleStatus: 'ACTIVE',\n      ...restFilter,\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to')\n    },\n    ...restParams\n  };\n  return transformedFilters;\n} | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/offerTemplate',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/catalog/modules/offers/provider/provider.js#L36) -> v2/generic/all/offerTemplate | request: prepareParams: params => {\n  const {\n    filter = {},\n    sort,\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    tags,\n    ...restFilter\n  } = filter;\n  const transformSort = get(sort, 'field') === 'tags' ? {\n    ...sort,\n    field: 'tags.description'\n  } : get(sort, 'field') === 'medias' ? {\n    ...sort,\n    field: 'medias.mediaName'\n  } : sort;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: getGenericFormatDate(get(validity, key))\n  };\n  const transformedFilters = {\n    filter: {\n      ...(!isEmpty(tags) ? {\n        'inList tags': {\n          id: get(tags, 'id')\n        }\n      } : {}),\n      ...restFilter,\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to')\n    },\n    sort: {\n      ...transformSort\n    },\n    ...restParams\n  };\n  return transformedFilters;\n} | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/offerTemplate',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/catalog/modules/offers/provider/provider.js#L70) -> v2/generic/all/offerTemplate | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/offerTemplate',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/catalog/modules/offers-available/provider/provider.js#L18) -> v2/generic/all/offerTemplate | request: helper.nestedEntities: nestedEntities | helper.filters: filters / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/offerTemplate',\n  nestedEntities,\n  filters\n}\n- GET_MANY (src/srcProject/layout/catalog/modules/offers-available/provider/provider.js#L25) -> v2/generic/all/offerTemplate | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/offerTemplate',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/CPQ-marketing-manager/modules/offer-models/provider/provider.js#L24) -> v2/generic/all/offerTemplate | request: prepareParams: params => {\n  const {\n    filter = {},\n    sort,\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    tags,\n    ...restFilter\n  } = filter;\n  const transformSort = get(sort, 'field') === 'tags' ? {\n    ...sort,\n    field: 'tags.description'\n  } : sort;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: getGenericFormatDate(get(validity, key))\n  };\n  const transformedFilters = {\n    filter: {\n      ...(!isEmpty(tags) ? {\n        'inList tags': {\n          id: get(tags, 'id')\n        }\n      } : {}),\n      ...restFilter,\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to'),\n      isModel: true,\n      lifeCycleStatus: 'ACTIVE',\n      'fromOptionalRange validity.to': '@currentDate'\n    },\n    sort: {\n      ...transformSort\n    },\n    ...restParams\n  };\n  return transformedFilters;\n} | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/offerTemplate',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/CPQ-marketing-manager/modules/offers/provider/provider.js#L24) -> v2/generic/all/offerTemplate | request: prepareParams: params => {\n  const {\n    filter = {},\n    sort,\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    tags,\n    ...restFilter\n  } = filter;\n  const transformSort = get(sort, 'field') === 'tags' ? {\n    ...sort,\n    field: 'tags.description'\n  } : get(sort, 'field') === 'medias' ? {\n    ...sort,\n    field: 'medias.mediaName'\n  } : sort;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: getGenericFormatDate(get(validity, key))\n  };\n  const transformedFilters = {\n    filter: {\n      ...(!isEmpty(tags) ? {\n        'inList tags': {\n          id: get(tags, 'id')\n        }\n      } : {}),\n      ...restFilter,\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to')\n    },\n    sort: {\n      ...transformSort\n    },\n    ...restParams\n  };\n  return transformedFilters;\n} | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/offerTemplate',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "code": {
                                    "type": "string"
                                  },
                                  "lifeCycleStatus": {
                                    "type": "string"
                                  },
                                  "validity": {
                                    "type": "object",
                                    "properties": {
                                      "from": {
                                        "type": "string"
                                      },
                                      "to": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "medias": {
                                    "type": "string"
                                  },
                                  "auditable": {
                                    "type": "object",
                                    "properties": {
                                      "created": {
                                        "type": "string",
                                        "format": "date"
                                      }
                                    }
                                  },
                                  "tags": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "isModel": {
                                    "type": "boolean"
                                  },
                                  "description": {
                                    "type": "string"
                                  },
                                  "status": {
                                    "type": "string"
                                  },
                                  "instanceCode": {
                                    "type": "string"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "code": {
                                    "type": "string"
                                  },
                                  "validity": {
                                    "type": "object",
                                    "properties": {
                                      "from": {
                                        "type": "string"
                                      },
                                      "to": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "medias": {
                                    "type": "string"
                                  },
                                  "tags": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "description": {
                                    "type": "string"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  },
                                  "code": {
                                    "type": "string"
                                  },
                                  "lifeCycleStatus": {
                                    "type": "string"
                                  },
                                  "validity": {
                                    "type": "object",
                                    "properties": {
                                      "from": {
                                        "type": "string"
                                      },
                                      "to": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "medias": {
                                    "type": "string"
                                  },
                                  "tags": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "description": {
                                    "type": "string"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "code": {
                                  "type": "string"
                                },
                                "lifeCycleStatus": {
                                  "type": "string"
                                },
                                "validity": {
                                  "type": "object",
                                  "properties": {
                                    "from": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "medias": {
                                  "type": "string"
                                },
                                "auditable": {
                                  "type": "object",
                                  "properties": {
                                    "created": {
                                      "type": "string",
                                      "format": "date"
                                    }
                                  }
                                },
                                "tags": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "isModel": {
                                  "type": "boolean"
                                },
                                "description": {
                                  "type": "string"
                                },
                                "status": {
                                  "type": "string"
                                },
                                "instanceCode": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "code": {
                                  "type": "string"
                                },
                                "validity": {
                                  "type": "object",
                                  "properties": {
                                    "from": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "medias": {
                                  "type": "string"
                                },
                                "tags": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "description": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "code": {
                                  "type": "string"
                                },
                                "lifeCycleStatus": {
                                  "type": "string"
                                },
                                "validity": {
                                  "type": "object",
                                  "properties": {
                                    "from": {
                                      "type": "string"
                                    },
                                    "to": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "medias": {
                                  "type": "string"
                                },
                                "tags": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "description": {
                                  "type": "string"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}\nprepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    ...restFilter\n  } = filter;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: getGenericFormatDate(get(validity, key))\n  };\n  const transformedFilters = {\n    filter: {\n      lifeCycleStatus: 'ACTIVE',\n      ...restFilter,\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to')\n    },\n    ...restParams\n  };\n  return transformedFilters;\n}\nhelper.nestedEntities: nestedEntities\nprepareParams: params => {\n  const {\n    filter = {},\n    sort,\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    tags,\n    ...restFilter\n  } = filter;\n  const transformSort = get(sort, 'field') === 'tags' ? {\n    ...sort,\n    field: 'tags.description'\n  } : get(sort, 'field') === 'medias' ? {\n    ...sort,\n    field: 'medias.mediaName'\n  } : sort;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: getGenericFormatDate(get(validity, key))\n  };\n  const transformedFilters = {\n    filter: {\n      ...(!isEmpty(tags) ? {\n        'inList tags': {\n          id: get(tags, 'id')\n        }\n      } : {}),\n      ...restFilter,\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to')\n    },\n    sort: {\n      ...transformSort\n    },\n    ...restParams\n  };\n  return transformedFilters;\n}\nhelper.filters: filters\nprepareParams: params => {\n  const {\n    filter = {},\n    sort,\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    tags,\n    ...restFilter\n  } = filter;\n  const transformSort = get(sort, 'field') === 'tags' ? {\n    ...sort,\n    field: 'tags.description'\n  } : sort;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: getGenericFormatDate(get(validity, key))\n  };\n  const transformedFilters = {\n    filter: {\n      ...(!isEmpty(tags) ? {\n        'inList tags': {\n          id: get(tags, 'id')\n        }\n      } : {}),\n      ...restFilter,\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to'),\n      isModel: true,\n      lifeCycleStatus: 'ACTIVE',\n      'fromOptionalRange validity.to': '@currentDate'\n    },\n    sort: {\n      ...transformSort\n    },\n    ...restParams\n  };\n  return transformedFilters;\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}\nprepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    ...restFilter\n  } = filter;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: getGenericFormatDate(get(validity, key))\n  };\n  const transformedFilters = {\n    filter: {\n      lifeCycleStatus: 'ACTIVE',\n      ...restFilter,\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to')\n    },\n    ...restParams\n  };\n  return transformedFilters;\n}\nhelper.nestedEntities: nestedEntities\nprepareParams: params => {\n  const {\n    filter = {},\n    sort,\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    tags,\n    ...restFilter\n  } = filter;\n  const transformSort = get(sort, 'field') === 'tags' ? {\n    ...sort,\n    field: 'tags.description'\n  } : get(sort, 'field') === 'medias' ? {\n    ...sort,\n    field: 'medias.mediaName'\n  } : sort;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: getGenericFormatDate(get(validity, key))\n  };\n  const transformedFilters = {\n    filter: {\n      ...(!isEmpty(tags) ? {\n        'inList tags': {\n          id: get(tags, 'id')\n        }\n      } : {}),\n      ...restFilter,\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to')\n    },\n    sort: {\n      ...transformSort\n    },\n    ...restParams\n  };\n  return transformedFilters;\n}\nhelper.filters: filters\nprepareParams: params => {\n  const {\n    filter = {},\n    sort,\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    tags,\n    ...restFilter\n  } = filter;\n  const transformSort = get(sort, 'field') === 'tags' ? {\n    ...sort,\n    field: 'tags.description'\n  } : sort;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: getGenericFormatDate(get(validity, key))\n  };\n  const transformedFilters = {\n    filter: {\n      ...(!isEmpty(tags) ? {\n        'inList tags': {\n          id: get(tags, 'id')\n        }\n      } : {}),\n      ...restFilter,\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to'),\n      isModel: true,\n      lifeCycleStatus: 'ACTIVE',\n      'fromOptionalRange validity.to': '@currentDate'\n    },\n    sort: {\n      ...transformSort\n    },\n    ...restParams\n  };\n  return transformedFilters;\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/offerTemplate',\n  nestedEntities\n}",
          "helperArgs: {\n  url: 'v2/generic/all/offerTemplate',\n  nestedEntities,\n  filters\n}"
        ]
      }
    },
    "/proxyFacebook/interet": {
      "get": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_FB_INTERET (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L656) -> proxyFacebook/interet | request: options: {\n  method: 'GET'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ]
      }
    },
    "/proxyFacebook/simulation": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- VALIDATE_FB_SIMULATION (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L683) -> proxyFacebook/simulation | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/oauth/v2/token": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_GOOGLE_TOKEN (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L690) -> https://wspart-visiperf.mediapost.fr/oauth/v2/token | request: options: {\n  method: 'POST'\n  /* body: JSON.stringify({\r\n              grant_type: 'password',\r\n              client_id: '6_2kgtevfkpww0o8swokwgsc8wsw0gsg8ko8s4cs08k08swows4c',\r\n              client_secret: '520d35mz65ss44kk4c8wwos00oo0gcskkcs0wccg80gsw444sw',\r\n              username: 'commediadev',\r\n              password: 'ejh6QhkLL4USzfKh'\r\n            })*/\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n  /* body: JSON.stringify({\r\n              grant_type: 'password',\r\n              client_id: '6_2kgtevfkpww0o8swokwgsc8wsw0gsg8ko8s4cs08k08swows4c',\r\n              client_secret: '520d35mz65ss44kk4c8wwos00oo0gcskkcs0wccg80gsw444sw',\r\n              username: 'commediadev',\r\n              password: 'ejh6QhkLL4USzfKh'\r\n            })*/\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n  /* body: JSON.stringify({\r\n              grant_type: 'password',\r\n              client_id: '6_2kgtevfkpww0o8swokwgsc8wsw0gsg8ko8s4cs08k08swows4c',\r\n              client_secret: '520d35mz65ss44kk4c8wwos00oo0gcskkcs0wccg80gsw444sw',\r\n              username: 'commediadev',\r\n              password: 'ejh6QhkLL4USzfKh'\r\n            })*/\n}"
              }
            }
          }
        }
      }
    },
    "/proxyVisiperf/localiteClient": {
      "get": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_LOCALITE_GOOGLE (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L703) -> proxyVisiperf/localiteClient? | request: options: {\n  method: 'GET'\n} / info: keyColumn: 'id'",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ],
        "x-dev-notes": [
          "keyColumn: 'id'"
        ]
      }
    },
    "/proxyVisiperf/activiteClient": {
      "get": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ACTIVITY_GOOGLE (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L711) -> proxyVisiperf/activiteClient? | request: options: {\n  method: 'GET'\n} / info: keyColumn: 'id'",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ],
        "x-dev-notes": [
          "keyColumn: 'id'"
        ]
      }
    },
    "/proxyVisiperf/valider": {
      "get": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- VALIDATE_GOOGLE_SIMULATION (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L719) -> proxyVisiperf/valider? | request: options: {\n  method: 'GET'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ]
      }
    },
    "/proxyVisiperf/simulation": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- SIMULATE_GOOGLE_API (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L726) -> proxyVisiperf/simulation | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/cpq/quotes/quoteItems/{id}": {
      "delete": {
        "tags": [
          "B2B-customer-care/cpq",
          "B2B-customer-care/quote-offers"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DELETE_QUOTE_OFFER (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L732) -> cpq/quotes/quoteItems/:id | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'cpq/quotes/quoteItems/:id',\n  method: 'DELETE'\n}\n- DELETE_QUOTE_OFFER (src/srcProject/layout/B2B-customer-care/modules/quote-offers/provider/provider.js#L96) -> cpq/quotes/quoteItems/:id | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'cpq/quotes/quoteItems/:id',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "TBC_serviceDelivery": {
                      "type": "string"
                    },
                    "TBC_product": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "TBC_quantity": {
                      "type": "string"
                    },
                    "TBC_recurringPrice": {
                      "type": "string"
                    },
                    "TBC_oneshotPrice": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'cpq/quotes/quoteItems/:id',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/ProductsLine/{quoteId}": {
      "get": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_OFFERS_LIST_JSON (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L752) -> ProductsLine/:quoteId | request: options: {\n  method: 'GET'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ]
      }
    },
    "/cpq/quotes/quoteItems": {
      "put": {
        "tags": [
          "B2B-customer-care/cpq",
          "B2B-customer-care/quote-offers"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- UPDATE_QUOTE_OFFER (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L758) -> cpq/quotes/quoteItems | request: options: {\n  method: 'PUT'\n}\n- ADD_RESILIATION_DATE_TO_PRESTATION (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L897) -> cpq/quotes/quoteItems | request: options: {\n  method: 'PUT'\n}\n- UPDATE (src/srcProject/layout/B2B-customer-care/modules/quote-offers/provider/provider.js#L71) -> cpq/quotes/quoteItems | request: helper.method: PUT / response: helper.responseContainer: quoteOfferDto / info: keyColumn: keyColumn | helper: getUpdateProvider | helperArgs: {\n  url: 'cpq/quotes/quoteItems',\n  method: 'PUT',\n  responseContainer: 'quoteOfferDto'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: quoteOfferDto",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "quoteOfferDto": {
                      "type": "object",
                      "properties": {
                        "TBC_serviceDelivery": {
                          "type": "string"
                        },
                        "TBC_product": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "TBC_quantity": {
                          "type": "string"
                        },
                        "TBC_recurringPrice": {
                          "type": "string"
                        },
                        "TBC_oneshotPrice": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}\nhelper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}\nhelper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'cpq/quotes/quoteItems',\n  method: 'PUT',\n  responseContainer: 'quoteOfferDto'\n}"
        ]
      }
    },
    "/v2/quoteItems/{QuoteCode}/{QuoteVersionNumero}/{quoteOfferId}/duplication": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- DUPLICATE_PRESTATION (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L764) -> v2/quoteItems/:QuoteCode/:QuoteVersionNumero/:quoteOfferId/duplication | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/{WEBDATA_BASE_URL}/packsecto/counting/Count": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- COMPTAGE_WEBDATA (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L820) -> {WEBDATA_BASE_URL}/packsecto/counting/Count | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/{WEBDATA_TOKEN}/auth/connect/token": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- WEBDATA_TOKEN (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L826) -> {WEBDATA_TOKEN}/auth/connect/token | request: options: {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  }\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  }\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  }\n}"
              }
            }
          }
        }
      }
    },
    "/webdataProxy/comptage": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- WEBDATA_PROXY (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L835) -> webdataProxy/comptage | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/generic/all/Subscription": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_SUBSCRIPTION (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L873) -> v2/generic/all/Subscription | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/terminationReason/list": {
      "get": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_TERMINATION_REASON (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L879) -> terminationReason/list | request: options: {\n  method: 'GET'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ]
      }
    },
    "/billing/subscription/terminate": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq",
          "B2B-customer-care/subscriptions"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- TERMINATE_SUBSCRIPTION (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L885) -> billing/subscription/terminate | request: options: {\n  method: 'POST'\n}\n- TERMINATE (src/srcProject/layout/B2B-customer-care/modules/subscriptions/provider/provider.js#L114) -> billing/subscription/terminate | request: options: {\n  method: 'POST'\n} | bodyParams: {\n  terminationDate: '@record.terminationDate',\n  terminationReason: '@record.terminationReason',\n  subscriptionCode: '@record.subscriptionCode'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "userAccount": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "description": {
                      "type": "string"
                    },
                    "offer": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "status": {
                      "type": "string"
                    },
                    "subscriptionDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "validity": {
                      "type": "object",
                      "properties": {
                        "from": {
                          "type": "string",
                          "format": "date"
                        },
                        "to": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "versionNumber": {
                      "type": "number"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "searchBar": {
                      "type": "string"
                    },
                    "validityRange": {
                      "type": "string",
                      "format": "date"
                    },
                    "salesPersonName": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}\nbodyParams: {\n  terminationDate: '@record.terminationDate',\n  terminationReason: '@record.terminationReason',\n  subscriptionCode: '@record.subscriptionCode'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "terminationDate": {
                    "type": "string",
                    "example": "@record.terminationDate"
                  },
                  "terminationReason": {
                    "type": "string",
                    "example": "@record.terminationReason"
                  },
                  "subscriptionCode": {
                    "type": "string",
                    "example": "@record.subscriptionCode"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cpq/quotes/quoteItems/{offerId}": {
      "get": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_OFFER_BY_ID (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L891) -> cpq/quotes/quoteItems/:offerId | request: options: {\n  method: 'GET'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ]
      }
    },
    "/v2/generic/all/Calendar": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_HOLIDAYS_CALENDAR (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L915) -> v2/generic/all/Calendar | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/generic/all/quoteVersion": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq",
          "B2B-customer-care/mdp-clients"
        ],
        "summary": "Used in 5 frontend location(s)",
        "description": "- GET_CUSTOMIZED_QUOTE_VERSION (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L921) -> v2/generic/all/quoteVersion | request: options: {\n  method: 'POST'\n}\n- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/cpq/quoteVersion/provider/provider.js#L28) -> v2/generic/all/quoteVersion | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'id' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/quoteVersion',\n  nestedEntities,\n  keyColumn: 'id'\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/cpq/quoteVersion/provider/provider.js#L35) -> v2/generic/all/quoteVersion | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/quoteVersion',\n  nestedEntities,\n  keyColumn: 'code',\n  responseContainer: 'data'\n}\n- GET_CUSTOMIZED_QUOTE_VERSION (src/srcProject/layout/B2B-customer-care/modules/cpq/quoteVersion/provider/provider.js#L50) -> v2/generic/all/quoteVersion | request: options: {\n  method: 'POST'\n}\n- GET_QUOTE_VERSION_LIST (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L195) -> v2/generic/all/quoteVersion | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}\nhelper.nestedEntities: nestedEntities\nhelper.keyColumn: 'id'\nhelper.keyColumn: 'code'",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}\nhelper.nestedEntities: nestedEntities\nhelper.keyColumn: 'id'\nhelper.keyColumn: 'code'"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/quoteVersion',\n  nestedEntities,\n  keyColumn: 'id'\n}",
          "helperArgs: {\n  url: 'v2/generic/all/quoteVersion',\n  nestedEntities,\n  keyColumn: 'code',\n  responseContainer: 'data'\n}"
        ]
      }
    },
    "/customTable/list/CE_VENTILATION_CA_ABO": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_VENT_ABO (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L934) -> customTable/list/CE_VENTILATION_CA_ABO | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/quote/update/quoteitemsAfterModif": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE_QUOTEITEMS (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L941) -> quote/update/quoteitemsAfterModif | request: options: {\n  method: 'POST'\n} | prepareParams: params => {\n  const {\n    data = {},\n    ...restParams\n  } = params;\n  const {\n    customFields = {},\n    ...restData\n  } = data;\n  const preparedParams = prepareParams(params);\n  const dataTransformed = {\n    ...transformCustomFields(preparedParams.data, __cfDefinition)\n  };\n  return {\n    data: dataTransformed,\n    ...restParams\n  };\n} / info: excludeProperties: ['quoteId', 'redirectAfterSave']",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}\nprepareParams: params => {\n  const {\n    data = {},\n    ...restParams\n  } = params;\n  const {\n    customFields = {},\n    ...restData\n  } = data;\n  const preparedParams = prepareParams(params);\n  const dataTransformed = {\n    ...transformCustomFields(preparedParams.data, __cfDefinition)\n  };\n  return {\n    data: dataTransformed,\n    ...restParams\n  };\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}\nprepareParams: params => {\n  const {\n    data = {},\n    ...restParams\n  } = params;\n  const {\n    customFields = {},\n    ...restData\n  } = data;\n  const preparedParams = prepareParams(params);\n  const dataTransformed = {\n    ...transformCustomFields(preparedParams.data, __cfDefinition)\n  };\n  return {\n    data: dataTransformed,\n    ...restParams\n  };\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "excludeProperties: ['quoteId', 'redirectAfterSave']"
        ]
      }
    },
    "/v2/generic/quoteOffer/{id}": {
      "put": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- PUT_GEOMARKETING_OFFER (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L960) -> v2/generic/quoteOffer/:id | request: options: {\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        }
      }
    },
    "/customerHierarchy/{customerId}": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_CUSTOMER_HIERARCHY (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L966) -> customerHierarchy/:customerId | request: options: {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    nestedEntities: ['customerAccounts.billingAccounts', 'address.country', 'seller'],\n    genericFields: []\n  })\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    nestedEntities: ['customerAccounts.billingAccounts', 'address.country', 'seller'],\n    genericFields: []\n  })\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "nestedEntities": {
                    "type": "array",
                    "items": {
                      "anyOf": [
                        {
                          "type": "string",
                          "example": "customerAccounts.billingAccounts"
                        },
                        {
                          "type": "string",
                          "example": "address.country"
                        },
                        {
                          "type": "string",
                          "example": "seller"
                        }
                      ]
                    }
                  },
                  "genericFields": {
                    "type": "array"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sepaliaProxy/mandates/{coclicoId}": {
      "get": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- SEPALIA_PROXY (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L1000) -> sepaliaProxy/mandates/:coclicoId | request: options: {\n  method: 'GET'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ]
      }
    },
    "/webdataProxy/deleteSQAJob": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- TERMINATE_WEBDATA_SUBSCRIPTION (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L1014) -> webdataProxy/deleteSQAJob | request: options: {\n  method: 'POST',\n  errorContainer: 'org.meveo.api.exception.MeveoApiException'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST',\n  errorContainer: 'org.meveo.api.exception.MeveoApiException'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST',\n  errorContainer: 'org.meveo.api.exception.MeveoApiException'\n}"
              }
            }
          }
        }
      }
    },
    "/customTable/list/CE_SMC_CHOIX_POTENTIEL_CONSO": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_CHOIX_POTENTIEL (src/srcProject/layout/B2B-customer-care/modules/cpq/prestation/provider/provider.js#L1028) -> customTable/list/CE_SMC_CHOIX_POTENTIEL_CONSO | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/generic/all/cpqQuote": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L816) -> v2/generic/all/cpqQuote | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'id' / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/cpqQuote',\n  nestedEntities,\n  keyColumn: 'id'\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L824) -> v2/generic/all/cpqQuote | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'id' / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/cpqQuote',\n  nestedEntities,\n  keyColumn: 'id'\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: 'id'",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: 'id'"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/cpqQuote',\n  nestedEntities,\n  keyColumn: 'id'\n}"
        ]
      }
    },
    "/v2/generic/cpqQuote/": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L832) -> v2/generic/cpqQuote/ | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse / info: keyColumn: 'id' | helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/cpqQuote/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: 'id'",
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/cpqQuote/',\n  nestedEntities\n}"
        ]
      }
    },
    "/cpq/quotes/{code}": {
      "get": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_QUOTE_VERSION (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L841) -> cpq/quotes/:code | request: options: {\n  method: 'GET'\n} / response: transformResponse: (data, {\n  responses,\n  params\n}) => {\n  const {\n    allQuoteVersions\n  } = data.data;\n  const lastVersion = getLastVersion(allQuoteVersions || []);\n  return {\n    data: lastVersion\n  };\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: (data, {\n  responses,\n  params\n}) => {\n  const {\n    allQuoteVersions\n  } = data.data;\n  const lastVersion = getLastVersion(allQuoteVersions || []);\n  return {\n    data: lastVersion\n  };\n}"
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ]
      }
    },
    "/account/billingAccount/list": {
      "get": {
        "tags": [
          "B2B-customer-care/cpq",
          "B2B-customer-care/mdp-clients",
          "B2B-customer-care/mdp-invoices",
          "B2B-customer-care/mdp-orders"
        ],
        "summary": "Used in 4 frontend location(s)",
        "description": "- GET_CLIENT_INVOICE (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L853) -> account/billingAccount/list?customerAccountCode=TEST_C_UA | request: options: {\n  method: 'GET'\n}\n- GET_ONE_BILLING_ACCOUNT (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L286) -> account/billingAccount/list | request: options: {\n  method: 'GET'\n}\n- GET_ONE_BILLING_ACCOUNT (src/srcProject/layout/B2B-customer-care/modules/mdp-invoices/provider/provider.js#L201) -> account/billingAccount/list | request: options: {\n  method: 'GET'\n}\n- GET_ONE_BILLING_ACCOUNT (src/srcProject/layout/B2B-customer-care/modules/mdp-orders/provider/provider.js#L201) -> account/billingAccount/list | request: options: {\n  method: 'GET'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "parameters": [
          {
            "name": "customerAccountCode",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ]
      }
    },
    "/v2/generic/all/user/": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_CLIENT_CONTRACT (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L860) -> v2/generic/all/user/ | request: helper.nestedEntities: nestedEntities / info: keyColumn: 'code' | helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/all/user/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: 'code'",
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/all/user/',\n  nestedEntities\n}"
        ]
      }
    },
    "/cpq/quotes": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq",
          "B2B-customer-care/mdp-clients",
          "B2B-customer-care/mdp-invoices",
          "B2B-customer-care/mdp-orders",
          "B2B-customer-care/mdp-quote-simulation",
          "B2B-customer-care/mdp-subscriptions",
          "B2B-customer-care/mdp-volume",
          "B2B-customer-care/quotes",
          "B2B-customer-care/quotes-old"
        ],
        "summary": "Used in 10 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L865) -> cpq/quotes | request: prepareParams: prepareParams | helper.method: POST / response: helper.responseContainer: quoteDto | helper.responseContainerId: id / info: excludeProperties: ['fieldsDefinition'] | helper: getCreateProvider | helperArgs: {\n  url: 'cpq/quotes',\n  method: 'POST',\n  responseContainer: 'quoteDto',\n  responseContainerId: 'id'\n}\n- AUTO_CREATION (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1397) -> cpq/quotes | request: options: {\n  method: 'POST'\n}\n- CREATE (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L102) -> cpq/quotes | request: helper.method: POST / response: helper.responseContainer: quoteDto / info: helper: getCreateProvider | helperArgs: {\n  url: 'cpq/quotes',\n  method: 'POST',\n  responseContainer: 'quoteDto'\n}\n- CREATE (src/srcProject/layout/B2B-customer-care/modules/mdp-invoices/provider/provider.js#L79) -> cpq/quotes | request: helper.method: POST / response: helper.responseContainer: quoteDto / info: helper: getCreateProvider | helperArgs: {\n  url: 'cpq/quotes',\n  method: 'POST',\n  responseContainer: 'quoteDto'\n}\n- CREATE (src/srcProject/layout/B2B-customer-care/modules/mdp-orders/provider/provider.js#L79) -> cpq/quotes | request: helper.method: POST / response: helper.responseContainer: quoteDto / info: helper: getCreateProvider | helperArgs: {\n  url: 'cpq/quotes',\n  method: 'POST',\n  responseContainer: 'quoteDto'\n}\n- CREATE (src/srcProject/layout/B2B-customer-care/modules/mdp-quote-simulation/provider/provider.js#L64) -> cpq/quotes | request: helper.method: POST / response: helper.responseContainer: quoteDto / info: helper: getCreateProvider | helperArgs: {\n  url: 'cpq/quotes',\n  method: 'POST',\n  responseContainer: 'quoteDto'\n}\n- CREATE (src/srcProject/layout/B2B-customer-care/modules/mdp-subscriptions/provider/provider.js#L64) -> cpq/quotes | request: helper.method: POST / response: helper.responseContainer: quoteDto / info: helper: getCreateProvider | helperArgs: {\n  url: 'cpq/quotes',\n  method: 'POST',\n  responseContainer: 'quoteDto'\n}\n- CREATE (src/srcProject/layout/B2B-customer-care/modules/mdp-volume/provider/provider.js#L64) -> cpq/quotes | request: helper.method: POST / response: helper.responseContainer: quoteDto / info: helper: getCreateProvider | helperArgs: {\n  url: 'cpq/quotes',\n  method: 'POST',\n  responseContainer: 'quoteDto'\n}\n- CREATE (src/srcProject/layout/B2B-customer-care/modules/quotes/provider/provider.js#L60) -> cpq/quotes | request: helper.method: POST / response: helper.responseContainer: quoteDto / info: helper: getCreateProvider | helperArgs: {\n  url: 'cpq/quotes',\n  method: 'POST',\n  responseContainer: 'quoteDto'\n}\n- CREATE (src/srcProject/layout/B2B-customer-care/modules/quotes-old/provider/provider.js#L60) -> cpq/quotes | request: helper.method: POST / response: helper.responseContainer: quoteDto / info: helper: getCreateProvider | helperArgs: {\n  url: 'cpq/quotes',\n  method: 'POST',\n  responseContainer: 'quoteDto'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: quoteDto | helper.responseContainerId: id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "quoteDto": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "quoteDate": {
                              "type": "string",
                              "format": "date"
                            },
                            "quoteNumber": {
                              "type": "string"
                            },
                            "applicantAccount": {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                }
                              }
                            },
                            "status": {
                              "type": "string"
                            },
                            "auditable": {
                              "type": "object",
                              "properties": {
                                "created": {
                                  "type": "string",
                                  "format": "date"
                                }
                              }
                            },
                            "searchBar": {
                              "type": "string"
                            },
                            "salesPersonName": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "quoteDate": {
                              "type": "string",
                              "format": "date"
                            },
                            "quoteNumber": {
                              "type": "string"
                            },
                            "applicantAccount": {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                }
                              }
                            },
                            "status": {
                              "type": "string"
                            },
                            "auditable": {
                              "type": "object",
                              "properties": {
                                "created": {
                                  "type": "string",
                                  "format": "date"
                                }
                              }
                            }
                          }
                        }
                      ]
                    },
                    "id": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "quoteDate": {
                              "type": "string",
                              "format": "date"
                            },
                            "quoteNumber": {
                              "type": "string"
                            },
                            "applicantAccount": {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                }
                              }
                            },
                            "status": {
                              "type": "string"
                            },
                            "auditable": {
                              "type": "object",
                              "properties": {
                                "created": {
                                  "type": "string",
                                  "format": "date"
                                }
                              }
                            },
                            "searchBar": {
                              "type": "string"
                            },
                            "salesPersonName": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "quoteDate": {
                              "type": "string",
                              "format": "date"
                            },
                            "quoteNumber": {
                              "type": "string"
                            },
                            "applicantAccount": {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                }
                              }
                            },
                            "status": {
                              "type": "string"
                            },
                            "auditable": {
                              "type": "object",
                              "properties": {
                                "created": {
                                  "type": "string",
                                  "format": "date"
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: prepareParams\nhelper.method: POST\noptions: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: prepareParams\nhelper.method: POST\noptions: {\n  method: 'POST'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "excludeProperties: ['fieldsDefinition']",
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'cpq/quotes',\n  method: 'POST',\n  responseContainer: 'quoteDto',\n  responseContainerId: 'id'\n}",
          "helperArgs: {\n  url: 'cpq/quotes',\n  method: 'POST',\n  responseContainer: 'quoteDto'\n}"
        ]
      },
      "put": {
        "tags": [
          "B2B-customer-care/cpq",
          "B2B-customer-care/mdp-clients",
          "B2B-customer-care/mdp-invoices",
          "B2B-customer-care/mdp-orders",
          "B2B-customer-care/mdp-quote-simulation",
          "B2B-customer-care/mdp-subscriptions",
          "B2B-customer-care/mdp-volume",
          "B2B-customer-care/quotes",
          "B2B-customer-care/quotes-old"
        ],
        "summary": "Used in 9 frontend location(s)",
        "description": "- UPDATE_QUOTE_PRICE (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1326) -> cpq/quotes | request: prepareParams: prepareParamsQuoteUpdate | options: {\n  method: 'PUT'\n}\n- UPDATE (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L110) -> cpq/quotes | request: helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  url: 'cpq/quotes',\n  method: 'PUT'\n}\n- UPDATE (src/srcProject/layout/B2B-customer-care/modules/mdp-invoices/provider/provider.js#L87) -> cpq/quotes | request: helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  url: 'cpq/quotes',\n  method: 'PUT'\n}\n- UPDATE (src/srcProject/layout/B2B-customer-care/modules/mdp-orders/provider/provider.js#L87) -> cpq/quotes | request: helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  url: 'cpq/quotes',\n  method: 'PUT'\n}\n- UPDATE (src/srcProject/layout/B2B-customer-care/modules/mdp-quote-simulation/provider/provider.js#L72) -> cpq/quotes | request: helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  url: 'cpq/quotes',\n  method: 'PUT'\n}\n- UPDATE (src/srcProject/layout/B2B-customer-care/modules/mdp-subscriptions/provider/provider.js#L72) -> cpq/quotes | request: helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  url: 'cpq/quotes',\n  method: 'PUT'\n}\n- UPDATE (src/srcProject/layout/B2B-customer-care/modules/mdp-volume/provider/provider.js#L72) -> cpq/quotes | request: helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  url: 'cpq/quotes',\n  method: 'PUT'\n}\n- UPDATE (src/srcProject/layout/B2B-customer-care/modules/quotes/provider/provider.js#L68) -> cpq/quotes | request: helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  url: 'cpq/quotes',\n  method: 'PUT'\n}\n- UPDATE (src/srcProject/layout/B2B-customer-care/modules/quotes-old/provider/provider.js#L68) -> cpq/quotes | request: helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  url: 'cpq/quotes',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "quoteDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "quoteNumber": {
                          "type": "string"
                        },
                        "applicantAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "searchBar": {
                          "type": "string"
                        },
                        "salesPersonName": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "quoteDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "quoteNumber": {
                          "type": "string"
                        },
                        "applicantAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: prepareParamsQuoteUpdate\noptions: {\n  method: 'PUT'\n}\nhelper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: prepareParamsQuoteUpdate\noptions: {\n  method: 'PUT'\n}\nhelper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'cpq/quotes',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/cpq/quotes/overlay/{code}/status/IN_PROGRESS_2_APPR": {
      "put": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE_STATUS_QUOTE (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L935) -> cpq/quotes/overlay/:code/status/IN_PROGRESS_2_APPR | request: options: {\n  method: 'PUT'\n} | prepareParams: () => ({}) / info: autoAppendId: false",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}\nprepareParams: () => ({})",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}\nprepareParams: () => ({})"
              }
            }
          }
        },
        "x-dev-notes": [
          "autoAppendId: false"
        ]
      }
    },
    "/cpq/quotes/": {
      "delete": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1123) -> cpq/quotes/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'cpq/quotes/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1127) -> cpq/quotes/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'cpq/quotes/',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'cpq/quotes/',\n  method: 'DELETE'\n}"
        ]
      },
      "post": {
        "tags": [
          "B2B-customer-care/mdp-clients",
          "B2B-customer-care/mdp-invoices",
          "B2B-customer-care/mdp-orders",
          "B2B-customer-care/mdp-quote-simulation",
          "B2B-customer-care/mdp-subscriptions",
          "B2B-customer-care/mdp-volume",
          "B2B-customer-care/quotes",
          "B2B-customer-care/quotes-old"
        ],
        "summary": "Used in 8 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L94) -> cpq/quotes/ | request: helper.keyColumn: 'code' | helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'cpq/quotes/',\n  keyColumn: 'code',\n  nestedEntities\n}\n- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/mdp-invoices/provider/provider.js#L71) -> cpq/quotes/ | request: helper.keyColumn: 'code' | helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'cpq/quotes/',\n  keyColumn: 'code',\n  nestedEntities\n}\n- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/mdp-orders/provider/provider.js#L71) -> cpq/quotes/ | request: helper.keyColumn: 'code' | helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'cpq/quotes/',\n  keyColumn: 'code',\n  nestedEntities\n}\n- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/mdp-quote-simulation/provider/provider.js#L56) -> cpq/quotes/ | request: helper.keyColumn: 'code' | helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'cpq/quotes/',\n  keyColumn: 'code',\n  nestedEntities\n}\n- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/mdp-subscriptions/provider/provider.js#L56) -> cpq/quotes/ | request: helper.keyColumn: 'code' | helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'cpq/quotes/',\n  keyColumn: 'code',\n  nestedEntities\n}\n- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/mdp-volume/provider/provider.js#L56) -> cpq/quotes/ | request: helper.keyColumn: 'code' | helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'cpq/quotes/',\n  keyColumn: 'code',\n  nestedEntities\n}\n- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/quotes/provider/provider.js#L52) -> cpq/quotes/ | request: helper.keyColumn: 'code' | helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'cpq/quotes/',\n  keyColumn: 'code',\n  nestedEntities\n}\n- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/quotes-old/provider/provider.js#L52) -> cpq/quotes/ | request: helper.keyColumn: 'code' | helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'cpq/quotes/',\n  keyColumn: 'code',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "quoteDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "quoteNumber": {
                          "type": "string"
                        },
                        "applicantAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "searchBar": {
                          "type": "string"
                        },
                        "salesPersonName": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "quoteDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "quoteNumber": {
                          "type": "string"
                        },
                        "applicantAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.keyColumn: 'code'\nhelper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.keyColumn: 'code'\nhelper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'cpq/quotes/',\n  keyColumn: 'code',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/all/user": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq",
          "B2B-customer-care/users",
          "finance/query-scheduler",
          "operation/query-scheduler"
        ],
        "summary": "Used in 8 frontend location(s)",
        "description": "- GET_USER (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1130) -> v2/generic/all/user | response: helper.responseContainer: data / info: keyColumn: 'id' | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/user'\n}\n- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/users/provider/provider.js#L20) -> v2/generic/all/user | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/user',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/users/provider/provider.js#L24) -> v2/generic/all/user | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/user',\n  nestedEntities\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/B2B-customer-care/modules/users/provider/provider.js#L27) -> v2/generic/all/user | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/user',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/finance/modules/query-scheduler/provider/provider.js#L11) -> v2/generic/all/user | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'userName' / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/user',\n  nestedEntities,\n  keyColumn: 'userName'\n}\n- GET_MANY (src/srcProject/layout/finance/modules/query-scheduler/provider/provider.js#L19) -> v2/generic/all/user | request: prepareParams: params => {\n  return {\n    ...params,\n    referenceFieldId: 'userName'\n  };\n} | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/user',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/operation/modules/query-scheduler/provider/provider.js#L11) -> v2/generic/all/user | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'userName' / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/user',\n  nestedEntities,\n  keyColumn: 'userName'\n}\n- GET_MANY (src/srcProject/layout/operation/modules/query-scheduler/provider/provider.js#L19) -> v2/generic/all/user | request: prepareParams: params => {\n  return {\n    ...params,\n    referenceFieldId: 'userName'\n  };\n} | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/user',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data | transformResponse: transformResponse",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "userName": {
                                "type": "string"
                              },
                              "email": {
                                "type": "string"
                              },
                              "name": {
                                "type": "object",
                                "properties": {
                                  "firstName": {
                                    "type": "string"
                                  },
                                  "lastName": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "userName": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            },
                            "name": {
                              "type": "object",
                              "properties": {
                                "firstName": {
                                  "type": "string"
                                },
                                "lastName": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: 'userName'\nprepareParams: params => {\n  return {\n    ...params,\n    referenceFieldId: 'userName'\n  };\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: 'userName'\nprepareParams: params => {\n  return {\n    ...params,\n    referenceFieldId: 'userName'\n  };\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: 'id'",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/user'\n}",
          "helperArgs: {\n  url: 'v2/generic/all/user',\n  nestedEntities\n}",
          "keyColumn: keyColumn",
          "helperArgs: {\n  url: 'v2/generic/all/user',\n  nestedEntities,\n  keyColumn: 'userName'\n}"
        ]
      }
    },
    "/catalog/offerTemplate": {
      "get": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_OFFER_DETAILS (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1142) -> catalog/offerTemplate? | request: options: {\n  method: 'GET'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ]
      },
      "post": {
        "tags": [
          "catalog/offers"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/catalog/modules/offers/provider/provider.js#L97) -> catalog/offerTemplate | request: helper.method: POST | helper.showErrorFromContainer: true / response: helper.responseContainerId: entityId / info: helper: getCreateProvider | helperArgs: {\n  url: 'catalog/offerTemplate',\n  method: 'POST',\n  responseContainerId: 'entityId',\n  showErrorFromContainer: true\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainerId: entityId",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "entityId": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "code": {
                          "type": "string"
                        },
                        "lifeCycleStatus": {
                          "type": "string"
                        },
                        "validity": {
                          "type": "object",
                          "properties": {
                            "from": {
                              "type": "string"
                            },
                            "to": {
                              "type": "string"
                            }
                          }
                        },
                        "medias": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "tags": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "isModel": {
                          "type": "boolean"
                        },
                        "description": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "instanceCode": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST\nhelper.showErrorFromContainer: true",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST\nhelper.showErrorFromContainer: true"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'catalog/offerTemplate',\n  method: 'POST',\n  responseContainerId: 'entityId',\n  showErrorFromContainer: true\n}"
        ]
      },
      "put": {
        "tags": [
          "catalog/offers"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/catalog/modules/offers/provider/provider.js#L106) -> catalog/offerTemplate | request: helper.method: PUT | helper.showErrorFromContainer: true / info: helper: getUpdateProvider | helperArgs: {\n  url: 'catalog/offerTemplate',\n  method: 'PUT',\n  showErrorFromContainer: true\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "lifeCycleStatus": {
                      "type": "string"
                    },
                    "validity": {
                      "type": "object",
                      "properties": {
                        "from": {
                          "type": "string"
                        },
                        "to": {
                          "type": "string"
                        }
                      }
                    },
                    "medias": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "tags": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "isModel": {
                      "type": "boolean"
                    },
                    "description": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "instanceCode": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: PUT\nhelper.showErrorFromContainer: true",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT\nhelper.showErrorFromContainer: true"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'catalog/offerTemplate',\n  method: 'PUT',\n  showErrorFromContainer: true\n}"
        ]
      }
    },
    "/catalog/chargeTemplates/": {
      "get": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_OFFER_TEMPLATES (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1148) -> catalog/chargeTemplates/ | request: options: {\n  method: 'GET'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ]
      }
    },
    "/cpq/quotes/{code}/status/{toStatus}": {
      "put": {
        "tags": [
          "B2B-customer-care/cpq",
          "B2B-customer-care/mdp-clients",
          "B2B-customer-care/mdp-invoices",
          "B2B-customer-care/mdp-orders",
          "B2B-customer-care/mdp-quote-simulation",
          "B2B-customer-care/mdp-subscriptions",
          "B2B-customer-care/mdp-volume",
          "B2B-customer-care/quotes",
          "B2B-customer-care/quotes-old"
        ],
        "summary": "Used in 9 frontend location(s)",
        "description": "- UPDATE_STATUS (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1154) -> cpq/quotes/:code/status/:toStatus | request: options: {\n  method: 'PUT'\n}\n- UPDATE_STATUS (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L133) -> cpq/quotes/:code/status/:toStatus | request: options: {\n  method: 'PUT'\n}\n- UPDATE_STATUS (src/srcProject/layout/B2B-customer-care/modules/mdp-invoices/provider/provider.js#L110) -> cpq/quotes/:code/status/:toStatus | request: options: {\n  method: 'PUT'\n}\n- UPDATE_STATUS (src/srcProject/layout/B2B-customer-care/modules/mdp-orders/provider/provider.js#L110) -> cpq/quotes/:code/status/:toStatus | request: options: {\n  method: 'PUT'\n}\n- UPDATE_STATUS (src/srcProject/layout/B2B-customer-care/modules/mdp-quote-simulation/provider/provider.js#L95) -> cpq/quotes/:code/status/:toStatus | request: options: {\n  method: 'PUT'\n}\n- UPDATE_STATUS (src/srcProject/layout/B2B-customer-care/modules/mdp-subscriptions/provider/provider.js#L95) -> cpq/quotes/:code/status/:toStatus | request: options: {\n  method: 'PUT'\n}\n- UPDATE_STATUS (src/srcProject/layout/B2B-customer-care/modules/mdp-volume/provider/provider.js#L95) -> cpq/quotes/:code/status/:toStatus | request: options: {\n  method: 'PUT'\n}\n- UPDATE_STATUS (src/srcProject/layout/B2B-customer-care/modules/quotes/provider/provider.js#L106) -> cpq/quotes/:code/status/:toStatus | request: options: {\n  method: 'PUT'\n}\n- UPDATE_STATUS (src/srcProject/layout/B2B-customer-care/modules/quotes-old/provider/provider.js#L89) -> cpq/quotes/:code/status/:toStatus | request: options: {\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "quoteDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "quoteNumber": {
                          "type": "string"
                        },
                        "applicantAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "searchBar": {
                          "type": "string"
                        },
                        "salesPersonName": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "quoteDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "quoteNumber": {
                          "type": "string"
                        },
                        "applicantAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        }
      }
    },
    "/cpq/quotes/{quoteCode}/{version}/duplication": {
      "get": {
        "tags": [
          "B2B-customer-care/cpq",
          "B2B-customer-care/mdp-clients",
          "B2B-customer-care/mdp-invoices",
          "B2B-customer-care/mdp-orders",
          "B2B-customer-care/mdp-quote-simulation",
          "B2B-customer-care/mdp-subscriptions",
          "B2B-customer-care/mdp-volume",
          "B2B-customer-care/quotes",
          "B2B-customer-care/quotes-old"
        ],
        "summary": "Used in 9 frontend location(s)",
        "description": "- DUPLICATE_VERSION (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1161) -> cpq/quotes/:quoteCode/:version/duplication\n- DUPLICATE_VERSION (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L155) -> cpq/quotes/:quoteCode/:version/duplication\n- DUPLICATE_VERSION (src/srcProject/layout/B2B-customer-care/modules/mdp-invoices/provider/provider.js#L132) -> cpq/quotes/:quoteCode/:version/duplication\n- DUPLICATE_VERSION (src/srcProject/layout/B2B-customer-care/modules/mdp-orders/provider/provider.js#L132) -> cpq/quotes/:quoteCode/:version/duplication\n- DUPLICATE_VERSION (src/srcProject/layout/B2B-customer-care/modules/mdp-quote-simulation/provider/provider.js#L117) -> cpq/quotes/:quoteCode/:version/duplication\n- DUPLICATE_VERSION (src/srcProject/layout/B2B-customer-care/modules/mdp-subscriptions/provider/provider.js#L117) -> cpq/quotes/:quoteCode/:version/duplication\n- DUPLICATE_VERSION (src/srcProject/layout/B2B-customer-care/modules/mdp-volume/provider/provider.js#L117) -> cpq/quotes/:quoteCode/:version/duplication\n- DUPLICATE_VERSION (src/srcProject/layout/B2B-customer-care/modules/quotes/provider/provider.js#L128) -> cpq/quotes/:quoteCode/:version/duplication\n- DUPLICATE_VERSION (src/srcProject/layout/B2B-customer-care/modules/quotes-old/provider/provider.js#L111) -> cpq/quotes/:quoteCode/:version/duplication",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "quoteDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "quoteNumber": {
                          "type": "string"
                        },
                        "applicantAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "searchBar": {
                          "type": "string"
                        },
                        "salesPersonName": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "quoteDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "quoteNumber": {
                          "type": "string"
                        },
                        "applicantAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/cpq/quotes/quoteVersions": {
      "get": {
        "tags": [
          "B2B-customer-care/cpq",
          "B2B-customer-care/mdp-clients",
          "B2B-customer-care/mdp-invoices",
          "B2B-customer-care/mdp-orders",
          "B2B-customer-care/mdp-quote-simulation",
          "B2B-customer-care/mdp-subscriptions",
          "B2B-customer-care/mdp-volume",
          "B2B-customer-care/quotes",
          "B2B-customer-care/quotes-old"
        ],
        "summary": "Used in 9 frontend location(s)",
        "description": "- CREATE_VERSION (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1186) -> cpq/quotes/quoteVersions\n- CREATE_VERSION (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L147) -> cpq/quotes/quoteVersions\n- CREATE_VERSION (src/srcProject/layout/B2B-customer-care/modules/mdp-invoices/provider/provider.js#L124) -> cpq/quotes/quoteVersions\n- CREATE_VERSION (src/srcProject/layout/B2B-customer-care/modules/mdp-orders/provider/provider.js#L124) -> cpq/quotes/quoteVersions\n- CREATE_VERSION (src/srcProject/layout/B2B-customer-care/modules/mdp-quote-simulation/provider/provider.js#L109) -> cpq/quotes/quoteVersions\n- CREATE_VERSION (src/srcProject/layout/B2B-customer-care/modules/mdp-subscriptions/provider/provider.js#L109) -> cpq/quotes/quoteVersions\n- CREATE_VERSION (src/srcProject/layout/B2B-customer-care/modules/mdp-volume/provider/provider.js#L109) -> cpq/quotes/quoteVersions\n- CREATE_VERSION (src/srcProject/layout/B2B-customer-care/modules/quotes/provider/provider.js#L120) -> cpq/quotes/quoteVersions\n- CREATE_VERSION (src/srcProject/layout/B2B-customer-care/modules/quotes-old/provider/provider.js#L103) -> cpq/quotes/quoteVersions",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "quoteDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "quoteNumber": {
                          "type": "string"
                        },
                        "applicantAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "searchBar": {
                          "type": "string"
                        },
                        "salesPersonName": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "quoteDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "quoteNumber": {
                          "type": "string"
                        },
                        "applicantAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/duplication/duplicateVersion/{quoteCode}/{version}": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE_VERSION_API (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1189) -> duplication/duplicateVersion/:quoteCode/:version | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/cpq/quotes/quoteVersions/{code}/{version}/v2/quotation": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq",
          "B2B-customer-care/quotes"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- QUOTATION (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1195) -> cpq/quotes/quoteVersions/:code/:version/v2/quotation | request: options: {\n  method: 'POST'\n}\n- QUOTATION (src/srcProject/layout/B2B-customer-care/modules/quotes/provider/provider.js#L132) -> cpq/quotes/quoteVersions/:code/:version/v2/quotation | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "quoteDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "quoteNumber": {
                      "type": "string"
                    },
                    "applicantAccount": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "searchBar": {
                      "type": "string"
                    },
                    "salesPersonName": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/cpq/quotes/quoteVersions/{code}/{version}/xmlGeneration": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq",
          "B2B-customer-care/mdp-clients",
          "B2B-customer-care/mdp-invoices",
          "B2B-customer-care/mdp-orders",
          "B2B-customer-care/mdp-quote-simulation",
          "B2B-customer-care/mdp-subscriptions",
          "B2B-customer-care/mdp-volume",
          "B2B-customer-care/quotes",
          "B2B-customer-care/quotes-old"
        ],
        "summary": "Used in 9 frontend location(s)",
        "description": "- GENERATE_PDF (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1202) -> cpq/quotes/quoteVersions/:code/:version/xmlGeneration?generatePdf=:generateState | request: options: {\n  method: 'POST'\n}\n- GENERATE_PDF (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L166) -> cpq/quotes/quoteVersions/:code/:version/xmlGeneration?generatePdf=:generateState | request: options: {\n  method: 'POST'\n}\n- GENERATE_PDF (src/srcProject/layout/B2B-customer-care/modules/mdp-invoices/provider/provider.js#L143) -> cpq/quotes/quoteVersions/:code/:version/xmlGeneration?generatePdf=:generateState | request: options: {\n  method: 'POST'\n}\n- GENERATE_PDF (src/srcProject/layout/B2B-customer-care/modules/mdp-orders/provider/provider.js#L143) -> cpq/quotes/quoteVersions/:code/:version/xmlGeneration?generatePdf=:generateState | request: options: {\n  method: 'POST'\n}\n- GENERATE_PDF (src/srcProject/layout/B2B-customer-care/modules/mdp-quote-simulation/provider/provider.js#L128) -> cpq/quotes/quoteVersions/:code/:version/xmlGeneration?generatePdf=:generateState | request: options: {\n  method: 'POST'\n}\n- GENERATE_PDF (src/srcProject/layout/B2B-customer-care/modules/mdp-subscriptions/provider/provider.js#L128) -> cpq/quotes/quoteVersions/:code/:version/xmlGeneration?generatePdf=:generateState | request: options: {\n  method: 'POST'\n}\n- GENERATE_PDF (src/srcProject/layout/B2B-customer-care/modules/mdp-volume/provider/provider.js#L128) -> cpq/quotes/quoteVersions/:code/:version/xmlGeneration?generatePdf=:generateState | request: options: {\n  method: 'POST'\n}\n- GENERATE_PDF (src/srcProject/layout/B2B-customer-care/modules/quotes/provider/provider.js#L139) -> cpq/quotes/quoteVersions/:code/:version/xmlGeneration?generatePdf=:generateState | request: options: {\n  method: 'POST'\n}\n- GENERATE_PDF (src/srcProject/layout/B2B-customer-care/modules/quotes-old/provider/provider.js#L122) -> cpq/quotes/quoteVersions/:code/:version/xmlGeneration?generatePdf=:generateState | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "quoteDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "quoteNumber": {
                          "type": "string"
                        },
                        "applicantAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "searchBar": {
                          "type": "string"
                        },
                        "salesPersonName": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "quoteDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "quoteNumber": {
                          "type": "string"
                        },
                        "applicantAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "generatePdf",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/admin/files/downloadFile": {
      "get": {
        "tags": [
          "B2B-customer-care/cpq",
          "B2B-customer-care/mdp-clients",
          "B2B-customer-care/mdp-invoices",
          "B2B-customer-care/mdp-orders",
          "B2B-customer-care/mdp-quote-simulation",
          "B2B-customer-care/mdp-subscriptions",
          "B2B-customer-care/mdp-volume",
          "B2B-customer-care/quotes",
          "B2B-customer-care/quotes-old",
          "operation/report-extract-history",
          "operation/report-extracts"
        ],
        "summary": "Used in 12 frontend location(s)",
        "description": "- DOWNLOAD_PDF (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1209) -> admin/files/downloadFile?file=quotes/pdf/:fileName | request: options: {\n  method: 'GET'\n} / info: isFile: true\n- DOWNLOAD_XSL (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1216) -> admin/files/downloadFile?file=quotes/pdf/xlsx/:fileName | request: options: {\n  method: 'GET',\n  responseType: 'blob'\n} / info: isFile: true\n- DOWNLOAD_PDF (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L173) -> admin/files/downloadFile?file=quotes/pdf/:fileName | request: options: {\n  method: 'GET'\n} / info: isFile: true\n- DOWNLOAD_PDF (src/srcProject/layout/B2B-customer-care/modules/mdp-invoices/provider/provider.js#L150) -> admin/files/downloadFile?file=quotes/pdf/:fileName | request: options: {\n  method: 'GET'\n} / info: isFile: true\n- DOWNLOAD_PDF (src/srcProject/layout/B2B-customer-care/modules/mdp-orders/provider/provider.js#L150) -> admin/files/downloadFile?file=quotes/pdf/:fileName | request: options: {\n  method: 'GET'\n} / info: isFile: true\n- DOWNLOAD_PDF (src/srcProject/layout/B2B-customer-care/modules/mdp-quote-simulation/provider/provider.js#L135) -> admin/files/downloadFile?file=quotes/pdf/:fileName | request: options: {\n  method: 'GET'\n} / info: isFile: true\n- DOWNLOAD_PDF (src/srcProject/layout/B2B-customer-care/modules/mdp-subscriptions/provider/provider.js#L135) -> admin/files/downloadFile?file=quotes/pdf/:fileName | request: options: {\n  method: 'GET'\n} / info: isFile: true\n- DOWNLOAD_PDF (src/srcProject/layout/B2B-customer-care/modules/mdp-volume/provider/provider.js#L135) -> admin/files/downloadFile?file=quotes/pdf/:fileName | request: options: {\n  method: 'GET'\n} / info: isFile: true\n- DOWNLOAD_PDF (src/srcProject/layout/B2B-customer-care/modules/quotes/provider/provider.js#L146) -> admin/files/downloadFile?file=quotes/pdf/:fileName | request: options: {\n  method: 'GET'\n} / info: isFile: true\n- DOWNLOAD_PDF (src/srcProject/layout/B2B-customer-care/modules/quotes-old/provider/provider.js#L129) -> admin/files/downloadFile?file=quotes/pdf/:fileName | request: options: {\n  method: 'GET'\n} / info: isFile: true\n- DOWNLOAD_EXTRACT (src/srcProject/layout/operation/modules/report-extract-history/provider/provider.js#L27) -> admin/files/downloadFile?file=:filePath | request: options: {\n  method: 'GET'\n} / info: isFile: true\n- DOWNLOAD_CSV_FILE (src/srcProject/layout/operation/modules/report-extracts/provider/provider.js#L105) -> admin/files/downloadFile?file=:filePath | request: options: {\n  method: 'GET'\n} / info: isFile: true",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "quoteDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "quoteNumber": {
                          "type": "string"
                        },
                        "applicantAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "searchBar": {
                          "type": "string"
                        },
                        "salesPersonName": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "quoteDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "quoteNumber": {
                          "type": "string"
                        },
                        "applicantAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "reportExtract": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "category": {
                              "type": "string"
                            }
                          }
                        },
                        "startDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "endDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "lineCount": {
                          "type": "string"
                        },
                        "status": {
                          "type": "boolean"
                        },
                        "errorMessage": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "creator": {
                              "type": "string"
                            }
                          }
                        },
                        "filePath": {
                          "type": "string"
                        },
                        "searchBar": {
                          "type": "string"
                        },
                        "creator": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "category": {
                          "type": "string"
                        },
                        "filenameFormat": {
                          "type": "string"
                        },
                        "active": {
                          "type": "boolean"
                        },
                        "customTableCode": {
                          "type": "string"
                        },
                        "executionResults": {
                          "type": "object",
                          "properties": {
                            "endDate": {
                              "type": "string",
                              "format": "date"
                            },
                            "status": {
                              "type": "boolean"
                            }
                          }
                        },
                        "filePath": {
                          "type": "string"
                        },
                        "searchBar": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "file",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}",
          "options: {\n  method: 'GET',\n  responseType: 'blob'\n}"
        ],
        "x-dev-notes": [
          "isFile: true"
        ]
      }
    },
    "/customTable/list/CE_PROPERTIES": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CE_PROPERTIES (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1224) -> customTable/list/CE_PROPERTIES | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/annexe/list/{quoteVersionId}": {
      "get": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_CE_ANNEXE (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1231) -> annexe/list/:quoteVersionId | request: options: {\n  method: 'GET'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ]
      }
    },
    "/managePayment/{clientDonneurId}/{clientFactureId}/{montantHT}/{totalChargesOther}": {
      "get": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CONDITIONS_PAYMENT (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1240) -> managePayment/:clientDonneurId/:clientFactureId/:montantHT/:totalChargesOther? | request: options: {\n  method: 'GET'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ]
      }
    },
    "/sendLink/{idDevis}/{idBillingAccount}": {
      "get": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- SEND_PAYMENT_LINK (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1247) -> sendLink/:idDevis/:idBillingAccount | request: options: {\n  method: 'GET'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ]
      }
    },
    "/SendEmailDevis/{idDevis}/{idInterlocuteur}": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- ENVOI_DEVIS (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1269) -> SendEmailDevis/:idDevis/:idInterlocuteur | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/dateLimiteSignatureDevis/{codeQuote}": {
      "get": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- DATE_LIMITE_SIGN_DEVIS (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1275) -> dateLimiteSignatureDevis/:codeQuote | request: options: {\n  method: 'GET'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ]
      }
    },
    "/initCPQquoteData": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- INIT_CPQ_QUOTE_DATA (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1281) -> initCPQquoteData | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/duplication/duplicateQuote/{quoteCode}/{version}/{avenant}": {
      "get": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- DUPLICATE_QUOTE_API (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1287) -> duplication/duplicateQuote/:quoteCode/:version/:avenant",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      },
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- DUPLICATE_QUOTE_APIS (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1290) -> duplication/duplicateQuote/:quoteCode/:version/:avenant | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/duplication/duplicateQuote/{quoteCode}/{version}/{avenant}/{quoteItemId}": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- DUPLICATE_PRESTATION_APIS (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1296) -> duplication/duplicateQuote/:quoteCode/:version/:avenant/:quoteItemId | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/updateBonDeCommande/{quoteId}": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE_BON_COMMANDE_API (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1302) -> updateBonDeCommande/:quoteId | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/seller": {
      "get": {
        "tags": [
          "B2B-customer-care/cpq",
          "B2B-customer-care/mdp-clients"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_SELLER (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1308) -> seller? | request: options: {\n  method: 'GET'\n}\n- GET_SELLER (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L245) -> seller? | request: options: {\n  method: 'GET'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ]
      },
      "put": {
        "tags": [
          "B2B-customer-care/sellers"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/B2B-customer-care/modules/sellers/provider/provider.js#L47) -> seller | request: helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  url: 'seller',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'seller',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/cpq/quotes/{code}/status/{newStatus}": {
      "put": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE_QUOTE_STATUS (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1314) -> cpq/quotes/:code/status/:newStatus | request: options: {\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        }
      }
    },
    "/cpq/quotes/overlay/{code}/status/{newStatus}": {
      "put": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE_QUOTE_STATUS_OVERLAY (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1320) -> cpq/quotes/overlay/:code/status/:newStatus | request: options: {\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        }
      }
    },
    "/cpq/quotes/quotePrices/override": {
      "put": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE_PRICE (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1333) -> cpq/quotes/quotePrices/override | request: options: {\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        }
      }
    },
    "/customTable/list/CE_PLAN_DE_VALIDATION": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_CE_PLAN_VALIDATION (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1339) -> customTable/list/CE_PLAN_DE_VALIDATION | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/customTable": {
      "put": {
        "tags": [
          "B2B-customer-care/cpq",
          "B2B-customer-care/pod-event"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- PUT_CE_PLAN_VALIDATION (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1346) -> customTable | request: options: {\n  method: 'PUT'\n}\n- MODIFICATION (src/srcProject/layout/B2B-customer-care/modules/pod-event/provider/provider.js#L31) -> customTable | request: bodyParams: {} | helper.method: PUT / info: appendParamsToBody: false | helper: getUpdateProvider | helperArgs: {\n  url: 'customTable',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}\nbodyParams: {}\nhelper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "x-dev-notes": [
          "appendParamsToBody: false",
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'customTable',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/reminderValidation/{quoteId}": {
      "put": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- RELANCE_VALIDATION (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1352) -> reminderValidation/:quoteId | request: options: {\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/generic/all/discountPlan": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq",
          "B2B-customer-care/discount-plans",
          "catalog/discount-plans"
        ],
        "summary": "Used in 5 frontend location(s)",
        "description": "- GED_DISCOUNTS (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1358) -> v2/generic/all/discountPlan | request: options: {\n  method: 'POST'\n}\n- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/discount-plans/provider/provider.js#L14) -> v2/generic/all/discountPlan | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/discountPlan',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/discount-plans/provider/provider.js#L17) -> v2/generic/all/discountPlan | request: prepareParams: params => ({\n  ...params\n}) | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/discountPlan',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/catalog/modules/discount-plans/provider/provider.js#L29) -> v2/generic/all/discountPlan | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/discountPlan',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/catalog/modules/discount-plans/provider/provider.js#L36) -> v2/generic/all/discountPlan | request: prepareParams: params => ({\n  ...params,\n  referenceFieldId: 'code'\n}) | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/discountPlan',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data | transformResponse: transformResponse",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string"
                                  },
                                  "status": {
                                    "type": "string"
                                  },
                                  "description": {
                                    "type": "string"
                                  },
                                  "orderNumber": {
                                    "type": "string"
                                  },
                                  "orderDate": {
                                    "type": "string",
                                    "format": "date"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string"
                                  },
                                  "status": {
                                    "type": "string"
                                  },
                                  "description": {
                                    "type": "string"
                                  },
                                  "discountPlanType": {
                                    "type": "string"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                },
                                "status": {
                                  "type": "string"
                                },
                                "description": {
                                  "type": "string"
                                },
                                "orderNumber": {
                                  "type": "string"
                                },
                                "orderDate": {
                                  "type": "string",
                                  "format": "date"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                },
                                "status": {
                                  "type": "string"
                                },
                                "description": {
                                  "type": "string"
                                },
                                "discountPlanType": {
                                  "type": "string"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}\nhelper.nestedEntities: nestedEntities\nprepareParams: params => ({\n  ...params\n})\nprepareParams: params => ({\n  ...params,\n  referenceFieldId: 'code'\n})",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}\nhelper.nestedEntities: nestedEntities\nprepareParams: params => ({\n  ...params\n})\nprepareParams: params => ({\n  ...params,\n  referenceFieldId: 'code'\n})"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/discountPlan',\n  nestedEntities\n}"
        ]
      },
      "put": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE_QUOTES_CONTRACT (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1364) -> v2/generic/all/discountPlan | request: options: {\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        }
      }
    },
    "/initCPQquoteData/V2": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- INIT_CPQ_QUOTE_DATA_V2 (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1403) -> initCPQquoteData/V2?create=true | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "parameters": [
          {
            "name": "create",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/billingInvoice/{idDevis}": {
      "get": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_BILLING_INVOICE (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1409) -> billingInvoice/:idDevis | request: options: {\n  method: 'GET'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ]
      }
    },
    "/invoice/fetchPdfInvoice": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- DOWNLOAD_INVOICE_PDF (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1415) -> invoice/fetchPdfInvoice | request: options: {\n  method: 'POST'\n} / response: responseContainer: 'pdfContent' / info: isFile: true",
        "responses": {
          "200": {
            "description": "Successful response. responseContainer: 'pdfContent'"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "isFile: true"
        ]
      }
    },
    "/user/list": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_USER_LIST (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1423) -> user/list | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/account/customer": {
      "put": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- PUT_CUSTOMER_DATA (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1429) -> account/customer | request: options: {\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "B2B-customer-care/customers"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/customers/provider/provider.js#L76) -> account/customer | info: helper: getCreateProvider | helperArgs: {\n  url: 'account/customer'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'account/customer'\n}"
        ]
      }
    },
    "/v2/generic/all/chargeTemplate": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_CAUTION_CHARGE_TEMPLATES (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1451) -> v2/generic/all/chargeTemplate | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/absences/substitute_by_plan_id/{planId}": {
      "get": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- LIST_REMPLACANT (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1457) -> absences/substitute_by_plan_id/:planId | request: options: {\n  method: 'GET'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ]
      }
    },
    "/mdpSubscription/applyExtraCharge": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- APPLY_ONESHOT (src/srcProject/layout/B2B-customer-care/modules/cpq/quotes/provider/provider.js#L1463) -> mdpSubscription/applyExtraCharge | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/generic/quoteVersion/": {
      "post": {
        "tags": [
          "B2B-customer-care/cpq"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/cpq/quoteVersion/provider/provider.js#L43) -> v2/generic/quoteVersion/ | request: helper.nestedEntities: nestedEntities / info: keyColumn: 'id' | helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/quoteVersion/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: 'id'",
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/quoteVersion/',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/all/customerAccount": {
      "post": {
        "tags": [
          "B2B-customer-care/customer-accounts"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/customer-accounts/provider/provider.js#L23) -> v2/generic/all/customerAccount | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    code,\n    description,\n    ...restFilter\n  } = filter;\n  const fitlerTransformed = {\n    ...restFilter,\n    ...(code ? {\n      code: `*${code}*`\n    } : ''),\n    ...(description ? {\n      description: `*${description}*`\n    } : '')\n  };\n  return {\n    filter: fitlerTransformed,\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/customerAccount',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/customer-accounts/provider/provider.js#L50) -> v2/generic/all/customerAccount | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/customerAccount',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'code'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    code,\n    description,\n    ...restFilter\n  } = filter;\n  const fitlerTransformed = {\n    ...restFilter,\n    ...(code ? {\n      code: `*${code}*`\n    } : ''),\n    ...(description ? {\n      description: `*${description}*`\n    } : '')\n  };\n  return {\n    filter: fitlerTransformed,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities\nhelper.keyColumn: 'code'",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    code,\n    description,\n    ...restFilter\n  } = filter;\n  const fitlerTransformed = {\n    ...restFilter,\n    ...(code ? {\n      code: `*${code}*`\n    } : ''),\n    ...(description ? {\n      description: `*${description}*`\n    } : '')\n  };\n  return {\n    filter: fitlerTransformed,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities\nhelper.keyColumn: 'code'"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/customerAccount',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'code'\n}"
        ]
      }
    },
    "/v2/generic/customerAccount/": {
      "post": {
        "tags": [
          "B2B-customer-care/customer-accounts"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/customer-accounts/provider/provider.js#L43) -> v2/generic/customerAccount/ | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/customerAccount/',\n  responseContainer: 'data',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/customerAccount/',\n  responseContainer: 'data',\n  nestedEntities\n}"
        ]
      }
    },
    "/account/customerAccount": {
      "post": {
        "tags": [
          "B2B-customer-care/customer-accounts"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/customer-accounts/provider/provider.js#L58) -> account/customerAccount | info: helper: getCreateProvider | helperArgs: {\n  url: 'account/customerAccount'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'account/customerAccount'\n}"
        ]
      }
    },
    "/account/customerAccount/createOrUpdate": {
      "post": {
        "tags": [
          "B2B-customer-care/customer-accounts"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/customer-accounts/provider/provider.js#L63) -> account/customerAccount/createOrUpdate | info: helper: getCreateProvider | helperArgs: {\n  url: 'account/customerAccount/createOrUpdate'\n}\n- UPDATE_DELAI_PAIEMENT (src/srcProject/layout/B2B-customer-care/modules/customer-accounts/provider/provider.js#L81) -> account/customerAccount/createOrUpdate | request: helper.method: POST / info: helper: getCreateProvider | helperArgs: {\n  url: 'account/customerAccount/createOrUpdate',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'account/customerAccount/createOrUpdate'\n}",
          "helperArgs: {\n  url: 'account/customerAccount/createOrUpdate',\n  method: 'POST'\n}"
        ]
      }
    },
    "/v2/generic/customerAccount": {
      "delete": {
        "tags": [
          "B2B-customer-care/customer-accounts"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/B2B-customer-care/modules/customer-accounts/provider/provider.js#L68) -> v2/generic/customerAccount | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/generic/customerAccount',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/customer-accounts/provider/provider.js#L74) -> v2/generic/customerAccount | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/generic/customerAccount',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'v2/generic/customerAccount',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/generic/all/customerBrand": {
      "post": {
        "tags": [
          "B2B-customer-care/customer-brand"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/customer-brand/provider/provider.js#L4) -> v2/generic/all/customerBrand | response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/customerBrand',\n  responseContainer: 'data'\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/customer-brand/provider/provider.js#L10) -> v2/generic/all/customerBrand | response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/customerBrand',\n  responseContainer: 'data'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/customerBrand',\n  responseContainer: 'data'\n}"
        ]
      }
    },
    "/v2/generic/customerBrand/": {
      "post": {
        "tags": [
          "B2B-customer-care/customer-brand"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/customer-brand/provider/provider.js#L16) -> v2/generic/customerBrand/ | response: helper.responseContainer: data / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/customerBrand/',\n  responseContainer: 'data'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/customerBrand/',\n  responseContainer: 'data'\n}"
        ]
      }
    },
    "/v2/generic/all/customer": {
      "post": {
        "tags": [
          "B2B-customer-care/customers"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/customers/provider/provider.js#L39) -> v2/generic/all/customer | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    code,\n    description,\n    ...restFilter\n  } = filter;\n  const fitlerTransformed = {\n    ...restFilter,\n    ...(code ? {\n      code: `*${code}*`\n    } : ''),\n    ...(description ? {\n      description: `*${description}*`\n    } : '')\n  };\n  return {\n    filter: fitlerTransformed,\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities | helper.keyColumn: 'id' / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/customer',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'id'\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/customers/provider/provider.js#L67) -> v2/generic/all/customer | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/customer',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_CUSTOMIZED_CUSTOMERS (src/srcProject/layout/B2B-customer-care/modules/customers/provider/provider.js#L103) -> v2/generic/all/customer | request: options: {\n  method: 'POST'\n} / response: responseContainer: 'data' / info: keyColumn: 'id'",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data | responseContainer: 'data'"
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    code,\n    description,\n    ...restFilter\n  } = filter;\n  const fitlerTransformed = {\n    ...restFilter,\n    ...(code ? {\n      code: `*${code}*`\n    } : ''),\n    ...(description ? {\n      description: `*${description}*`\n    } : '')\n  };\n  return {\n    filter: fitlerTransformed,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities\nhelper.keyColumn: 'id'\nhelper.keyColumn: 'code'\noptions: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    code,\n    description,\n    ...restFilter\n  } = filter;\n  const fitlerTransformed = {\n    ...restFilter,\n    ...(code ? {\n      code: `*${code}*`\n    } : ''),\n    ...(description ? {\n      description: `*${description}*`\n    } : '')\n  };\n  return {\n    filter: fitlerTransformed,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities\nhelper.keyColumn: 'id'\nhelper.keyColumn: 'code'\noptions: {\n  method: 'POST'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/customer',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'id'\n}",
          "helperArgs: {\n  url: 'v2/generic/all/customer',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'code'\n}",
          "keyColumn: 'id'"
        ]
      },
      "get": {
        "tags": [
          "B2B-customer-care/mdp-clients",
          "B2B-customer-care/mdp-invoices",
          "B2B-customer-care/mdp-orders",
          "B2B-customer-care/mdp-quote-simulation",
          "B2B-customer-care/mdp-subscriptions",
          "B2B-customer-care/mdp-volume"
        ],
        "summary": "Used in 6 frontend location(s)",
        "description": "- GET_CLIENT_LIST (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L13) -> v2/generic/all/customer | response: responseContainer: 'data'\n- GET_CLIENT_LIST (src/srcProject/layout/B2B-customer-care/modules/mdp-invoices/provider/provider.js#L13) -> v2/generic/all/customer | response: responseContainer: 'data'\n- GET_CLIENT_LIST (src/srcProject/layout/B2B-customer-care/modules/mdp-orders/provider/provider.js#L13) -> v2/generic/all/customer | response: responseContainer: 'data'\n- GET_CLIENT_LIST (src/srcProject/layout/B2B-customer-care/modules/mdp-quote-simulation/provider/provider.js#L13) -> v2/generic/all/customer | response: responseContainer: 'data'\n- GET_CLIENT_LIST (src/srcProject/layout/B2B-customer-care/modules/mdp-subscriptions/provider/provider.js#L13) -> v2/generic/all/customer | response: responseContainer: 'data'\n- GET_CLIENT_LIST (src/srcProject/layout/B2B-customer-care/modules/mdp-volume/provider/provider.js#L13) -> v2/generic/all/customer | response: responseContainer: 'data'",
        "responses": {
          "200": {
            "description": "Successful response. responseContainer: 'data'"
          }
        }
      }
    },
    "/v2/generic/customer/": {
      "post": {
        "tags": [
          "B2B-customer-care/customers"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/customers/provider/provider.js#L60) -> v2/generic/customer/ | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/customer/',\n  responseContainer: 'data',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/customer/',\n  responseContainer: 'data',\n  nestedEntities\n}"
        ]
      }
    },
    "/account/customer/createOrUpdate": {
      "post": {
        "tags": [
          "B2B-customer-care/customers"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/customers/provider/provider.js#L81) -> account/customer/createOrUpdate | info: helper: getCreateProvider | helperArgs: {\n  url: 'account/customer/createOrUpdate'\n}\n- UPDATE_BLOCKAGE (src/srcProject/layout/B2B-customer-care/modules/customers/provider/provider.js#L87) -> account/customer/createOrUpdate | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'account/customer/createOrUpdate'\n}"
        ]
      }
    },
    "/v2/generic/customer": {
      "delete": {
        "tags": [
          "B2B-customer-care/customers"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/B2B-customer-care/modules/customers/provider/provider.js#L91) -> v2/generic/customer | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/generic/customer',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/customers/provider/provider.js#L97) -> v2/generic/customer | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/generic/customer',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'v2/generic/customer',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/generic/all/discountPlanItem": {
      "post": {
        "tags": [
          "B2B-customer-care/discount-lines",
          "catalog/discount-lines"
        ],
        "summary": "Used in 4 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/discount-lines/provider/provider.js#L14) -> v2/generic/all/discountPlanItem | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/discountPlanItem',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/discount-lines/provider/provider.js#L17) -> v2/generic/all/discountPlanItem | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/discountPlanItem',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/catalog/modules/discount-lines/provider/provider.js#L18) -> v2/generic/all/discountPlanItem | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/discountPlanItem',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/catalog/modules/discount-lines/provider/provider.js#L21) -> v2/generic/all/discountPlanItem | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/discountPlanItem',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/discountPlanItem',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/discountPlanItem/": {
      "post": {
        "tags": [
          "B2B-customer-care/discount-lines",
          "catalog/discount-lines"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/discount-lines/provider/provider.js#L21) -> v2/generic/discountPlanItem/ | request: helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/discountPlanItem/',\n  nestedEntities\n}\n- GET_ONE (src/srcProject/layout/catalog/modules/discount-lines/provider/provider.js#L25) -> v2/generic/discountPlanItem/ | request: helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/discountPlanItem/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/discountPlanItem/',\n  nestedEntities\n}"
        ]
      }
    },
    "/catalog/discountPlanItem": {
      "post": {
        "tags": [
          "B2B-customer-care/discount-lines",
          "catalog/discount-lines"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/discount-lines/provider/provider.js#L25) -> catalog/discountPlanItem | request: helper.method: POST / response: helper.responseContainerId: entityId / info: helper: getCreateProvider | helperArgs: {\n  url: 'catalog/discountPlanItem',\n  method: 'POST',\n  responseContainerId: 'entityId'\n}\n- CREATE (src/srcProject/layout/catalog/modules/discount-lines/provider/provider.js#L29) -> catalog/discountPlanItem | request: helper.method: POST / response: helper.responseContainerId: entityId / info: helper: getCreateProvider | helperArgs: {\n  url: 'catalog/discountPlanItem',\n  method: 'POST',\n  responseContainerId: 'entityId'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainerId: entityId"
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'catalog/discountPlanItem',\n  method: 'POST',\n  responseContainerId: 'entityId'\n}"
        ]
      },
      "put": {
        "tags": [
          "B2B-customer-care/discount-lines",
          "catalog/discount-lines"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/B2B-customer-care/modules/discount-lines/provider/provider.js#L33) -> catalog/discountPlanItem | request: helper.method: PUT / response: helper.responseContainerId: entityId / info: helper: getUpdateProvider | helperArgs: {\n  url: 'catalog/discountPlanItem',\n  method: 'PUT',\n  responseContainerId: 'entityId'\n}\n- UPDATE (src/srcProject/layout/catalog/modules/discount-lines/provider/provider.js#L37) -> catalog/discountPlanItem | request: helper.method: PUT / response: helper.responseContainerId: entityId / info: helper: getUpdateProvider | helperArgs: {\n  url: 'catalog/discountPlanItem',\n  method: 'PUT',\n  responseContainerId: 'entityId'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainerId: entityId"
          }
        },
        "requestBody": {
          "description": "helper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'catalog/discountPlanItem',\n  method: 'PUT',\n  responseContainerId: 'entityId'\n}"
        ]
      }
    },
    "/catalog/discountPlanItem/{discountPlanItemCode}": {
      "delete": {
        "tags": [
          "B2B-customer-care/discount-lines",
          "catalog/discount-lines"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DELETE_DISCOUNT_LINE (src/srcProject/layout/B2B-customer-care/modules/discount-lines/provider/provider.js#L41) -> catalog/discountPlanItem/:discountPlanItemCode | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'catalog/discountPlanItem/:discountPlanItemCode',\n  method: 'DELETE'\n}\n- DELETE_DISCOUNT_LINE (src/srcProject/layout/catalog/modules/discount-lines/provider/provider.js#L45) -> catalog/discountPlanItem/:discountPlanItemCode | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'catalog/discountPlanItem/:discountPlanItemCode',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'catalog/discountPlanItem/:discountPlanItemCode',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/cpq/discountPlanItem/": {
      "delete": {
        "tags": [
          "B2B-customer-care/discount-lines",
          "catalog/discount-lines"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/discount-lines/provider/provider.js#L48) -> cpq/discountPlanItem/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'cpq/discountPlanItem/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/catalog/modules/discount-lines/provider/provider.js#L52) -> cpq/discountPlanItem/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'cpq/discountPlanItem/',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'cpq/discountPlanItem/',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/generic/discountPlan/": {
      "post": {
        "tags": [
          "B2B-customer-care/discount-plans",
          "catalog/discount-plans"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/discount-plans/provider/provider.js#L27) -> v2/generic/discountPlan/ | request: helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/discountPlan/',\n  nestedEntities\n}\n- GET_ONE (src/srcProject/layout/catalog/modules/discount-plans/provider/provider.js#L47) -> v2/generic/discountPlan/ | request: helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/discountPlan/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "orderNumber": {
                          "type": "string"
                        },
                        "orderDate": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "discountPlanType": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/discountPlan/',\n  nestedEntities\n}"
        ]
      }
    },
    "/catalog/discountPlan": {
      "post": {
        "tags": [
          "B2B-customer-care/discount-plans",
          "catalog/discount-plans"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/discount-plans/provider/provider.js#L31) -> catalog/discountPlan | request: helper.method: POST / response: helper.responseContainerId: entityId / info: helper: getCreateProvider | helperArgs: {\n  url: 'catalog/discountPlan',\n  method: 'POST',\n  responseContainerId: 'entityId'\n}\n- CREATE (src/srcProject/layout/catalog/modules/discount-plans/provider/provider.js#L51) -> catalog/discountPlan | request: helper.method: POST / response: helper.responseContainerId: entityId / info: helper: getCreateProvider | helperArgs: {\n  url: 'catalog/discountPlan',\n  method: 'POST',\n  responseContainerId: 'entityId'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainerId: entityId",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "entityId": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "status": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "orderNumber": {
                              "type": "string"
                            },
                            "orderDate": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "status": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "discountPlanType": {
                              "type": "string"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'catalog/discountPlan',\n  method: 'POST',\n  responseContainerId: 'entityId'\n}"
        ]
      },
      "put": {
        "tags": [
          "B2B-customer-care/discount-plans",
          "catalog/discount-plans"
        ],
        "summary": "Used in 4 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/B2B-customer-care/modules/discount-plans/provider/provider.js#L39) -> catalog/discountPlan | request: helper.method: PUT / response: helper.responseContainerId: entityId / info: helper: getUpdateProvider | helperArgs: {\n  url: 'catalog/discountPlan',\n  method: 'PUT',\n  responseContainerId: 'entityId'\n}\n- ACTIVATE_STATUS (src/srcProject/layout/B2B-customer-care/modules/discount-plans/provider/provider.js#L67) -> catalog/discountPlan | request: options: {\n  method: 'PUT'\n}\n- UPDATE (src/srcProject/layout/catalog/modules/discount-plans/provider/provider.js#L59) -> catalog/discountPlan | request: helper.method: PUT / response: helper.responseContainerId: entityId / info: helper: getUpdateProvider | helperArgs: {\n  url: 'catalog/discountPlan',\n  method: 'PUT',\n  responseContainerId: 'entityId'\n}\n- ACTIVATE_STATUS (src/srcProject/layout/catalog/modules/discount-plans/provider/provider.js#L87) -> catalog/discountPlan | request: options: {\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainerId: entityId",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "entityId": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "status": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "orderNumber": {
                              "type": "string"
                            },
                            "orderDate": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "status": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "discountPlanType": {
                              "type": "string"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: PUT\noptions: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT\noptions: {\n  method: 'PUT'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'catalog/discountPlan',\n  method: 'PUT',\n  responseContainerId: 'entityId'\n}"
        ]
      },
      "delete": {
        "tags": [
          "B2B-customer-care/discount-plans",
          "catalog/discount-plans"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/B2B-customer-care/modules/discount-plans/provider/provider.js#L47) -> catalog/discountPlan?discountPlanCode= | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'catalog/discountPlan?discountPlanCode=',\n  method: 'DELETE'\n}\n- DELETE (src/srcProject/layout/catalog/modules/discount-plans/provider/provider.js#L67) -> catalog/discountPlan?discountPlanCode= | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'catalog/discountPlan?discountPlanCode=',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "orderNumber": {
                          "type": "string"
                        },
                        "orderDate": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "discountPlanType": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "discountPlanCode",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'catalog/discountPlan?discountPlanCode=',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/cpq/discountPlan/": {
      "delete": {
        "tags": [
          "B2B-customer-care/discount-plans",
          "catalog/discount-plans"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/discount-plans/provider/provider.js#L54) -> cpq/discountPlan/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'cpq/discountPlan/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/catalog/modules/discount-plans/provider/provider.js#L74) -> cpq/discountPlan/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'cpq/discountPlan/',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "orderNumber": {
                          "type": "string"
                        },
                        "orderDate": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "discountPlanType": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'cpq/discountPlan/',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/catalog/discountPlan/{code}/disable": {
      "post": {
        "tags": [
          "B2B-customer-care/discount-plans",
          "catalog/discount-plans"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- INACTIVATE_STATUS (src/srcProject/layout/B2B-customer-care/modules/discount-plans/provider/provider.js#L61) -> catalog/discountPlan/:code/disable | request: options: {\n  method: 'POST'\n}\n- INACTIVATE_STATUS (src/srcProject/layout/catalog/modules/discount-plans/provider/provider.js#L81) -> catalog/discountPlan/:code/disable | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "orderNumber": {
                          "type": "string"
                        },
                        "orderDate": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "discountPlanType": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/generic/all/dunningAction": {
      "post": {
        "tags": [
          "B2B-customer-care/dunning-actions",
          "finance/dunning-actions"
        ],
        "summary": "Used in 4 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/dunning-actions/provider/provider.js#L30) -> v2/generic/all/dunningAction | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/dunningAction',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/dunning-actions/provider/provider.js#L46) -> v2/generic/all/dunningAction | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'id' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/dunningAction',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'id'\n}\n- GET_LIST (src/srcProject/layout/finance/modules/dunning-actions/provider/provider.js#L30) -> v2/generic/all/dunningAction | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/dunningAction',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/finance/modules/dunning-actions/provider/provider.js#L46) -> v2/generic/all/dunningAction | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'id' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/dunningAction',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'id'\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "actionType": {
                            "type": "string"
                          },
                          "actionChannel": {
                            "type": "string"
                          },
                          "actionMode": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: 'id'",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: 'id'"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/dunningAction',\n  nestedEntities\n}",
          "helperArgs: {\n  url: 'v2/generic/all/dunningAction',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'id'\n}"
        ]
      }
    },
    "/v2/generic/dunningAction/": {
      "post": {
        "tags": [
          "B2B-customer-care/dunning-actions",
          "finance/dunning-actions"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/dunning-actions/provider/provider.js#L38) -> v2/generic/dunningAction/ | request: helper.nestedEntities: nestedEntities | helper.keyColumn: keyColumn / response: helper.responseContainer: data / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/dunningAction/',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn\n}\n- GET_ONE (src/srcProject/layout/finance/modules/dunning-actions/provider/provider.js#L38) -> v2/generic/dunningAction/ | request: helper.nestedEntities: nestedEntities | helper.keyColumn: keyColumn / response: helper.responseContainer: data / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/dunningAction/',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "actionType": {
                          "type": "string"
                        },
                        "actionChannel": {
                          "type": "string"
                        },
                        "actionMode": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: keyColumn",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: keyColumn"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/dunningAction/',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn\n}"
        ]
      }
    },
    "/v2/dunning/dunningaction": {
      "post": {
        "tags": [
          "B2B-customer-care/dunning-actions",
          "finance/dunning-actions"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/dunning-actions/provider/provider.js#L54) -> v2/dunning/dunningaction | response: responseContainerId: 'id' / info: keyColumn: 'id' | helper: getCreateProvider | helperArgs: {\n  url: 'v2/dunning/dunningaction'\n}\n- CREATE (src/srcProject/layout/finance/modules/dunning-actions/provider/provider.js#L54) -> v2/dunning/dunningaction | response: responseContainerId: 'id' / info: keyColumn: 'id' | helper: getCreateProvider | helperArgs: {\n  url: 'v2/dunning/dunningaction'\n}",
        "responses": {
          "200": {
            "description": "Successful response. responseContainerId: 'id'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "actionType": {
                          "type": "string"
                        },
                        "actionChannel": {
                          "type": "string"
                        },
                        "actionMode": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: 'id'",
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/dunning/dunningaction'\n}"
        ]
      }
    },
    "/v2/dunning/dunningaction/{id}": {
      "put": {
        "tags": [
          "B2B-customer-care/dunning-actions",
          "finance/dunning-actions"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/B2B-customer-care/modules/dunning-actions/provider/provider.js#L61) -> v2/dunning/dunningaction/:id | request: helper.method: PUT / info: excludeProperties: ['id'] | keyColumn: keyColumn | helper: getCreateProvider | helperArgs: {\n  url: 'v2/dunning/dunningaction/:id',\n  method: 'PUT'\n}\n- UPDATE (src/srcProject/layout/finance/modules/dunning-actions/provider/provider.js#L61) -> v2/dunning/dunningaction/:id | request: helper.method: PUT / info: excludeProperties: ['id'] | keyColumn: keyColumn | helper: getCreateProvider | helperArgs: {\n  url: 'v2/dunning/dunningaction/:id',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "actionType": {
                      "type": "string"
                    },
                    "actionChannel": {
                      "type": "string"
                    },
                    "actionMode": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "excludeProperties: ['id']",
          "keyColumn: keyColumn",
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/dunning/dunningaction/:id',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/v2/generic/dunning": {
      "delete": {
        "tags": [
          "B2B-customer-care/dunning-actions",
          "B2B-customer-care/dunning-levels",
          "finance/dunning-actions",
          "finance/dunning-levels",
          "finance/dunning-policies"
        ],
        "summary": "Used in 7 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/B2B-customer-care/modules/dunning-actions/provider/provider.js#L69) -> v2/generic/dunning | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/generic/dunning',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/dunning-actions/provider/provider.js#L75) -> v2/generic/dunning | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/generic/dunning',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/dunning-levels/provider/provider.js#L83) -> v2/generic/dunning | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/generic/dunning',\n  method: 'DELETE'\n}\n- DELETE (src/srcProject/layout/finance/modules/dunning-actions/provider/provider.js#L69) -> v2/generic/dunning | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/generic/dunning',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/finance/modules/dunning-actions/provider/provider.js#L75) -> v2/generic/dunning | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/generic/dunning',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/finance/modules/dunning-levels/provider/provider.js#L81) -> v2/generic/dunning | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/generic/dunning',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/finance/modules/dunning-policies/provider/provider.js#L82) -> v2/generic/dunning | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/generic/dunning',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "actionType": {
                          "type": "string"
                        },
                        "actionChannel": {
                          "type": "string"
                        },
                        "actionMode": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "reminder": {
                          "type": "boolean"
                        },
                        "endOfDunningLevel": {
                          "type": "boolean"
                        },
                        "softDecline": {
                          "type": "boolean"
                        },
                        "daysOverdue": {
                          "type": "number"
                        },
                        "minBalance": {
                          "type": "number"
                        },
                        "minBalanceCurrency": {
                          "type": "object",
                          "properties": {
                            "currencyCode": {
                              "type": "string"
                            }
                          }
                        },
                        "actions": {
                          "type": "string"
                        },
                        "chargeType": {
                          "type": "string"
                        },
                        "chargeValue": {
                          "type": "number"
                        },
                        "active": {
                          "type": "boolean"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'v2/generic/dunning',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/generic/all/DunningAgent": {
      "post": {
        "tags": [
          "B2B-customer-care/dunning-agents",
          "finance/dunning-agents"
        ],
        "summary": "Used in 6 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/dunning-agents/provider/provider.js#L32) -> v2/generic/all/DunningAgent | request: helper.nestedEntities: nestedEntities | helper.keyColumn: keyColumn / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/DunningAgent',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/dunning-agents/provider/provider.js#L41) -> v2/generic/all/DunningAgent | request: helper.nestedEntities: nestedEntities | helper.keyColumn: keyColumn / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/DunningAgent',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/B2B-customer-care/modules/dunning-agents/provider/provider.js#L49) -> v2/generic/all/DunningAgent | request: helper.nestedEntities: nestedEntities | helper.keyColumn: keyColumn / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/DunningAgent',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn\n}\n- GET_LIST (src/srcProject/layout/finance/modules/dunning-agents/provider/provider.js#L32) -> v2/generic/all/DunningAgent | request: helper.nestedEntities: nestedEntities | helper.keyColumn: keyColumn / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/DunningAgent',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn\n}\n- GET_MANY (src/srcProject/layout/finance/modules/dunning-agents/provider/provider.js#L41) -> v2/generic/all/DunningAgent | request: helper.nestedEntities: nestedEntities | helper.keyColumn: keyColumn / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/DunningAgent',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/finance/modules/dunning-agents/provider/provider.js#L49) -> v2/generic/all/DunningAgent | request: helper.nestedEntities: nestedEntities | helper.keyColumn: keyColumn / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/DunningAgent',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: keyColumn",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: keyColumn"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/DunningAgent',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn\n}"
        ]
      }
    },
    "/v2/generic/all/dunningLevel": {
      "post": {
        "tags": [
          "B2B-customer-care/dunning-levels",
          "finance/dunning-levels"
        ],
        "summary": "Used in 4 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/dunning-levels/provider/provider.js#L39) -> v2/generic/all/dunningLevel | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/dunningLevel',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/dunning-levels/provider/provider.js#L54) -> v2/generic/all/dunningLevel | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'id' / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/dunningLevel',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'id'\n}\n- GET_LIST (src/srcProject/layout/finance/modules/dunning-levels/provider/provider.js#L37) -> v2/generic/all/dunningLevel | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/dunningLevel',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/finance/modules/dunning-levels/provider/provider.js#L52) -> v2/generic/all/dunningLevel | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'id' / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/dunningLevel',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'id'\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "reminder": {
                            "type": "boolean"
                          },
                          "endOfDunningLevel": {
                            "type": "boolean"
                          },
                          "softDecline": {
                            "type": "boolean"
                          },
                          "daysOverdue": {
                            "type": "number"
                          },
                          "minBalance": {
                            "type": "number"
                          },
                          "minBalanceCurrency": {
                            "type": "object",
                            "properties": {
                              "currencyCode": {
                                "type": "string"
                              }
                            }
                          },
                          "actions": {
                            "type": "string"
                          },
                          "chargeType": {
                            "type": "string"
                          },
                          "chargeValue": {
                            "type": "number"
                          },
                          "active": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: 'id'",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: 'id'"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/dunningLevel',\n  nestedEntities\n}",
          "helperArgs: {\n  url: 'v2/generic/all/dunningLevel',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'id'\n}"
        ]
      }
    },
    "/v2/generic/dunningLevel/": {
      "post": {
        "tags": [
          "B2B-customer-care/dunning-levels",
          "finance/dunning-levels"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/dunning-levels/provider/provider.js#L47) -> v2/generic/dunningLevel/ | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/dunningLevel/',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_ONE (src/srcProject/layout/finance/modules/dunning-levels/provider/provider.js#L45) -> v2/generic/dunningLevel/ | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/dunningLevel/',\n  responseContainer: 'data',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "reminder": {
                          "type": "boolean"
                        },
                        "endOfDunningLevel": {
                          "type": "boolean"
                        },
                        "softDecline": {
                          "type": "boolean"
                        },
                        "daysOverdue": {
                          "type": "number"
                        },
                        "minBalance": {
                          "type": "number"
                        },
                        "minBalanceCurrency": {
                          "type": "object",
                          "properties": {
                            "currencyCode": {
                              "type": "string"
                            }
                          }
                        },
                        "actions": {
                          "type": "string"
                        },
                        "chargeType": {
                          "type": "string"
                        },
                        "chargeValue": {
                          "type": "number"
                        },
                        "active": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/dunningLevel/',\n  responseContainer: 'data',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/dunning/dunningLevel": {
      "post": {
        "tags": [
          "B2B-customer-care/dunning-levels",
          "finance/dunning-levels"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/dunning-levels/provider/provider.js#L63) -> v2/dunning/dunningLevel | request: helper.method: POST / info: helper: getCreateProvider | helperArgs: {\n  url: 'v2/dunning/dunningLevel',\n  method: 'POST'\n}\n- CREATE (src/srcProject/layout/finance/modules/dunning-levels/provider/provider.js#L61) -> v2/dunning/dunningLevel | request: helper.method: POST / info: helper: getCreateProvider | helperArgs: {\n  url: 'v2/dunning/dunningLevel',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "reminder": {
                      "type": "boolean"
                    },
                    "endOfDunningLevel": {
                      "type": "boolean"
                    },
                    "softDecline": {
                      "type": "boolean"
                    },
                    "daysOverdue": {
                      "type": "number"
                    },
                    "minBalance": {
                      "type": "number"
                    },
                    "minBalanceCurrency": {
                      "type": "object",
                      "properties": {
                        "currencyCode": {
                          "type": "string"
                        }
                      }
                    },
                    "actions": {
                      "type": "string"
                    },
                    "chargeType": {
                      "type": "string"
                    },
                    "chargeValue": {
                      "type": "number"
                    },
                    "active": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/dunning/dunningLevel',\n  method: 'POST'\n}"
        ]
      }
    },
    "/v2/dunning/dunningLevel/{id}": {
      "put": {
        "tags": [
          "B2B-customer-care/dunning-levels",
          "finance/dunning-levels"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/B2B-customer-care/modules/dunning-levels/provider/provider.js#L69) -> v2/dunning/dunningLevel/:id | request: helper.method: PUT / info: excludeProperties: ['id'] | keyColumn: keyColumn | helper: getUpdateProvider | helperArgs: {\n  url: 'v2/dunning/dunningLevel/:id',\n  method: 'PUT'\n}\n- UPDATE (src/srcProject/layout/finance/modules/dunning-levels/provider/provider.js#L67) -> v2/dunning/dunningLevel/:id | request: helper.method: PUT / info: excludeProperties: ['id'] | keyColumn: keyColumn | helper: getUpdateProvider | helperArgs: {\n  url: 'v2/dunning/dunningLevel/:id',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "reminder": {
                      "type": "boolean"
                    },
                    "endOfDunningLevel": {
                      "type": "boolean"
                    },
                    "softDecline": {
                      "type": "boolean"
                    },
                    "daysOverdue": {
                      "type": "number"
                    },
                    "minBalance": {
                      "type": "number"
                    },
                    "minBalanceCurrency": {
                      "type": "object",
                      "properties": {
                        "currencyCode": {
                          "type": "string"
                        }
                      }
                    },
                    "actions": {
                      "type": "string"
                    },
                    "chargeType": {
                      "type": "string"
                    },
                    "chargeValue": {
                      "type": "number"
                    },
                    "active": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "excludeProperties: ['id']",
          "keyColumn: keyColumn",
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'v2/dunning/dunningLevel/:id',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/v2/dunning/dunningLevel/": {
      "delete": {
        "tags": [
          "B2B-customer-care/dunning-levels",
          "finance/dunning-levels"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/B2B-customer-care/modules/dunning-levels/provider/provider.js#L77) -> v2/dunning/dunningLevel/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/dunning/dunningLevel/',\n  method: 'DELETE'\n}\n- DELETE (src/srcProject/layout/finance/modules/dunning-levels/provider/provider.js#L75) -> v2/dunning/dunningLevel/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/dunning/dunningLevel/',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "reminder": {
                      "type": "boolean"
                    },
                    "endOfDunningLevel": {
                      "type": "boolean"
                    },
                    "softDecline": {
                      "type": "boolean"
                    },
                    "daysOverdue": {
                      "type": "number"
                    },
                    "minBalance": {
                      "type": "number"
                    },
                    "minBalanceCurrency": {
                      "type": "object",
                      "properties": {
                        "currencyCode": {
                          "type": "string"
                        }
                      }
                    },
                    "actions": {
                      "type": "string"
                    },
                    "chargeType": {
                      "type": "string"
                    },
                    "chargeValue": {
                      "type": "number"
                    },
                    "active": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'v2/dunning/dunningLevel/',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/dunning/dunningLevel/archive/{id}": {
      "post": {
        "tags": [
          "B2B-customer-care/dunning-levels",
          "finance/dunning-levels"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- ARCHIVE (src/srcProject/layout/B2B-customer-care/modules/dunning-levels/provider/provider.js#L89) -> v2/dunning/dunningLevel/archive/:id | request: helper.method: POST / info: excludeProperties: ['id'] | keyColumn: keyColumn | helper: getUpdateProvider | helperArgs: {\n  url: 'v2/dunning/dunningLevel/archive/:id',\n  method: 'POST'\n}\n- ARCHIVE (src/srcProject/layout/finance/modules/dunning-levels/provider/provider.js#L87) -> v2/dunning/dunningLevel/archive/:id | request: helper.method: POST / info: excludeProperties: ['id'] | keyColumn: keyColumn | helper: getUpdateProvider | helperArgs: {\n  url: 'v2/dunning/dunningLevel/archive/:id',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "reminder": {
                      "type": "boolean"
                    },
                    "endOfDunningLevel": {
                      "type": "boolean"
                    },
                    "softDecline": {
                      "type": "boolean"
                    },
                    "daysOverdue": {
                      "type": "number"
                    },
                    "minBalance": {
                      "type": "number"
                    },
                    "minBalanceCurrency": {
                      "type": "object",
                      "properties": {
                        "currencyCode": {
                          "type": "string"
                        }
                      }
                    },
                    "actions": {
                      "type": "string"
                    },
                    "chargeType": {
                      "type": "string"
                    },
                    "chargeValue": {
                      "type": "number"
                    },
                    "active": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "excludeProperties: ['id']",
          "keyColumn: keyColumn",
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'v2/dunning/dunningLevel/archive/:id',\n  method: 'POST'\n}"
        ]
      }
    },
    "/v2/generic/dunningPolicyLevel/": {
      "post": {
        "tags": [
          "B2B-customer-care/dunning-levels-policy",
          "finance/dunning-levels-policy"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/dunning-levels-policy/provider/provider.js#L47) -> v2/generic/dunningPolicyLevel/ | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/dunningPolicyLevel/',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_ONE (src/srcProject/layout/finance/modules/dunning-levels-policy/provider/provider.js#L47) -> v2/generic/dunningPolicyLevel/ | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/dunningPolicyLevel/',\n  responseContainer: 'data',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/dunningPolicyLevel/',\n  responseContainer: 'data',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/all/dunningPolicy": {
      "post": {
        "tags": [
          "B2B-customer-care/dunning-policies",
          "finance/dunning-policies"
        ],
        "summary": "Used in 4 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/dunning-policies/provider/provider.js#L29) -> v2/generic/all/dunningPolicy | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    minBalanceTrigger,\n    ...restFilter\n  } = filter;\n  const transformedFilter = {\n    ...restFilter,\n    ...(!!minBalanceTrigger ? {\n      SQL: `minBalanceTrigger=${minBalanceTrigger}`\n    } : {})\n  };\n  return {\n    filter: transformedFilter,\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/dunningPolicy',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/dunning-policies/provider/provider.js#L59) -> v2/generic/all/dunningPolicy | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'id' / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/dunningPolicy',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'id'\n}\n- GET_LIST (src/srcProject/layout/finance/modules/dunning-policies/provider/provider.js#L29) -> v2/generic/all/dunningPolicy | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/dunningPolicy',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/finance/modules/dunning-policies/provider/provider.js#L44) -> v2/generic/all/dunningPolicy | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'id' / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/dunningPolicy',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'id'\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "policyName": {
                            "type": "string"
                          },
                          "policyDescription": {
                            "type": "string"
                          },
                          "totalDunningLevels": {
                            "type": "number"
                          },
                          "minBalanceTrigger": {
                            "type": "number"
                          },
                          "interestForDelaySequence": {
                            "type": "number"
                          },
                          "policyPriority": {
                            "type": "number"
                          },
                          "isDefaultPolicy": {
                            "type": "boolean"
                          },
                          "isActivePolicy": {
                            "type": "boolean"
                          },
                          "disable": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    minBalanceTrigger,\n    ...restFilter\n  } = filter;\n  const transformedFilter = {\n    ...restFilter,\n    ...(!!minBalanceTrigger ? {\n      SQL: `minBalanceTrigger=${minBalanceTrigger}`\n    } : {})\n  };\n  return {\n    filter: transformedFilter,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities\nhelper.keyColumn: 'id'",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    minBalanceTrigger,\n    ...restFilter\n  } = filter;\n  const transformedFilter = {\n    ...restFilter,\n    ...(!!minBalanceTrigger ? {\n      SQL: `minBalanceTrigger=${minBalanceTrigger}`\n    } : {})\n  };\n  return {\n    filter: transformedFilter,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities\nhelper.keyColumn: 'id'"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/dunningPolicy',\n  nestedEntities\n}",
          "helperArgs: {\n  url: 'v2/generic/all/dunningPolicy',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'id'\n}"
        ]
      }
    },
    "/v2/generic/dunningPolicy/": {
      "post": {
        "tags": [
          "B2B-customer-care/dunning-policies",
          "finance/dunning-policies"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/dunning-policies/provider/provider.js#L52) -> v2/generic/dunningPolicy/ | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/dunningPolicy/',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_ONE (src/srcProject/layout/finance/modules/dunning-policies/provider/provider.js#L37) -> v2/generic/dunningPolicy/ | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/dunningPolicy/',\n  responseContainer: 'data',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "policyName": {
                          "type": "string"
                        },
                        "policyDescription": {
                          "type": "string"
                        },
                        "totalDunningLevels": {
                          "type": "number"
                        },
                        "minBalanceTrigger": {
                          "type": "number"
                        },
                        "interestForDelaySequence": {
                          "type": "number"
                        },
                        "policyPriority": {
                          "type": "number"
                        },
                        "isDefaultPolicy": {
                          "type": "boolean"
                        },
                        "isActivePolicy": {
                          "type": "boolean"
                        },
                        "disable": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/dunningPolicy/',\n  responseContainer: 'data',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/dunning/dunningPolicy": {
      "post": {
        "tags": [
          "B2B-customer-care/dunning-policies",
          "finance/dunning-policies"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/dunning-policies/provider/provider.js#L68) -> v2/dunning/dunningPolicy | response: responseContainerId: 'entityId' | helper.responseContainerId: entityId / info: helper: getCreateProvider | helperArgs: {\n  url: 'v2/dunning/dunningPolicy',\n  responseContainerId: 'entityId'\n}\n- CREATE (src/srcProject/layout/finance/modules/dunning-policies/provider/provider.js#L53) -> v2/dunning/dunningPolicy | response: responseContainerId: 'entityId' | helper.responseContainerId: entityId / info: helper: getCreateProvider | helperArgs: {\n  url: 'v2/dunning/dunningPolicy',\n  responseContainerId: 'entityId'\n}",
        "responses": {
          "200": {
            "description": "Successful response. responseContainerId: 'entityId' | helper.responseContainerId: entityId",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "entityId": {
                      "type": "object",
                      "properties": {
                        "policyName": {
                          "type": "string"
                        },
                        "policyDescription": {
                          "type": "string"
                        },
                        "totalDunningLevels": {
                          "type": "number"
                        },
                        "minBalanceTrigger": {
                          "type": "number"
                        },
                        "interestForDelaySequence": {
                          "type": "number"
                        },
                        "policyPriority": {
                          "type": "number"
                        },
                        "isDefaultPolicy": {
                          "type": "boolean"
                        },
                        "isActivePolicy": {
                          "type": "boolean"
                        },
                        "disable": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/dunning/dunningPolicy',\n  responseContainerId: 'entityId'\n}"
        ]
      }
    },
    "/v2/dunning/dunningPolicy/": {
      "delete": {
        "tags": [
          "B2B-customer-care/dunning-policies"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/dunning-policies/provider/provider.js#L97) -> v2/dunning/dunningPolicy/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/dunning/dunningPolicy/',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "policyName": {
                      "type": "string"
                    },
                    "policyDescription": {
                      "type": "string"
                    },
                    "totalDunningLevels": {
                      "type": "number"
                    },
                    "minBalanceTrigger": {
                      "type": "number"
                    },
                    "interestForDelaySequence": {
                      "type": "number"
                    },
                    "policyPriority": {
                      "type": "number"
                    },
                    "isDefaultPolicy": {
                      "type": "boolean"
                    },
                    "isActivePolicy": {
                      "type": "boolean"
                    },
                    "disable": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'v2/dunning/dunningPolicy/',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/generic/all/DunningSettings": {
      "post": {
        "tags": [
          "B2B-customer-care/dunning-settings"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/dunning-settings/provider/provider.js#L51) -> v2/generic/all/DunningSettings | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/DunningSettings',\n  responseContainer: 'data',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/DunningSettings',\n  responseContainer: 'data',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/DunningSettings/": {
      "post": {
        "tags": [
          "B2B-customer-care/dunning-settings"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/dunning-settings/provider/provider.js#L58) -> v2/generic/DunningSettings/ | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'id' / response: helper.responseContainer: data / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/DunningSettings/',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'id'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: 'id'",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: 'id'"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/DunningSettings/',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'id'\n}"
        ]
      }
    },
    "/v2/generic/all/dunning": {
      "post": {
        "tags": [
          "B2B-customer-care/dunning-settings"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/dunning-settings/provider/provider.js#L66) -> v2/generic/all/dunning | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/dunning',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'code'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: 'code'",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: 'code'"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/dunning',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'code'\n}"
        ]
      }
    },
    "/v2/dunning/collectionPlanStatus": {
      "post": {
        "tags": [
          "B2B-customer-care/dunning-settings"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- COLLECTION_PLAN_STATUS (src/srcProject/layout/B2B-customer-care/modules/dunning-settings/provider/provider.js#L74) -> v2/dunning/collectionPlanStatus | request: helper.keyColumn: 'id' / info: helper: getCreateProvider | helperArgs: {\n  url: 'v2/dunning/collectionPlanStatus',\n  keyColumn: 'id'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.keyColumn: 'id'",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.keyColumn: 'id'"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/dunning/collectionPlanStatus',\n  keyColumn: 'id'\n}"
        ]
      }
    },
    "/v2/dunning/dunningAgent": {
      "post": {
        "tags": [
          "B2B-customer-care/dunning-settings"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- COLLECTION_MANAGMENT (src/srcProject/layout/B2B-customer-care/modules/dunning-settings/provider/provider.js#L93) -> v2/dunning/dunningAgent | info: helper: getCreateProvider | helperArgs: {\n  url: 'v2/dunning/dunningAgent'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/dunning/dunningAgent'\n}"
        ]
      }
    },
    "/v2/dunning/paymentRetry": {
      "post": {
        "tags": [
          "B2B-customer-care/dunning-settings"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- PAYMENT_RETRIES (src/srcProject/layout/B2B-customer-care/modules/dunning-settings/provider/provider.js#L112) -> v2/dunning/paymentRetry | request: helper.keyColumn: 'id' / info: helper: getCreateProvider | helperArgs: {\n  url: 'v2/dunning/paymentRetry',\n  keyColumn: 'id'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.keyColumn: 'id'",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.keyColumn: 'id'"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/dunning/paymentRetry',\n  keyColumn: 'id'\n}"
        ]
      }
    },
    "/v2/dunning/stopReason": {
      "post": {
        "tags": [
          "B2B-customer-care/dunning-settings"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- STOP_REASON (src/srcProject/layout/B2B-customer-care/modules/dunning-settings/provider/provider.js#L132) -> v2/dunning/stopReason | info: helper: getCreateProvider | helperArgs: {\n  url: 'v2/dunning/stopReason'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/dunning/stopReason'\n}"
        ]
      }
    },
    "/v2/dunning/pauseReason": {
      "post": {
        "tags": [
          "B2B-customer-care/dunning-settings"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- PAUSE_REASON (src/srcProject/layout/B2B-customer-care/modules/dunning-settings/provider/provider.js#L151) -> v2/dunning/pauseReason | info: helper: getCreateProvider | helperArgs: {\n  url: 'v2/dunning/pauseReason'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/dunning/pauseReason'\n}"
        ]
      }
    },
    "/v2/dunning/invoiceStatus": {
      "post": {
        "tags": [
          "B2B-customer-care/dunning-settings"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- INVOICE_STATUS (src/srcProject/layout/B2B-customer-care/modules/dunning-settings/provider/provider.js#L170) -> v2/dunning/invoiceStatus | request: helper.keyColumn: 'id' / info: helper: getCreateProvider | helperArgs: {\n  url: 'v2/dunning/invoiceStatus',\n  keyColumn: 'id'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.keyColumn: 'id'",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.keyColumn: 'id'"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/dunning/invoiceStatus',\n  keyColumn: 'id'\n}"
        ]
      }
    },
    "/v2/payment/dunning": {
      "post": {
        "tags": [
          "B2B-customer-care/dunning-settings"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/dunning-settings/provider/provider.js#L189) -> v2/payment/dunning | info: helper: getCreateProvider | helperArgs: {\n  url: 'v2/payment/dunning'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/payment/dunning'\n}"
        ]
      }
    },
    "/v2/payment/dunning/{id}": {
      "put": {
        "tags": [
          "B2B-customer-care/dunning-settings"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/B2B-customer-care/modules/dunning-settings/provider/provider.js#L194) -> v2/payment/dunning/:id | request: helper.method: PUT | helper.keyColumn: 'id' / info: helper: getCreateProvider | helperArgs: {\n  url: 'v2/payment/dunning/:id',\n  method: 'PUT',\n  keyColumn: 'id'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: PUT\nhelper.keyColumn: 'id'",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT\nhelper.keyColumn: 'id'"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/payment/dunning/:id',\n  method: 'PUT',\n  keyColumn: 'id'\n}"
        ]
      }
    },
    "/v2/payment/dunning/": {
      "delete": {
        "tags": [
          "B2B-customer-care/dunning-settings"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/B2B-customer-care/modules/dunning-settings/provider/provider.js#L201) -> v2/payment/dunning/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/payment/dunning/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/dunning-settings/provider/provider.js#L207) -> v2/payment/dunning/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/payment/dunning/',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'v2/payment/dunning/',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/generic/all/DunningTemplate": {
      "post": {
        "tags": [
          "B2B-customer-care/dunning-templates"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/dunning-templates/provider/provider.js#L29) -> v2/generic/all/DunningTemplate | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/DunningTemplate',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/dunning-templates/provider/provider.js#L44) -> v2/generic/all/DunningTemplate | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/DunningTemplate',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'code'\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "language": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "languageCode": {
                                    "type": "string"
                                  }
                                }
                              },
                              {
                                "type": "string"
                              }
                            ]
                          },
                          "channel": {
                            "type": "string"
                          },
                          "active": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: 'code'",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: 'code'"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/DunningTemplate',\n  nestedEntities\n}",
          "helperArgs: {\n  url: 'v2/generic/all/DunningTemplate',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'code'\n}"
        ]
      }
    },
    "/v2/generic/DunningTemplate/": {
      "post": {
        "tags": [
          "B2B-customer-care/dunning-templates"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/dunning-templates/provider/provider.js#L37) -> v2/generic/DunningTemplate/ | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/DunningTemplate/',\n  responseContainer: 'data',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "language": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "languageCode": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "string"
                            }
                          ]
                        },
                        "channel": {
                          "type": "string"
                        },
                        "active": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/DunningTemplate/',\n  responseContainer: 'data',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/dunning/dunningtemplate": {
      "post": {
        "tags": [
          "B2B-customer-care/dunning-templates"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/dunning-templates/provider/provider.js#L52) -> v2/dunning/dunningtemplate | info: helper: getCreateProvider | helperArgs: {\n  url: 'v2/dunning/dunningtemplate'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "language": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "languageCode": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "channel": {
                      "type": "string"
                    },
                    "active": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/dunning/dunningtemplate'\n}"
        ]
      }
    },
    "/v2/dunning/dunningtemplate/{id}": {
      "put": {
        "tags": [
          "B2B-customer-care/dunning-templates"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/B2B-customer-care/modules/dunning-templates/provider/provider.js#L57) -> v2/dunning/dunningtemplate/:id | request: helper.method: PUT / info: excludeProperties: ['id'] | keyColumn: keyColumn | helper: getUpdateProvider | helperArgs: {\n  url: 'v2/dunning/dunningtemplate/:id',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "language": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "languageCode": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "channel": {
                      "type": "string"
                    },
                    "active": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "excludeProperties: ['id']",
          "keyColumn: keyColumn",
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'v2/dunning/dunningtemplate/:id',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/v2/dunning/dunningtemplate/": {
      "delete": {
        "tags": [
          "B2B-customer-care/dunning-templates"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/B2B-customer-care/modules/dunning-templates/provider/provider.js#L65) -> v2/dunning/dunningtemplate/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/dunning/dunningtemplate/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/dunning-templates/provider/provider.js#L71) -> v2/dunning/dunningtemplate/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/dunning/dunningtemplate/',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "language": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "languageCode": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "channel": {
                      "type": "string"
                    },
                    "active": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'v2/dunning/dunningtemplate/',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/generic/all/ratedTransaction": {
      "post": {
        "tags": [
          "B2B-customer-care/encours-consommation",
          "B2B-customer-care/osho",
          "B2B-customer-care/rated-transactions",
          "finance/rated-transactions"
        ],
        "summary": "Used in 12 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/encours-consommation/provider/provider.js#L18) -> v2/generic/all/ratedTransaction | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/ratedTransaction',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/encours-consommation/provider/provider.js#L25) -> v2/generic/all/ratedTransaction | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/ratedTransaction',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/B2B-customer-care/modules/encours-consommation/provider/provider.js#L42) -> v2/generic/all/ratedTransaction | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/ratedTransaction',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/osho/provider/provider.js#L18) -> v2/generic/all/ratedTransaction | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/ratedTransaction',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/osho/provider/provider.js#L25) -> v2/generic/all/ratedTransaction | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/ratedTransaction',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/B2B-customer-care/modules/osho/provider/provider.js#L42) -> v2/generic/all/ratedTransaction | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/ratedTransaction',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/rated-transactions/provider/provider.js#L16) -> v2/generic/all/ratedTransaction | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/ratedTransaction',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/rated-transactions/provider/provider.js#L23) -> v2/generic/all/ratedTransaction | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/ratedTransaction',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/B2B-customer-care/modules/rated-transactions/provider/provider.js#L30) -> v2/generic/all/ratedTransaction | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/ratedTransaction',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/finance/modules/rated-transactions/provider.js#L23) -> v2/generic/all/ratedTransaction | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/ratedTransaction',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/finance/modules/rated-transactions/provider.js#L30) -> v2/generic/all/ratedTransaction | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/ratedTransaction',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/finance/modules/rated-transactions/provider.js#L37) -> v2/generic/all/ratedTransaction | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/ratedTransaction',\n  responseContainer: 'data',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/ratedTransaction',\n  responseContainer: 'data',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/ratedTransaction/": {
      "post": {
        "tags": [
          "B2B-customer-care/encours-consommation",
          "B2B-customer-care/osho"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/encours-consommation/provider/provider.js#L32) -> v2/generic/ratedTransaction/ | request: helper.nestedEntities: nestedEntities | helper.otherParams: {\n  sortBy: 'serviceInstance.chargeInstances.id'\n} / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/ratedTransaction/',\n  responseContainer: 'data',\n  nestedEntities,\n  otherParams: {\n    sortBy: 'serviceInstance.chargeInstances.id'\n  }\n}\n- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/osho/provider/provider.js#L32) -> v2/generic/ratedTransaction/ | request: helper.nestedEntities: nestedEntities | helper.otherParams: {\n  sortBy: 'serviceInstance.chargeInstances.id'\n} / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/ratedTransaction/',\n  responseContainer: 'data',\n  nestedEntities,\n  otherParams: {\n    sortBy: 'serviceInstance.chargeInstances.id'\n  }\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities\nhelper.otherParams: {\n  sortBy: 'serviceInstance.chargeInstances.id'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities\nhelper.otherParams: {\n  sortBy: 'serviceInstance.chargeInstances.id'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/ratedTransaction/',\n  responseContainer: 'data',\n  nestedEntities,\n  otherParams: {\n    sortBy: 'serviceInstance.chargeInstances.id'\n  }\n}"
        ]
      }
    },
    "/v2/billing/ratedTransaction": {
      "post": {
        "tags": [
          "B2B-customer-care/encours-consommation"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/encours-consommation/provider/provider.js#L49) -> v2/billing/ratedTransaction | request: helper.method: POST / info: absoluteResponseContainerId: 'body' | helper: getCreateProvider | helperArgs: {\n  url: 'v2/billing/ratedTransaction',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "absoluteResponseContainerId: 'body'",
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/billing/ratedTransaction',\n  method: 'POST'\n}"
        ]
      }
    },
    "/v2/billing/ratedTransaction/{id}": {
      "put": {
        "tags": [
          "B2B-customer-care/encours-consommation",
          "B2B-customer-care/osho"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/B2B-customer-care/modules/encours-consommation/provider/provider.js#L56) -> v2/billing/ratedTransaction/:id | request: helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  url: 'v2/billing/ratedTransaction/:id',\n  method: 'PUT'\n}\n- UPDATE (src/srcProject/layout/B2B-customer-care/modules/osho/provider/provider.js#L56) -> v2/billing/ratedTransaction/:id | request: helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  url: 'v2/billing/ratedTransaction/:id',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'v2/billing/ratedTransaction/:id',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/customTable/list/ct_pod_event": {
      "post": {
        "tags": [
          "B2B-customer-care/event-pod",
          "B2B-customer-care/pod-event"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/event-pod/provider/provider.js#L4) -> customTable/list/ct_pod_event | request: options: {\n  method: 'POST'\n} / response: responseContainer: 'tableData.record' / info: keyColumn: 'id' | customTableCode: 'ct_pod_event' | nestedContainer: 'values'\n- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/pod-event/provider/provider.js#L8) -> customTable/list/ct_pod_event | request: options: {\n  method: 'POST'\n} | params: {\n  cf_pevent_ext_id: '@data.code'\n} / response: responseContainer: 'tableData.record' / info: keyColumn: 'id' | customTableCode: 'ct_pod_event' | nestedContainer: 'values'\n- GET_MANY_REFERENCE (src/srcProject/layout/B2B-customer-care/modules/pod-event/provider/provider.js#L21) -> customTable/list/ct_pod_event | request: options: {\n  method: 'POST'\n} / response: responseContainer: 'tableData.record' / info: keyColumn: 'id' | customTableCode: 'ct_pod_event' | nestedContainer: 'values'",
        "responses": {
          "200": {
            "description": "Successful response. responseContainer: 'tableData.record'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tableData.record": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "cf_pevent_id": {
                            "type": "string"
                          },
                          "cf_pevent_ext_id": {
                            "type": "string"
                          },
                          "cf_pevent_event_date": {
                            "type": "string",
                            "format": "date"
                          },
                          "cf_pevent_event_type": {
                            "type": "string"
                          },
                          "cf_pevent_event_nature": {
                            "type": "string"
                          },
                          "cf_pevent_statut_core": {
                            "type": "string"
                          },
                          "cf_pevent_err_code": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}\nparams: {\n  cf_pevent_ext_id: '@data.code'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cf_pevent_ext_id": {
                    "type": "string",
                    "example": "@data.code"
                  }
                }
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: 'id'",
          "customTableCode: 'ct_pod_event'",
          "nestedContainer: 'values'"
        ]
      }
    },
    "/v2/catalog/priceManagement/pricePlanMatrixVersions/import": {
      "post": {
        "tags": [
          "B2B-customer-care/import-c-action",
          "B2B-customer-care/import-cdr",
          "B2B-customer-care/import-s-action",
          "catalog/import-mass-action",
          "operation/import-cdr"
        ],
        "summary": "Used in 6 frontend location(s)",
        "description": "- UPLOAD (src/srcProject/layout/B2B-customer-care/modules/import-c-action/provider/provider.js#L60) -> v2/catalog/priceManagement/pricePlanMatrixVersions/import | request: options: {\n  method: 'POST'\n}\n- UPLOAD (src/srcProject/layout/B2B-customer-care/modules/import-cdr/provider/provider.js#L109) -> v2/catalog/priceManagement/pricePlanMatrixVersions/import | request: options: {\n  method: 'POST'\n}\n- UPLOAD (src/srcProject/layout/B2B-customer-care/modules/import-s-action/provider/provider.js#L60) -> v2/catalog/priceManagement/pricePlanMatrixVersions/import | request: options: {\n  method: 'POST'\n}\n- UPLOAD (src/srcProject/layout/catalog/modules/import-mass-action/provider/provider.js#L60) -> v2/catalog/priceManagement/pricePlanMatrixVersions/import | request: options: {\n  method: 'POST'\n}\n- VALIDATE (src/srcProject/layout/catalog/modules/import-mass-action/provider/provider.js#L66) -> v2/catalog/priceManagement/pricePlanMatrixVersions/import | request: options: {\n  method: 'POST'\n}\n- UPLOAD (src/srcProject/layout/operation/modules/import-cdr/provider/provider.js#L303) -> v2/catalog/priceManagement/pricePlanMatrixVersions/import | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/job/execute": {
      "post": {
        "tags": [
          "B2B-customer-care/import-c-action",
          "B2B-customer-care/import-cdr",
          "B2B-customer-care/import-s-action",
          "MACO/job-instances-v1",
          "MACO/maco-elecOperationTraitement",
          "MACO/maco-elecPoDEvents",
          "MACO/maco-fluxEvents",
          "MACO/maco-fluxFees",
          "MACO/maco-fluxXmlR15",
          "MACO/maco-fluxXmlR151",
          "MACO/maco-marketMessage",
          "MACO/maco-reliefR15",
          "MACO/maco-reliefR15-details",
          "MACO/maco-reliefR151",
          "MACO/maco-reliefR151-details",
          "operation/import-cdr",
          "operation/mass-adjustments",
          "operation/wallet-operations"
        ],
        "summary": "Used in 18 frontend location(s)",
        "description": "- VALIDATE (src/srcProject/layout/B2B-customer-care/modules/import-c-action/provider/provider.js#L66) -> job/execute | request: options: {\n  method: 'POST'\n}\n- VALIDATE (src/srcProject/layout/B2B-customer-care/modules/import-cdr/provider/provider.js#L115) -> job/execute | request: options: {\n  method: 'POST'\n}\n- VALIDATE (src/srcProject/layout/B2B-customer-care/modules/import-s-action/provider/provider.js#L66) -> job/execute | request: options: {\n  method: 'POST'\n}\n- EXECUTE (src/srcProject/layout/MACO/modules/job-instances-v1/provider/provider.js#L24) -> job/execute | request: options: {\n  method: 'POST'\n}\n- REJOUER (src/srcProject/layout/MACO/modules/maco-elecOperationTraitement/provider/provider.js#L102) -> job/execute | request: options: {\n  method: 'POST'\n}\n- REPLAY (src/srcProject/layout/MACO/modules/maco-elecPoDEvents/provider/provider.js#L110) -> job/execute | request: options: {\n  method: 'POST'\n}\n- REPLAY (src/srcProject/layout/MACO/modules/maco-fluxEvents/provider/provider.js#L70) -> job/execute | request: options: {\n  method: 'POST'\n}\n- REPLAY (src/srcProject/layout/MACO/modules/maco-fluxFees/provider/provider.js#L90) -> job/execute | request: options: {\n  method: 'POST'\n}\n- REPLAY (src/srcProject/layout/MACO/modules/maco-fluxXmlR15/provider/provider.js#L82) -> job/execute | request: options: {\n  method: 'POST'\n}\n- REPLAY (src/srcProject/layout/MACO/modules/maco-fluxXmlR151/provider/provider.js#L62) -> job/execute | request: options: {\n  method: 'POST'\n}\n- EXECUTE_JOB (src/srcProject/layout/MACO/modules/maco-marketMessage/provider/provider.js#L26) -> job/execute | request: options: {\n  method: 'POST'\n}\n- REPLAY (src/srcProject/layout/MACO/modules/maco-reliefR15/provider/provider.js#L133) -> job/execute | request: options: {\n  method: 'POST'\n}\n- REPLAY (src/srcProject/layout/MACO/modules/maco-reliefR15-details/provider/provider.js#L71) -> job/execute | request: options: {\n  method: 'POST'\n}\n- REPLAY (src/srcProject/layout/MACO/modules/maco-reliefR151/provider/provider.js#L55) -> job/execute | request: options: {\n  method: 'POST'\n}\n- REPLAY (src/srcProject/layout/MACO/modules/maco-reliefR151-details/provider/provider.js#L63) -> job/execute | request: options: {\n  method: 'POST'\n}\n- VALIDATE (src/srcProject/layout/operation/modules/import-cdr/provider/provider.js#L309) -> job/execute | request: options: {\n  method: 'POST'\n}\n- EXECUTE_MASS_ADJUSTMENT_JOB (src/srcProject/layout/operation/modules/mass-adjustments/provider/provider.js#L39) -> job/execute | request: options: {\n  method: 'POST'\n}\n- JOB_EXECUTE (src/srcProject/layout/operation/modules/wallet-operations/provider/provider.js#L74) -> job/execute | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "prmId": {
                          "type": "string"
                        },
                        "startDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "endDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "operationType": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "prmId": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "statusCode": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "errorCode": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "integrationUserCode": {
                          "type": "string"
                        },
                        "statusUpdateDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "payload": {
                          "type": "string"
                        },
                        "headerId": {
                          "type": "object",
                          "properties": {
                            "fileName": {
                              "type": "string"
                            },
                            "creationDate": {
                              "type": "string",
                              "format": "date"
                            },
                            "loadingDate": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "extId": {
                          "type": "string"
                        },
                        "eventType": {
                          "type": "string"
                        },
                        "eventDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "eventNature": {
                          "type": "string"
                        },
                        "idAffaire": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "arpEicCode": {
                          "type": "string"
                        },
                        "gridContract": {
                          "type": "string"
                        },
                        "supplierEicCode": {
                          "type": "string"
                        },
                        "segmentPrm": {
                          "type": "string"
                        },
                        "etatContractuelEnedis": {
                          "type": "string"
                        },
                        "numDepannage": {
                          "type": "string"
                        },
                        "lastFtaUpdate": {
                          "type": "string",
                          "format": "date"
                        },
                        "lastPsAugmentation": {
                          "type": "string",
                          "format": "date"
                        },
                        "lastPsDiminution": {
                          "type": "string",
                          "format": "date"
                        },
                        "jourFixeReleve": {
                          "type": "string"
                        },
                        "periodiciteReleve": {
                          "type": "string"
                        },
                        "rangReleve": {
                          "type": "string"
                        },
                        "gpsLongitude": {
                          "type": "string"
                        },
                        "gpsLatitude": {
                          "type": "string"
                        },
                        "gpsAltitudeValeur": {
                          "type": "string"
                        },
                        "gpsAltitudeUnite": {
                          "type": "string"
                        },
                        "gpsQuality": {
                          "type": "string"
                        },
                        "datePremierePoseLinky": {
                          "type": "string",
                          "format": "date"
                        },
                        "nivOuvertCompt": {
                          "type": "string"
                        },
                        "dateChangementNiveauOuvertureServices": {
                          "type": "string",
                          "format": "date"
                        },
                        "teleOper": {
                          "type": "string"
                        },
                        "borneFixe": {
                          "type": "string"
                        },
                        "autoproducteur": {
                          "type": "string"
                        },
                        "autoconsoCollectif": {
                          "type": "string"
                        },
                        "typeHebergement": {
                          "type": "string"
                        },
                        "origineEvenement": {
                          "type": "string"
                        },
                        "addressStreetNum": {
                          "type": "string"
                        },
                        "addressStreet": {
                          "type": "string"
                        },
                        "addressStaircase": {
                          "type": "string"
                        },
                        "addressFloor": {
                          "type": "string"
                        },
                        "addressBuilding": {
                          "type": "string"
                        },
                        "city": {
                          "type": "string"
                        },
                        "country": {
                          "type": "string"
                        },
                        "locality": {
                          "type": "string"
                        },
                        "zipCode": {
                          "type": "string"
                        },
                        "codeInsee": {
                          "type": "string"
                        },
                        "refSitContract": {
                          "type": "string"
                        },
                        "numSequence": {
                          "type": "string"
                        },
                        "fta": {
                          "type": "string"
                        },
                        "puissSouscrite": {
                          "type": "string"
                        },
                        "puissSouscriteUnite": {
                          "type": "string"
                        },
                        "idStructureHorosaisonniere": {
                          "type": "string"
                        },
                        "calDist": {
                          "type": "string"
                        },
                        "calFour": {
                          "type": "string"
                        },
                        "calDistCalculated": {
                          "type": "string"
                        },
                        "calFourCalculated": {
                          "type": "string"
                        },
                        "idPlageHeuresCreuses": {
                          "type": "string"
                        },
                        "plageHeuresCreuses": {
                          "type": "string"
                        },
                        "idGroupePeriodeMobile": {
                          "type": "string"
                        },
                        "catClient": {
                          "type": "string"
                        },
                        "residClient": {
                          "type": "boolean"
                        },
                        "tensionLivraison": {
                          "type": "string"
                        },
                        "puissRaccord": {
                          "type": "string"
                        },
                        "domaineTension": {
                          "type": "string"
                        },
                        "branchementProvisoire": {
                          "type": "string"
                        },
                        "etatAlimPrm": {
                          "type": "string"
                        },
                        "dateDebutEtatAlimentation": {
                          "type": "string",
                          "format": "date"
                        },
                        "puissLim": {
                          "type": "string"
                        },
                        "localCoup": {
                          "type": "string"
                        },
                        "dateCoup": {
                          "type": "string",
                          "format": "date"
                        },
                        "motifCoup": {
                          "type": "string"
                        },
                        "motifLim": {
                          "type": "string"
                        },
                        "modeAlimentation": {
                          "type": "string"
                        },
                        "typeCompt": {
                          "type": "string"
                        },
                        "sousTypeCompt": {
                          "type": "string"
                        },
                        "tensionFonctionnementCompt": {
                          "type": "string"
                        },
                        "constructeurCompt": {
                          "type": "string"
                        },
                        "numSerieCompt": {
                          "type": "string"
                        },
                        "calibreCompt": {
                          "type": "string"
                        },
                        "nbCadransCompt": {
                          "type": "string"
                        },
                        "coeffLectureCompt": {
                          "type": "string"
                        },
                        "accessCompt": {
                          "type": "string"
                        },
                        "natureDisjoncteur": {
                          "type": "string"
                        },
                        "numSerieDisjoncteur": {
                          "type": "string"
                        },
                        "calibreDisjoncteur": {
                          "type": "string"
                        },
                        "intensiteDisjoncteur": {
                          "type": "string"
                        },
                        "pptCompt": {
                          "type": "string"
                        },
                        "idXmlC15": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "userCodeIntegration": {
                          "type": "string"
                        },
                        "creationDateIntegration": {
                          "type": "string",
                          "format": "date"
                        },
                        "userCodeTraitement": {
                          "type": "string"
                        },
                        "creationDateTraitement": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string"
                        },
                        "id": {
                          "type": "string"
                        },
                        "quantity": {
                          "type": "string"
                        },
                        "amountWithoutTax": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "subscription": {
                          "type": "object",
                          "properties": {
                            "order": {
                              "type": "string"
                            }
                          }
                        },
                        "chargeInstance": {
                          "type": "string"
                        },
                        "product": {
                          "type": "string"
                        },
                        "currency": {
                          "type": "object",
                          "properties": {
                            "currencyCode": {
                              "type": "string"
                            }
                          }
                        },
                        "offerTemplate": {
                          "type": "string"
                        },
                        "contract": {
                          "type": "string"
                        },
                        "orderNumber": {
                          "type": "string"
                        },
                        "billingAccount": {
                          "type": "string"
                        },
                        "unbilled": {
                          "type": "string"
                        },
                        "operationDate": {
                          "type": "string"
                        },
                        "serviceInstance": {
                          "type": "string"
                        },
                        "parameter1": {
                          "type": "string"
                        },
                        "parameter2": {
                          "type": "string"
                        },
                        "parameter3": {
                          "type": "string"
                        },
                        "billed": {
                          "type": "string"
                        },
                        "pricePlanMatrixVersion": {
                          "type": "string"
                        },
                        "jobInstance": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "startDate": {
                          "type": "string"
                        },
                        "endDate": {
                          "type": "string"
                        },
                        "nbItemsToProcess": {
                          "type": "string"
                        },
                        "nbItemsCorrectlyProcessed": {
                          "type": "string"
                        },
                        "nbItemsProcessedWithWarning": {
                          "type": "string"
                        },
                        "nbItemsProcessedWithError": {
                          "type": "string"
                        },
                        "report": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/massImport/uploadAndImport": {
      "post": {
        "tags": [
          "B2B-customer-care/import-c-action",
          "B2B-customer-care/import-s-action"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- UPLOAD_FILE (src/srcProject/layout/B2B-customer-care/modules/import-c-action/provider/provider.js#L72) -> massImport/uploadAndImport | request: options: {\n  method: 'POST'\n}\n- UPLOAD_FILE (src/srcProject/layout/B2B-customer-care/modules/import-s-action/provider/provider.js#L72) -> massImport/uploadAndImport | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/admin/files/upload": {
      "post": {
        "tags": [
          "B2B-customer-care/import-cdr",
          "catalog/import-mass-action",
          "operation/import-cdr"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- UPLOAD_FILE (src/srcProject/layout/B2B-customer-care/modules/import-cdr/provider/provider.js#L121) -> admin/files/upload | request: options: {\n  method: 'POST'\n}\n- UPLOAD_FILE (src/srcProject/layout/catalog/modules/import-mass-action/provider/provider.js#L72) -> admin/files/upload | request: options: {\n  method: 'POST'\n}\n- UPLOAD_FILE (src/srcProject/layout/operation/modules/import-cdr/provider/provider.js#L315) -> admin/files/upload | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/generic/all/invoiceLine": {
      "post": {
        "tags": [
          "B2B-customer-care/invoice-lines",
          "operation/mass-adjustments"
        ],
        "summary": "Used in 5 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/invoice-lines/provider/provider.js#L99) -> v2/generic/all/invoiceLine | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    amountWithoutTax = {},\n    amountWithTax = {},\n    amountTax = {},\n    taxRate = {},\n    discountAmount = {},\n    unitPrice = {},\n    accountingArticle = {},\n    ...restFilter\n  } = filter;\n  const {\n    description = ''\n  } = accountingArticle;\n  const aaDescriptionFilter = isNumber(description) ? {\n    accountingArticle: {\n      id: description\n    }\n  } : {};\n  const transformedFilter = {\n    ...restFilter,\n    ...(!isEmpty(amountWithoutTax) ? getMinMaxFromRangeNumber(amountWithoutTax, 'amountWithoutTax') : {}),\n    ...(!isEmpty(amountWithTax) ? getMinMaxFromRangeNumber(amountWithTax, 'amountWithTax') : {}),\n    ...(!isEmpty(amountTax) ? getMinMaxFromRangeNumber(amountTax, 'amountTax') : {}),\n    ...(!isEmpty(taxRate) ? getMinMaxFromRangeNumber(taxRate, 'taxRate') : {}),\n    ...(!isEmpty(discountAmount) ? getMinMaxFromRangeNumber(discountAmount, 'discountAmount') : {}),\n    ...(!isEmpty(unitPrice) ? getMinMaxFromRangeNumber(unitPrice, 'unitPrice') : {}),\n    ...(!isEmpty(aaDescriptionFilter) ? aaDescriptionFilter : {})\n  };\n  return {\n    filter: transformedFilter,\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/invoiceLine',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/invoice-lines/provider/provider.js#L151) -> v2/generic/all/invoiceLine | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/invoiceLine',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/operation/modules/mass-adjustments/provider/provider.js#L6) -> v2/generic/all/invoiceLine | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/invoiceLine',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/operation/modules/mass-adjustments/provider/provider.js#L13) -> v2/generic/all/invoiceLine | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/invoiceLine',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/operation/modules/mass-adjustments/provider/provider.js#L20) -> v2/generic/all/invoiceLine | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/invoiceLine',\n  responseContainer: 'data',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "invoiceInvoiceNumber": {
                            "type": "string"
                          },
                          "label": {
                            "type": "string"
                          },
                          "validityFrom": {
                            "type": "string"
                          },
                          "validityTo": {
                            "type": "string"
                          },
                          "taxRate": {
                            "type": "number"
                          },
                          "quantity": {
                            "type": "string"
                          },
                          "amountWithoutTax": {
                            "type": "number"
                          },
                          "amountWithTax": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    amountWithoutTax = {},\n    amountWithTax = {},\n    amountTax = {},\n    taxRate = {},\n    discountAmount = {},\n    unitPrice = {},\n    accountingArticle = {},\n    ...restFilter\n  } = filter;\n  const {\n    description = ''\n  } = accountingArticle;\n  const aaDescriptionFilter = isNumber(description) ? {\n    accountingArticle: {\n      id: description\n    }\n  } : {};\n  const transformedFilter = {\n    ...restFilter,\n    ...(!isEmpty(amountWithoutTax) ? getMinMaxFromRangeNumber(amountWithoutTax, 'amountWithoutTax') : {}),\n    ...(!isEmpty(amountWithTax) ? getMinMaxFromRangeNumber(amountWithTax, 'amountWithTax') : {}),\n    ...(!isEmpty(amountTax) ? getMinMaxFromRangeNumber(amountTax, 'amountTax') : {}),\n    ...(!isEmpty(taxRate) ? getMinMaxFromRangeNumber(taxRate, 'taxRate') : {}),\n    ...(!isEmpty(discountAmount) ? getMinMaxFromRangeNumber(discountAmount, 'discountAmount') : {}),\n    ...(!isEmpty(unitPrice) ? getMinMaxFromRangeNumber(unitPrice, 'unitPrice') : {}),\n    ...(!isEmpty(aaDescriptionFilter) ? aaDescriptionFilter : {})\n  };\n  return {\n    filter: transformedFilter,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    amountWithoutTax = {},\n    amountWithTax = {},\n    amountTax = {},\n    taxRate = {},\n    discountAmount = {},\n    unitPrice = {},\n    accountingArticle = {},\n    ...restFilter\n  } = filter;\n  const {\n    description = ''\n  } = accountingArticle;\n  const aaDescriptionFilter = isNumber(description) ? {\n    accountingArticle: {\n      id: description\n    }\n  } : {};\n  const transformedFilter = {\n    ...restFilter,\n    ...(!isEmpty(amountWithoutTax) ? getMinMaxFromRangeNumber(amountWithoutTax, 'amountWithoutTax') : {}),\n    ...(!isEmpty(amountWithTax) ? getMinMaxFromRangeNumber(amountWithTax, 'amountWithTax') : {}),\n    ...(!isEmpty(amountTax) ? getMinMaxFromRangeNumber(amountTax, 'amountTax') : {}),\n    ...(!isEmpty(taxRate) ? getMinMaxFromRangeNumber(taxRate, 'taxRate') : {}),\n    ...(!isEmpty(discountAmount) ? getMinMaxFromRangeNumber(discountAmount, 'discountAmount') : {}),\n    ...(!isEmpty(unitPrice) ? getMinMaxFromRangeNumber(unitPrice, 'unitPrice') : {}),\n    ...(!isEmpty(aaDescriptionFilter) ? aaDescriptionFilter : {})\n  };\n  return {\n    filter: transformedFilter,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/invoiceLine',\n  nestedEntities\n}",
          "helperArgs: {\n  url: 'v2/generic/all/invoiceLine',\n  responseContainer: 'data',\n  nestedEntities\n}"
        ]
      }
    },
    "/manualInvoice/invoiceLine/": {
      "post": {
        "tags": [
          "B2B-customer-care/invoice-lines"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/invoice-lines/provider/provider.js#L160) -> manualInvoice/invoiceLine/ | request: helper.nestedEntities: nestedEntitiesForGetOne / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getOneV2 | helperArgs: {\n  url: 'manualInvoice/invoiceLine/',\n  responseContainer: 'data',\n  nestedEntities: nestedEntitiesForGetOne\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "invoiceInvoiceNumber": {
                          "type": "string"
                        },
                        "label": {
                          "type": "string"
                        },
                        "validityFrom": {
                          "type": "string"
                        },
                        "validityTo": {
                          "type": "string"
                        },
                        "taxRate": {
                          "type": "number"
                        },
                        "quantity": {
                          "type": "string"
                        },
                        "amountWithoutTax": {
                          "type": "number"
                        },
                        "amountWithTax": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntitiesForGetOne",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntitiesForGetOne"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getOneV2",
          "helperArgs: {\n  url: 'manualInvoice/invoiceLine/',\n  responseContainer: 'data',\n  nestedEntities: nestedEntitiesForGetOne\n}"
        ]
      }
    },
    "/v2/generic/invoiceLine/code": {
      "delete": {
        "tags": [
          "B2B-customer-care/invoice-lines"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- DELETE_CONTRACT_LINE (src/srcProject/layout/B2B-customer-care/modules/invoice-lines/provider/provider.js#L205) -> v2/generic/invoiceLine/code | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'v2/generic/invoiceLine/code',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "invoiceInvoiceNumber": {
                      "type": "string"
                    },
                    "label": {
                      "type": "string"
                    },
                    "validityFrom": {
                      "type": "string"
                    },
                    "validityTo": {
                      "type": "string"
                    },
                    "taxRate": {
                      "type": "number"
                    },
                    "quantity": {
                      "type": "string"
                    },
                    "amountWithoutTax": {
                      "type": "number"
                    },
                    "amountWithTax": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'v2/generic/invoiceLine/code',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/manualInvoice/discountedLine/refresh/{id}": {
      "put": {
        "tags": [
          "B2B-customer-care/invoice-lines"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- REFRESH_DISCOUNT_LINE (src/srcProject/layout/B2B-customer-care/modules/invoice-lines/provider/provider.js#L212) -> manualInvoice/discountedLine/refresh/:id | request: options: {\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "invoiceInvoiceNumber": {
                      "type": "string"
                    },
                    "label": {
                      "type": "string"
                    },
                    "validityFrom": {
                      "type": "string"
                    },
                    "validityTo": {
                      "type": "string"
                    },
                    "taxRate": {
                      "type": "number"
                    },
                    "quantity": {
                      "type": "string"
                    },
                    "amountWithoutTax": {
                      "type": "number"
                    },
                    "amountWithTax": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/generic/all/invoice": {
      "post": {
        "tags": [
          "B2B-customer-care/invoices",
          "B2B-customer-care/mdp-clients",
          "B2B-customer-care/related-invoices",
          "finance/invoices"
        ],
        "summary": "Used in 9 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L149) -> v2/generic/all/invoice | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    status = [],\n    invoiceTypeDescription = [],\n    paymentStatus,\n    ...restFilter\n  } = filter;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: get(validity, key)\n  };\n  const transformPaymentStatus = paymentStatus === 'PENDING' ? {\n    'inList paymentStatus': ['NONE', 'PENDING']\n  } : {\n    paymentStatus\n  };\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      ...transformPaymentStatus,\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to'),\n      ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n        'seller.code': ENGIE_MYPOWER_seller\n      } : {}),\n      ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n        'seller.code': ENGIE_EKKO_seller\n      } : {}),\n      ...(status.length === 0 ? {} : {\n        status: status\n      }),\n      ...(invoiceTypeDescription.length === 0 ? {} : {\n        invoiceTypeDescription: invoiceTypeDescription\n      })\n    },\n    ...restParams\n  };\n  return transformedFilters;\n} | helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/invoice',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L191) -> v2/generic/all/invoice | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/invoice',\n  nestedEntities\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L194) -> v2/generic/all/invoice | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/invoice',\n  nestedEntities\n}\n- GET_INVOICE_LIST (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L273) -> v2/generic/all/invoice | request: options: {\n  method: 'POST'\n} / info: keyColumn: 'code'\n- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/related-invoices/provider/provider.js#L128) -> v2/generic/all/invoice | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    status = [],\n    invoiceTypeDescription = [],\n    paymentStatus,\n    ...restFilter\n  } = filter;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: get(validity, key)\n  };\n  const transformPaymentStatus = paymentStatus === 'PENDING' ? {\n    'inList paymentStatus': ['NONE', 'PENDING']\n  } : {\n    paymentStatus\n  };\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      ...transformPaymentStatus,\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to'),\n      ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n        'seller.code': ENGIE_MYPOWER_seller\n      } : {}),\n      ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n        'seller.code': ENGIE_EKKO_seller\n      } : {}),\n      ...(status.length === 0 ? {} : {\n        status: status\n      }),\n      ...(invoiceTypeDescription.length === 0 ? {} : {\n        invoiceTypeDescription: invoiceTypeDescription\n      })\n    },\n    ...restParams\n  };\n  return transformedFilters;\n} | helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/invoice',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/related-invoices/provider/provider.js#L170) -> v2/generic/all/invoice | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/invoice',\n  nestedEntities\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/B2B-customer-care/modules/related-invoices/provider/provider.js#L173) -> v2/generic/all/invoice | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/invoice',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/finance/modules/invoices/provider/provider.js#L13) -> v2/generic/all/invoice | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    ...restFilter\n  } = filter;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: get(validity, key)\n  };\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to'),\n      ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n        'seller.code': ENGIE_MYPOWER_seller\n      } : {}),\n      ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n        'seller.code': ENGIE_EKKO_seller\n      } : {})\n    },\n    ...restParams\n  };\n  return transformedFilters;\n} | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/invoice',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/finance/modules/invoices/provider/provider.js#L39) -> v2/generic/all/invoice | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/invoice',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "invoiceNumber": {
                                "type": "string"
                              },
                              "invoiceType": {
                                "type": "object",
                                "properties": {
                                  "description": {
                                    "type": "string"
                                  }
                                }
                              },
                              "invoiceDate": {
                                "type": "string",
                                "format": "date"
                              },
                              "dueDate": {
                                "type": "string",
                                "format": "date"
                              },
                              "billingAccount": {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string"
                                  }
                                }
                              },
                              "status": {
                                "type": "object",
                                "properties": {
                                  "status": {
                                    "type": "string"
                                  }
                                }
                              },
                              "rejectReason": {
                                "type": "string"
                              },
                              "paymentStatus": {
                                "type": "string"
                              },
                              "comment": {
                                "type": "string"
                              },
                              "amountWithoutTax": {
                                "type": "number"
                              },
                              "amountWithTax": {
                                "type": "number"
                              },
                              "auditable": {
                                "type": "object",
                                "properties": {
                                  "created": {
                                    "type": "string",
                                    "format": "date"
                                  }
                                }
                              },
                              "openOrderNumber": {
                                "type": "string"
                              },
                              "pdfFilename": {
                                "type": "string"
                              },
                              "collectionPlanNumber": {
                                "type": "string"
                              },
                              "daysOverdue": {
                                "type": "number"
                              },
                              "balance": {
                                "type": "number"
                              },
                              "nextAction": {
                                "type": "string"
                              },
                              "relatedDunningCollectionPlan": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  }
                                }
                              },
                              "billingAccountCode": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "invoiceNumber": {
                              "type": "string"
                            },
                            "invoiceType": {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string"
                                }
                              }
                            },
                            "invoiceDate": {
                              "type": "string",
                              "format": "date"
                            },
                            "dueDate": {
                              "type": "string",
                              "format": "date"
                            },
                            "billingAccount": {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                }
                              }
                            },
                            "status": {
                              "type": "object",
                              "properties": {
                                "status": {
                                  "type": "string"
                                }
                              }
                            },
                            "rejectReason": {
                              "type": "string"
                            },
                            "paymentStatus": {
                              "type": "string"
                            },
                            "comment": {
                              "type": "string"
                            },
                            "amountWithoutTax": {
                              "type": "number"
                            },
                            "amountWithTax": {
                              "type": "number"
                            },
                            "auditable": {
                              "type": "object",
                              "properties": {
                                "created": {
                                  "type": "string",
                                  "format": "date"
                                }
                              }
                            },
                            "openOrderNumber": {
                              "type": "string"
                            },
                            "pdfFilename": {
                              "type": "string"
                            },
                            "collectionPlanNumber": {
                              "type": "string"
                            },
                            "daysOverdue": {
                              "type": "number"
                            },
                            "balance": {
                              "type": "number"
                            },
                            "nextAction": {
                              "type": "string"
                            },
                            "relatedDunningCollectionPlan": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                }
                              }
                            },
                            "billingAccountCode": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    status = [],\n    invoiceTypeDescription = [],\n    paymentStatus,\n    ...restFilter\n  } = filter;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: get(validity, key)\n  };\n  const transformPaymentStatus = paymentStatus === 'PENDING' ? {\n    'inList paymentStatus': ['NONE', 'PENDING']\n  } : {\n    paymentStatus\n  };\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      ...transformPaymentStatus,\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to'),\n      ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n        'seller.code': ENGIE_MYPOWER_seller\n      } : {}),\n      ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n        'seller.code': ENGIE_EKKO_seller\n      } : {}),\n      ...(status.length === 0 ? {} : {\n        status: status\n      }),\n      ...(invoiceTypeDescription.length === 0 ? {} : {\n        invoiceTypeDescription: invoiceTypeDescription\n      })\n    },\n    ...restParams\n  };\n  return transformedFilters;\n}\nhelper.nestedEntities: nestedEntities\noptions: {\n  method: 'POST'\n}\nprepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    ...restFilter\n  } = filter;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: get(validity, key)\n  };\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to'),\n      ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n        'seller.code': ENGIE_MYPOWER_seller\n      } : {}),\n      ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n        'seller.code': ENGIE_EKKO_seller\n      } : {})\n    },\n    ...restParams\n  };\n  return transformedFilters;\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    status = [],\n    invoiceTypeDescription = [],\n    paymentStatus,\n    ...restFilter\n  } = filter;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: get(validity, key)\n  };\n  const transformPaymentStatus = paymentStatus === 'PENDING' ? {\n    'inList paymentStatus': ['NONE', 'PENDING']\n  } : {\n    paymentStatus\n  };\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      ...transformPaymentStatus,\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to'),\n      ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n        'seller.code': ENGIE_MYPOWER_seller\n      } : {}),\n      ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n        'seller.code': ENGIE_EKKO_seller\n      } : {}),\n      ...(status.length === 0 ? {} : {\n        status: status\n      }),\n      ...(invoiceTypeDescription.length === 0 ? {} : {\n        invoiceTypeDescription: invoiceTypeDescription\n      })\n    },\n    ...restParams\n  };\n  return transformedFilters;\n}\nhelper.nestedEntities: nestedEntities\noptions: {\n  method: 'POST'\n}\nprepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    ...restFilter\n  } = filter;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: get(validity, key)\n  };\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to'),\n      ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n        'seller.code': ENGIE_MYPOWER_seller\n      } : {}),\n      ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n        'seller.code': ENGIE_EKKO_seller\n      } : {})\n    },\n    ...restParams\n  };\n  return transformedFilters;\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/invoice',\n  nestedEntities\n}",
          "keyColumn: 'code'"
        ]
      },
      "get": {
        "tags": [
          "B2B-customer-care/mdp-invoices",
          "B2B-customer-care/mdp-orders"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_INVOICE_LIST (src/srcProject/layout/B2B-customer-care/modules/mdp-invoices/provider/provider.js#L192) -> v2/generic/all/invoice\n- GET_INVOICE_LIST (src/srcProject/layout/B2B-customer-care/modules/mdp-orders/provider/provider.js#L192) -> v2/generic/all/invoice",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/v2/generic/invoice/": {
      "post": {
        "tags": [
          "B2B-customer-care/invoices",
          "B2B-customer-care/related-invoices"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L198) -> v2/generic/invoice/ | request: helper.nestedEntities: nestedEntitiesForGetOne | helper.genericFields: genericFieldsDetailed / response: helper.responseContainer: data / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/invoice/',\n  responseContainer: 'data',\n  nestedEntities: nestedEntitiesForGetOne,\n  genericFields: genericFieldsDetailed\n}\n- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/related-invoices/provider/provider.js#L177) -> v2/generic/invoice/ | request: helper.nestedEntities: nestedEntities | helper.genericFields: genericFieldsDetailed / response: helper.responseContainer: data / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/invoice/',\n  responseContainer: 'data',\n  nestedEntities,\n  genericFields: genericFieldsDetailed\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "invoiceNumber": {
                          "type": "string"
                        },
                        "invoiceType": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "invoiceDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "dueDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "billingAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            }
                          }
                        },
                        "rejectReason": {
                          "type": "string"
                        },
                        "paymentStatus": {
                          "type": "string"
                        },
                        "comment": {
                          "type": "string"
                        },
                        "amountWithoutTax": {
                          "type": "number"
                        },
                        "amountWithTax": {
                          "type": "number"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "openOrderNumber": {
                          "type": "string"
                        },
                        "pdfFilename": {
                          "type": "string"
                        },
                        "collectionPlanNumber": {
                          "type": "string"
                        },
                        "daysOverdue": {
                          "type": "number"
                        },
                        "balance": {
                          "type": "number"
                        },
                        "nextAction": {
                          "type": "string"
                        },
                        "relatedDunningCollectionPlan": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "billingAccountCode": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntitiesForGetOne\nhelper.genericFields: genericFieldsDetailed\nhelper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntitiesForGetOne\nhelper.genericFields: genericFieldsDetailed\nhelper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/invoice/',\n  responseContainer: 'data',\n  nestedEntities: nestedEntitiesForGetOne,\n  genericFields: genericFieldsDetailed\n}",
          "helperArgs: {\n  url: 'v2/generic/invoice/',\n  responseContainer: 'data',\n  nestedEntities,\n  genericFields: genericFieldsDetailed\n}"
        ]
      }
    },
    "/manualInvoice/create": {
      "post": {
        "tags": [
          "B2B-customer-care/invoices"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L207) -> manualInvoice/create | request: helper.method: POST / info: helper: getCreateProvider | helperArgs: {\n  //url: 'v2/billing/invoices/basicInvoices',\n  url: 'manualInvoice/create',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "invoiceNumber": {
                      "type": "string"
                    },
                    "invoiceType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "invoiceDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "dueDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "billingAccount": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string"
                        }
                      }
                    },
                    "rejectReason": {
                      "type": "string"
                    },
                    "paymentStatus": {
                      "type": "string"
                    },
                    "comment": {
                      "type": "string"
                    },
                    "amountWithoutTax": {
                      "type": "number"
                    },
                    "amountWithTax": {
                      "type": "number"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "openOrderNumber": {
                      "type": "string"
                    },
                    "pdfFilename": {
                      "type": "string"
                    },
                    "collectionPlanNumber": {
                      "type": "string"
                    },
                    "daysOverdue": {
                      "type": "number"
                    },
                    "balance": {
                      "type": "number"
                    },
                    "nextAction": {
                      "type": "string"
                    },
                    "relatedDunningCollectionPlan": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "billingAccountCode": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  //url: 'v2/billing/invoices/basicInvoices',\n  url: 'manualInvoice/create',\n  method: 'POST'\n}"
        ]
      }
    },
    "/v2/billing/invoices/{id}": {
      "put": {
        "tags": [
          "B2B-customer-care/invoices",
          "B2B-customer-care/related-invoices"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L215) -> v2/billing/invoices/:id | request: helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  url: 'v2/billing/invoices/:id',\n  method: 'PUT'\n}\n- UPDATE_INVOICE (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L221) -> v2/billing/invoices/:id | request: helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  url: 'v2/billing/invoices/:id',\n  method: 'PUT'\n}\n- UPDATE (src/srcProject/layout/B2B-customer-care/modules/related-invoices/provider/provider.js#L193) -> v2/billing/invoices/:id | request: helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  url: 'v2/billing/invoices/:id',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "invoiceNumber": {
                      "type": "string"
                    },
                    "invoiceType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "invoiceDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "dueDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "billingAccount": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string"
                        }
                      }
                    },
                    "rejectReason": {
                      "type": "string"
                    },
                    "paymentStatus": {
                      "type": "string"
                    },
                    "comment": {
                      "type": "string"
                    },
                    "amountWithoutTax": {
                      "type": "number"
                    },
                    "amountWithTax": {
                      "type": "number"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "openOrderNumber": {
                      "type": "string"
                    },
                    "pdfFilename": {
                      "type": "string"
                    },
                    "collectionPlanNumber": {
                      "type": "string"
                    },
                    "daysOverdue": {
                      "type": "number"
                    },
                    "balance": {
                      "type": "number"
                    },
                    "nextAction": {
                      "type": "string"
                    },
                    "relatedDunningCollectionPlan": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "billingAccountCode": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'v2/billing/invoices/:id',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/v2/generic/invoice/{id}": {
      "put": {
        "tags": [
          "B2B-customer-care/invoices"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE_INVOICE_GENERIC (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L227) -> v2/generic/invoice/:id | request: options: {\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "invoiceNumber": {
                      "type": "string"
                    },
                    "invoiceType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "invoiceDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "dueDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "billingAccount": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string"
                        }
                      }
                    },
                    "rejectReason": {
                      "type": "string"
                    },
                    "paymentStatus": {
                      "type": "string"
                    },
                    "comment": {
                      "type": "string"
                    },
                    "amountWithoutTax": {
                      "type": "number"
                    },
                    "amountWithTax": {
                      "type": "number"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "openOrderNumber": {
                      "type": "string"
                    },
                    "pdfFilename": {
                      "type": "string"
                    },
                    "collectionPlanNumber": {
                      "type": "string"
                    },
                    "daysOverdue": {
                      "type": "number"
                    },
                    "balance": {
                      "type": "number"
                    },
                    "nextAction": {
                      "type": "string"
                    },
                    "relatedDunningCollectionPlan": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "billingAccountCode": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/generic/BillingAccount/{id}": {
      "put": {
        "tags": [
          "B2B-customer-care/invoices"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE_BILLING_ACCOUNT (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L233) -> v2/generic/BillingAccount/:id | request: options: {\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "invoiceNumber": {
                      "type": "string"
                    },
                    "invoiceType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "invoiceDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "dueDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "billingAccount": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string"
                        }
                      }
                    },
                    "rejectReason": {
                      "type": "string"
                    },
                    "paymentStatus": {
                      "type": "string"
                    },
                    "comment": {
                      "type": "string"
                    },
                    "amountWithoutTax": {
                      "type": "number"
                    },
                    "amountWithTax": {
                      "type": "number"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "openOrderNumber": {
                      "type": "string"
                    },
                    "pdfFilename": {
                      "type": "string"
                    },
                    "collectionPlanNumber": {
                      "type": "string"
                    },
                    "daysOverdue": {
                      "type": "number"
                    },
                    "balance": {
                      "type": "number"
                    },
                    "nextAction": {
                      "type": "string"
                    },
                    "relatedDunningCollectionPlan": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "billingAccountCode": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        }
      }
    },
    "/api/rest/catalog/invoice/": {
      "delete": {
        "tags": [
          "B2B-customer-care/invoices",
          "B2B-customer-care/related-invoices",
          "operation/cdr"
        ],
        "summary": "Used in 5 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L247) -> /api/rest/catalog/invoice/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: '/api/rest/catalog/invoice/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L254) -> /api/rest/catalog/invoice/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: '/api/rest/catalog/invoice/',\n  method: 'DELETE'\n}\n- DELETE (src/srcProject/layout/B2B-customer-care/modules/related-invoices/provider/provider.js#L200) -> /api/rest/catalog/invoice/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: '/api/rest/catalog/invoice/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/related-invoices/provider/provider.js#L207) -> /api/rest/catalog/invoice/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: '/api/rest/catalog/invoice/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/operation/modules/cdr/provider/provider.js#L320) -> /api/rest/catalog/invoice/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: '/api/rest/catalog/invoice/',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "invoiceNumber": {
                          "type": "string"
                        },
                        "invoiceType": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "invoiceDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "dueDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "billingAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            }
                          }
                        },
                        "rejectReason": {
                          "type": "string"
                        },
                        "paymentStatus": {
                          "type": "string"
                        },
                        "comment": {
                          "type": "string"
                        },
                        "amountWithoutTax": {
                          "type": "number"
                        },
                        "amountWithTax": {
                          "type": "number"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "openOrderNumber": {
                          "type": "string"
                        },
                        "pdfFilename": {
                          "type": "string"
                        },
                        "collectionPlanNumber": {
                          "type": "string"
                        },
                        "daysOverdue": {
                          "type": "number"
                        },
                        "balance": {
                          "type": "number"
                        },
                        "nextAction": {
                          "type": "string"
                        },
                        "relatedDunningCollectionPlan": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "billingAccountCode": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "eventDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "quantity": {
                          "type": "string"
                        },
                        "accessCode": {
                          "type": "string"
                        },
                        "parameter1": {
                          "type": "string"
                        },
                        "parameter2": {
                          "type": "string"
                        },
                        "parameter3": {
                          "type": "string"
                        },
                        "parameter4": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "motif": {
                          "type": "string"
                        },
                        "searchBar": {
                          "type": "string"
                        },
                        "items": {
                          "type": "string"
                        },
                        "parameter": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        },
                        "parameter5": {
                          "type": "string"
                        },
                        "parameter6": {
                          "type": "string"
                        },
                        "parameter7": {
                          "type": "string"
                        },
                        "parameter8": {
                          "type": "string"
                        },
                        "parameter9": {
                          "type": "string"
                        },
                        "dateParam1": {
                          "type": "string",
                          "format": "date"
                        },
                        "dateParam2": {
                          "type": "string",
                          "format": "date"
                        },
                        "dateParam3": {
                          "type": "string",
                          "format": "date"
                        },
                        "dateParam4": {
                          "type": "string",
                          "format": "date"
                        },
                        "dateParam5": {
                          "type": "string",
                          "format": "date"
                        },
                        "decimalParam1": {
                          "type": "string"
                        },
                        "decimalParam2": {
                          "type": "string"
                        },
                        "decimalParam3": {
                          "type": "string"
                        },
                        "decimalParam4": {
                          "type": "string"
                        },
                        "decimalParam5": {
                          "type": "string"
                        },
                        "extraParam": {
                          "type": "string"
                        },
                        "rejectReason": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: '/api/rest/catalog/invoice/',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/catalog/invoice/{invoiceCode}/update/status": {
      "get": {
        "tags": [
          "B2B-customer-care/invoices",
          "B2B-customer-care/related-invoices",
          "operation/cdr"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- UPDATE_STATUS (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L261) -> catalog/invoice/:invoiceCode/update/status\n- UPDATE_STATUS (src/srcProject/layout/B2B-customer-care/modules/related-invoices/provider/provider.js#L214) -> catalog/invoice/:invoiceCode/update/status\n- UPDATE_STATUS (src/srcProject/layout/operation/modules/cdr/provider/provider.js#L327) -> catalog/invoice/:invoiceCode/update/status",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "invoiceNumber": {
                          "type": "string"
                        },
                        "invoiceType": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "invoiceDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "dueDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "billingAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            }
                          }
                        },
                        "rejectReason": {
                          "type": "string"
                        },
                        "paymentStatus": {
                          "type": "string"
                        },
                        "comment": {
                          "type": "string"
                        },
                        "amountWithoutTax": {
                          "type": "number"
                        },
                        "amountWithTax": {
                          "type": "number"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "openOrderNumber": {
                          "type": "string"
                        },
                        "pdfFilename": {
                          "type": "string"
                        },
                        "collectionPlanNumber": {
                          "type": "string"
                        },
                        "daysOverdue": {
                          "type": "number"
                        },
                        "balance": {
                          "type": "number"
                        },
                        "nextAction": {
                          "type": "string"
                        },
                        "relatedDunningCollectionPlan": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "billingAccountCode": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "eventDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "quantity": {
                          "type": "string"
                        },
                        "accessCode": {
                          "type": "string"
                        },
                        "parameter1": {
                          "type": "string"
                        },
                        "parameter2": {
                          "type": "string"
                        },
                        "parameter3": {
                          "type": "string"
                        },
                        "parameter4": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "motif": {
                          "type": "string"
                        },
                        "searchBar": {
                          "type": "string"
                        },
                        "items": {
                          "type": "string"
                        },
                        "parameter": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        },
                        "parameter5": {
                          "type": "string"
                        },
                        "parameter6": {
                          "type": "string"
                        },
                        "parameter7": {
                          "type": "string"
                        },
                        "parameter8": {
                          "type": "string"
                        },
                        "parameter9": {
                          "type": "string"
                        },
                        "dateParam1": {
                          "type": "string",
                          "format": "date"
                        },
                        "dateParam2": {
                          "type": "string",
                          "format": "date"
                        },
                        "dateParam3": {
                          "type": "string",
                          "format": "date"
                        },
                        "dateParam4": {
                          "type": "string",
                          "format": "date"
                        },
                        "dateParam5": {
                          "type": "string",
                          "format": "date"
                        },
                        "decimalParam1": {
                          "type": "string"
                        },
                        "decimalParam2": {
                          "type": "string"
                        },
                        "decimalParam3": {
                          "type": "string"
                        },
                        "decimalParam4": {
                          "type": "string"
                        },
                        "decimalParam5": {
                          "type": "string"
                        },
                        "extraParam": {
                          "type": "string"
                        },
                        "rejectReason": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v2/billing/invoices/{id}/duplication": {
      "get": {
        "tags": [
          "B2B-customer-care/invoices",
          "B2B-customer-care/related-invoices",
          "operation/cdr"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- DUPLICATE (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L265) -> v2/billing/invoices/:id/duplication | info: keyColumn: 'id'\n- DUPLICATE (src/srcProject/layout/B2B-customer-care/modules/related-invoices/provider/provider.js#L218) -> v2/billing/invoices/:id/duplication | info: keyColumn: 'id'\n- DUPLICATE (src/srcProject/layout/operation/modules/cdr/provider/provider.js#L331) -> v2/billing/invoices/:id/duplication | info: keyColumn: 'id'",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "invoiceNumber": {
                          "type": "string"
                        },
                        "invoiceType": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "invoiceDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "dueDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "billingAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            }
                          }
                        },
                        "rejectReason": {
                          "type": "string"
                        },
                        "paymentStatus": {
                          "type": "string"
                        },
                        "comment": {
                          "type": "string"
                        },
                        "amountWithoutTax": {
                          "type": "number"
                        },
                        "amountWithTax": {
                          "type": "number"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "openOrderNumber": {
                          "type": "string"
                        },
                        "pdfFilename": {
                          "type": "string"
                        },
                        "collectionPlanNumber": {
                          "type": "string"
                        },
                        "daysOverdue": {
                          "type": "number"
                        },
                        "balance": {
                          "type": "number"
                        },
                        "nextAction": {
                          "type": "string"
                        },
                        "relatedDunningCollectionPlan": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "billingAccountCode": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "eventDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "quantity": {
                          "type": "string"
                        },
                        "accessCode": {
                          "type": "string"
                        },
                        "parameter1": {
                          "type": "string"
                        },
                        "parameter2": {
                          "type": "string"
                        },
                        "parameter3": {
                          "type": "string"
                        },
                        "parameter4": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "motif": {
                          "type": "string"
                        },
                        "searchBar": {
                          "type": "string"
                        },
                        "items": {
                          "type": "string"
                        },
                        "parameter": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        },
                        "parameter5": {
                          "type": "string"
                        },
                        "parameter6": {
                          "type": "string"
                        },
                        "parameter7": {
                          "type": "string"
                        },
                        "parameter8": {
                          "type": "string"
                        },
                        "parameter9": {
                          "type": "string"
                        },
                        "dateParam1": {
                          "type": "string",
                          "format": "date"
                        },
                        "dateParam2": {
                          "type": "string",
                          "format": "date"
                        },
                        "dateParam3": {
                          "type": "string",
                          "format": "date"
                        },
                        "dateParam4": {
                          "type": "string",
                          "format": "date"
                        },
                        "dateParam5": {
                          "type": "string",
                          "format": "date"
                        },
                        "decimalParam1": {
                          "type": "string"
                        },
                        "decimalParam2": {
                          "type": "string"
                        },
                        "decimalParam3": {
                          "type": "string"
                        },
                        "decimalParam4": {
                          "type": "string"
                        },
                        "decimalParam5": {
                          "type": "string"
                        },
                        "extraParam": {
                          "type": "string"
                        },
                        "rejectReason": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: 'id'"
        ]
      }
    },
    "/v2/billing/invoices/{id}/rejection": {
      "put": {
        "tags": [
          "B2B-customer-care/invoices",
          "B2B-customer-care/related-invoices",
          "operation/cdr"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- REJECT (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L270) -> v2/billing/invoices/:id/rejection | request: options: {\n  method: 'PUT'\n} / info: excludeProperties: ['id']\n- REJECT (src/srcProject/layout/B2B-customer-care/modules/related-invoices/provider/provider.js#L223) -> v2/billing/invoices/:id/rejection | request: options: {\n  method: 'PUT'\n}\n- REJECT (src/srcProject/layout/operation/modules/cdr/provider/provider.js#L336) -> v2/billing/invoices/:id/rejection | request: options: {\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "invoiceNumber": {
                          "type": "string"
                        },
                        "invoiceType": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "invoiceDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "dueDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "billingAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            }
                          }
                        },
                        "rejectReason": {
                          "type": "string"
                        },
                        "paymentStatus": {
                          "type": "string"
                        },
                        "comment": {
                          "type": "string"
                        },
                        "amountWithoutTax": {
                          "type": "number"
                        },
                        "amountWithTax": {
                          "type": "number"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "openOrderNumber": {
                          "type": "string"
                        },
                        "pdfFilename": {
                          "type": "string"
                        },
                        "collectionPlanNumber": {
                          "type": "string"
                        },
                        "daysOverdue": {
                          "type": "number"
                        },
                        "balance": {
                          "type": "number"
                        },
                        "nextAction": {
                          "type": "string"
                        },
                        "relatedDunningCollectionPlan": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "billingAccountCode": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "eventDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "quantity": {
                          "type": "string"
                        },
                        "accessCode": {
                          "type": "string"
                        },
                        "parameter1": {
                          "type": "string"
                        },
                        "parameter2": {
                          "type": "string"
                        },
                        "parameter3": {
                          "type": "string"
                        },
                        "parameter4": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "motif": {
                          "type": "string"
                        },
                        "searchBar": {
                          "type": "string"
                        },
                        "items": {
                          "type": "string"
                        },
                        "parameter": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        },
                        "parameter5": {
                          "type": "string"
                        },
                        "parameter6": {
                          "type": "string"
                        },
                        "parameter7": {
                          "type": "string"
                        },
                        "parameter8": {
                          "type": "string"
                        },
                        "parameter9": {
                          "type": "string"
                        },
                        "dateParam1": {
                          "type": "string",
                          "format": "date"
                        },
                        "dateParam2": {
                          "type": "string",
                          "format": "date"
                        },
                        "dateParam3": {
                          "type": "string",
                          "format": "date"
                        },
                        "dateParam4": {
                          "type": "string",
                          "format": "date"
                        },
                        "dateParam5": {
                          "type": "string",
                          "format": "date"
                        },
                        "decimalParam1": {
                          "type": "string"
                        },
                        "decimalParam2": {
                          "type": "string"
                        },
                        "decimalParam3": {
                          "type": "string"
                        },
                        "decimalParam4": {
                          "type": "string"
                        },
                        "decimalParam5": {
                          "type": "string"
                        },
                        "extraParam": {
                          "type": "string"
                        },
                        "rejectReason": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "excludeProperties: ['id']"
        ]
      }
    },
    "/invoice/validate": {
      "put": {
        "tags": [
          "B2B-customer-care/invoices",
          "B2B-customer-care/related-invoices",
          "operation/cdr"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- VALIDATE (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L278) -> invoice/validate | request: options: {\n  method: 'PUT'\n}\n- VALIDATE (src/srcProject/layout/B2B-customer-care/modules/related-invoices/provider/provider.js#L230) -> invoice/validate | request: options: {\n  method: 'PUT'\n}\n- VALIDATE (src/srcProject/layout/operation/modules/cdr/provider/provider.js#L343) -> invoice/validate | request: options: {\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "invoiceNumber": {
                          "type": "string"
                        },
                        "invoiceType": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "invoiceDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "dueDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "billingAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            }
                          }
                        },
                        "rejectReason": {
                          "type": "string"
                        },
                        "paymentStatus": {
                          "type": "string"
                        },
                        "comment": {
                          "type": "string"
                        },
                        "amountWithoutTax": {
                          "type": "number"
                        },
                        "amountWithTax": {
                          "type": "number"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "openOrderNumber": {
                          "type": "string"
                        },
                        "pdfFilename": {
                          "type": "string"
                        },
                        "collectionPlanNumber": {
                          "type": "string"
                        },
                        "daysOverdue": {
                          "type": "number"
                        },
                        "balance": {
                          "type": "number"
                        },
                        "nextAction": {
                          "type": "string"
                        },
                        "relatedDunningCollectionPlan": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "billingAccountCode": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "eventDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "quantity": {
                          "type": "string"
                        },
                        "accessCode": {
                          "type": "string"
                        },
                        "parameter1": {
                          "type": "string"
                        },
                        "parameter2": {
                          "type": "string"
                        },
                        "parameter3": {
                          "type": "string"
                        },
                        "parameter4": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "motif": {
                          "type": "string"
                        },
                        "searchBar": {
                          "type": "string"
                        },
                        "items": {
                          "type": "string"
                        },
                        "parameter": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        },
                        "parameter5": {
                          "type": "string"
                        },
                        "parameter6": {
                          "type": "string"
                        },
                        "parameter7": {
                          "type": "string"
                        },
                        "parameter8": {
                          "type": "string"
                        },
                        "parameter9": {
                          "type": "string"
                        },
                        "dateParam1": {
                          "type": "string",
                          "format": "date"
                        },
                        "dateParam2": {
                          "type": "string",
                          "format": "date"
                        },
                        "dateParam3": {
                          "type": "string",
                          "format": "date"
                        },
                        "dateParam4": {
                          "type": "string",
                          "format": "date"
                        },
                        "dateParam5": {
                          "type": "string",
                          "format": "date"
                        },
                        "decimalParam1": {
                          "type": "string"
                        },
                        "decimalParam2": {
                          "type": "string"
                        },
                        "decimalParam3": {
                          "type": "string"
                        },
                        "decimalParam4": {
                          "type": "string"
                        },
                        "decimalParam5": {
                          "type": "string"
                        },
                        "extraParam": {
                          "type": "string"
                        },
                        "rejectReason": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/billing/invoices/{invoiceId}/pdf": {
      "get": {
        "tags": [
          "B2B-customer-care/invoices",
          "B2B-customer-care/related-invoices"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GENERATE_PDF (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L298) -> v2/billing/invoices/:invoiceId/pdf?generateIfMissing=true | request: options: {\n  method: 'GET'\n} / response: responseContainer: 'fileContent' / info: isFile: true\n- GENERATE_PDF (src/srcProject/layout/B2B-customer-care/modules/related-invoices/provider/provider.js#L244) -> v2/billing/invoices/:invoiceId/pdf?generateIfMissing=true | request: options: {\n  method: 'GET'\n} / response: responseContainer: 'fileContent' / info: isFile: true",
        "responses": {
          "200": {
            "description": "Successful response. responseContainer: 'fileContent'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "fileContent": {
                      "type": "object",
                      "properties": {
                        "invoiceNumber": {
                          "type": "string"
                        },
                        "invoiceType": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "invoiceDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "dueDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "billingAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            }
                          }
                        },
                        "rejectReason": {
                          "type": "string"
                        },
                        "paymentStatus": {
                          "type": "string"
                        },
                        "comment": {
                          "type": "string"
                        },
                        "amountWithoutTax": {
                          "type": "number"
                        },
                        "amountWithTax": {
                          "type": "number"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "openOrderNumber": {
                          "type": "string"
                        },
                        "pdfFilename": {
                          "type": "string"
                        },
                        "collectionPlanNumber": {
                          "type": "string"
                        },
                        "daysOverdue": {
                          "type": "number"
                        },
                        "balance": {
                          "type": "number"
                        },
                        "nextAction": {
                          "type": "string"
                        },
                        "relatedDunningCollectionPlan": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "billingAccountCode": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "generateIfMissing",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ],
        "x-dev-notes": [
          "isFile: true"
        ]
      }
    },
    "/v2/billing/invoices/{invoiceId}/deletePdfFile": {
      "post": {
        "tags": [
          "B2B-customer-care/invoices",
          "B2B-customer-care/related-invoices"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DELETE_PDF (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L307) -> v2/billing/invoices/:invoiceId/deletePdfFile | request: options: {\n  method: 'POST'\n}\n- DELETE_PDF (src/srcProject/layout/B2B-customer-care/modules/related-invoices/provider/provider.js#L253) -> v2/billing/invoices/:invoiceId/deletePdfFile | request: options: {\n  method: 'POST'\n} / info: excludeProperties: ['invoiceId']",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "invoiceNumber": {
                      "type": "string"
                    },
                    "invoiceType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "invoiceDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "dueDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "billingAccount": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string"
                        }
                      }
                    },
                    "rejectReason": {
                      "type": "string"
                    },
                    "paymentStatus": {
                      "type": "string"
                    },
                    "comment": {
                      "type": "string"
                    },
                    "amountWithoutTax": {
                      "type": "number"
                    },
                    "amountWithTax": {
                      "type": "number"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "openOrderNumber": {
                      "type": "string"
                    },
                    "pdfFilename": {
                      "type": "string"
                    },
                    "collectionPlanNumber": {
                      "type": "string"
                    },
                    "daysOverdue": {
                      "type": "number"
                    },
                    "balance": {
                      "type": "number"
                    },
                    "nextAction": {
                      "type": "string"
                    },
                    "relatedDunningCollectionPlan": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "billingAccountCode": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "excludeProperties: ['invoiceId']"
        ]
      }
    },
    "/invoice/getXMLInvoice": {
      "get": {
        "tags": [
          "B2B-customer-care/invoices",
          "B2B-customer-care/related-invoices"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GENERATE_XML (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L314) -> invoice/getXMLInvoice? | request: options: {\n  method: 'GET'\n}\n- GENERATE_XML (src/srcProject/layout/B2B-customer-care/modules/related-invoices/provider/provider.js#L261) -> invoice/getXMLInvoice? | request: options: {\n  method: 'GET'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "invoiceNumber": {
                      "type": "string"
                    },
                    "invoiceType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "invoiceDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "dueDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "billingAccount": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string"
                        }
                      }
                    },
                    "rejectReason": {
                      "type": "string"
                    },
                    "paymentStatus": {
                      "type": "string"
                    },
                    "comment": {
                      "type": "string"
                    },
                    "amountWithoutTax": {
                      "type": "number"
                    },
                    "amountWithTax": {
                      "type": "number"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "openOrderNumber": {
                      "type": "string"
                    },
                    "pdfFilename": {
                      "type": "string"
                    },
                    "collectionPlanNumber": {
                      "type": "string"
                    },
                    "daysOverdue": {
                      "type": "number"
                    },
                    "balance": {
                      "type": "number"
                    },
                    "nextAction": {
                      "type": "string"
                    },
                    "relatedDunningCollectionPlan": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "billingAccountCode": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ]
      }
    },
    "/v2/billing/invoices/{invoiceId}/deleteXmlFile": {
      "post": {
        "tags": [
          "B2B-customer-care/invoices",
          "B2B-customer-care/related-invoices"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DELETE_XML (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L321) -> v2/billing/invoices/:invoiceId/deleteXmlFile | request: options: {\n  method: 'POST'\n}\n- DELETE_XML (src/srcProject/layout/B2B-customer-care/modules/related-invoices/provider/provider.js#L268) -> v2/billing/invoices/:invoiceId/deleteXmlFile | request: options: {\n  method: 'POST'\n} / info: excludeProperties: ['invoiceId']",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "invoiceNumber": {
                      "type": "string"
                    },
                    "invoiceType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "invoiceDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "dueDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "billingAccount": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string"
                        }
                      }
                    },
                    "rejectReason": {
                      "type": "string"
                    },
                    "paymentStatus": {
                      "type": "string"
                    },
                    "comment": {
                      "type": "string"
                    },
                    "amountWithoutTax": {
                      "type": "number"
                    },
                    "amountWithTax": {
                      "type": "number"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "openOrderNumber": {
                      "type": "string"
                    },
                    "pdfFilename": {
                      "type": "string"
                    },
                    "collectionPlanNumber": {
                      "type": "string"
                    },
                    "daysOverdue": {
                      "type": "number"
                    },
                    "balance": {
                      "type": "number"
                    },
                    "nextAction": {
                      "type": "string"
                    },
                    "relatedDunningCollectionPlan": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "billingAccountCode": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "excludeProperties: ['invoiceId']"
        ]
      }
    },
    "/v2/generic/all/taxInvoiceAgregate": {
      "post": {
        "tags": [
          "B2B-customer-care/invoices",
          "B2B-customer-care/related-invoices"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_TAX_DETAILS (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L328) -> v2/generic/all/taxInvoiceAgregate | request: options: {\n  method: 'POST'\n} | bodyParams: {\n  filters: {\n    'invoice.id': '@record.id'\n  },\n  nestedEntities: ['tax.subTaxes']\n} / response: responseContainer: 'data'\n- GET_TAX_DETAILS (src/srcProject/layout/B2B-customer-care/modules/related-invoices/provider/provider.js#L276) -> v2/generic/all/taxInvoiceAgregate | request: options: {\n  method: 'POST'\n} | bodyParams: {\n  filters: {\n    'invoice.id': '@record.id'\n  },\n  nestedEntities: ['tax.subTaxes']\n} / response: responseContainer: 'data'",
        "responses": {
          "200": {
            "description": "Successful response. responseContainer: 'data'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "invoiceNumber": {
                          "type": "string"
                        },
                        "invoiceType": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "invoiceDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "dueDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "billingAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            }
                          }
                        },
                        "rejectReason": {
                          "type": "string"
                        },
                        "paymentStatus": {
                          "type": "string"
                        },
                        "comment": {
                          "type": "string"
                        },
                        "amountWithoutTax": {
                          "type": "number"
                        },
                        "amountWithTax": {
                          "type": "number"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "openOrderNumber": {
                          "type": "string"
                        },
                        "pdfFilename": {
                          "type": "string"
                        },
                        "collectionPlanNumber": {
                          "type": "string"
                        },
                        "daysOverdue": {
                          "type": "number"
                        },
                        "balance": {
                          "type": "number"
                        },
                        "nextAction": {
                          "type": "string"
                        },
                        "relatedDunningCollectionPlan": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "billingAccountCode": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}\nbodyParams: {\n  filters: {\n    'invoice.id': '@record.id'\n  },\n  nestedEntities: ['tax.subTaxes']\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filters": {
                    "type": "object",
                    "properties": {
                      "invoice.id": {
                        "type": "string",
                        "example": "@record.id"
                      }
                    }
                  },
                  "nestedEntities": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "tax.subTaxes"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/billing/invoices/{invoiceId}/calculation": {
      "put": {
        "tags": [
          "B2B-customer-care/invoices",
          "B2B-customer-care/related-invoices"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- INVOICE_LINE_CALCULATION (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L340) -> v2/billing/invoices/:invoiceId/calculation | request: options: {\n  method: 'PUT'\n}\n- INVOICE_LINE_CALCULATION (src/srcProject/layout/B2B-customer-care/modules/related-invoices/provider/provider.js#L288) -> v2/billing/invoices/:invoiceId/calculation | request: options: {\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "invoiceNumber": {
                      "type": "string"
                    },
                    "invoiceType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "invoiceDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "dueDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "billingAccount": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string"
                        }
                      }
                    },
                    "rejectReason": {
                      "type": "string"
                    },
                    "paymentStatus": {
                      "type": "string"
                    },
                    "comment": {
                      "type": "string"
                    },
                    "amountWithoutTax": {
                      "type": "number"
                    },
                    "amountWithTax": {
                      "type": "number"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "openOrderNumber": {
                      "type": "string"
                    },
                    "pdfFilename": {
                      "type": "string"
                    },
                    "collectionPlanNumber": {
                      "type": "string"
                    },
                    "daysOverdue": {
                      "type": "number"
                    },
                    "balance": {
                      "type": "number"
                    },
                    "nextAction": {
                      "type": "string"
                    },
                    "relatedDunningCollectionPlan": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "billingAccountCode": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/billing/invoices/generate": {
      "post": {
        "tags": [
          "B2B-customer-care/invoices",
          "B2B-customer-care/related-invoices",
          "finance/open-orders"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GENERATE_INVOICE (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L360) -> v2/billing/invoices/generate | request: options: {\n  method: 'POST'\n} | prepareParams: params => {\n  const {\n    data = {}\n  } = params;\n  const {\n    billingAccount = {},\n    ...restParams\n  } = data;\n  const billingAccountCode = get(billingAccount, 'code');\n  return {\n    data: {\n      billingAccountCode,\n      ...restParams\n    }\n  };\n} / info: keyColumn: 'id' | excludeProperties: ['billingAccount']\n- GENERATE_INVOICE (src/srcProject/layout/B2B-customer-care/modules/related-invoices/provider/provider.js#L308) -> v2/billing/invoices/generate | request: options: {\n  method: 'POST'\n} | prepareParams: params => {\n  const {\n    data = {}\n  } = params;\n  const {\n    billingAccount = {},\n    ...restParams\n  } = data;\n  const billingAccountCode = get(billingAccount, 'code');\n  return {\n    data: {\n      billingAccountCode,\n      ...restParams\n    }\n  };\n} / info: keyColumn: 'id' | excludeProperties: ['billingAccount']\n- GENERATE_INVOICE (src/srcProject/layout/finance/modules/open-orders/provider/provider.js#L146) -> v2/billing/invoices/generate | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "invoiceNumber": {
                          "type": "string"
                        },
                        "invoiceType": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "invoiceDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "dueDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "billingAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            }
                          }
                        },
                        "rejectReason": {
                          "type": "string"
                        },
                        "paymentStatus": {
                          "type": "string"
                        },
                        "comment": {
                          "type": "string"
                        },
                        "amountWithoutTax": {
                          "type": "number"
                        },
                        "amountWithTax": {
                          "type": "number"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "openOrderNumber": {
                          "type": "string"
                        },
                        "pdfFilename": {
                          "type": "string"
                        },
                        "collectionPlanNumber": {
                          "type": "string"
                        },
                        "daysOverdue": {
                          "type": "number"
                        },
                        "balance": {
                          "type": "number"
                        },
                        "nextAction": {
                          "type": "string"
                        },
                        "relatedDunningCollectionPlan": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "billingAccountCode": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "openOrderNumber": {
                          "type": "string"
                        },
                        "billingAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "customerAccount": {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "activationDate": {
                          "type": "string"
                        },
                        "currency": {
                          "type": "object",
                          "properties": {
                            "currencyCode": {
                              "type": "string"
                            }
                          }
                        },
                        "initialAmount": {
                          "type": "number"
                        },
                        "balance": {
                          "type": "number"
                        },
                        "invoiced": {
                          "anyOf": [
                            {
                              "type": "number"
                            },
                            {
                              "type": "string"
                            }
                          ]
                        },
                        "status": {
                          "type": "string"
                        },
                        "invoicedBet": {
                          "type": "string"
                        },
                        "tags": {
                          "type": "string"
                        },
                        "containsTags": {
                          "type": "string"
                        },
                        "doesNotContainsTags": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}\nprepareParams: params => {\n  const {\n    data = {}\n  } = params;\n  const {\n    billingAccount = {},\n    ...restParams\n  } = data;\n  const billingAccountCode = get(billingAccount, 'code');\n  return {\n    data: {\n      billingAccountCode,\n      ...restParams\n    }\n  };\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}\nprepareParams: params => {\n  const {\n    data = {}\n  } = params;\n  const {\n    billingAccount = {},\n    ...restParams\n  } = data;\n  const billingAccountCode = get(billingAccount, 'code');\n  return {\n    data: {\n      billingAccountCode,\n      ...restParams\n    }\n  };\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: 'id'",
          "excludeProperties: ['billingAccount']"
        ]
      }
    },
    "/v2/accountReceivable/accountOperation/unMatchOperations": {
      "post": {
        "tags": [
          "B2B-customer-care/invoices",
          "B2B-customer-care/related-invoices"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- UNMATCH_ACCOUNT_OPERATIONS (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L447) -> v2/accountReceivable/accountOperation/unMatchOperations | request: options: {\n  method: 'POST'\n}\n- UNMATCH_ACCOUNT_OPERATIONS (src/srcProject/layout/B2B-customer-care/modules/related-invoices/provider/provider.js#L370) -> v2/accountReceivable/accountOperation/unMatchOperations | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "invoiceNumber": {
                      "type": "string"
                    },
                    "invoiceType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "invoiceDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "dueDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "billingAccount": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string"
                        }
                      }
                    },
                    "rejectReason": {
                      "type": "string"
                    },
                    "paymentStatus": {
                      "type": "string"
                    },
                    "comment": {
                      "type": "string"
                    },
                    "amountWithoutTax": {
                      "type": "number"
                    },
                    "amountWithTax": {
                      "type": "number"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "openOrderNumber": {
                      "type": "string"
                    },
                    "pdfFilename": {
                      "type": "string"
                    },
                    "collectionPlanNumber": {
                      "type": "string"
                    },
                    "daysOverdue": {
                      "type": "number"
                    },
                    "balance": {
                      "type": "number"
                    },
                    "nextAction": {
                      "type": "string"
                    },
                    "relatedDunningCollectionPlan": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "billingAccountCode": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/billing/invoicing/createBillingRun": {
      "post": {
        "tags": [
          "B2B-customer-care/invoices",
          "B2B-customer-care/related-invoices",
          "operation/cycle-run"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- CREATE_BILLING_RUN (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L454) -> billing/invoicing/createBillingRun | request: options: {\n  method: 'POST'\n}\n- CREATE_BILLING_RUN (src/srcProject/layout/B2B-customer-care/modules/related-invoices/provider/provider.js#L377) -> billing/invoicing/createBillingRun | request: options: {\n  method: 'POST'\n}\n- CREATE (src/srcProject/layout/operation/modules/cycle-run/provider/provider.js#L18) -> billing/invoicing/createBillingRun | request: helper.nestedEntities: nestedEntities / info: helper: getCreateProvider | helperArgs: {\n  url: 'billing/invoicing/createBillingRun',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "invoiceNumber": {
                          "type": "string"
                        },
                        "invoiceType": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "invoiceDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "dueDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "billingAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            }
                          }
                        },
                        "rejectReason": {
                          "type": "string"
                        },
                        "paymentStatus": {
                          "type": "string"
                        },
                        "comment": {
                          "type": "string"
                        },
                        "amountWithoutTax": {
                          "type": "number"
                        },
                        "amountWithTax": {
                          "type": "number"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "openOrderNumber": {
                          "type": "string"
                        },
                        "pdfFilename": {
                          "type": "string"
                        },
                        "collectionPlanNumber": {
                          "type": "string"
                        },
                        "daysOverdue": {
                          "type": "number"
                        },
                        "balance": {
                          "type": "number"
                        },
                        "nextAction": {
                          "type": "string"
                        },
                        "relatedDunningCollectionPlan": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "billingAccountCode": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number"
                        },
                        "billingCycle": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "string"
                            }
                          ]
                        },
                        "processDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "processType": {
                          "type": "string"
                        },
                        "runType": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "invoiceDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "lastTransactionDate": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}\nhelper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}\nhelper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'billing/invoicing/createBillingRun',\n  nestedEntities\n}"
        ]
      }
    },
    "/invoice/generateInvoice": {
      "post": {
        "tags": [
          "B2B-customer-care/invoices"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GENERATE_INVOICES (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L486) -> invoice/generateInvoice | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "invoiceNumber": {
                      "type": "string"
                    },
                    "invoiceType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "invoiceDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "dueDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "billingAccount": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string"
                        }
                      }
                    },
                    "rejectReason": {
                      "type": "string"
                    },
                    "paymentStatus": {
                      "type": "string"
                    },
                    "comment": {
                      "type": "string"
                    },
                    "amountWithoutTax": {
                      "type": "number"
                    },
                    "amountWithTax": {
                      "type": "number"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "openOrderNumber": {
                      "type": "string"
                    },
                    "pdfFilename": {
                      "type": "string"
                    },
                    "collectionPlanNumber": {
                      "type": "string"
                    },
                    "daysOverdue": {
                      "type": "number"
                    },
                    "balance": {
                      "type": "number"
                    },
                    "nextAction": {
                      "type": "string"
                    },
                    "relatedDunningCollectionPlan": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "billingAccountCode": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/generic/all/LinkedInvoice": {
      "post": {
        "tags": [
          "B2B-customer-care/invoices"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- LINKED_INVOICES (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L516) -> v2/generic/all/LinkedInvoice | request: options: {\n  method: 'POST'\n} / response: responseContainer: 'data'",
        "responses": {
          "200": {
            "description": "Successful response. responseContainer: 'data'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "invoiceNumber": {
                          "type": "string"
                        },
                        "invoiceType": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "invoiceDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "dueDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "billingAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            }
                          }
                        },
                        "rejectReason": {
                          "type": "string"
                        },
                        "paymentStatus": {
                          "type": "string"
                        },
                        "comment": {
                          "type": "string"
                        },
                        "amountWithoutTax": {
                          "type": "number"
                        },
                        "amountWithTax": {
                          "type": "number"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "openOrderNumber": {
                          "type": "string"
                        },
                        "pdfFilename": {
                          "type": "string"
                        },
                        "collectionPlanNumber": {
                          "type": "string"
                        },
                        "daysOverdue": {
                          "type": "number"
                        },
                        "balance": {
                          "type": "number"
                        },
                        "nextAction": {
                          "type": "string"
                        },
                        "relatedDunningCollectionPlan": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "billingAccountCode": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/manualInvoice/updateStatus/{id}/{status}": {
      "put": {
        "tags": [
          "B2B-customer-care/invoices"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- VALIDATE_MANUAL_INVOICE (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L523) -> manualInvoice/updateStatus/:id/:status | request: options: {\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "invoiceNumber": {
                      "type": "string"
                    },
                    "invoiceType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "invoiceDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "dueDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "billingAccount": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string"
                        }
                      }
                    },
                    "rejectReason": {
                      "type": "string"
                    },
                    "paymentStatus": {
                      "type": "string"
                    },
                    "comment": {
                      "type": "string"
                    },
                    "amountWithoutTax": {
                      "type": "number"
                    },
                    "amountWithTax": {
                      "type": "number"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "openOrderNumber": {
                      "type": "string"
                    },
                    "pdfFilename": {
                      "type": "string"
                    },
                    "collectionPlanNumber": {
                      "type": "string"
                    },
                    "daysOverdue": {
                      "type": "number"
                    },
                    "balance": {
                      "type": "number"
                    },
                    "nextAction": {
                      "type": "string"
                    },
                    "relatedDunningCollectionPlan": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "billingAccountCode": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        }
      }
    },
    "/manualInvoice/{id}": {
      "put": {
        "tags": [
          "B2B-customer-care/invoices"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE_FACTURE_MANUELLE (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L529) -> manualInvoice/:id | request: helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  url: 'manualInvoice/:id',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "invoiceNumber": {
                      "type": "string"
                    },
                    "invoiceType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "invoiceDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "dueDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "billingAccount": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string"
                        }
                      }
                    },
                    "rejectReason": {
                      "type": "string"
                    },
                    "paymentStatus": {
                      "type": "string"
                    },
                    "comment": {
                      "type": "string"
                    },
                    "amountWithoutTax": {
                      "type": "number"
                    },
                    "amountWithTax": {
                      "type": "number"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "openOrderNumber": {
                      "type": "string"
                    },
                    "pdfFilename": {
                      "type": "string"
                    },
                    "collectionPlanNumber": {
                      "type": "string"
                    },
                    "daysOverdue": {
                      "type": "number"
                    },
                    "balance": {
                      "type": "number"
                    },
                    "nextAction": {
                      "type": "string"
                    },
                    "relatedDunningCollectionPlan": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "billingAccountCode": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'manualInvoice/:id',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/generateInvoicePDF/archive/{invoiceId}/pdf": {
      "get": {
        "tags": [
          "B2B-customer-care/invoices"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GENERATE_PDF_FACTURE_MANUELLE (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L535) -> generateInvoicePDF/archive/:invoiceId/pdf | request: options: {\n  method: 'GET'\n} / response: responseContainer: 'fileContent' / info: isFile: true",
        "responses": {
          "200": {
            "description": "Successful response. responseContainer: 'fileContent'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "fileContent": {
                      "type": "object",
                      "properties": {
                        "invoiceNumber": {
                          "type": "string"
                        },
                        "invoiceType": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "invoiceDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "dueDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "billingAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            }
                          }
                        },
                        "rejectReason": {
                          "type": "string"
                        },
                        "paymentStatus": {
                          "type": "string"
                        },
                        "comment": {
                          "type": "string"
                        },
                        "amountWithoutTax": {
                          "type": "number"
                        },
                        "amountWithTax": {
                          "type": "number"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "openOrderNumber": {
                          "type": "string"
                        },
                        "pdfFilename": {
                          "type": "string"
                        },
                        "collectionPlanNumber": {
                          "type": "string"
                        },
                        "daysOverdue": {
                          "type": "number"
                        },
                        "balance": {
                          "type": "number"
                        },
                        "nextAction": {
                          "type": "string"
                        },
                        "relatedDunningCollectionPlan": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "billingAccountCode": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ],
        "x-dev-notes": [
          "isFile: true"
        ]
      }
    },
    "/generateInvoicePDF/duplicata/enrichi/{invoiceId}/pdf": {
      "get": {
        "tags": [
          "B2B-customer-care/invoices"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GENERATE_PDF_DUPLICATA_ENRICHI (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L543) -> generateInvoicePDF/duplicata/enrichi/:invoiceId/pdf | request: options: {\n  method: 'GET'\n} / response: responseContainer: 'fileContent' / info: isFile: true",
        "responses": {
          "200": {
            "description": "Successful response. responseContainer: 'fileContent'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "fileContent": {
                      "type": "object",
                      "properties": {
                        "invoiceNumber": {
                          "type": "string"
                        },
                        "invoiceType": {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        "invoiceDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "dueDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "billingAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "object",
                          "properties": {
                            "status": {
                              "type": "string"
                            }
                          }
                        },
                        "rejectReason": {
                          "type": "string"
                        },
                        "paymentStatus": {
                          "type": "string"
                        },
                        "comment": {
                          "type": "string"
                        },
                        "amountWithoutTax": {
                          "type": "number"
                        },
                        "amountWithTax": {
                          "type": "number"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "openOrderNumber": {
                          "type": "string"
                        },
                        "pdfFilename": {
                          "type": "string"
                        },
                        "collectionPlanNumber": {
                          "type": "string"
                        },
                        "daysOverdue": {
                          "type": "number"
                        },
                        "balance": {
                          "type": "number"
                        },
                        "nextAction": {
                          "type": "string"
                        },
                        "relatedDunningCollectionPlan": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "billingAccountCode": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ],
        "x-dev-notes": [
          "isFile: true"
        ]
      }
    },
    "/customTable/list/CE_SERVICE_EXECUTANT": {
      "post": {
        "tags": [
          "B2B-customer-care/invoices",
          "B2B-customer-care/mdp-clients",
          "B2B-customer-care/mdp-invoices",
          "B2B-customer-care/mdp-orders"
        ],
        "summary": "Used in 4 frontend location(s)",
        "description": "- GET_SERVICE_EXECUTANT (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L551) -> customTable/list/CE_SERVICE_EXECUTANT | request: options: {\n  method: 'POST'\n}\n- GET_EXECUTED_SERVICE (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L18) -> customTable/list/CE_SERVICE_EXECUTANT | request: options: {\n  method: 'POST'\n}\n- GET_EXECUTED_SERVICE (src/srcProject/layout/B2B-customer-care/modules/mdp-invoices/provider/provider.js#L18) -> customTable/list/CE_SERVICE_EXECUTANT | request: options: {\n  method: 'POST'\n}\n- GET_EXECUTED_SERVICE (src/srcProject/layout/B2B-customer-care/modules/mdp-orders/provider/provider.js#L18) -> customTable/list/CE_SERVICE_EXECUTANT | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "invoiceNumber": {
                      "type": "string"
                    },
                    "invoiceType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "invoiceDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "dueDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "billingAccount": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string"
                        }
                      }
                    },
                    "rejectReason": {
                      "type": "string"
                    },
                    "paymentStatus": {
                      "type": "string"
                    },
                    "comment": {
                      "type": "string"
                    },
                    "amountWithoutTax": {
                      "type": "number"
                    },
                    "amountWithTax": {
                      "type": "number"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "openOrderNumber": {
                      "type": "string"
                    },
                    "pdfFilename": {
                      "type": "string"
                    },
                    "collectionPlanNumber": {
                      "type": "string"
                    },
                    "daysOverdue": {
                      "type": "number"
                    },
                    "balance": {
                      "type": "number"
                    },
                    "nextAction": {
                      "type": "string"
                    },
                    "relatedDunningCollectionPlan": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "billingAccountCode": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/customTable/list/CE_ENGAGEMENT_JURIDIQUE": {
      "post": {
        "tags": [
          "B2B-customer-care/invoices",
          "B2B-customer-care/mdp-clients",
          "B2B-customer-care/mdp-invoices",
          "B2B-customer-care/mdp-orders"
        ],
        "summary": "Used in 4 frontend location(s)",
        "description": "- GET_ENGAGEMENT_JURIDIQUE (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L557) -> customTable/list/CE_ENGAGEMENT_JURIDIQUE | request: options: {\n  method: 'POST'\n}\n- GET_LEGAL_COMMITMENT (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L48) -> customTable/list/CE_ENGAGEMENT_JURIDIQUE | request: options: {\n  method: 'POST'\n}\n- GET_LEGAL_COMMITMENT (src/srcProject/layout/B2B-customer-care/modules/mdp-invoices/provider/provider.js#L25) -> customTable/list/CE_ENGAGEMENT_JURIDIQUE | request: options: {\n  method: 'POST'\n}\n- GET_LEGAL_COMMITMENT (src/srcProject/layout/B2B-customer-care/modules/mdp-orders/provider/provider.js#L25) -> customTable/list/CE_ENGAGEMENT_JURIDIQUE | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "invoiceNumber": {
                      "type": "string"
                    },
                    "invoiceType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "invoiceDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "dueDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "billingAccount": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string"
                        }
                      }
                    },
                    "rejectReason": {
                      "type": "string"
                    },
                    "paymentStatus": {
                      "type": "string"
                    },
                    "comment": {
                      "type": "string"
                    },
                    "amountWithoutTax": {
                      "type": "number"
                    },
                    "amountWithTax": {
                      "type": "number"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "openOrderNumber": {
                      "type": "string"
                    },
                    "pdfFilename": {
                      "type": "string"
                    },
                    "collectionPlanNumber": {
                      "type": "string"
                    },
                    "daysOverdue": {
                      "type": "number"
                    },
                    "balance": {
                      "type": "number"
                    },
                    "nextAction": {
                      "type": "string"
                    },
                    "relatedDunningCollectionPlan": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "billingAccountCode": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/manualInvoice/avoir/wf/{id}": {
      "post": {
        "tags": [
          "B2B-customer-care/invoices"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- INIT_WORKFLOW_AVOIR_INVOICE_BROUILLON (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L564) -> manualInvoice/avoir/wf/:id?status=BROUILLON | request: options: {\n  method: 'POST'\n}\n- INIT_WORKFLOW_AVOIR_INVOICE (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L570) -> manualInvoice/avoir/wf/:id | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "invoiceNumber": {
                      "type": "string"
                    },
                    "invoiceType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "invoiceDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "dueDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "billingAccount": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string"
                        }
                      }
                    },
                    "rejectReason": {
                      "type": "string"
                    },
                    "paymentStatus": {
                      "type": "string"
                    },
                    "comment": {
                      "type": "string"
                    },
                    "amountWithoutTax": {
                      "type": "number"
                    },
                    "amountWithTax": {
                      "type": "number"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "openOrderNumber": {
                      "type": "string"
                    },
                    "pdfFilename": {
                      "type": "string"
                    },
                    "collectionPlanNumber": {
                      "type": "string"
                    },
                    "daysOverdue": {
                      "type": "number"
                    },
                    "balance": {
                      "type": "number"
                    },
                    "nextAction": {
                      "type": "string"
                    },
                    "relatedDunningCollectionPlan": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "billingAccountCode": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/endEmailURLPaiement/invoice/{id}": {
      "post": {
        "tags": [
          "B2B-customer-care/invoices"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- RESEND_PAYMENT_LINK (src/srcProject/layout/B2B-customer-care/modules/invoices/provider/provider.js#L592) -> endEmailURLPaiement/invoice/:id | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "invoiceNumber": {
                      "type": "string"
                    },
                    "invoiceType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "invoiceDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "dueDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "billingAccount": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "object",
                      "properties": {
                        "status": {
                          "type": "string"
                        }
                      }
                    },
                    "rejectReason": {
                      "type": "string"
                    },
                    "paymentStatus": {
                      "type": "string"
                    },
                    "comment": {
                      "type": "string"
                    },
                    "amountWithoutTax": {
                      "type": "number"
                    },
                    "amountWithTax": {
                      "type": "number"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "openOrderNumber": {
                      "type": "string"
                    },
                    "pdfFilename": {
                      "type": "string"
                    },
                    "collectionPlanNumber": {
                      "type": "string"
                    },
                    "daysOverdue": {
                      "type": "number"
                    },
                    "balance": {
                      "type": "number"
                    },
                    "nextAction": {
                      "type": "string"
                    },
                    "relatedDunningCollectionPlan": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "billingAccountCode": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/generic/all/CpqQuote": {
      "post": {
        "tags": [
          "B2B-customer-care/mdp-clients",
          "B2B-customer-care/mdp-invoices",
          "B2B-customer-care/mdp-orders",
          "B2B-customer-care/mdp-quote-simulation",
          "B2B-customer-care/mdp-subscriptions",
          "B2B-customer-care/mdp-volume",
          "B2B-customer-care/quotes",
          "B2B-customer-care/quotes-old"
        ],
        "summary": "Used in 24 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L55) -> v2/generic/all/CpqQuote | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    ...restFilter\n  } = filter;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: get(validity, key)\n  };\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to')\n    },\n    ...restParams\n  };\n  return transformedFilters;\n} | helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/CpqQuote',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L79) -> v2/generic/all/CpqQuote | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/CpqQuote',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L86) -> v2/generic/all/CpqQuote | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/CpqQuote',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/mdp-invoices/provider/provider.js#L32) -> v2/generic/all/CpqQuote | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    ...restFilter\n  } = filter;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: get(validity, key)\n  };\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to')\n    },\n    ...restParams\n  };\n  return transformedFilters;\n} | helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/CpqQuote',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/mdp-invoices/provider/provider.js#L56) -> v2/generic/all/CpqQuote | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/CpqQuote',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/B2B-customer-care/modules/mdp-invoices/provider/provider.js#L63) -> v2/generic/all/CpqQuote | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/CpqQuote',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/mdp-orders/provider/provider.js#L32) -> v2/generic/all/CpqQuote | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    ...restFilter\n  } = filter;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: get(validity, key)\n  };\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to')\n    },\n    ...restParams\n  };\n  return transformedFilters;\n} | helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/CpqQuote',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/mdp-orders/provider/provider.js#L56) -> v2/generic/all/CpqQuote | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/CpqQuote',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/B2B-customer-care/modules/mdp-orders/provider/provider.js#L63) -> v2/generic/all/CpqQuote | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/CpqQuote',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/mdp-quote-simulation/provider/provider.js#L17) -> v2/generic/all/CpqQuote | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    ...restFilter\n  } = filter;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: get(validity, key)\n  };\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to')\n    },\n    ...restParams\n  };\n  return transformedFilters;\n} | helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/CpqQuote',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/mdp-quote-simulation/provider/provider.js#L41) -> v2/generic/all/CpqQuote | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/CpqQuote',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/B2B-customer-care/modules/mdp-quote-simulation/provider/provider.js#L48) -> v2/generic/all/CpqQuote | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/CpqQuote',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/mdp-subscriptions/provider/provider.js#L17) -> v2/generic/all/CpqQuote | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    ...restFilter\n  } = filter;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: get(validity, key)\n  };\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to')\n    },\n    ...restParams\n  };\n  return transformedFilters;\n} | helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/CpqQuote',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/mdp-subscriptions/provider/provider.js#L41) -> v2/generic/all/CpqQuote | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/CpqQuote',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/B2B-customer-care/modules/mdp-subscriptions/provider/provider.js#L48) -> v2/generic/all/CpqQuote | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/CpqQuote',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/mdp-volume/provider/provider.js#L17) -> v2/generic/all/CpqQuote | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    ...restFilter\n  } = filter;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: get(validity, key)\n  };\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to')\n    },\n    ...restParams\n  };\n  return transformedFilters;\n} | helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/CpqQuote',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/mdp-volume/provider/provider.js#L41) -> v2/generic/all/CpqQuote | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/CpqQuote',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/B2B-customer-care/modules/mdp-volume/provider/provider.js#L48) -> v2/generic/all/CpqQuote | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/CpqQuote',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/quotes/provider/provider.js#L13) -> v2/generic/all/CpqQuote | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    ...restFilter\n  } = filter;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: get(validity, key)\n  };\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to')\n    },\n    ...restParams\n  };\n  return transformedFilters;\n} | helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/CpqQuote',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/quotes/provider/provider.js#L37) -> v2/generic/all/CpqQuote | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/CpqQuote',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/B2B-customer-care/modules/quotes/provider/provider.js#L44) -> v2/generic/all/CpqQuote | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/CpqQuote',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/quotes-old/provider/provider.js#L13) -> v2/generic/all/CpqQuote | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    ...restFilter\n  } = filter;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: get(validity, key)\n  };\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to')\n    },\n    ...restParams\n  };\n  return transformedFilters;\n} | helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/CpqQuote',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/quotes-old/provider/provider.js#L37) -> v2/generic/all/CpqQuote | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/CpqQuote',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/B2B-customer-care/modules/quotes-old/provider/provider.js#L44) -> v2/generic/all/CpqQuote | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/CpqQuote',\n  nestedEntities,\n  keyColumn: 'code'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "quoteDate": {
                                "type": "string",
                                "format": "date"
                              },
                              "quoteNumber": {
                                "type": "string"
                              },
                              "applicantAccount": {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string"
                                  }
                                }
                              },
                              "status": {
                                "type": "string"
                              },
                              "auditable": {
                                "type": "object",
                                "properties": {
                                  "created": {
                                    "type": "string",
                                    "format": "date"
                                  }
                                }
                              },
                              "searchBar": {
                                "type": "string"
                              },
                              "salesPersonName": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "quoteDate": {
                                "type": "string",
                                "format": "date"
                              },
                              "quoteNumber": {
                                "type": "string"
                              },
                              "applicantAccount": {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string"
                                  }
                                }
                              },
                              "status": {
                                "type": "string"
                              },
                              "auditable": {
                                "type": "object",
                                "properties": {
                                  "created": {
                                    "type": "string",
                                    "format": "date"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    ...restFilter\n  } = filter;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: get(validity, key)\n  };\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to')\n    },\n    ...restParams\n  };\n  return transformedFilters;\n}\nhelper.nestedEntities: nestedEntities\nhelper.keyColumn: 'code'",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    ...restFilter\n  } = filter;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: get(validity, key)\n  };\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to')\n    },\n    ...restParams\n  };\n  return transformedFilters;\n}\nhelper.nestedEntities: nestedEntities\nhelper.keyColumn: 'code'"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/CpqQuote',\n  nestedEntities,\n  keyColumn: 'code'\n}"
        ]
      }
    },
    "/api/rest/cpq/quotes/": {
      "delete": {
        "tags": [
          "B2B-customer-care/mdp-clients",
          "B2B-customer-care/mdp-invoices",
          "B2B-customer-care/mdp-orders",
          "B2B-customer-care/mdp-quote-simulation",
          "B2B-customer-care/mdp-subscriptions",
          "B2B-customer-care/mdp-volume",
          "B2B-customer-care/quotes",
          "B2B-customer-care/quotes-old"
        ],
        "summary": "Used in 9 frontend location(s)",
        "description": "- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L126) -> /api/rest/cpq/quotes/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: '/api/rest/cpq/quotes/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/mdp-invoices/provider/provider.js#L103) -> /api/rest/cpq/quotes/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: '/api/rest/cpq/quotes/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/mdp-orders/provider/provider.js#L103) -> /api/rest/cpq/quotes/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: '/api/rest/cpq/quotes/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/mdp-quote-simulation/provider/provider.js#L88) -> /api/rest/cpq/quotes/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: '/api/rest/cpq/quotes/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/mdp-subscriptions/provider/provider.js#L88) -> /api/rest/cpq/quotes/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: '/api/rest/cpq/quotes/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/mdp-volume/provider/provider.js#L88) -> /api/rest/cpq/quotes/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: '/api/rest/cpq/quotes/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/quotes/provider/provider.js#L84) -> /api/rest/cpq/quotes/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: '/api/rest/cpq/quotes/',\n  method: 'DELETE'\n}\n- DELETE (src/srcProject/layout/B2B-customer-care/modules/quotes-old/provider/provider.js#L75) -> /api/rest/cpq/quotes/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: '/api/rest/cpq/quotes/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/quotes-old/provider/provider.js#L82) -> /api/rest/cpq/quotes/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: '/api/rest/cpq/quotes/',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "quoteDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "quoteNumber": {
                          "type": "string"
                        },
                        "applicantAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "searchBar": {
                          "type": "string"
                        },
                        "salesPersonName": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "quoteDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "quoteNumber": {
                          "type": "string"
                        },
                        "applicantAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: '/api/rest/cpq/quotes/',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/cpq/quotes/quoteVersions/{quoteCode}/{version}/status/{toStatus}": {
      "put": {
        "tags": [
          "B2B-customer-care/mdp-clients",
          "B2B-customer-care/mdp-invoices",
          "B2B-customer-care/mdp-orders",
          "B2B-customer-care/mdp-quote-simulation",
          "B2B-customer-care/mdp-subscriptions",
          "B2B-customer-care/mdp-volume",
          "B2B-customer-care/quotes",
          "B2B-customer-care/quotes-old"
        ],
        "summary": "Used in 8 frontend location(s)",
        "description": "- UPDATE_VERSION_STATUS (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L140) -> cpq/quotes/quoteVersions/:quoteCode/:version/status/:toStatus | request: options: {\n  method: 'PUT'\n}\n- UPDATE_VERSION_STATUS (src/srcProject/layout/B2B-customer-care/modules/mdp-invoices/provider/provider.js#L117) -> cpq/quotes/quoteVersions/:quoteCode/:version/status/:toStatus | request: options: {\n  method: 'PUT'\n}\n- UPDATE_VERSION_STATUS (src/srcProject/layout/B2B-customer-care/modules/mdp-orders/provider/provider.js#L117) -> cpq/quotes/quoteVersions/:quoteCode/:version/status/:toStatus | request: options: {\n  method: 'PUT'\n}\n- UPDATE_VERSION_STATUS (src/srcProject/layout/B2B-customer-care/modules/mdp-quote-simulation/provider/provider.js#L102) -> cpq/quotes/quoteVersions/:quoteCode/:version/status/:toStatus | request: options: {\n  method: 'PUT'\n}\n- UPDATE_VERSION_STATUS (src/srcProject/layout/B2B-customer-care/modules/mdp-subscriptions/provider/provider.js#L102) -> cpq/quotes/quoteVersions/:quoteCode/:version/status/:toStatus | request: options: {\n  method: 'PUT'\n}\n- UPDATE_VERSION_STATUS (src/srcProject/layout/B2B-customer-care/modules/mdp-volume/provider/provider.js#L102) -> cpq/quotes/quoteVersions/:quoteCode/:version/status/:toStatus | request: options: {\n  method: 'PUT'\n}\n- UPDATE_VERSION_STATUS (src/srcProject/layout/B2B-customer-care/modules/quotes/provider/provider.js#L113) -> cpq/quotes/quoteVersions/:quoteCode/:version/status/:toStatus | request: options: {\n  method: 'PUT'\n}\n- UPDATE_VERSION_STATUS (src/srcProject/layout/B2B-customer-care/modules/quotes-old/provider/provider.js#L96) -> cpq/quotes/quoteVersions/:quoteCode/:version/status/:toStatus | request: options: {\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "quoteDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "quoteNumber": {
                          "type": "string"
                        },
                        "applicantAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "searchBar": {
                          "type": "string"
                        },
                        "salesPersonName": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "quoteDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "quoteNumber": {
                          "type": "string"
                        },
                        "applicantAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        }
      }
    },
    "/cpq/quotes/{quoteCode}/quoteVersions/{version}/orderPlacement": {
      "get": {
        "tags": [
          "B2B-customer-care/mdp-clients",
          "B2B-customer-care/mdp-invoices",
          "B2B-customer-care/mdp-orders",
          "B2B-customer-care/mdp-quote-simulation",
          "B2B-customer-care/mdp-subscriptions",
          "B2B-customer-care/mdp-volume",
          "B2B-customer-care/quotes",
          "B2B-customer-care/quotes-old"
        ],
        "summary": "Used in 8 frontend location(s)",
        "description": "- PLACE_ORDER (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L151) -> cpq/quotes/:quoteCode/quoteVersions/:version/orderPlacement\n- PLACE_ORDER (src/srcProject/layout/B2B-customer-care/modules/mdp-invoices/provider/provider.js#L128) -> cpq/quotes/:quoteCode/quoteVersions/:version/orderPlacement\n- PLACE_ORDER (src/srcProject/layout/B2B-customer-care/modules/mdp-orders/provider/provider.js#L128) -> cpq/quotes/:quoteCode/quoteVersions/:version/orderPlacement\n- PLACE_ORDER (src/srcProject/layout/B2B-customer-care/modules/mdp-quote-simulation/provider/provider.js#L113) -> cpq/quotes/:quoteCode/quoteVersions/:version/orderPlacement\n- PLACE_ORDER (src/srcProject/layout/B2B-customer-care/modules/mdp-subscriptions/provider/provider.js#L113) -> cpq/quotes/:quoteCode/quoteVersions/:version/orderPlacement\n- PLACE_ORDER (src/srcProject/layout/B2B-customer-care/modules/mdp-volume/provider/provider.js#L113) -> cpq/quotes/:quoteCode/quoteVersions/:version/orderPlacement\n- PLACE_ORDER (src/srcProject/layout/B2B-customer-care/modules/quotes/provider/provider.js#L124) -> cpq/quotes/:quoteCode/quoteVersions/:version/orderPlacement\n- PLACE_ORDER (src/srcProject/layout/B2B-customer-care/modules/quotes-old/provider/provider.js#L107) -> cpq/quotes/:quoteCode/quoteVersions/:version/orderPlacement",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "quoteDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "quoteNumber": {
                          "type": "string"
                        },
                        "applicantAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "searchBar": {
                          "type": "string"
                        },
                        "salesPersonName": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "quoteDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "quoteNumber": {
                          "type": "string"
                        },
                        "applicantAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/cpq/quotes/quoteVersions/{code}/{version}/quotation": {
      "post": {
        "tags": [
          "B2B-customer-care/mdp-clients",
          "B2B-customer-care/mdp-invoices",
          "B2B-customer-care/mdp-orders",
          "B2B-customer-care/mdp-quote-simulation",
          "B2B-customer-care/mdp-subscriptions",
          "B2B-customer-care/mdp-volume",
          "B2B-customer-care/quotes-old"
        ],
        "summary": "Used in 7 frontend location(s)",
        "description": "- QUOTATION (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L159) -> cpq/quotes/quoteVersions/:code/:version/quotation | request: options: {\n  method: 'POST'\n}\n- QUOTATION (src/srcProject/layout/B2B-customer-care/modules/mdp-invoices/provider/provider.js#L136) -> cpq/quotes/quoteVersions/:code/:version/quotation | request: options: {\n  method: 'POST'\n}\n- QUOTATION (src/srcProject/layout/B2B-customer-care/modules/mdp-orders/provider/provider.js#L136) -> cpq/quotes/quoteVersions/:code/:version/quotation | request: options: {\n  method: 'POST'\n}\n- QUOTATION (src/srcProject/layout/B2B-customer-care/modules/mdp-quote-simulation/provider/provider.js#L121) -> cpq/quotes/quoteVersions/:code/:version/quotation | request: options: {\n  method: 'POST'\n}\n- QUOTATION (src/srcProject/layout/B2B-customer-care/modules/mdp-subscriptions/provider/provider.js#L121) -> cpq/quotes/quoteVersions/:code/:version/quotation | request: options: {\n  method: 'POST'\n}\n- QUOTATION (src/srcProject/layout/B2B-customer-care/modules/mdp-volume/provider/provider.js#L121) -> cpq/quotes/quoteVersions/:code/:version/quotation | request: options: {\n  method: 'POST'\n}\n- QUOTATION (src/srcProject/layout/B2B-customer-care/modules/quotes-old/provider/provider.js#L115) -> cpq/quotes/quoteVersions/:code/:version/quotation | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "quoteDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "quoteNumber": {
                      "type": "string"
                    },
                    "applicantAccount": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/generic/all/QuotePrice": {
      "post": {
        "tags": [
          "B2B-customer-care/mdp-clients",
          "B2B-customer-care/mdp-invoices",
          "B2B-customer-care/mdp-orders",
          "B2B-customer-care/mdp-quote-simulation",
          "B2B-customer-care/mdp-subscriptions",
          "B2B-customer-care/mdp-volume",
          "B2B-customer-care/quotes"
        ],
        "summary": "Used in 7 frontend location(s)",
        "description": "- QUOTE_PRICE (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L181) -> v2/generic/all/QuotePrice | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/QuotePrice',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- QUOTE_PRICE (src/srcProject/layout/B2B-customer-care/modules/mdp-invoices/provider/provider.js#L158) -> v2/generic/all/QuotePrice | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/QuotePrice',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- QUOTE_PRICE (src/srcProject/layout/B2B-customer-care/modules/mdp-orders/provider/provider.js#L158) -> v2/generic/all/QuotePrice | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/QuotePrice',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- QUOTE_PRICE (src/srcProject/layout/B2B-customer-care/modules/mdp-quote-simulation/provider/provider.js#L143) -> v2/generic/all/QuotePrice | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/QuotePrice',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- QUOTE_PRICE (src/srcProject/layout/B2B-customer-care/modules/mdp-subscriptions/provider/provider.js#L143) -> v2/generic/all/QuotePrice | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/QuotePrice',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- QUOTE_PRICE (src/srcProject/layout/B2B-customer-care/modules/mdp-volume/provider/provider.js#L143) -> v2/generic/all/QuotePrice | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/QuotePrice',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- QUOTE_PRICE (src/srcProject/layout/B2B-customer-care/modules/quotes/provider/provider.js#L162) -> v2/generic/all/QuotePrice | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/QuotePrice',\n  nestedEntities,\n  keyColumn: 'code'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "quoteDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "quoteNumber": {
                          "type": "string"
                        },
                        "applicantAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "searchBar": {
                          "type": "string"
                        },
                        "salesPersonName": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: 'code'",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: 'code'"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/QuotePrice',\n  nestedEntities,\n  keyColumn: 'code'\n}"
        ]
      }
    },
    "/v2/generic/all/QuoteOffer": {
      "post": {
        "tags": [
          "B2B-customer-care/mdp-clients",
          "B2B-customer-care/mdp-invoices",
          "B2B-customer-care/mdp-orders",
          "B2B-customer-care/mdp-quote-simulation",
          "B2B-customer-care/mdp-subscriptions",
          "B2B-customer-care/mdp-volume"
        ],
        "summary": "Used in 6 frontend location(s)",
        "description": "- GET_QUOTE_OFFER_LIST (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L188) -> v2/generic/all/QuoteOffer | request: options: {\n  method: 'POST'\n} / info: keyColumn: 'code'\n- GET_QUOTE_OFFER_LIST (src/srcProject/layout/B2B-customer-care/modules/mdp-invoices/provider/provider.js#L165) -> v2/generic/all/QuoteOffer | request: options: {\n  method: 'POST'\n} / info: keyColumn: 'code'\n- GET_QUOTE_OFFER_LIST (src/srcProject/layout/B2B-customer-care/modules/mdp-orders/provider/provider.js#L165) -> v2/generic/all/QuoteOffer | request: options: {\n  method: 'POST'\n} / info: keyColumn: 'code'\n- GET_QUOTE_OFFER_LIST (src/srcProject/layout/B2B-customer-care/modules/mdp-quote-simulation/provider/provider.js#L150) -> v2/generic/all/QuoteOffer | request: options: {\n  method: 'POST'\n} / info: keyColumn: 'code'\n- GET_QUOTE_OFFER_LIST (src/srcProject/layout/B2B-customer-care/modules/mdp-subscriptions/provider/provider.js#L150) -> v2/generic/all/QuoteOffer | request: options: {\n  method: 'POST'\n} / info: keyColumn: 'code'\n- GET_QUOTE_OFFER_LIST (src/srcProject/layout/B2B-customer-care/modules/mdp-volume/provider/provider.js#L150) -> v2/generic/all/QuoteOffer | request: options: {\n  method: 'POST'\n} / info: keyColumn: 'code'",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: 'code'"
        ]
      }
    },
    "/abonnement/": {
      "post": {
        "tags": [
          "B2B-customer-care/mdp-clients"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_SUBSCRIPTIONS (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L202) -> abonnement/ | request: options: {\n  method: 'POST'\n} / info: limit: 1000 | keyColumn: 'code'",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "limit: 1000",
          "keyColumn: 'code'"
        ]
      }
    },
    "/dashboardInfos": {
      "post": {
        "tags": [
          "B2B-customer-care/mdp-clients"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_IP_LIST_UPDATE (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L211) -> dashboardInfos | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/customTable/list/ce_ip_mep": {
      "post": {
        "tags": [
          "B2B-customer-care/mdp-clients"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_IP_LIST (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L218) -> customTable/list/ce_ip_mep | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/infosVendeur/{clientDonneurOrdreId}/{createurDevisId}": {
      "get": {
        "tags": [
          "B2B-customer-care/mdp-clients",
          "B2B-customer-care/mdp-invoices",
          "B2B-customer-care/mdp-orders",
          "B2B-customer-care/mdp-quote-simulation",
          "B2B-customer-care/mdp-subscriptions",
          "B2B-customer-care/mdp-volume",
          "B2B-customer-care/quotes"
        ],
        "summary": "Used in 7 frontend location(s)",
        "description": "- GET_INFOS_VENDEUR (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L225) -> infosVendeur/:clientDonneurOrdreId/:createurDevisId | request: options: {\n  method: 'GET'\n}\n- GET_INFOS_VENDEUR (src/srcProject/layout/B2B-customer-care/modules/mdp-invoices/provider/provider.js#L172) -> infosVendeur/:clientDonneurOrdreId/:createurDevisId | request: options: {\n  method: 'GET'\n}\n- GET_INFOS_VENDEUR (src/srcProject/layout/B2B-customer-care/modules/mdp-orders/provider/provider.js#L172) -> infosVendeur/:clientDonneurOrdreId/:createurDevisId | request: options: {\n  method: 'GET'\n}\n- GET_INFOS_VENDEUR (src/srcProject/layout/B2B-customer-care/modules/mdp-quote-simulation/provider/provider.js#L157) -> infosVendeur/:clientDonneurOrdreId/:createurDevisId | request: options: {\n  method: 'GET'\n}\n- GET_INFOS_VENDEUR (src/srcProject/layout/B2B-customer-care/modules/mdp-subscriptions/provider/provider.js#L157) -> infosVendeur/:clientDonneurOrdreId/:createurDevisId | request: options: {\n  method: 'GET'\n}\n- GET_INFOS_VENDEUR (src/srcProject/layout/B2B-customer-care/modules/mdp-volume/provider/provider.js#L157) -> infosVendeur/:clientDonneurOrdreId/:createurDevisId | request: options: {\n  method: 'GET'\n}\n- GET_INFOS_VENDEUR (src/srcProject/layout/B2B-customer-care/modules/quotes/provider/provider.js#L91) -> infosVendeur/:clientDonneurOrdreId/:createurDevisId? | request: options: {\n  method: 'GET'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "quoteDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "quoteNumber": {
                      "type": "string"
                    },
                    "applicantAccount": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "searchBar": {
                      "type": "string"
                    },
                    "salesPersonName": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ]
      }
    },
    "/customTable/list/CE_RAT_FDV_PORT": {
      "post": {
        "tags": [
          "B2B-customer-care/mdp-clients"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_CSV (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L232) -> customTable/list/CE_RAT_FDV_PORT | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/customTable/list/CE_AFF_CL_PF": {
      "post": {
        "tags": [
          "B2B-customer-care/mdp-clients"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ClientId_BY_CODE_PORTEFEUILLE (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L238) -> customTable/list/CE_AFF_CL_PF | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/seller/findByCode": {
      "get": {
        "tags": [
          "B2B-customer-care/mdp-clients"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_SELLER_BY_CODE (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L251) -> seller/findByCode? | request: options: {\n  method: 'GET'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ]
      }
    },
    "/customTable/list/CE_INTERLOCUTEUR": {
      "post": {
        "tags": [
          "B2B-customer-care/mdp-clients",
          "B2B-customer-care/mdp-invoices",
          "B2B-customer-care/mdp-orders",
          "B2B-customer-care/mdp-quote-simulation",
          "B2B-customer-care/mdp-subscriptions",
          "B2B-customer-care/mdp-volume"
        ],
        "summary": "Used in 6 frontend location(s)",
        "description": "- GET_INFOS_INTERLOCUTEURS (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L258) -> customTable/list/CE_INTERLOCUTEUR | request: options: {\n  method: 'POST'\n}\n- GET_INFOS_INTERLOCUTEURS (src/srcProject/layout/B2B-customer-care/modules/mdp-invoices/provider/provider.js#L178) -> customTable/list/CE_INTERLOCUTEUR | request: options: {\n  method: 'POST'\n}\n- GET_INFOS_INTERLOCUTEURS (src/srcProject/layout/B2B-customer-care/modules/mdp-orders/provider/provider.js#L178) -> customTable/list/CE_INTERLOCUTEUR | request: options: {\n  method: 'POST'\n}\n- GET_INFOS_INTERLOCUTEURS (src/srcProject/layout/B2B-customer-care/modules/mdp-quote-simulation/provider/provider.js#L163) -> customTable/list/CE_INTERLOCUTEUR | request: options: {\n  method: 'POST'\n}\n- GET_INFOS_INTERLOCUTEURS (src/srcProject/layout/B2B-customer-care/modules/mdp-subscriptions/provider/provider.js#L163) -> customTable/list/CE_INTERLOCUTEUR | request: options: {\n  method: 'POST'\n}\n- GET_INFOS_INTERLOCUTEURS (src/srcProject/layout/B2B-customer-care/modules/mdp-volume/provider/provider.js#L163) -> customTable/list/CE_INTERLOCUTEUR | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/RechercheClientParInterlocuteur/interlocuteur": {
      "get": {
        "tags": [
          "B2B-customer-care/mdp-clients"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_INETR_IDS (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L297) -> RechercheClientParInterlocuteur/interlocuteur? | request: options: {\n  method: 'GET'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ]
      }
    },
    "/updateDefaultBillingAccount": {
      "post": {
        "tags": [
          "B2B-customer-care/mdp-clients"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE_DEFAULT_BILLING_ACC (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L315) -> updateDefaultBillingAccount | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/customer/infos": {
      "post": {
        "tags": [
          "B2B-customer-care/mdp-clients"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_CSV_BY_ID_CLIENTS (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L321) -> customer/infos | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/bpel/api_sivente/customers_lp": {
      "post": {
        "tags": [
          "B2B-customer-care/mdp-clients"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- SYNCHRO_CLIENT_LP (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L327) -> bpel/api_sivente/customers_lp | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "B2B-customer-care/mdp-clients"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- SYNCHRO_CLIENT_LP_PUT (src/srcProject/layout/B2B-customer-care/modules/mdp-clients/provider/provider.js#L333) -> bpel/api_sivente/customers_lp | request: options: {\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        }
      }
    },
    "/customTable/list/{tableName}": {
      "post": {
        "tags": [
          "B2B-customer-care/mdp-custom-table"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/mdp-custom-table/provider/provider.js#L19) -> customTable/list/:tableName | request: options: {\n  method: 'POST'\n} / response: responseContainer: 'data'\n- GET_MANY_REFERENCE (src/srcProject/layout/B2B-customer-care/modules/mdp-custom-table/provider/provider.js#L27) -> customTable/list/:tableName | request: helper.options: {\n  method: 'POST'\n} / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: 'id' | helper: getListV2 | helperArgs: {\n  url: 'customTable/list/:tableName',\n  responseContainer: 'data',\n  options: {\n    method: 'POST'\n  }\n}",
        "responses": {
          "200": {
            "description": "Successful response. responseContainer: 'data' | transformResponse: transformResponse | helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}\nhelper.options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}\nhelper.options: {\n  method: 'POST'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: 'id'",
          "helper: getListV2",
          "helperArgs: {\n  url: 'customTable/list/:tableName',\n  responseContainer: 'data',\n  options: {\n    method: 'POST'\n  }\n}"
        ]
      }
    },
    "/dashboard/getDashboardData": {
      "post": {
        "tags": [
          "B2B-customer-care/mdp-home"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_DASHBOARD_DATA (src/srcProject/layout/B2B-customer-care/modules/mdp-home/provider/provider.js#L8) -> dashboard/getDashboardData | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/customTable/list/CE_LISTE_MOTIF_AVOIR": {
      "post": {
        "tags": [
          "B2B-customer-care/motifs"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/motifs/provider/provider.js#L14) -> customTable/list/CE_LISTE_MOTIF_AVOIR | request: prepareParams: params => {\n  return {\n    ...params\n  };\n} | helper.nestedEntities: nestedEntities / response: responseContainer: 'tableData.record' | helper.responseContainer: data / info: specificAPIEnabled: true | keyColumn: 'id' | customTableCode: 'CE_LISTE_MOTIF_AVOIR' | nestedContainer: 'values' | helper: getListV2 | helperArgs: {\n  url: 'customTable/list/CE_LISTE_MOTIF_AVOIR',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/motifs/provider/provider.js#L30) -> customTable/list/CE_LISTE_MOTIF_AVOIR | request: prepareParams: params => {\n  return {\n    ...params\n  };\n} | helper.nestedEntities: nestedEntities / response: responseContainer: 'tableData.record' | helper.responseContainer: data / info: specificAPIEnabled: true | keyColumn: 'id' | customTableCode: 'CE_LISTE_MOTIF_AVOIR' | nestedContainer: 'values' | helper: getListV2 | helperArgs: {\n  url: 'customTable/list/CE_LISTE_MOTIF_AVOIR',\n  nestedEntities\n}\n- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/motifs/provider/provider.js#L47) -> customTable/list/CE_LISTE_MOTIF_AVOIR | request: prepareParams: params => {\n  return {\n    ...params\n  };\n} | helper.nestedEntities: nestedEntities / response: responseContainer: 'tableData.record' | helper.responseContainer: data / info: specificAPIEnabled: true | keyColumn: 'id' | customTableCode: 'CE_LISTE_MOTIF_AVOIR' | nestedContainer: 'values' | helper: getListV2 | helperArgs: {\n  url: 'customTable/list/CE_LISTE_MOTIF_AVOIR',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. responseContainer: 'tableData.record' | helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "tableData.record": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "cf_code_motif": {
                                "type": "string"
                              },
                              "cf_description_motif": {
                                "type": "string"
                              },
                              "cf_type_prestation_gamme": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "cf_code_motif": {
                                "type": "string"
                              },
                              "cf_description_motif": {
                                "type": "string"
                              },
                              "cf_type_prestation_gamme": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "tableData.record": {
                          "type": "object",
                          "properties": {
                            "cf_code_motif": {
                              "type": "string"
                            },
                            "cf_description_motif": {
                              "type": "string"
                            },
                            "cf_type_prestation_gamme": {
                              "type": "string"
                            }
                          }
                        },
                        "data": {
                          "type": "object",
                          "properties": {
                            "cf_code_motif": {
                              "type": "string"
                            },
                            "cf_description_motif": {
                              "type": "string"
                            },
                            "cf_type_prestation_gamme": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  return {\n    ...params\n  };\n}\nhelper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  return {\n    ...params\n  };\n}\nhelper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true",
          "keyColumn: 'id'",
          "customTableCode: 'CE_LISTE_MOTIF_AVOIR'",
          "nestedContainer: 'values'",
          "helper: getListV2",
          "helperArgs: {\n  url: 'customTable/list/CE_LISTE_MOTIF_AVOIR',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/all/openOrderQuote": {
      "post": {
        "tags": [
          "B2B-customer-care/open-order-quotes"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/open-order-quotes/provider/provider.js#L26) -> v2/generic/all/openOrderQuote | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/openOrderQuote',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/open-order-quotes/provider/provider.js#L33) -> v2/generic/all/openOrderQuote | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/openOrderQuote',\n  nestedEntities\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/B2B-customer-care/modules/open-order-quotes/provider/provider.js#L39) -> v2/generic/all/openOrderQuote | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/openOrderQuote',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "quoteNumber": {
                            "type": "string"
                          },
                          "billingAccount": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string"
                                  }
                                }
                              },
                              {
                                "type": "string"
                              }
                            ]
                          },
                          "maxAmount": {
                            "type": "string"
                          },
                          "activationDate": {
                            "type": "string"
                          },
                          "endOfValidityDate": {
                            "type": "string"
                          },
                          "openOrderType": {
                            "type": "string"
                          },
                          "auditable": {
                            "type": "object",
                            "properties": {
                              "created": {
                                "type": "string"
                              }
                            }
                          },
                          "status": {
                            "type": "string"
                          },
                          "creationDate": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/openOrderQuote',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/openOrderQuote/": {
      "post": {
        "tags": [
          "B2B-customer-care/open-order-quotes"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/open-order-quotes/provider/provider.js#L46) -> v2/generic/openOrderQuote/ | request: helper.keyColumn: keyColumn | helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/openOrderQuote/',\n  keyColumn,\n  nestedEntities\n  //transformResponse\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "quoteNumber": {
                      "type": "string"
                    },
                    "billingAccount": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "maxAmount": {
                      "type": "string"
                    },
                    "activationDate": {
                      "type": "string"
                    },
                    "endOfValidityDate": {
                      "type": "string"
                    },
                    "openOrderType": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "string"
                    },
                    "creationDate": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.keyColumn: keyColumn\nhelper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.keyColumn: keyColumn\nhelper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/openOrderQuote/',\n  keyColumn,\n  nestedEntities\n  //transformResponse\n}"
        ]
      }
    },
    "/v2/ordering/open-order-quote": {
      "post": {
        "tags": [
          "B2B-customer-care/open-order-quotes"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/open-order-quotes/provider/provider.js#L55) -> v2/ordering/open-order-quote | request: helper.method: POST | helper.keyColumn: keyColumn / response: helper.responseContainerId: {responseContainerId} / info: helper: getCreateProvider | helperArgs: {\n  url: 'v2/ordering/open-order-quote',\n  method: 'POST',\n  responseContainerId,\n  keyColumn\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainerId: {responseContainerId}",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "quoteNumber": {
                      "type": "string"
                    },
                    "billingAccount": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "maxAmount": {
                      "type": "string"
                    },
                    "activationDate": {
                      "type": "string"
                    },
                    "endOfValidityDate": {
                      "type": "string"
                    },
                    "openOrderType": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "string"
                    },
                    "creationDate": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST\nhelper.keyColumn: keyColumn",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST\nhelper.keyColumn: keyColumn"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/ordering/open-order-quote',\n  method: 'POST',\n  responseContainerId,\n  keyColumn\n}"
        ]
      },
      "delete": {
        "tags": [
          "B2B-customer-care/open-order-quotes"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/B2B-customer-care/modules/open-order-quotes/provider/provider.js#L74) -> v2/ordering/open-order-quote | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/ordering/open-order-quote',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "quoteNumber": {
                      "type": "string"
                    },
                    "billingAccount": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "maxAmount": {
                      "type": "string"
                    },
                    "activationDate": {
                      "type": "string"
                    },
                    "endOfValidityDate": {
                      "type": "string"
                    },
                    "openOrderType": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "string"
                    },
                    "creationDate": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'v2/ordering/open-order-quote',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/ordering/open-order-quote/{id}": {
      "put": {
        "tags": [
          "B2B-customer-care/open-order-quotes"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/B2B-customer-care/modules/open-order-quotes/provider/provider.js#L64) -> v2/ordering/open-order-quote/:id | request: helper.method: PUT | helper.keyColumn: keyColumn / response: helper.responseContainerId: {responseContainerId} / info: excludeProperties: ['id'] | helper: getUpdateProvider | helperArgs: {\n  url: 'v2/ordering/open-order-quote/:id',\n  method: 'PUT',\n  responseContainerId,\n  keyColumn\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainerId: {responseContainerId}",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "quoteNumber": {
                      "type": "string"
                    },
                    "billingAccount": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "maxAmount": {
                      "type": "string"
                    },
                    "activationDate": {
                      "type": "string"
                    },
                    "endOfValidityDate": {
                      "type": "string"
                    },
                    "openOrderType": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "string"
                    },
                    "creationDate": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: PUT\nhelper.keyColumn: keyColumn",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT\nhelper.keyColumn: keyColumn"
              }
            }
          }
        },
        "x-dev-notes": [
          "excludeProperties: ['id']",
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'v2/ordering/open-order-quote/:id',\n  method: 'PUT',\n  responseContainerId,\n  keyColumn\n}"
        ]
      }
    },
    "/v2/ordering/open-order-quote/{code}/status/{toStatus}": {
      "put": {
        "tags": [
          "B2B-customer-care/open-order-quotes"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CHANGE_STATUS (src/srcProject/layout/B2B-customer-care/modules/open-order-quotes/provider/provider.js#L81) -> v2/ordering/open-order-quote/:code/status/:toStatus | request: options: {\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "quoteNumber": {
                      "type": "string"
                    },
                    "billingAccount": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "maxAmount": {
                      "type": "string"
                    },
                    "activationDate": {
                      "type": "string"
                    },
                    "endOfValidityDate": {
                      "type": "string"
                    },
                    "openOrderType": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "string"
                    },
                    "creationDate": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/cpq/quotes/{code}/availableOpenOrders": {
      "get": {
        "tags": [
          "B2B-customer-care/open-order-quotes"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- AVAILABLE_OPEN_ORDERS (src/srcProject/layout/B2B-customer-care/modules/open-order-quotes/provider/provider.js#L88) -> v2/cpq/quotes/:code/availableOpenOrders | request: options: {\n  method: 'GET'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "quoteNumber": {
                      "type": "string"
                    },
                    "billingAccount": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "maxAmount": {
                      "type": "string"
                    },
                    "activationDate": {
                      "type": "string"
                    },
                    "endOfValidityDate": {
                      "type": "string"
                    },
                    "openOrderType": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "string"
                    },
                    "creationDate": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ]
      }
    },
    "/v2/commercialOrders/{code}/availableOpenOrders": {
      "get": {
        "tags": [
          "B2B-customer-care/open-order-quotes"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- AVAILABLE_OPEN_ORDERS_ORDER (src/srcProject/layout/B2B-customer-care/modules/open-order-quotes/provider/provider.js#L95) -> v2/commercialOrders/:code/availableOpenOrders | request: options: {\n  method: 'GET'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "quoteNumber": {
                      "type": "string"
                    },
                    "billingAccount": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "maxAmount": {
                      "type": "string"
                    },
                    "activationDate": {
                      "type": "string"
                    },
                    "endOfValidityDate": {
                      "type": "string"
                    },
                    "openOrderType": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "string"
                    },
                    "creationDate": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ]
      }
    },
    "/v2/ordering/open-order-quote/{id}/duplicate": {
      "post": {
        "tags": [
          "B2B-customer-care/open-order-quotes"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- DUPLICATE (src/srcProject/layout/B2B-customer-care/modules/open-order-quotes/provider/provider.js#L101) -> v2/ordering/open-order-quote/:id/duplicate | request: options: {\n  method: 'POST'\n} / response: responseContainerId: responseContainerId / info: keyColumn: keyColumn",
        "responses": {
          "200": {
            "description": "Successful response. responseContainerId: responseContainerId",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "responseContainerId": {
                      "type": "object",
                      "properties": {
                        "quoteNumber": {
                          "type": "string"
                        },
                        "billingAccount": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "string"
                            }
                          ]
                        },
                        "maxAmount": {
                          "type": "string"
                        },
                        "activationDate": {
                          "type": "string"
                        },
                        "endOfValidityDate": {
                          "type": "string"
                        },
                        "openOrderType": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string"
                            }
                          }
                        },
                        "status": {
                          "type": "string"
                        },
                        "creationDate": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn"
        ]
      }
    },
    "/v2/generic/OrderAttribute": {
      "post": {
        "tags": [
          "B2B-customer-care/order-attributes"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/order-attributes/provider/provider.js#L27) -> v2/generic/OrderAttribute | response: helper.responseContainerId: id / info: helper: getCreateProvider | helperArgs: {\n  url: 'v2/generic/OrderAttribute',\n  responseContainerId: 'id'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainerId: id"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/generic/OrderAttribute',\n  responseContainerId: 'id'\n}"
        ]
      }
    },
    "/v2/generic/OrderAttribute/{id}": {
      "put": {
        "tags": [
          "B2B-customer-care/order-attributes"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/B2B-customer-care/modules/order-attributes/provider/provider.js#L33) -> v2/generic/OrderAttribute/:id | request: helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  url: 'v2/generic/OrderAttribute/:id',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'v2/generic/OrderAttribute/:id',\n  method: 'PUT'\n}"
        ]
      },
      "delete": {
        "tags": [
          "B2B-customer-care/order-products"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- DELETE_ORDER_ATTRIBUTE (src/srcProject/layout/B2B-customer-care/modules/order-products/provider/provider.js#L46) -> v2/generic/OrderAttribute/:id | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/generic/OrderAttribute/:id',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'v2/generic/OrderAttribute/:id',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/generic/all/orderLot": {
      "post": {
        "tags": [
          "B2B-customer-care/order-lots"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/order-lots/provider/provider.js#L7) -> v2/generic/all/orderLot | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/orderLot',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/order-lots/provider/provider.js#L11) -> v2/generic/all/orderLot | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/orderLot',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/orderLot',\n  nestedEntities\n}"
        ]
      }
    },
    "/orderManagement/commercialOrders/orderOffers": {
      "post": {
        "tags": [
          "B2B-customer-care/order-offers"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/order-offers/provider/provider.js#L47) -> orderManagement/commercialOrders/orderOffers | request: helper.keyColumn: keyColumn / response: responseContainer: 'orderOfferDto' | responseContainerId: 'orderOfferId' / info: helper: getCreateProvider | helperArgs: {\n  keyColumn,\n  url: 'orderManagement/commercialOrders/orderOffers'\n}",
        "responses": {
          "200": {
            "description": "Successful response. responseContainer: 'orderOfferDto' | responseContainerId: 'orderOfferId'"
          }
        },
        "requestBody": {
          "description": "helper.keyColumn: keyColumn",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.keyColumn: keyColumn"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  keyColumn,\n  url: 'orderManagement/commercialOrders/orderOffers'\n}"
        ]
      },
      "put": {
        "tags": [
          "B2B-customer-care/order-offers"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/B2B-customer-care/modules/order-offers/provider/provider.js#L55) -> orderManagement/commercialOrders/orderOffers | request: helper.keyColumn: keyColumn | helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  keyColumn,\n  url: 'orderManagement/commercialOrders/orderOffers',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.keyColumn: keyColumn\nhelper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.keyColumn: keyColumn\nhelper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getUpdateProvider",
          "helperArgs: {\n  keyColumn,\n  url: 'orderManagement/commercialOrders/orderOffers',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/orderManagement/commercialOrders/orderOffers/{id}": {
      "delete": {
        "tags": [
          "B2B-customer-care/order-offers"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- DELETE_ORDER_OFFER (src/srcProject/layout/B2B-customer-care/modules/order-offers/provider/provider.js#L62) -> orderManagement/commercialOrders/orderOffers/:id | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'orderManagement/commercialOrders/orderOffers/:id',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'orderManagement/commercialOrders/orderOffers/:id',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/generic/orderProduct": {
      "post": {
        "tags": [
          "B2B-customer-care/order-products"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/order-products/provider/provider.js#L34) -> v2/generic/orderProduct | response: helper.responseContainerId: id / info: helper: getCreateProvider | helperArgs: {\n  url: 'v2/generic/orderProduct',\n  responseContainerId: 'id'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainerId: id"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/generic/orderProduct',\n  responseContainerId: 'id'\n}"
        ]
      }
    },
    "/v2/generic/orderProduct/{id}": {
      "put": {
        "tags": [
          "B2B-customer-care/order-products"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/B2B-customer-care/modules/order-products/provider/provider.js#L40) -> v2/generic/orderProduct/:id | request: helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  url: 'v2/generic/orderProduct/:id',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'v2/generic/orderProduct/:id',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/v2/generic/all/commercialOrder": {
      "post": {
        "tags": [
          "B2B-customer-care/orders"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/orders/provider/provider.js#L31) -> v2/generic/all/commercialOrder | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    quote: {\n      quoteNumber\n    } = {},\n    ...restFilter\n  } = filter;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: get(validity, key)\n  };\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      ...(quoteNumber && {\n        'wildcardOrIgnoreCase quote.quoteNumber': quoteNumber\n      }),\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to')\n    },\n    ...restParams\n  };\n  return transformedFilters;\n} | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/commercialOrder',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/orders/provider/provider.js#L66) -> v2/generic/all/commercialOrder | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/commercialOrder',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/B2B-customer-care/modules/orders/provider/provider.js#L73) -> v2/generic/all/commercialOrder | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/commercialOrder',\n  responseContainer: 'data',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "orderDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "billingAccount": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "code": {
                                "type": "string"
                              }
                            }
                          },
                          "quote": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "quoteNumber": {
                                    "type": "string"
                                  }
                                }
                              },
                              {
                                "type": "string"
                              }
                            ]
                          },
                          "orderNumber": {
                            "type": "string"
                          },
                          "orderType": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "description": {
                                    "type": "string"
                                  }
                                }
                              },
                              {
                                "type": "string"
                              }
                            ]
                          },
                          "status": {
                            "type": "string"
                          },
                          "orderProgress": {
                            "type": "string"
                          },
                          "label": {
                            "type": "string"
                          },
                          "auditable": {
                            "type": "object",
                            "properties": {
                              "created": {
                                "type": "string",
                                "format": "date"
                              }
                            }
                          },
                          "searchBar": {
                            "type": "string"
                          },
                          "salesPersonName": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    quote: {\n      quoteNumber\n    } = {},\n    ...restFilter\n  } = filter;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: get(validity, key)\n  };\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      ...(quoteNumber && {\n        'wildcardOrIgnoreCase quote.quoteNumber': quoteNumber\n      }),\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to')\n    },\n    ...restParams\n  };\n  return transformedFilters;\n}\nhelper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    quote: {\n      quoteNumber\n    } = {},\n    ...restFilter\n  } = filter;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: get(validity, key)\n  };\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      ...(quoteNumber && {\n        'wildcardOrIgnoreCase quote.quoteNumber': quoteNumber\n      }),\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to')\n    },\n    ...restParams\n  };\n  return transformedFilters;\n}\nhelper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/commercialOrder',\n  nestedEntities\n}",
          "helperArgs: {\n  url: 'v2/generic/all/commercialOrder',\n  responseContainer: 'data',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/commercialOrder/": {
      "post": {
        "tags": [
          "B2B-customer-care/orders"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/orders/provider/provider.js#L59) -> v2/generic/commercialOrder/ | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/commercialOrder/',\n  responseContainer: 'data',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "orderDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "billingAccount": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "quote": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "quoteNumber": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "string"
                            }
                          ]
                        },
                        "orderNumber": {
                          "type": "string"
                        },
                        "orderType": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "string"
                            }
                          ]
                        },
                        "status": {
                          "type": "string"
                        },
                        "orderProgress": {
                          "type": "string"
                        },
                        "label": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "searchBar": {
                          "type": "string"
                        },
                        "salesPersonName": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/commercialOrder/',\n  responseContainer: 'data',\n  nestedEntities\n}"
        ]
      }
    },
    "/orderManagement/commercialOrders/": {
      "post": {
        "tags": [
          "B2B-customer-care/orders"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/orders/provider/provider.js#L80) -> orderManagement/commercialOrders/ | request: helper.keyColumn: keyColumn / response: responseContainer: 'commercialOrderDto' / info: helper: getCreateProvider | helperArgs: {\n  url: 'orderManagement/commercialOrders/',\n  keyColumn\n}",
        "responses": {
          "200": {
            "description": "Successful response. responseContainer: 'commercialOrderDto'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "commercialOrderDto": {
                      "type": "object",
                      "properties": {
                        "orderDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "billingAccount": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "quote": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "quoteNumber": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "string"
                            }
                          ]
                        },
                        "orderNumber": {
                          "type": "string"
                        },
                        "orderType": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "string"
                            }
                          ]
                        },
                        "status": {
                          "type": "string"
                        },
                        "orderProgress": {
                          "type": "string"
                        },
                        "label": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "searchBar": {
                          "type": "string"
                        },
                        "salesPersonName": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.keyColumn: keyColumn",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.keyColumn: keyColumn"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'orderManagement/commercialOrders/',\n  keyColumn\n}"
        ]
      }
    },
    "/orderManagement/commercialOrders": {
      "put": {
        "tags": [
          "B2B-customer-care/orders"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/B2B-customer-care/modules/orders/provider/provider.js#L87) -> orderManagement/commercialOrders | request: helper.keyColumn: keyColumn | helper.method: PUT / response: responseContainer: 'commercialOrderDto' / info: helper: getUpdateProvider | helperArgs: {\n  url: 'orderManagement/commercialOrders',\n  keyColumn,\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response. responseContainer: 'commercialOrderDto'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "commercialOrderDto": {
                      "type": "object",
                      "properties": {
                        "orderDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "billingAccount": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "quote": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "quoteNumber": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "string"
                            }
                          ]
                        },
                        "orderNumber": {
                          "type": "string"
                        },
                        "orderType": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "string"
                            }
                          ]
                        },
                        "status": {
                          "type": "string"
                        },
                        "orderProgress": {
                          "type": "string"
                        },
                        "label": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "searchBar": {
                          "type": "string"
                        },
                        "salesPersonName": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.keyColumn: keyColumn\nhelper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.keyColumn: keyColumn\nhelper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'orderManagement/commercialOrders',\n  keyColumn,\n  method: 'PUT'\n}"
        ]
      }
    },
    "/v2/generic/order/{id}": {
      "delete": {
        "tags": [
          "B2B-customer-care/orders"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/B2B-customer-care/modules/orders/provider/provider.js#L95) -> v2/generic/order/:id | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/generic/order/:id',\n  responseContainer: 'data',\n  nestedEntities\n}\n- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/orders/provider/provider.js#L102) -> v2/generic/order/:id | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/generic/order/:id',\n  responseContainer: 'data',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "orderDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "billingAccount": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "quote": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "quoteNumber": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "string"
                            }
                          ]
                        },
                        "orderNumber": {
                          "type": "string"
                        },
                        "orderType": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "string"
                            }
                          ]
                        },
                        "status": {
                          "type": "string"
                        },
                        "orderProgress": {
                          "type": "string"
                        },
                        "label": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "searchBar": {
                          "type": "string"
                        },
                        "salesPersonName": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'v2/generic/order/:id',\n  responseContainer: 'data',\n  nestedEntities\n}"
        ]
      }
    },
    "/orderManagement/commercialOrders/{id}/duplication": {
      "get": {
        "tags": [
          "B2B-customer-care/orders"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- DUPLICATE (src/srcProject/layout/B2B-customer-care/modules/orders/provider/provider.js#L109) -> orderManagement/commercialOrders/:id/duplication",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "orderDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "billingAccount": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "quote": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "quoteNumber": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "orderNumber": {
                      "type": "string"
                    },
                    "orderType": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "status": {
                      "type": "string"
                    },
                    "orderProgress": {
                      "type": "string"
                    },
                    "label": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "searchBar": {
                      "type": "string"
                    },
                    "salesPersonName": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orderManagement/commercialOrders/{id}/orderValidation": {
      "get": {
        "tags": [
          "B2B-customer-care/orders"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- VALIDATE (src/srcProject/layout/B2B-customer-care/modules/orders/provider/provider.js#L112) -> orderManagement/commercialOrders/:id/orderValidation",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "orderDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "billingAccount": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "quote": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "quoteNumber": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "orderNumber": {
                      "type": "string"
                    },
                    "orderType": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "status": {
                      "type": "string"
                    },
                    "orderProgress": {
                      "type": "string"
                    },
                    "label": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "searchBar": {
                      "type": "string"
                    },
                    "salesPersonName": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/orderManagement/commercialOrders/{id}/status/{newStatus}": {
      "put": {
        "tags": [
          "B2B-customer-care/orders"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE_STATUS (src/srcProject/layout/B2B-customer-care/modules/orders/provider/provider.js#L115) -> orderManagement/commercialOrders/:id/status/:newStatus | request: options: {\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "orderDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "billingAccount": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "quote": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "quoteNumber": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "orderNumber": {
                      "type": "string"
                    },
                    "orderType": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "status": {
                      "type": "string"
                    },
                    "orderProgress": {
                      "type": "string"
                    },
                    "label": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "searchBar": {
                      "type": "string"
                    },
                    "salesPersonName": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        }
      }
    },
    "/orderManagement/commercialOrders/{commercialOrderId}/orderProgress/{progress}": {
      "put": {
        "tags": [
          "B2B-customer-care/orders"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE_PROGRESS (src/srcProject/layout/B2B-customer-care/modules/orders/provider/provider.js#L121) -> orderManagement/commercialOrders/:commercialOrderId/orderProgress/:progress | request: options: {\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "orderDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "billingAccount": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "quote": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "quoteNumber": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "orderNumber": {
                      "type": "string"
                    },
                    "orderType": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "status": {
                      "type": "string"
                    },
                    "orderProgress": {
                      "type": "string"
                    },
                    "label": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "searchBar": {
                      "type": "string"
                    },
                    "salesPersonName": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        }
      }
    },
    "/orderManagement/orderTypes": {
      "post": {
        "tags": [
          "B2B-customer-care/orders"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- ADD_ORDER_TYPE (src/srcProject/layout/B2B-customer-care/modules/orders/provider/provider.js#L127) -> orderManagement/orderTypes | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "orderDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "billingAccount": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "quote": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "quoteNumber": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "orderNumber": {
                      "type": "string"
                    },
                    "orderType": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "description": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "status": {
                      "type": "string"
                    },
                    "orderProgress": {
                      "type": "string"
                    },
                    "label": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "searchBar": {
                      "type": "string"
                    },
                    "salesPersonName": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/generic/all/paymentMethod": {
      "post": {
        "tags": [
          "B2B-customer-care/payment-methods"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/payment-methods/provider/provider.js#L27) -> v2/generic/all/paymentMethod | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/paymentMethod',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/payment-methods/provider/provider.js#L38) -> v2/generic/all/paymentMethod | request: helper.nestedEntities: nestedEntities | helper.genericFields: genericFields / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/paymentMethod',\n  responseContainer: 'data',\n  nestedEntities,\n  genericFields\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/B2B-customer-care/modules/payment-methods/provider/provider.js#L46) -> v2/generic/all/paymentMethod | request: helper.nestedEntities: nestedEntities | helper.genericFields: genericFields / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/paymentMethod',\n  responseContainer: 'data',\n  nestedEntities,\n  genericFields\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities\nhelper.genericFields: genericFields",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities\nhelper.genericFields: genericFields"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/paymentMethod',\n  nestedEntities\n}",
          "helperArgs: {\n  url: 'v2/generic/all/paymentMethod',\n  responseContainer: 'data',\n  nestedEntities,\n  genericFields\n}"
        ]
      }
    },
    "/v2/generic/paymentMethod/": {
      "post": {
        "tags": [
          "B2B-customer-care/payment-methods"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/payment-methods/provider/provider.js#L31) -> v2/generic/paymentMethod/ | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/paymentMethod/',\n  responseContainer: 'data',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/paymentMethod/',\n  responseContainer: 'data',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/all/PaymentPlan": {
      "post": {
        "tags": [
          "B2B-customer-care/payment-plans"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/payment-plans/provider/provider.js#L195) -> v2/generic/all/PaymentPlan | request: prepareParams: prepareParams | helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/PaymentPlan',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/payment-plans/provider/provider.js#L206) -> v2/generic/all/PaymentPlan | request: prepareParams: prepareParams | helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/PaymentPlan',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/B2B-customer-care/modules/payment-plans/provider/provider.js#L230) -> v2/generic/all/PaymentPlan | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/PaymentPlan',\n  responseContainer: 'data',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "prepareParams: prepareParams\nhelper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: prepareParams\nhelper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/PaymentPlan',\n  responseContainer: 'data',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/PaymentPlan/": {
      "post": {
        "tags": [
          "B2B-customer-care/payment-plans"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/payment-plans/provider/provider.js#L217) -> v2/generic/PaymentPlan/ | request: helper.nestedEntities: nestedEntities | helper.prepareParams: prepareParams | helper.transformResponse: transformResponse / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/PaymentPlan/',\n  responseContainer: 'data',\n  nestedEntities,\n  // otherParams: {\n  //   sortBy: 'serviceInstance.chargeInstances.id'\n  // }\n  prepareParams,\n  //transformResponse: getOneTestData\n  transformResponse\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities\nhelper.prepareParams: prepareParams\nhelper.transformResponse: transformResponse",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities\nhelper.prepareParams: prepareParams\nhelper.transformResponse: transformResponse"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/PaymentPlan/',\n  responseContainer: 'data',\n  nestedEntities,\n  // otherParams: {\n  //   sortBy: 'serviceInstance.chargeInstances.id'\n  // }\n  prepareParams,\n  //transformResponse: getOneTestData\n  transformResponse\n}"
        ]
      }
    },
    "/v2/payment-plan/": {
      "post": {
        "tags": [
          "B2B-customer-care/payment-plans"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/payment-plans/provider/provider.js#L237) -> v2/payment-plan/ | request: helper.method: POST / response: helper.responseContainerId: entityId / info: helper: getCreateProvider | helperArgs: {\n  url: 'v2/payment-plan/',\n  responseContainerId: 'entityId',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainerId: entityId"
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/payment-plan/',\n  responseContainerId: 'entityId',\n  method: 'POST'\n}"
        ]
      },
      "delete": {
        "tags": [
          "B2B-customer-care/payment-plans"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/B2B-customer-care/modules/payment-plans/provider/provider.js#L257) -> v2/payment-plan/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'v2/payment-plan/',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'v2/payment-plan/',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/payment-plan/{id}": {
      "put": {
        "tags": [
          "B2B-customer-care/payment-plans"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/B2B-customer-care/modules/payment-plans/provider/provider.js#L247) -> v2/payment-plan/:id | request: helper.method: PUT / info: excludeProperties: ['id'] | helper: getUpdateProvider | helperArgs: {\n  url: 'v2/payment-plan/:id',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "excludeProperties: ['id']",
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'v2/payment-plan/:id',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/v2/payment-plan/{id}/activate": {
      "put": {
        "tags": [
          "B2B-customer-care/payment-plans"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- ACTIVATE (src/srcProject/layout/B2B-customer-care/modules/payment-plans/provider/provider.js#L265) -> v2/payment-plan/:id/activate | request: options: {\n  method: 'PUT'\n} / info: excludeProperties: ['id', 'undefined']",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "excludeProperties: ['id', 'undefined']"
        ]
      }
    },
    "/v2/payment-plan": {
      "post": {
        "tags": [
          "B2B-customer-care/payment-plans"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE_PAYMENT_PLAN (src/srcProject/layout/B2B-customer-care/modules/payment-plans/provider/provider.js#L273) -> v2/payment-plan | request: options: {\n  method: 'POST'\n} / response: responseContainer: ''",
        "responses": {
          "200": {
            "description": "Successful response. responseContainer: ''"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/generic/all/paymentScheduleInstance": {
      "post": {
        "tags": [
          "B2B-customer-care/payment-schedule"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/payment-schedule/provider/provider.js#L13) -> v2/generic/all/paymentScheduleInstance | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/paymentScheduleInstance',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/payment-schedule/provider/provider.js#L21) -> v2/generic/all/paymentScheduleInstance | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/paymentScheduleInstance',\n  nestedEntities\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/B2B-customer-care/modules/payment-schedule/provider/provider.js#L29) -> v2/generic/all/paymentScheduleInstance | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/paymentScheduleInstance',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/paymentScheduleInstance',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/paymentScheduleInstance/": {
      "post": {
        "tags": [
          "B2B-customer-care/payment-schedule"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/payment-schedule/provider/provider.js#L37) -> v2/generic/paymentScheduleInstance/ | request: helper.nestedEntities: nestedEntities / info: keyColumn: keyColumn | helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/paymentScheduleInstance/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/paymentScheduleInstance/',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/paymentScheduleInstance/{id}": {
      "put": {
        "tags": [
          "B2B-customer-care/payment-schedule"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/B2B-customer-care/modules/payment-schedule/provider/provider.js#L45) -> v2/generic/paymentScheduleInstance/:id | request: helper.method: PUT / info: keyColumn: keyColumn | helper: getUpdateProvider | helperArgs: {\n  url: 'v2/generic/paymentScheduleInstance/:id',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'v2/generic/paymentScheduleInstance/:id',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/../../inbound/modifMensualisation": {
      "post": {
        "tags": [
          "B2B-customer-care/payment-schedule"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE_PAYMENT_SCHEDULE (src/srcProject/layout/B2B-customer-care/modules/payment-schedule/provider/provider.js#L53) -> ../../inbound/modifMensualisation | request: options: {\n  method: 'POST',\n  errorContainer: 'reason'\n} / info: excludeProperties: ['__cfDefinition', 'undefined', 'schedule_amount', 'code', 'old_amount']",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST',\n  errorContainer: 'reason'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST',\n  errorContainer: 'reason'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "excludeProperties: ['__cfDefinition', 'undefined', 'schedule_amount', 'code', 'old_amount']"
        ]
      }
    },
    "/../../inbound/modifDatePrelev": {
      "get": {
        "tags": [
          "B2B-customer-care/payment-schedule"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- modifDatePrelev (src/srcProject/layout/B2B-customer-care/modules/payment-schedule/provider/provider.js#L90) -> ../../inbound/modifDatePrelev",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/v2/generic/all/accountOperation": {
      "post": {
        "tags": [
          "B2B-customer-care/payments-logs",
          "finance/cash-journal",
          "finance/payments-logs"
        ],
        "summary": "Used in 10 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/payments-logs/provider/provider.js#L230) -> v2/generic/all/accountOperation | request: prepareParams: prepareParams | helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/accountOperation',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/payments-logs/provider/provider.js#L239) -> v2/generic/all/accountOperation | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/accountOperation',\n  responseContainer: 'data',\n  nestedEntities\n}\n- AOS (src/srcProject/layout/B2B-customer-care/modules/payments-logs/provider/provider.js#L246) -> v2/generic/all/accountOperation | request: helper.nestedEntities: nestedEntities | helper.genericFields: ['SUM(amount)', 'customerAccount.id', 'transactionCategory'] | helper.otherParams: {\n  groupBy: ['customerAccount.id', 'transactionCategory']\n} / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/accountOperation',\n  responseContainer: 'data',\n  nestedEntities,\n  genericFields: ['SUM(amount)', 'customerAccount.id', 'transactionCategory'],\n  otherParams: {\n    groupBy: ['customerAccount.id', 'transactionCategory']\n  }\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/B2B-customer-care/modules/payments-logs/provider/provider.js#L266) -> v2/generic/all/accountOperation | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/accountOperation',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/finance/modules/cash-journal/provider/provider.js#L52) -> v2/generic/all/accountOperation | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    currentMonth = false,\n    currentYear = false,\n    lastMonth = false,\n    lastThreeMonths = false,\n    lastYear = false,\n    startingFrom = '',\n    ...restFilter\n  } = filter;\n  const fitlerTransformed = {\n    ...(currentYear ? getCurrentYear('dueDate') : {}),\n    ...(currentMonth ? getCurrentMonth('dueDate') : {}),\n    ...(lastMonth ? getLastMonth('dueDate') : {}),\n    ...(lastThreeMonths ? getLastThreeMonths('dueDate') : {}),\n    ...(lastYear ? getLastYear('dueDate') : {}),\n    ...(!isEmpty(startingFrom) ? getStartingFromDate('dueDate', startingFrom) : {}),\n    ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n      'customerAccount.customer.seller.code': ENGIE_MYPOWER_seller\n    } : {}),\n    ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n      'customerAccount.customer.seller.code': ENGIE_EKKO_seller\n    } : {}),\n    ...restFilter\n  };\n  return {\n    filter: fitlerTransformed,\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/accountOperation',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/finance/modules/cash-journal/provider/provider.js#L91) -> v2/generic/all/accountOperation | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/accountOperation',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/finance/modules/payments-logs/provider/provider.js#L207) -> v2/generic/all/accountOperation | request: prepareParams: prepareParams | helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/accountOperation',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/finance/modules/payments-logs/provider/provider.js#L216) -> v2/generic/all/accountOperation | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/accountOperation',\n  responseContainer: 'data',\n  nestedEntities\n}\n- AOS (src/srcProject/layout/finance/modules/payments-logs/provider/provider.js#L224) -> v2/generic/all/accountOperation | request: helper.nestedEntities: nestedEntities | helper.genericFields: ['SUM(amount)', 'customerAccount.id', 'transactionCategory'] | helper.otherParams: {\n  groupBy: ['customerAccount.id', 'transactionCategory']\n} / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/accountOperation',\n  responseContainer: 'data',\n  nestedEntities,\n  genericFields: ['SUM(amount)', 'customerAccount.id', 'transactionCategory'],\n  otherParams: {\n    groupBy: ['customerAccount.id', 'transactionCategory']\n  }\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/finance/modules/payments-logs/provider/provider.js#L238) -> v2/generic/all/accountOperation | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/accountOperation',\n  responseContainer: 'data',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "customerAccount": {
                                    "anyOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "code": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      {
                                        "type": "string"
                                      }
                                    ]
                                  },
                                  "caDescriptionOrLastNameFirstName": {
                                    "type": "string"
                                  },
                                  "invoices": {
                                    "type": "object",
                                    "properties": {
                                      "numbers": {
                                        "type": "string"
                                      },
                                      "amountsWithTax": {
                                        "type": "number"
                                      }
                                    }
                                  },
                                  "transactionCategory": {
                                    "type": "string"
                                  },
                                  "type": {
                                    "type": "string"
                                  },
                                  "reference": {
                                    "type": "string"
                                  },
                                  "matchingAmount": {
                                    "type": "number"
                                  },
                                  "paymentInfo5": {
                                    "type": "string"
                                  },
                                  "dueDate": {
                                    "type": "string",
                                    "format": "date"
                                  },
                                  "paymentInfo": {
                                    "type": "string"
                                  },
                                  "transactionDate": {
                                    "type": "string",
                                    "format": "date"
                                  },
                                  "paymentInfo1": {
                                    "type": "string"
                                  },
                                  "invoice": {
                                    "type": "string"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "journal": {
                                    "type": "object",
                                    "properties": {
                                      "code": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "invoice": {
                                    "type": "object",
                                    "properties": {
                                      "invoiceNumber": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "dueDate": {
                                    "type": "string"
                                  },
                                  "customerAccount": {
                                    "type": "object",
                                    "properties": {
                                      "code": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "accountingCode": {
                                    "type": "object",
                                    "properties": {
                                      "code": {
                                        "type": "string"
                                      },
                                      "description": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "amountDebit": {
                                    "type": "number"
                                  },
                                  "amountCredit": {
                                    "type": "number"
                                  },
                                  "currentMonth": {
                                    "type": "string"
                                  },
                                  "currentYear": {
                                    "type": "string"
                                  },
                                  "lastMonth": {
                                    "type": "string"
                                  },
                                  "lastThreeMonths": {
                                    "type": "string"
                                  },
                                  "lastYear": {
                                    "type": "string"
                                  },
                                  "startingFrom": {
                                    "type": "string"
                                  },
                                  "betweenDate": {
                                    "type": "string",
                                    "format": "date"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "customerAccount": {
                                    "type": "object",
                                    "properties": {
                                      "code": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "caDescriptionOrLastNameFirstName": {
                                    "type": "string"
                                  },
                                  "invoices": {
                                    "type": "object",
                                    "properties": {
                                      "numbers": {
                                        "type": "string"
                                      },
                                      "amountsWithTax": {
                                        "type": "number"
                                      }
                                    }
                                  },
                                  "transactionCategory": {
                                    "type": "string"
                                  },
                                  "type": {
                                    "type": "string"
                                  },
                                  "reference": {
                                    "type": "string"
                                  },
                                  "matchingAmount": {
                                    "type": "number"
                                  },
                                  "associatedBank": {
                                    "type": "string"
                                  },
                                  "dueDate": {
                                    "type": "string",
                                    "format": "date"
                                  },
                                  "transactionDate": {
                                    "type": "string",
                                    "format": "date"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "customerAccount": {
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "code": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    {
                                      "type": "string"
                                    }
                                  ]
                                },
                                "caDescriptionOrLastNameFirstName": {
                                  "type": "string"
                                },
                                "invoices": {
                                  "type": "object",
                                  "properties": {
                                    "numbers": {
                                      "type": "string"
                                    },
                                    "amountsWithTax": {
                                      "type": "number"
                                    }
                                  }
                                },
                                "transactionCategory": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                },
                                "reference": {
                                  "type": "string"
                                },
                                "matchingAmount": {
                                  "type": "number"
                                },
                                "paymentInfo5": {
                                  "type": "string"
                                },
                                "dueDate": {
                                  "type": "string",
                                  "format": "date"
                                },
                                "paymentInfo": {
                                  "type": "string"
                                },
                                "transactionDate": {
                                  "type": "string",
                                  "format": "date"
                                },
                                "paymentInfo1": {
                                  "type": "string"
                                },
                                "invoice": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "journal": {
                                  "type": "object",
                                  "properties": {
                                    "code": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "invoice": {
                                  "type": "object",
                                  "properties": {
                                    "invoiceNumber": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "dueDate": {
                                  "type": "string"
                                },
                                "customerAccount": {
                                  "type": "object",
                                  "properties": {
                                    "code": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "accountingCode": {
                                  "type": "object",
                                  "properties": {
                                    "code": {
                                      "type": "string"
                                    },
                                    "description": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "amountDebit": {
                                  "type": "number"
                                },
                                "amountCredit": {
                                  "type": "number"
                                },
                                "currentMonth": {
                                  "type": "string"
                                },
                                "currentYear": {
                                  "type": "string"
                                },
                                "lastMonth": {
                                  "type": "string"
                                },
                                "lastThreeMonths": {
                                  "type": "string"
                                },
                                "lastYear": {
                                  "type": "string"
                                },
                                "startingFrom": {
                                  "type": "string"
                                },
                                "betweenDate": {
                                  "type": "string",
                                  "format": "date"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "customerAccount": {
                                  "type": "object",
                                  "properties": {
                                    "code": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "caDescriptionOrLastNameFirstName": {
                                  "type": "string"
                                },
                                "invoices": {
                                  "type": "object",
                                  "properties": {
                                    "numbers": {
                                      "type": "string"
                                    },
                                    "amountsWithTax": {
                                      "type": "number"
                                    }
                                  }
                                },
                                "transactionCategory": {
                                  "type": "string"
                                },
                                "type": {
                                  "type": "string"
                                },
                                "reference": {
                                  "type": "string"
                                },
                                "matchingAmount": {
                                  "type": "number"
                                },
                                "associatedBank": {
                                  "type": "string"
                                },
                                "dueDate": {
                                  "type": "string",
                                  "format": "date"
                                },
                                "transactionDate": {
                                  "type": "string",
                                  "format": "date"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: prepareParams\nhelper.nestedEntities: nestedEntities\nhelper.genericFields: ['SUM(amount)', 'customerAccount.id', 'transactionCategory']\nhelper.otherParams: {\n  groupBy: ['customerAccount.id', 'transactionCategory']\n}\nprepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    currentMonth = false,\n    currentYear = false,\n    lastMonth = false,\n    lastThreeMonths = false,\n    lastYear = false,\n    startingFrom = '',\n    ...restFilter\n  } = filter;\n  const fitlerTransformed = {\n    ...(currentYear ? getCurrentYear('dueDate') : {}),\n    ...(currentMonth ? getCurrentMonth('dueDate') : {}),\n    ...(lastMonth ? getLastMonth('dueDate') : {}),\n    ...(lastThreeMonths ? getLastThreeMonths('dueDate') : {}),\n    ...(lastYear ? getLastYear('dueDate') : {}),\n    ...(!isEmpty(startingFrom) ? getStartingFromDate('dueDate', startingFrom) : {}),\n    ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n      'customerAccount.customer.seller.code': ENGIE_MYPOWER_seller\n    } : {}),\n    ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n      'customerAccount.customer.seller.code': ENGIE_EKKO_seller\n    } : {}),\n    ...restFilter\n  };\n  return {\n    filter: fitlerTransformed,\n    ...restParams\n  };\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: prepareParams\nhelper.nestedEntities: nestedEntities\nhelper.genericFields: ['SUM(amount)', 'customerAccount.id', 'transactionCategory']\nhelper.otherParams: {\n  groupBy: ['customerAccount.id', 'transactionCategory']\n}\nprepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    currentMonth = false,\n    currentYear = false,\n    lastMonth = false,\n    lastThreeMonths = false,\n    lastYear = false,\n    startingFrom = '',\n    ...restFilter\n  } = filter;\n  const fitlerTransformed = {\n    ...(currentYear ? getCurrentYear('dueDate') : {}),\n    ...(currentMonth ? getCurrentMonth('dueDate') : {}),\n    ...(lastMonth ? getLastMonth('dueDate') : {}),\n    ...(lastThreeMonths ? getLastThreeMonths('dueDate') : {}),\n    ...(lastYear ? getLastYear('dueDate') : {}),\n    ...(!isEmpty(startingFrom) ? getStartingFromDate('dueDate', startingFrom) : {}),\n    ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n      'customerAccount.customer.seller.code': ENGIE_MYPOWER_seller\n    } : {}),\n    ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n      'customerAccount.customer.seller.code': ENGIE_EKKO_seller\n    } : {}),\n    ...restFilter\n  };\n  return {\n    filter: fitlerTransformed,\n    ...restParams\n  };\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/accountOperation',\n  responseContainer: 'data',\n  nestedEntities\n}",
          "helperArgs: {\n  url: 'v2/generic/all/accountOperation',\n  responseContainer: 'data',\n  nestedEntities,\n  genericFields: ['SUM(amount)', 'customerAccount.id', 'transactionCategory'],\n  otherParams: {\n    groupBy: ['customerAccount.id', 'transactionCategory']\n  }\n}",
          "keyColumn: keyColumn",
          "helperArgs: {\n  url: 'v2/generic/all/accountOperation',\n  nestedEntities\n}"
        ]
      }
    },
    "/accountOperation": {
      "post": {
        "tags": [
          "B2B-customer-care/payments-logs"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/payments-logs/provider/provider.js#L260) -> accountOperation | request: helper.method: POST / info: helper: getCreateProvider | helperArgs: {\n  url: 'accountOperation',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "customerAccount": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "caDescriptionOrLastNameFirstName": {
                      "type": "string"
                    },
                    "invoices": {
                      "type": "object",
                      "properties": {
                        "numbers": {
                          "type": "string"
                        },
                        "amountsWithTax": {
                          "type": "number"
                        }
                      }
                    },
                    "transactionCategory": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "reference": {
                      "type": "string"
                    },
                    "matchingAmount": {
                      "type": "number"
                    },
                    "paymentInfo5": {
                      "type": "string"
                    },
                    "dueDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "paymentInfo": {
                      "type": "string"
                    },
                    "transactionDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "paymentInfo1": {
                      "type": "string"
                    },
                    "invoice": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'accountOperation',\n  method: 'POST'\n}"
        ]
      },
      "put": {
        "tags": [
          "B2B-customer-care/payments-logs"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/B2B-customer-care/modules/payments-logs/provider/provider.js#L263) -> accountOperation | request: helper.method: PUT / info: helper: getCreateProvider | helperArgs: {\n  url: 'accountOperation',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "customerAccount": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "caDescriptionOrLastNameFirstName": {
                      "type": "string"
                    },
                    "invoices": {
                      "type": "object",
                      "properties": {
                        "numbers": {
                          "type": "string"
                        },
                        "amountsWithTax": {
                          "type": "number"
                        }
                      }
                    },
                    "transactionCategory": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    },
                    "reference": {
                      "type": "string"
                    },
                    "matchingAmount": {
                      "type": "number"
                    },
                    "paymentInfo5": {
                      "type": "string"
                    },
                    "dueDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "paymentInfo": {
                      "type": "string"
                    },
                    "transactionDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "paymentInfo1": {
                      "type": "string"
                    },
                    "invoice": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'accountOperation',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/payment": {
      "post": {
        "tags": [
          "B2B-customer-care/payments-logs",
          "finance/payments-logs"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- INVOICE_PAYMENT (src/srcProject/layout/B2B-customer-care/modules/payments-logs/provider/provider.js#L273) -> payment | request: options: {\n  method: 'POST'\n} / info: excludeProperties: ['payment_method', 'payment_total', '__cfDefinition', 'undefined', 'selectedItems', 'check_reference', 'check_duedate', 'check_amount', 'check_holder', 'check_holder_address', 'bank_name', 'aoDate']\n- INVOICE_PAYMENT (src/srcProject/layout/finance/modules/payments-logs/provider/provider.js#L245) -> payment | request: options: {\n  method: 'POST'\n} / info: excludeProperties: ['payment_method', 'payment_total', '__cfDefinition', 'undefined', 'selectedItems', 'check_reference', 'check_duedate', 'check_amount', 'check_holder', 'check_holder_address', 'bank_name', 'aoDate']",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "customerAccount": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "string"
                            }
                          ]
                        },
                        "caDescriptionOrLastNameFirstName": {
                          "type": "string"
                        },
                        "invoices": {
                          "type": "object",
                          "properties": {
                            "numbers": {
                              "type": "string"
                            },
                            "amountsWithTax": {
                              "type": "number"
                            }
                          }
                        },
                        "transactionCategory": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string"
                        },
                        "reference": {
                          "type": "string"
                        },
                        "matchingAmount": {
                          "type": "number"
                        },
                        "paymentInfo5": {
                          "type": "string"
                        },
                        "dueDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "paymentInfo": {
                          "type": "string"
                        },
                        "transactionDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "paymentInfo1": {
                          "type": "string"
                        },
                        "invoice": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "customerAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "caDescriptionOrLastNameFirstName": {
                          "type": "string"
                        },
                        "invoices": {
                          "type": "object",
                          "properties": {
                            "numbers": {
                              "type": "string"
                            },
                            "amountsWithTax": {
                              "type": "number"
                            }
                          }
                        },
                        "transactionCategory": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string"
                        },
                        "reference": {
                          "type": "string"
                        },
                        "matchingAmount": {
                          "type": "number"
                        },
                        "associatedBank": {
                          "type": "string"
                        },
                        "dueDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "transactionDate": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "excludeProperties: ['payment_method', 'payment_total', '__cfDefinition', 'undefined', 'selectedItems', 'check_reference', 'check_duedate', 'check_amount', 'check_holder', 'check_holder_address', 'bank_name', 'aoDate']"
        ]
      }
    },
    "/v2/accountReceivable/deferralPayments": {
      "post": {
        "tags": [
          "B2B-customer-care/payments-logs",
          "finance/payments-logs"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DEFERRAL_PAYMENT (src/srcProject/layout/B2B-customer-care/modules/payments-logs/provider/provider.js#L380) -> v2/accountReceivable/deferralPayments | request: options: {\n  method: 'POST'\n} / info: excludeProperties: ['undefined', 'selectedItems', 'selectedDate']\n- DEFERRAL_PAYMENT (src/srcProject/layout/finance/modules/payments-logs/provider/provider.js#L323) -> v2/accountReceivable/deferralPayments | request: options: {\n  method: 'POST'\n} / info: excludeProperties: ['undefined', 'selectedItems', 'selectedDate']",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "customerAccount": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "string"
                            }
                          ]
                        },
                        "caDescriptionOrLastNameFirstName": {
                          "type": "string"
                        },
                        "invoices": {
                          "type": "object",
                          "properties": {
                            "numbers": {
                              "type": "string"
                            },
                            "amountsWithTax": {
                              "type": "number"
                            }
                          }
                        },
                        "transactionCategory": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string"
                        },
                        "reference": {
                          "type": "string"
                        },
                        "matchingAmount": {
                          "type": "number"
                        },
                        "paymentInfo5": {
                          "type": "string"
                        },
                        "dueDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "paymentInfo": {
                          "type": "string"
                        },
                        "transactionDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "paymentInfo1": {
                          "type": "string"
                        },
                        "invoice": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "customerAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "caDescriptionOrLastNameFirstName": {
                          "type": "string"
                        },
                        "invoices": {
                          "type": "object",
                          "properties": {
                            "numbers": {
                              "type": "string"
                            },
                            "amountsWithTax": {
                              "type": "number"
                            }
                          }
                        },
                        "transactionCategory": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string"
                        },
                        "reference": {
                          "type": "string"
                        },
                        "matchingAmount": {
                          "type": "number"
                        },
                        "associatedBank": {
                          "type": "string"
                        },
                        "dueDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "transactionDate": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "excludeProperties: ['undefined', 'selectedItems', 'selectedDate']"
        ]
      }
    },
    "/v2/generic/all/PointOfDelivery": {
      "post": {
        "tags": [
          "B2B-customer-care/point-of-delivery"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/point-of-delivery/provider/provider.js#L11) -> v2/generic/all/PointOfDelivery | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'id' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/PointOfDelivery',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'id'\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/point-of-delivery/provider/provider.js#L26) -> v2/generic/all/PointOfDelivery | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/PointOfDelivery',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/B2B-customer-care/modules/point-of-delivery/provider/provider.js#L34) -> v2/generic/all/PointOfDelivery | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'id' / response: helper.responseContainer: data / info: withInList: false | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/PointOfDelivery',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'id'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "addressStreet": {
                            "type": "string"
                          },
                          "zipCode": {
                            "type": "string"
                          },
                          "city": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: 'id'\nhelper.keyColumn: 'code'",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: 'id'\nhelper.keyColumn: 'code'"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/PointOfDelivery',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'id'\n}",
          "helperArgs: {\n  url: 'v2/generic/all/PointOfDelivery',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'code'\n}",
          "withInList: false"
        ]
      }
    },
    "/v2/generic/PointOfDelivery/": {
      "post": {
        "tags": [
          "B2B-customer-care/point-of-delivery"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/point-of-delivery/provider/provider.js#L19) -> v2/generic/PointOfDelivery/ | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/PointOfDelivery/',\n  responseContainer: 'data',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "addressStreet": {
                          "type": "string"
                        },
                        "zipCode": {
                          "type": "string"
                        },
                        "city": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/PointOfDelivery/',\n  responseContainer: 'data',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/all/serviceInstance": {
      "post": {
        "tags": [
          "B2B-customer-care/product-instance",
          "B2B-customer-care/service-instances"
        ],
        "summary": "Used in 4 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/product-instance/provider/provider.js#L20) -> v2/generic/all/serviceInstance | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/serviceInstance',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/product-instance/provider/provider.js#L26) -> v2/generic/all/serviceInstance | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/serviceInstance',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/service-instances/provider/provider.js#L6) -> v2/generic/all/serviceInstance | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/serviceInstance',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/service-instances/provider/provider.js#L9) -> v2/generic/all/serviceInstance | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/serviceInstance',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/serviceInstance',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/serviceInstance/": {
      "post": {
        "tags": [
          "B2B-customer-care/product-instance"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/product-instance/provider/provider.js#L32) -> v2/generic/serviceInstance/ | request: helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/serviceInstance/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/serviceInstance/',\n  nestedEntities\n}"
        ]
      }
    },
    "/billing/subscription/updateServices": {
      "put": {
        "tags": [
          "B2B-customer-care/product-instance"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/B2B-customer-care/modules/product-instance/provider/provider.js#L35) -> billing/subscription/updateServices | request: helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  url: 'billing/subscription/updateServices',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'billing/subscription/updateServices',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/billing/subscription/suspendServices": {
      "put": {
        "tags": [
          "B2B-customer-care/product-instance",
          "B2B-customer-care/subscriptions"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- SUSPEND_SERVICE (src/srcProject/layout/B2B-customer-care/modules/product-instance/provider/provider.js#L41) -> billing/subscription/suspendServices | request: options: {\n  method: 'PUT'\n} | bodyParams: {\n  subscriptionCode: '@record.subscriptionCode',\n  serviceToUpdate: '@record.service'\n}\n- SUSPEND_SERVICE (src/srcProject/layout/B2B-customer-care/modules/subscriptions/provider/provider.js#L138) -> billing/subscription/suspendServices | request: options: {\n  method: 'PUT'\n} | bodyParams: {\n  subscriptionCode: '@record.subscriptionCode',\n  serviceToUpdate: '@record.product'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "userAccount": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "description": {
                      "type": "string"
                    },
                    "offer": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "status": {
                      "type": "string"
                    },
                    "subscriptionDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "validity": {
                      "type": "object",
                      "properties": {
                        "from": {
                          "type": "string",
                          "format": "date"
                        },
                        "to": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "versionNumber": {
                      "type": "number"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "searchBar": {
                      "type": "string"
                    },
                    "validityRange": {
                      "type": "string",
                      "format": "date"
                    },
                    "salesPersonName": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}\nbodyParams: {\n  subscriptionCode: '@record.subscriptionCode',\n  serviceToUpdate: '@record.service'\n}\nbodyParams: {\n  subscriptionCode: '@record.subscriptionCode',\n  serviceToUpdate: '@record.product'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "subscriptionCode": {
                        "type": "string",
                        "example": "@record.subscriptionCode"
                      },
                      "serviceToUpdate": {
                        "type": "string",
                        "example": "@record.service"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "subscriptionCode": {
                        "type": "string",
                        "example": "@record.subscriptionCode"
                      },
                      "serviceToUpdate": {
                        "type": "string",
                        "example": "@record.product"
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/billing/subscription/resumeServices": {
      "put": {
        "tags": [
          "B2B-customer-care/product-instance",
          "B2B-customer-care/subscriptions"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- RESUME_SERVICE (src/srcProject/layout/B2B-customer-care/modules/product-instance/provider/provider.js#L51) -> billing/subscription/resumeServices | request: options: {\n  method: 'PUT'\n} | bodyParams: {\n  subscriptionCode: '@record.subscriptionCode',\n  serviceToUpdate: '@record.serviceToUpdate'\n}\n- RESUME_SERVICE (src/srcProject/layout/B2B-customer-care/modules/subscriptions/provider/provider.js#L158) -> billing/subscription/resumeServices | request: options: {\n  method: 'PUT'\n} | bodyParams: {\n  subscriptionCode: '@record.subscriptionCode',\n  serviceToUpdate: '@record.services.service'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "userAccount": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "description": {
                      "type": "string"
                    },
                    "offer": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "status": {
                      "type": "string"
                    },
                    "subscriptionDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "validity": {
                      "type": "object",
                      "properties": {
                        "from": {
                          "type": "string",
                          "format": "date"
                        },
                        "to": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "versionNumber": {
                      "type": "number"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "searchBar": {
                      "type": "string"
                    },
                    "validityRange": {
                      "type": "string",
                      "format": "date"
                    },
                    "salesPersonName": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}\nbodyParams: {\n  subscriptionCode: '@record.subscriptionCode',\n  serviceToUpdate: '@record.serviceToUpdate'\n}\nbodyParams: {\n  subscriptionCode: '@record.subscriptionCode',\n  serviceToUpdate: '@record.services.service'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "subscriptionCode": {
                        "type": "string",
                        "example": "@record.subscriptionCode"
                      },
                      "serviceToUpdate": {
                        "type": "string",
                        "example": "@record.serviceToUpdate"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "subscriptionCode": {
                        "type": "string",
                        "example": "@record.subscriptionCode"
                      },
                      "serviceToUpdate": {
                        "type": "string",
                        "example": "@record.services.service"
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/billing/subscription/activateServices": {
      "post": {
        "tags": [
          "B2B-customer-care/product-instance",
          "B2B-customer-care/subscriptions"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- ACTIVATE_SERVICE (src/srcProject/layout/B2B-customer-care/modules/product-instance/provider/provider.js#L61) -> billing/subscription/activateServices | request: options: {\n  method: 'POST'\n} | bodyParams: {\n  subscription: '@record.subscriptionCode',\n  servicesToActivate: '@record.servicesToActivate'\n}\n- ACTIVATE_SERVICE (src/srcProject/layout/B2B-customer-care/modules/subscriptions/provider/provider.js#L148) -> billing/subscription/activateServices | request: options: {\n  method: 'POST'\n} | bodyParams: {\n  subscription: '@record.subscriptionCode',\n  servicesToActivate: '@record.services'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "userAccount": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "description": {
                      "type": "string"
                    },
                    "offer": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "status": {
                      "type": "string"
                    },
                    "subscriptionDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "validity": {
                      "type": "object",
                      "properties": {
                        "from": {
                          "type": "string",
                          "format": "date"
                        },
                        "to": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "versionNumber": {
                      "type": "number"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "searchBar": {
                      "type": "string"
                    },
                    "validityRange": {
                      "type": "string",
                      "format": "date"
                    },
                    "salesPersonName": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}\nbodyParams: {\n  subscription: '@record.subscriptionCode',\n  servicesToActivate: '@record.servicesToActivate'\n}\nbodyParams: {\n  subscription: '@record.subscriptionCode',\n  servicesToActivate: '@record.services'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "subscription": {
                        "type": "string",
                        "example": "@record.subscriptionCode"
                      },
                      "servicesToActivate": {
                        "type": "string",
                        "example": "@record.servicesToActivate"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "subscription": {
                        "type": "string",
                        "example": "@record.subscriptionCode"
                      },
                      "servicesToActivate": {
                        "type": "string",
                        "example": "@record.services"
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/v2/generic/all/productVersion": {
      "post": {
        "tags": [
          "B2B-customer-care/product-versions",
          "catalog/product-from-attributes",
          "catalog/product-from-product-version"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/product-versions/provider/provider.js#L6) -> v2/generic/all/productVersion | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    product,\n    ...restFilter\n  } = filter;\n  const filterTransformed = {\n    ...restFilter,\n    ...(product ? {\n      product: {\n        code: `*${product.code}*`\n      }\n    } : '')\n  };\n  return {\n    filter: filterTransformed,\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/productVersion',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/catalog/modules/product-from-attributes/provider/provider.js#L19) -> v2/generic/all/productVersion | request: helper.nestedEntities: nestedEntities | helper.genericFields: genericFields / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/productVersion',\n  nestedEntities,\n  genericFields\n}\n- GET_LIST (src/srcProject/layout/catalog/modules/product-from-product-version/provider/provider.js#L20) -> v2/generic/all/productVersion | request: helper.nestedEntities: nestedEntities | helper.genericFields: genericFields / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/productVersion',\n  nestedEntities,\n  genericFields\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data | transformResponse: transformResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "shortDescription": {
                            "type": "string"
                          },
                          "product": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    product,\n    ...restFilter\n  } = filter;\n  const filterTransformed = {\n    ...restFilter,\n    ...(product ? {\n      product: {\n        code: `*${product.code}*`\n      }\n    } : '')\n  };\n  return {\n    filter: filterTransformed,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities\nhelper.genericFields: genericFields",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    product,\n    ...restFilter\n  } = filter;\n  const filterTransformed = {\n    ...restFilter,\n    ...(product ? {\n      product: {\n        code: `*${product.code}*`\n      }\n    } : '')\n  };\n  return {\n    filter: filterTransformed,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities\nhelper.genericFields: genericFields"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/productVersion',\n  nestedEntities\n}",
          "helperArgs: {\n  url: 'v2/generic/all/productVersion',\n  nestedEntities,\n  genericFields\n}"
        ]
      }
    },
    "/v2/generic/product/": {
      "post": {
        "tags": [
          "B2B-customer-care/products",
          "catalog/products"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/products/provider/provider.js#L166) -> v2/generic/product/ | request: helper.sync: true | helper.transformResponse: aggregateCommercialRules | urls[0].params: {\n  nestedEntities\n} / info: helper: getOneV2 | helperArgs: {\n  urls: [{\n    url: 'v2/generic/product/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'commercialRules/productRules?productCode=:@res.code',\n    responseContainer: 'commercialRules',\n    autoAppendId: false\n  }],\n  sync: true,\n  transformResponse: aggregateCommercialRules\n}\n- GET_ONE (src/srcProject/layout/catalog/modules/products/provider/provider.js#L164) -> v2/generic/product/ | request: helper.sync: true | helper.transformResponse: aggregateCommercialRules | urls[0].params: {\n  nestedEntities\n} / info: helper: getOneV2 | helperArgs: {\n  urls: [{\n    url: 'v2/generic/product/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'commercialRules/productRules?productCode=:@res.code',\n    responseContainer: 'commercialRules',\n    autoAppendId: false\n  }],\n  sync: true,\n  transformResponse: aggregateCommercialRules\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "productLine": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "currentVersion": {
                      "type": "object",
                      "properties": {
                        "currentVersion": {
                          "type": "number"
                        },
                        "tags": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "medias": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "name": {
                      "type": "string"
                    },
                    "reference": {
                      "type": "string"
                    },
                    "isModel": {
                      "type": "boolean"
                    },
                    "instanceCode": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.sync: true\nhelper.transformResponse: aggregateCommercialRules\nurls[0].params: {\n  nestedEntities\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "nestedEntities": {
                    "description": "Identifier reference: nestedEntities",
                    "x-expression": "nestedEntities"
                  }
                }
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  urls: [{\n    url: 'v2/generic/product/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'commercialRules/productRules?productCode=:@res.code',\n    responseContainer: 'commercialRules',\n    autoAppendId: false\n  }],\n  sync: true,\n  transformResponse: aggregateCommercialRules\n}"
        ]
      }
    },
    "/commercialRules/productRules": {
      "post": {
        "tags": [
          "B2B-customer-care/products",
          "catalog/products"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/products/provider/provider.js#L166) -> commercialRules/productRules?productCode=:@res.code | request: helper.sync: true | helper.transformResponse: aggregateCommercialRules | urls[1].autoAppendId: false / response: urls[1].responseContainer: commercialRules / info: helper: getOneV2 | helperArgs: {\n  urls: [{\n    url: 'v2/generic/product/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'commercialRules/productRules?productCode=:@res.code',\n    responseContainer: 'commercialRules',\n    autoAppendId: false\n  }],\n  sync: true,\n  transformResponse: aggregateCommercialRules\n}\n- GET_ONE (src/srcProject/layout/catalog/modules/products/provider/provider.js#L164) -> commercialRules/productRules?productCode=:@res.code | request: helper.sync: true | helper.transformResponse: aggregateCommercialRules | urls[1].autoAppendId: false / response: urls[1].responseContainer: commercialRules / info: helper: getOneV2 | helperArgs: {\n  urls: [{\n    url: 'v2/generic/product/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'commercialRules/productRules?productCode=:@res.code',\n    responseContainer: 'commercialRules',\n    autoAppendId: false\n  }],\n  sync: true,\n  transformResponse: aggregateCommercialRules\n}",
        "responses": {
          "200": {
            "description": "Successful response. urls[1].responseContainer: commercialRules",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "commercialRules": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "productLine": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "currentVersion": {
                          "type": "object",
                          "properties": {
                            "currentVersion": {
                              "type": "number"
                            },
                            "tags": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "medias": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "name": {
                          "type": "string"
                        },
                        "reference": {
                          "type": "string"
                        },
                        "isModel": {
                          "type": "boolean"
                        },
                        "instanceCode": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "productCode",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "helper.sync: true\nhelper.transformResponse: aggregateCommercialRules\nurls[1].autoAppendId: false",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.sync: true\nhelper.transformResponse: aggregateCommercialRules\nurls[1].autoAppendId: false"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  urls: [{\n    url: 'v2/generic/product/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'commercialRules/productRules?productCode=:@res.code',\n    responseContainer: 'commercialRules',\n    autoAppendId: false\n  }],\n  sync: true,\n  transformResponse: aggregateCommercialRules\n}"
        ]
      }
    },
    "/v2/generic/product/{productId}": {
      "post": {
        "tags": [
          "B2B-customer-care/products",
          "catalog/products"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- CUSTOM_GET_ONE_PRODUCT (src/srcProject/layout/B2B-customer-care/modules/products/provider/provider.js#L181) -> v2/generic/product/:productId | request: options: {\n  method: 'POST'\n} | bodyParams: {\n  nestedEntities: ['currentVersion.attributes.attribute', 'productVersions.attributes.attribute'],\n  genericFields: []\n} / info: excludeProperties: ['productId']\n- CUSTOM_GET_ONE_PRODUCT (src/srcProject/layout/catalog/modules/products/provider/provider.js#L280) -> v2/generic/product/:productId | request: options: {\n  method: 'POST'\n} | bodyParams: {\n  nestedEntities: ['currentVersion.attributes.attribute', 'productVersions.attributes.attribute'],\n  genericFields: []\n} / info: excludeProperties: ['productId']",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "productLine": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "currentVersion": {
                      "type": "object",
                      "properties": {
                        "currentVersion": {
                          "type": "number"
                        },
                        "tags": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "medias": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "name": {
                      "type": "string"
                    },
                    "reference": {
                      "type": "string"
                    },
                    "isModel": {
                      "type": "boolean"
                    },
                    "instanceCode": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}\nbodyParams: {\n  nestedEntities: ['currentVersion.attributes.attribute', 'productVersions.attributes.attribute'],\n  genericFields: []\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "nestedEntities": {
                    "type": "array",
                    "items": {
                      "anyOf": [
                        {
                          "type": "string",
                          "example": "currentVersion.attributes.attribute"
                        },
                        {
                          "type": "string",
                          "example": "productVersions.attributes.attribute"
                        }
                      ]
                    }
                  },
                  "genericFields": {
                    "type": "array"
                  }
                }
              }
            }
          }
        },
        "x-dev-notes": [
          "excludeProperties: ['productId']"
        ]
      }
    },
    "/infosVendeur/listValidVendeur": {
      "post": {
        "tags": [
          "B2B-customer-care/quotes"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_INFOS_VALID_VENDEUR (src/srcProject/layout/B2B-customer-care/modules/quotes/provider/provider.js#L99) -> infosVendeur/listValidVendeur | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "quoteDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "quoteNumber": {
                      "type": "string"
                    },
                    "applicantAccount": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "status": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "searchBar": {
                      "type": "string"
                    },
                    "salesPersonName": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/billing/ratedTransaction/cancelRatedTransactions": {
      "post": {
        "tags": [
          "B2B-customer-care/rated-transactions"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CANCEL_RATED_TRANSACTIONS (src/srcProject/layout/B2B-customer-care/modules/rated-transactions/provider/provider.js#L37) -> billing/ratedTransaction/cancelRatedTransactions | request: helper.method: POST / info: helper: getCreateProvider | helperArgs: {\n  url: 'billing/ratedTransaction/cancelRatedTransactions',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'billing/ratedTransaction/cancelRatedTransactions',\n  method: 'POST'\n}"
        ]
      }
    },
    "/v2/billing/invoices/basicInvoices": {
      "post": {
        "tags": [
          "B2B-customer-care/related-invoices"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/related-invoices/provider/provider.js#L186) -> v2/billing/invoices/basicInvoices | request: helper.method: POST / info: helper: getCreateProvider | helperArgs: {\n  url: 'v2/billing/invoices/basicInvoices',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/billing/invoices/basicInvoices',\n  method: 'POST'\n}"
        ]
      }
    },
    "/v2/billing/invoices/{id}/cancellation": {
      "put": {
        "tags": [
          "B2B-customer-care/related-invoices",
          "operation/cdr"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- CANCEL (src/srcProject/layout/B2B-customer-care/modules/related-invoices/provider/provider.js#L237) -> v2/billing/invoices/:id/cancellation | request: options: {\n  method: 'PUT'\n}\n- CANCEL (src/srcProject/layout/operation/modules/cdr/provider/provider.js#L350) -> v2/billing/invoices/:id/cancellation | request: options: {\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "eventDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "quantity": {
                      "type": "string"
                    },
                    "accessCode": {
                      "type": "string"
                    },
                    "parameter1": {
                      "type": "string"
                    },
                    "parameter2": {
                      "type": "string"
                    },
                    "parameter3": {
                      "type": "string"
                    },
                    "parameter4": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "motif": {
                      "type": "string"
                    },
                    "searchBar": {
                      "type": "string"
                    },
                    "items": {
                      "type": "string"
                    },
                    "parameter": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    },
                    "parameter5": {
                      "type": "string"
                    },
                    "parameter6": {
                      "type": "string"
                    },
                    "parameter7": {
                      "type": "string"
                    },
                    "parameter8": {
                      "type": "string"
                    },
                    "parameter9": {
                      "type": "string"
                    },
                    "dateParam1": {
                      "type": "string",
                      "format": "date"
                    },
                    "dateParam2": {
                      "type": "string",
                      "format": "date"
                    },
                    "dateParam3": {
                      "type": "string",
                      "format": "date"
                    },
                    "dateParam4": {
                      "type": "string",
                      "format": "date"
                    },
                    "dateParam5": {
                      "type": "string",
                      "format": "date"
                    },
                    "decimalParam1": {
                      "type": "string"
                    },
                    "decimalParam2": {
                      "type": "string"
                    },
                    "decimalParam3": {
                      "type": "string"
                    },
                    "decimalParam4": {
                      "type": "string"
                    },
                    "decimalParam5": {
                      "type": "string"
                    },
                    "extraParam": {
                      "type": "string"
                    },
                    "rejectReason": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/generic/all/securityDepositTransaction": {
      "post": {
        "tags": [
          "B2B-customer-care/security-deposit-transactions"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/security-deposit-transactions/provider/provider.js#L28) -> v2/generic/all/securityDepositTransaction | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/securityDepositTransaction',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/security-deposit-transactions/provider/provider.js#L36) -> v2/generic/all/securityDepositTransaction | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/securityDepositTransaction',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/B2B-customer-care/modules/security-deposit-transactions/provider/provider.js#L44) -> v2/generic/all/securityDepositTransaction | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/securityDepositTransaction',\n  responseContainer: 'data',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/securityDepositTransaction',\n  responseContainer: 'data',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/all/SecurityDeposit": {
      "post": {
        "tags": [
          "B2B-customer-care/security-deposits",
          "finance/security-deposits-report"
        ],
        "summary": "Used in 5 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/security-deposits/provider/provider.js#L58) -> v2/generic/all/SecurityDeposit | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/SecurityDeposit',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/security-deposits/provider/provider.js#L67) -> v2/generic/all/SecurityDeposit | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/SecurityDeposit',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/B2B-customer-care/modules/security-deposits/provider/provider.js#L86) -> v2/generic/all/SecurityDeposit | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/SecurityDeposit',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_LIST (src/srcProject/layout/finance/modules/security-deposits-report/provider/provider.js#L28) -> v2/generic/all/SecurityDeposit | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/SecurityDeposit',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/finance/modules/security-deposits-report/provider/provider.js#L35) -> v2/generic/all/SecurityDeposit | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/SecurityDeposit',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "currencyCode": {
                            "type": "string"
                          },
                          "prDescription": {
                            "type": "string"
                          },
                          "code": {
                            "type": "string"
                          },
                          "customerAccount": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string"
                                  }
                                }
                              },
                              {
                                "type": "string"
                              }
                            ]
                          },
                          "serviceInstance": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              }
                            }
                          },
                          "description": {
                            "type": "string"
                          },
                          "status": {
                            "type": "string"
                          },
                          "amount": {
                            "type": "number"
                          },
                          "currentBalance": {
                            "type": "number"
                          },
                          "invoiceReceiptNumber": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/SecurityDeposit',\n  responseContainer: 'data',\n  nestedEntities\n}",
          "helperArgs: {\n  url: 'v2/generic/all/SecurityDeposit',\n  nestedEntities\n}"
        ]
      },
      "get": {
        "tags": [
          "finance/security-deposits-report"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_SUM_CURRENCY (src/srcProject/layout/finance/modules/security-deposits-report/provider/provider.js#L49) -> v2/generic/all/SecurityDeposit | response: responseContainer: 'data'",
        "responses": {
          "200": {
            "description": "Successful response. responseContainer: 'data'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "currencyCode": {
                          "type": "string"
                        },
                        "prDescription": {
                          "type": "string"
                        },
                        "code": {
                          "type": "string"
                        },
                        "customerAccount": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "string"
                            }
                          ]
                        },
                        "serviceInstance": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "description": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "amount": {
                          "type": "number"
                        },
                        "currentBalance": {
                          "type": "number"
                        },
                        "invoiceReceiptNumber": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/generic/SecurityDeposit/": {
      "post": {
        "tags": [
          "B2B-customer-care/security-deposits",
          "finance/security-deposits-report"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/security-deposits/provider/provider.js#L76) -> v2/generic/SecurityDeposit/ | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/SecurityDeposit/',\n  responseContainer: 'data',\n  nestedEntities\n  // otherParams: {\n  //   sortBy: 'serviceInstance.chargeInstances.id'\n  // }\n}\n- GET_ONE (src/srcProject/layout/finance/modules/security-deposits-report/provider/provider.js#L42) -> v2/generic/SecurityDeposit/ | request: helper.keyColumn: keyColumn | helper.nestedEntities: nestedEntitiesDetailed / info: helper: getOneV2 | helperArgs: {\n  keyColumn,\n  url: 'v2/generic/SecurityDeposit/',\n  nestedEntities: nestedEntitiesDetailed\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "currencyCode": {
                          "type": "string"
                        },
                        "prDescription": {
                          "type": "string"
                        },
                        "code": {
                          "type": "string"
                        },
                        "customerAccount": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "string"
                            }
                          ]
                        },
                        "serviceInstance": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "description": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "amount": {
                          "type": "number"
                        },
                        "currentBalance": {
                          "type": "number"
                        },
                        "invoiceReceiptNumber": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: keyColumn\nhelper.nestedEntities: nestedEntitiesDetailed",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: keyColumn\nhelper.nestedEntities: nestedEntitiesDetailed"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/SecurityDeposit/',\n  responseContainer: 'data',\n  nestedEntities\n  // otherParams: {\n  //   sortBy: 'serviceInstance.chargeInstances.id'\n  // }\n}",
          "helper: getOneV2",
          "helperArgs: {\n  keyColumn,\n  url: 'v2/generic/SecurityDeposit/',\n  nestedEntities: nestedEntitiesDetailed\n}"
        ]
      }
    },
    "/v2/securityDeposit": {
      "post": {
        "tags": [
          "B2B-customer-care/security-deposits"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/security-deposits/provider/provider.js#L94) -> v2/securityDeposit | request: helper.method: POST / response: responseContainer: 'newSecurityDeposit' | responseContainerId: responseContainerId / info: keyColumn: keyColumn | helper: getCreateProvider | helperArgs: {\n  url: 'v2/securityDeposit',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response. responseContainer: 'newSecurityDeposit' | responseContainerId: responseContainerId"
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/securityDeposit',\n  method: 'POST'\n}"
        ]
      }
    },
    "/v2/securityDeposit/{id}": {
      "put": {
        "tags": [
          "B2B-customer-care/security-deposits",
          "finance/security-deposits-report"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/B2B-customer-care/modules/security-deposits/provider/provider.js#L103) -> v2/securityDeposit/:id | request: helper.method: PUT / response: responseContainer: 'securityDeposit' | responseContainerId: responseContainerId / info: keyColumn: keyColumn | helper: getUpdateProvider | helperArgs: {\n  url: 'v2/securityDeposit/:id',\n  method: 'PUT'\n}\n- UPDATE (src/srcProject/layout/finance/modules/security-deposits-report/provider/provider.js#L53) -> v2/securityDeposit/:id | request: helper.method: PUT / response: responseContainer: responseContainer | responseContainerId: responseContainerId / info: keyColumn: keyColumn | helper: getUpdateProvider | helperArgs: {\n  url: 'v2/securityDeposit/:id',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response. responseContainer: 'securityDeposit' | responseContainerId: responseContainerId | responseContainer: responseContainer",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "securityDeposit": {
                      "type": "object",
                      "properties": {
                        "currencyCode": {
                          "type": "string"
                        },
                        "prDescription": {
                          "type": "string"
                        },
                        "code": {
                          "type": "string"
                        },
                        "customerAccount": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "string"
                            }
                          ]
                        },
                        "serviceInstance": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "description": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "amount": {
                          "type": "number"
                        },
                        "currentBalance": {
                          "type": "number"
                        },
                        "invoiceReceiptNumber": {
                          "type": "string"
                        }
                      }
                    },
                    "responseContainerId": {
                      "type": "object",
                      "properties": {
                        "currencyCode": {
                          "type": "string"
                        },
                        "prDescription": {
                          "type": "string"
                        },
                        "code": {
                          "type": "string"
                        },
                        "customerAccount": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "string"
                            }
                          ]
                        },
                        "serviceInstance": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "description": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "amount": {
                          "type": "number"
                        },
                        "currentBalance": {
                          "type": "number"
                        },
                        "invoiceReceiptNumber": {
                          "type": "string"
                        }
                      }
                    },
                    "responseContainer": {
                      "type": "object",
                      "properties": {
                        "currencyCode": {
                          "type": "string"
                        },
                        "prDescription": {
                          "type": "string"
                        },
                        "code": {
                          "type": "string"
                        },
                        "customerAccount": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "string"
                            }
                          ]
                        },
                        "serviceInstance": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "description": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "amount": {
                          "type": "number"
                        },
                        "currentBalance": {
                          "type": "number"
                        },
                        "invoiceReceiptNumber": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'v2/securityDeposit/:id',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/v2/securityDeposit/instantiateSecurityDeposit": {
      "post": {
        "tags": [
          "B2B-customer-care/security-deposits"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- INSTANTIATE_ACTION (src/srcProject/layout/B2B-customer-care/modules/security-deposits/provider/provider.js#L112) -> v2/securityDeposit/instantiateSecurityDeposit | request: helper.method: POST / response: responseContainer: 'newSecurityDeposit' | responseContainerId: responseContainerId / info: keyColumn: keyColumn | helper: getCreateProvider | helperArgs: {\n  url: 'v2/securityDeposit/instantiateSecurityDeposit',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response. responseContainer: 'newSecurityDeposit' | responseContainerId: responseContainerId"
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/securityDeposit/instantiateSecurityDeposit',\n  method: 'POST'\n}"
        ]
      }
    },
    "/v2/securityDeposit/credit/{id}": {
      "post": {
        "tags": [
          "B2B-customer-care/security-deposits",
          "finance/security-deposits-report"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- CREDIT_ACTION (src/srcProject/layout/B2B-customer-care/modules/security-deposits/provider/provider.js#L121) -> v2/securityDeposit/credit/:id | request: options: {\n  method: 'POST'\n} / info: excludeProperties: ['id', 'undefined', 'payment_method', 'payment_total', '__cfDefinition', 'selectedItems', 'check_reference', 'check_duedate', 'check_amount', 'check_holder', 'check_holder_address', 'bank_name']\n- CREDIT_ACTION (src/srcProject/layout/finance/modules/security-deposits-report/provider/provider.js#L62) -> v2/securityDeposit/credit/:id | request: options: {\n  method: 'POST'\n} / info: excludeProperties: ['id', 'undefined', 'payment_method', 'payment_total', '__cfDefinition', 'selectedItems', 'check_reference', 'check_duedate', 'check_amount', 'check_holder', 'check_holder_address', 'bank_name']",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "currencyCode": {
                      "type": "string"
                    },
                    "prDescription": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "customerAccount": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "serviceInstance": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "description": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "number"
                    },
                    "currentBalance": {
                      "type": "number"
                    },
                    "invoiceReceiptNumber": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "excludeProperties: ['id', 'undefined', 'payment_method', 'payment_total', '__cfDefinition', 'selectedItems', 'check_reference', 'check_duedate', 'check_amount', 'check_holder', 'check_holder_address', 'bank_name']"
        ]
      }
    },
    "/v2/securityDeposit/refund/{id}": {
      "post": {
        "tags": [
          "B2B-customer-care/security-deposits",
          "finance/security-deposits-report"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- REFUND_ACTION (src/srcProject/layout/B2B-customer-care/modules/security-deposits/provider/provider.js#L141) -> v2/securityDeposit/refund/:id | request: options: {\n  method: 'POST'\n} / info: excludeProperties: ['undefined']\n- REFUND_ACTION (src/srcProject/layout/finance/modules/security-deposits-report/provider/provider.js#L82) -> v2/securityDeposit/refund/:id | request: options: {\n  method: 'POST'\n} / info: excludeProperties: ['undefined']",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "currencyCode": {
                      "type": "string"
                    },
                    "prDescription": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "customerAccount": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "serviceInstance": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "description": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "number"
                    },
                    "currentBalance": {
                      "type": "number"
                    },
                    "invoiceReceiptNumber": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "excludeProperties: ['undefined']"
        ]
      }
    },
    "/v2/securityDeposit/cancel/{id}": {
      "post": {
        "tags": [
          "B2B-customer-care/security-deposits",
          "finance/security-deposits-report"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- CANCEL_ACTION (src/srcProject/layout/B2B-customer-care/modules/security-deposits/provider/provider.js#L148) -> v2/securityDeposit/cancel/:id | request: options: {\n  method: 'POST'\n} / info: excludeProperties: ['undefined']\n- CANCEL_ACTION (src/srcProject/layout/finance/modules/security-deposits-report/provider/provider.js#L89) -> v2/securityDeposit/cancel/:id | request: options: {\n  method: 'POST'\n} / info: excludeProperties: ['undefined']",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "currencyCode": {
                      "type": "string"
                    },
                    "prDescription": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "customerAccount": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "serviceInstance": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "description": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "number"
                    },
                    "currentBalance": {
                      "type": "number"
                    },
                    "invoiceReceiptNumber": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "excludeProperties: ['undefined']"
        ]
      }
    },
    "/v2/generic/all/seller": {
      "post": {
        "tags": [
          "B2B-customer-care/sellers"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/sellers/provider/provider.js#L11) -> v2/generic/all/seller | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    code,\n    description,\n    ...restFilter\n  } = filter;\n  const fitlerTransformed = {\n    ...restFilter,\n    ...(code ? {\n      code: `*${code}*`\n    } : ''),\n    ...(description ? {\n      description: `*${description}*`\n    } : '')\n  };\n  return {\n    filter: fitlerTransformed,\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/seller',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/sellers/provider/provider.js#L38) -> v2/generic/all/seller | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/seller',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'code'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    code,\n    description,\n    ...restFilter\n  } = filter;\n  const fitlerTransformed = {\n    ...restFilter,\n    ...(code ? {\n      code: `*${code}*`\n    } : ''),\n    ...(description ? {\n      description: `*${description}*`\n    } : '')\n  };\n  return {\n    filter: fitlerTransformed,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities\nhelper.keyColumn: 'code'",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    code,\n    description,\n    ...restFilter\n  } = filter;\n  const fitlerTransformed = {\n    ...restFilter,\n    ...(code ? {\n      code: `*${code}*`\n    } : ''),\n    ...(description ? {\n      description: `*${description}*`\n    } : '')\n  };\n  return {\n    filter: fitlerTransformed,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities\nhelper.keyColumn: 'code'"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/seller',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'code'\n}"
        ]
      }
    },
    "/v2/generic/seller/": {
      "post": {
        "tags": [
          "B2B-customer-care/sellers"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/sellers/provider/provider.js#L31) -> v2/generic/seller/ | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/seller/',\n  responseContainer: 'data',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/seller/',\n  responseContainer: 'data',\n  nestedEntities\n}"
        ]
      }
    },
    "/seller/": {
      "delete": {
        "tags": [
          "B2B-customer-care/sellers"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/B2B-customer-care/modules/sellers/provider/provider.js#L53) -> seller/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'seller/',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'seller/',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/generic/seller": {
      "delete": {
        "tags": [
          "B2B-customer-care/sellers"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/sellers/provider/provider.js#L59) -> v2/generic/seller | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/generic/seller',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'v2/generic/seller',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/generic/all/AuditableField": {
      "post": {
        "tags": [
          "B2B-customer-care/service-instance-life-cycle"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/service-instance-life-cycle/provider/provider.js#L13) -> v2/generic/all/AuditableField | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/AuditableField',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/service-instance-life-cycle/provider/provider.js#L19) -> v2/generic/all/AuditableField | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/AuditableField',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "created": {
                            "type": "string"
                          },
                          "actor": {
                            "type": "string"
                          },
                          "changeOrigin": {
                            "type": "string"
                          },
                          "originName": {
                            "type": "string"
                          },
                          "previousState": {
                            "type": "string"
                          },
                          "currentState": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/AuditableField',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/AuditableField/": {
      "post": {
        "tags": [
          "B2B-customer-care/service-instance-life-cycle"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/service-instance-life-cycle/provider/provider.js#L25) -> v2/generic/AuditableField/ | request: helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/AuditableField/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "created": {
                      "type": "string"
                    },
                    "actor": {
                      "type": "string"
                    },
                    "changeOrigin": {
                      "type": "string"
                    },
                    "originName": {
                      "type": "string"
                    },
                    "previousState": {
                      "type": "string"
                    },
                    "currentState": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/AuditableField/',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/all/subscription": {
      "post": {
        "tags": [
          "B2B-customer-care/subscriptions"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/subscriptions/provider/provider.js#L35) -> v2/generic/all/subscription | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    search,\n    ...restFilter\n  } = filter;\n  const transformDateFilters = key => get(filter, key) && {\n    [key]: getGenericFormatDate(get(filter, key))\n  };\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      'or code userAccount.code description': search,\n      ...transformDateFilters('subscriptionDate'),\n      ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n        'seller.code': ENGIE_MYPOWER_seller\n      } : {}),\n      ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n        'seller.code': ENGIE_EKKO_seller\n      } : {})\n    },\n    ...restParams\n  };\n  return transformedFilters;\n} | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/subscription',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/subscriptions/provider/provider.js#L64) -> v2/generic/all/subscription | request: helper.keyColumn: keyColumn | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/subscription',\n  keyColumn,\n  nestedEntities\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/B2B-customer-care/modules/subscriptions/provider/provider.js#L71) -> v2/generic/all/subscription | request: helper.keyColumn: keyColumn | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/subscription',\n  keyColumn,\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "userAccount": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              }
                            }
                          },
                          "description": {
                            "type": "string"
                          },
                          "offer": {
                            "anyOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "type": "string"
                                  }
                                }
                              },
                              {
                                "type": "string"
                              }
                            ]
                          },
                          "status": {
                            "type": "string"
                          },
                          "subscriptionDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "validity": {
                            "type": "object",
                            "properties": {
                              "from": {
                                "type": "string",
                                "format": "date"
                              },
                              "to": {
                                "type": "string",
                                "format": "date"
                              }
                            }
                          },
                          "versionNumber": {
                            "type": "number"
                          },
                          "auditable": {
                            "type": "object",
                            "properties": {
                              "created": {
                                "type": "string",
                                "format": "date"
                              }
                            }
                          },
                          "searchBar": {
                            "type": "string"
                          },
                          "validityRange": {
                            "type": "string",
                            "format": "date"
                          },
                          "salesPersonName": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    search,\n    ...restFilter\n  } = filter;\n  const transformDateFilters = key => get(filter, key) && {\n    [key]: getGenericFormatDate(get(filter, key))\n  };\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      'or code userAccount.code description': search,\n      ...transformDateFilters('subscriptionDate'),\n      ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n        'seller.code': ENGIE_MYPOWER_seller\n      } : {}),\n      ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n        'seller.code': ENGIE_EKKO_seller\n      } : {})\n    },\n    ...restParams\n  };\n  return transformedFilters;\n}\nhelper.nestedEntities: nestedEntities\nhelper.keyColumn: keyColumn",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    search,\n    ...restFilter\n  } = filter;\n  const transformDateFilters = key => get(filter, key) && {\n    [key]: getGenericFormatDate(get(filter, key))\n  };\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      'or code userAccount.code description': search,\n      ...transformDateFilters('subscriptionDate'),\n      ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n        'seller.code': ENGIE_MYPOWER_seller\n      } : {}),\n      ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n        'seller.code': ENGIE_EKKO_seller\n      } : {})\n    },\n    ...restParams\n  };\n  return transformedFilters;\n}\nhelper.nestedEntities: nestedEntities\nhelper.keyColumn: keyColumn"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/subscription',\n  nestedEntities\n}",
          "helperArgs: {\n  url: 'v2/generic/all/subscription',\n  keyColumn,\n  nestedEntities\n}"
        ]
      },
      "get": {
        "tags": [
          "B2B-customer-care/subscriptions"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_SUBSCRIPTIONS (src/srcProject/layout/B2B-customer-care/modules/subscriptions/provider/provider.js#L93) -> v2/generic/all/subscription | response: responseContainer: 'data'",
        "responses": {
          "200": {
            "description": "Successful response. responseContainer: 'data'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "userAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "description": {
                          "type": "string"
                        },
                        "offer": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "string"
                            }
                          ]
                        },
                        "status": {
                          "type": "string"
                        },
                        "subscriptionDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "validity": {
                          "type": "object",
                          "properties": {
                            "from": {
                              "type": "string",
                              "format": "date"
                            },
                            "to": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "versionNumber": {
                          "type": "number"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "searchBar": {
                          "type": "string"
                        },
                        "validityRange": {
                          "type": "string",
                          "format": "date"
                        },
                        "salesPersonName": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/generic/subscription/": {
      "post": {
        "tags": [
          "B2B-customer-care/subscriptions"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/subscriptions/provider/provider.js#L78) -> v2/generic/subscription/ | request: helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/subscription/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "userAccount": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "description": {
                      "type": "string"
                    },
                    "offer": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "status": {
                      "type": "string"
                    },
                    "subscriptionDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "validity": {
                      "type": "object",
                      "properties": {
                        "from": {
                          "type": "string",
                          "format": "date"
                        },
                        "to": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "versionNumber": {
                      "type": "number"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "searchBar": {
                      "type": "string"
                    },
                    "validityRange": {
                      "type": "string",
                      "format": "date"
                    },
                    "salesPersonName": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/subscription/',\n  nestedEntities\n}"
        ]
      }
    },
    "/billing/subscription/subscribeAndInstantiateProducts": {
      "post": {
        "tags": [
          "B2B-customer-care/subscriptions"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/subscriptions/provider/provider.js#L85) -> billing/subscription/subscribeAndInstantiateProducts | request: helper.method: POST / response: helper.responseContainerId: entityId / info: helper: getCreateProvider | helperArgs: {\n  url: 'billing/subscription/subscribeAndInstantiateProducts',\n  method: 'POST',\n  responseContainerId: 'entityId'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainerId: entityId",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "entityId": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "userAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "description": {
                          "type": "string"
                        },
                        "offer": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "string"
                            }
                          ]
                        },
                        "status": {
                          "type": "string"
                        },
                        "subscriptionDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "validity": {
                          "type": "object",
                          "properties": {
                            "from": {
                              "type": "string",
                              "format": "date"
                            },
                            "to": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "versionNumber": {
                          "type": "number"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "searchBar": {
                          "type": "string"
                        },
                        "validityRange": {
                          "type": "string",
                          "format": "date"
                        },
                        "salesPersonName": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'billing/subscription/subscribeAndInstantiateProducts',\n  method: 'POST',\n  responseContainerId: 'entityId'\n}"
        ]
      }
    },
    "/billing/subscription": {
      "put": {
        "tags": [
          "B2B-customer-care/subscriptions"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/B2B-customer-care/modules/subscriptions/provider/provider.js#L97) -> billing/subscription | request: helper.method: PUT / response: helper.responseContainerId: entityId / info: helper: getUpdateProvider | helperArgs: {\n  url: 'billing/subscription',\n  method: 'PUT',\n  responseContainerId: 'entityId'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainerId: entityId",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "entityId": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "userAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "description": {
                          "type": "string"
                        },
                        "offer": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "string"
                            }
                          ]
                        },
                        "status": {
                          "type": "string"
                        },
                        "subscriptionDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "validity": {
                          "type": "object",
                          "properties": {
                            "from": {
                              "type": "string",
                              "format": "date"
                            },
                            "to": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "versionNumber": {
                          "type": "number"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "searchBar": {
                          "type": "string"
                        },
                        "validityRange": {
                          "type": "string",
                          "format": "date"
                        },
                        "salesPersonName": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'billing/subscription',\n  method: 'PUT',\n  responseContainerId: 'entityId'\n}"
        ]
      }
    },
    "/billing/subscription/{id}/delete-si": {
      "delete": {
        "tags": [
          "B2B-customer-care/subscriptions"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- DELETE_SI (src/srcProject/layout/B2B-customer-care/modules/subscriptions/provider/provider.js#L105) -> billing/subscription/:id/delete-si | request: helper.method: DELETE / response: helper.responseContainerId: entityId / info: excludeProperties: ['id'] | helper: getUpdateProvider | helperArgs: {\n  url: 'billing/subscription/:id/delete-si',\n  method: 'DELETE',\n  responseContainerId: 'entityId'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainerId: entityId",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "entityId": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "userAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        },
                        "description": {
                          "type": "string"
                        },
                        "offer": {
                          "anyOf": [
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                }
                              }
                            },
                            {
                              "type": "string"
                            }
                          ]
                        },
                        "status": {
                          "type": "string"
                        },
                        "subscriptionDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "validity": {
                          "type": "object",
                          "properties": {
                            "from": {
                              "type": "string",
                              "format": "date"
                            },
                            "to": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "versionNumber": {
                          "type": "number"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "searchBar": {
                          "type": "string"
                        },
                        "validityRange": {
                          "type": "string",
                          "format": "date"
                        },
                        "salesPersonName": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "excludeProperties: ['id']",
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'billing/subscription/:id/delete-si',\n  method: 'DELETE',\n  responseContainerId: 'entityId'\n}"
        ]
      }
    },
    "/billing/subscription/terminateServices": {
      "post": {
        "tags": [
          "B2B-customer-care/subscriptions"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- TERMINATE_SERVICE (src/srcProject/layout/B2B-customer-care/modules/subscriptions/provider/provider.js#L126) -> billing/subscription/terminateServices | request: options: {\n  method: 'POST'\n} | bodyParams: {\n  terminationDate: '@record.terminationDate',\n  terminationReason: '@record.terminationReason',\n  subscriptionCode: '@record.subscriptionCode',\n  serviceIds: '@record.serviceIds'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "userAccount": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "description": {
                      "type": "string"
                    },
                    "offer": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "status": {
                      "type": "string"
                    },
                    "subscriptionDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "validity": {
                      "type": "object",
                      "properties": {
                        "from": {
                          "type": "string",
                          "format": "date"
                        },
                        "to": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "versionNumber": {
                      "type": "number"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "searchBar": {
                      "type": "string"
                    },
                    "validityRange": {
                      "type": "string",
                      "format": "date"
                    },
                    "salesPersonName": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}\nbodyParams: {\n  terminationDate: '@record.terminationDate',\n  terminationReason: '@record.terminationReason',\n  subscriptionCode: '@record.subscriptionCode',\n  serviceIds: '@record.serviceIds'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "terminationDate": {
                    "type": "string",
                    "example": "@record.terminationDate"
                  },
                  "terminationReason": {
                    "type": "string",
                    "example": "@record.terminationReason"
                  },
                  "subscriptionCode": {
                    "type": "string",
                    "example": "@record.subscriptionCode"
                  },
                  "serviceIds": {
                    "type": "string",
                    "example": "@record.serviceIds"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/billing/subscription/resume": {
      "put": {
        "tags": [
          "B2B-customer-care/subscriptions"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- ACTIVATE (src/srcProject/layout/B2B-customer-care/modules/subscriptions/provider/provider.js#L168) -> billing/subscription/resume | request: options: {\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "userAccount": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "description": {
                      "type": "string"
                    },
                    "offer": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "status": {
                      "type": "string"
                    },
                    "subscriptionDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "validity": {
                      "type": "object",
                      "properties": {
                        "from": {
                          "type": "string",
                          "format": "date"
                        },
                        "to": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "versionNumber": {
                      "type": "number"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "searchBar": {
                      "type": "string"
                    },
                    "validityRange": {
                      "type": "string",
                      "format": "date"
                    },
                    "salesPersonName": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        }
      }
    },
    "/billing/subscription/suspend": {
      "put": {
        "tags": [
          "B2B-customer-care/subscriptions"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- SUSPEND (src/srcProject/layout/B2B-customer-care/modules/subscriptions/provider/provider.js#L174) -> billing/subscription/suspend | request: options: {\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "userAccount": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "description": {
                      "type": "string"
                    },
                    "offer": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "status": {
                      "type": "string"
                    },
                    "subscriptionDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "validity": {
                      "type": "object",
                      "properties": {
                        "from": {
                          "type": "string",
                          "format": "date"
                        },
                        "to": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "versionNumber": {
                      "type": "number"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "searchBar": {
                      "type": "string"
                    },
                    "validityRange": {
                      "type": "string",
                      "format": "date"
                    },
                    "salesPersonName": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/generic/all/taxClass": {
      "post": {
        "tags": [
          "B2B-customer-care/tax-classes"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/tax-classes/provider/provider.js#L11) -> v2/generic/all/taxClass | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/taxClass',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'code'\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/tax-classes/provider/provider.js#L26) -> v2/generic/all/taxClass | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/taxClass',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'code'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: 'code'",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: 'code'"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/taxClass',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'code'\n}"
        ]
      }
    },
    "/v2/generic/taxClass/": {
      "post": {
        "tags": [
          "B2B-customer-care/tax-classes"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/tax-classes/provider/provider.js#L19) -> v2/generic/taxClass/ | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/taxClass/',\n  responseContainer: 'data',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/taxClass/',\n  responseContainer: 'data',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/all/userAccount": {
      "post": {
        "tags": [
          "B2B-customer-care/user-accounts"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/B2B-customer-care/modules/user-accounts/provider/provider.js#L131) -> v2/generic/all/userAccount | request: prepareParams: prepareParams | helper.nestedEntities: nestedEntities | helper.keyColumn: 'id' / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/userAccount',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'id'\n}\n- GET_MANY (src/srcProject/layout/B2B-customer-care/modules/user-accounts/provider/provider.js#L166) -> v2/generic/all/userAccount | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'id' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/userAccount',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'id'\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/B2B-customer-care/modules/user-accounts/provider/provider.js#L174) -> v2/generic/all/userAccount | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'id' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/userAccount',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'id'\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "subscriptionDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "isConsumer": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: prepareParams\nhelper.nestedEntities: nestedEntities\nhelper.keyColumn: 'id'",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: prepareParams\nhelper.nestedEntities: nestedEntities\nhelper.keyColumn: 'id'"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/userAccount',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'id'\n}"
        ]
      }
    },
    "/v2/generic/userAccount/": {
      "post": {
        "tags": [
          "B2B-customer-care/user-accounts"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/user-accounts/provider/provider.js#L141) -> v2/generic/userAccount/ | request: helper.sync: true | helper.transformResponse: transformRecord | urls[0].params: {\n  nestedEntities\n} / info: helper: getOneV2 | helperArgs: {\n  urls: [{\n    url: 'v2/generic/userAccount/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    ...counters.GET_MANY,\n    params: {\n      ...counters.GET_MANY.params,\n      filters: {\n        'counterInstance->userAccount->code': '@responses[0].data.code'\n        // counterLevel: 'UA'\n      }\n    },\n\n    autoAppendId: false\n  }],\n  sync: true,\n  transformResponse: transformRecord\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "subscriptionDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "isConsumer": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.sync: true\nhelper.transformResponse: transformRecord\nurls[0].params: {\n  nestedEntities\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "nestedEntities": {
                    "description": "Identifier reference: nestedEntities",
                    "x-expression": "nestedEntities"
                  }
                }
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  urls: [{\n    url: 'v2/generic/userAccount/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    ...counters.GET_MANY,\n    params: {\n      ...counters.GET_MANY.params,\n      filters: {\n        'counterInstance->userAccount->code': '@responses[0].data.code'\n        // counterLevel: 'UA'\n      }\n    },\n\n    autoAppendId: false\n  }],\n  sync: true,\n  transformResponse: transformRecord\n}"
        ]
      }
    },
    "/account/userAccount": {
      "post": {
        "tags": [
          "B2B-customer-care/user-accounts"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/B2B-customer-care/modules/user-accounts/provider/provider.js#L182) -> account/userAccount | request: helper.method: POST / response: helper.responseContainerId: entityId / info: excludeProperties: excludeProperties | helper: getCreateProvider | helperArgs: {\n  url: 'account/userAccount',\n  method: 'POST',\n  responseContainerId: 'entityId'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainerId: entityId",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "entityId": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "subscriptionDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "isConsumer": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "excludeProperties: excludeProperties",
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'account/userAccount',\n  method: 'POST',\n  responseContainerId: 'entityId'\n}"
        ]
      },
      "put": {
        "tags": [
          "B2B-customer-care/user-accounts"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/B2B-customer-care/modules/user-accounts/provider/provider.js#L190) -> account/userAccount | request: helper.method: PUT / response: responseContainerId: 'entityId' / info: keyColumn: keyColumn | excludeProperties: excludeProperties | helper: getUpdateProvider | helperArgs: {\n  url: 'account/userAccount',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response. responseContainerId: 'entityId'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "entityId": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "subscriptionDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "isConsumer": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "excludeProperties: excludeProperties",
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'account/userAccount',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/account/userAccount/": {
      "delete": {
        "tags": [
          "B2B-customer-care/user-accounts"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/B2B-customer-care/modules/user-accounts/provider/provider.js#L199) -> account/userAccount/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'account/userAccount/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/B2B-customer-care/modules/user-accounts/provider/provider.js#L206) -> account/userAccount/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'account/userAccount/',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "subscriptionDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "isConsumer": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'account/userAccount/',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/generic/user": {
      "post": {
        "tags": [
          "B2B-customer-care/users"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/B2B-customer-care/modules/users/provider/provider.js#L30) -> v2/generic/user | request: helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/user',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userName": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "name": {
                      "type": "object",
                      "properties": {
                        "firstName": {
                          "type": "string"
                        },
                        "lastName": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/user',\n  nestedEntities\n}"
        ]
      }
    },
    "/entityList/all": {
      "post": {
        "tags": [
          "B2B-customer-care/users"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ENTITIES (src/srcProject/layout/B2B-customer-care/modules/users/provider/provider.js#L36) -> entityList/all | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userName": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "name": {
                      "type": "object",
                      "properties": {
                        "firstName": {
                          "type": "string"
                        },
                        "lastName": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/commercialRules/attributeRules": {
      "post": {
        "tags": [
          "catalog/attributes"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/catalog/modules/attributes/provider/provider.js#L95) -> commercialRules/attributeRules?attributeCode=:@res.code | request: helper.sync: true | helper.transformResponse: aggregateCommercialRules | urls[1].autoAppendId: false / response: urls[1].responseContainer: commercialRules / info: helper: getOneV2 | helperArgs: {\n  urls: [{\n    url: 'v2/generic/attribute/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'commercialRules/attributeRules?attributeCode=:@res.code',\n    responseContainer: 'commercialRules',\n    autoAppendId: false\n  }],\n  sync: true,\n  transformResponse: aggregateCommercialRules\n}",
        "responses": {
          "200": {
            "description": "Successful response. urls[1].responseContainer: commercialRules",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "commercialRules": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "attributeType": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "disabled": {
                          "type": "boolean"
                        },
                        "creationDate": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "attributeCode",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "helper.sync: true\nhelper.transformResponse: aggregateCommercialRules\nurls[1].autoAppendId: false",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.sync: true\nhelper.transformResponse: aggregateCommercialRules\nurls[1].autoAppendId: false"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  urls: [{\n    url: 'v2/generic/attribute/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'commercialRules/attributeRules?attributeCode=:@res.code',\n    responseContainer: 'commercialRules',\n    autoAppendId: false\n  }],\n  sync: true,\n  transformResponse: aggregateCommercialRules\n}"
        ]
      }
    },
    "/v2/generic/all/calendar": {
      "post": {
        "tags": [
          "catalog/calendars"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/catalog/modules/calendars/provider.js#L2) -> v2/generic/all/calendar | response: responseContainer: 'data' / info: keyColumn: 'id'\n- GET_MANY (src/srcProject/layout/catalog/modules/calendars/provider.js#L7) -> v2/generic/all/calendar | response: responseContainer: 'data' / info: keyColumn: 'code'\n- GET_MANY_REFERENCE (src/srcProject/layout/catalog/modules/calendars/provider.js#L12) -> v2/generic/all/calendar | response: responseContainer: 'data'",
        "responses": {
          "200": {
            "description": "Successful response. responseContainer: 'data'"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: 'id'",
          "keyColumn: 'code'"
        ]
      }
    },
    "/v2/generic/calendar/": {
      "get": {
        "tags": [
          "catalog/calendars"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/catalog/modules/calendars/provider.js#L16) -> v2/generic/calendar/ | response: responseContainer: 'data'\n- CREATE (src/srcProject/layout/catalog/modules/calendars/provider.js#L20) -> v2/generic/calendar/",
        "responses": {
          "200": {
            "description": "Successful response. responseContainer: 'data'"
          }
        }
      }
    },
    "/v2/generic/calendar/{id}": {
      "put": {
        "tags": [
          "catalog/calendars"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/catalog/modules/calendars/provider.js#L23) -> v2/generic/calendar/:id | request: options: {\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "catalog/calendars"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/catalog/modules/calendars/provider.js#L29) -> v2/generic/calendar/:id | request: options: {\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/catalog/modules/calendars/provider.js#L35) -> v2/generic/calendar/:id | request: options: {\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'DELETE'\n}",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'DELETE'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/generic/all/commercialRuleHeader": {
      "post": {
        "tags": [
          "catalog/commercial-rule-source"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/catalog/modules/commercial-rule-source/provider/provider.js#L25) -> v2/generic/all/commercialRuleHeader | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/commercialRuleHeader',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/catalog/modules/commercial-rule-source/provider/provider.js#L28) -> v2/generic/all/commercialRuleHeader | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/commercialRuleHeader',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "disabled": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/commercialRuleHeader',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/commercialRuleHeader/": {
      "post": {
        "tags": [
          "catalog/commercial-rule-source"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/catalog/modules/commercial-rule-source/provider/provider.js#L32) -> v2/generic/commercialRuleHeader/ | request: helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/commercialRuleHeader/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "disabled": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/commercialRuleHeader/',\n  nestedEntities\n}"
        ]
      }
    },
    "/commercialRules": {
      "post": {
        "tags": [
          "catalog/commercial-rule-source"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/catalog/modules/commercial-rule-source/provider/provider.js#L35) -> commercialRules | request: helper.method: POST / info: helper: getCreateProvider | helperArgs: {\n  url: 'commercialRules',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "disabled": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'commercialRules',\n  method: 'POST'\n}"
        ]
      },
      "put": {
        "tags": [
          "catalog/commercial-rule-source"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/catalog/modules/commercial-rule-source/provider/provider.js#L41) -> commercialRules | request: helper.method: PUT / info: helper: getDeleteProvider | helperArgs: {\n  url: 'commercialRules',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "disabled": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'commercialRules',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/commercialRuleSource/": {
      "delete": {
        "tags": [
          "catalog/commercial-rule-source"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/catalog/modules/commercial-rule-source/provider/provider.js#L47) -> commercialRuleSource/ | request: helper.method: DELETE / info: helper: getUpdateProvider | helperArgs: {\n  url: 'commercialRuleSource/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/catalog/modules/commercial-rule-source/provider/provider.js#L53) -> commercialRuleSource/ | request: helper.method: DELETE / info: helper: getUpdateProvider | helperArgs: {\n  url: 'commercialRuleSource/',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "disabled": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'commercialRuleSource/',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/generic/all/counterTemplate": {
      "post": {
        "tags": [
          "catalog/counters-template"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/catalog/modules/counters-template/provider/provider.js#L23) -> v2/generic/all/counterTemplate | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  return {\n    filter: filter,\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/counterTemplate',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/catalog/modules/counters-template/provider/provider.js#L36) -> v2/generic/all/counterTemplate | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/counterTemplate',\n  nestedEntities\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/catalog/modules/counters-template/provider/provider.js#L44) -> v2/generic/all/counterTemplate | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/counterTemplate',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "startDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "endDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "level": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "accumulator": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  return {\n    filter: filter,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  return {\n    filter: filter,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/counterTemplate',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/counterTemplate/": {
      "post": {
        "tags": [
          "catalog/counters-template"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/catalog/modules/counters-template/provider/provider.js#L53) -> v2/generic/counterTemplate/ | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse / info: keyColumn: keyColumn | helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/counterTemplate/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "startDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "endDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "level": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    },
                    "accumulator": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/counterTemplate/',\n  nestedEntities\n}"
        ]
      }
    },
    "/cpq/contracts/counterTemplate": {
      "post": {
        "tags": [
          "catalog/counters-template"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/catalog/modules/counters-template/provider/provider.js#L62) -> cpq/contracts/counterTemplate | request: helper.method: POST / info: keyColumn: keyColumn | helper: getCreateProvider | helperArgs: {\n  url: 'cpq/contracts/counterTemplate',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "startDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "endDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "level": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    },
                    "accumulator": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'cpq/contracts/counterTemplate',\n  method: 'POST'\n}"
        ]
      },
      "put": {
        "tags": [
          "catalog/counters-template"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/catalog/modules/counters-template/provider/provider.js#L70) -> cpq/contracts/counterTemplate | request: helper.method: PUT / info: keyColumn: keyColumn | helper: getUpdateProvider | helperArgs: {\n  url: 'cpq/contracts/counterTemplate',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "startDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "endDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "level": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    },
                    "accumulator": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'cpq/contracts/counterTemplate',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/cpq/contracts/counterTemplate/{code}": {
      "delete": {
        "tags": [
          "catalog/counters-template"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- DELETE_CONTRACT_LINE (src/srcProject/layout/catalog/modules/counters-template/provider/provider.js#L78) -> cpq/contracts/counterTemplate/:code | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'cpq/contracts/counterTemplate/:code',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "startDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "endDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "level": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    },
                    "accumulator": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'cpq/contracts/counterTemplate/:code',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/generic/all/CustomEntityTemplate": {
      "post": {
        "tags": [
          "catalog/custom-tables"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/catalog/modules/custom-tables/provider/provider.js#L48) -> v2/generic/all/CustomEntityTemplate | request: prepareParams: params => prepareSendedParams(params) | helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/CustomEntityTemplate',\n  responseContainer: 'data',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "search": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: params => prepareSendedParams(params)\nhelper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => prepareSendedParams(params)\nhelper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/CustomEntityTemplate',\n  responseContainer: 'data',\n  nestedEntities\n}"
        ]
      }
    },
    "/entityCustomization/entity/": {
      "post": {
        "tags": [
          "catalog/custom-tables"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/catalog/modules/custom-tables/provider/provider.js#L57) -> entityCustomization/entity/ | request: helper.keyColumn: 'code' / response: helper.responseContainer: customEntityTemplate / info: helper: getOneV2 | helperArgs: {\n  url: 'entityCustomization/entity/',\n  keyColumn: 'code',\n  responseContainer: 'customEntityTemplate'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: customEntityTemplate",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "customEntityTemplate": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "search": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.keyColumn: 'code'",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.keyColumn: 'code'"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'entityCustomization/entity/',\n  keyColumn: 'code',\n  responseContainer: 'customEntityTemplate'\n}"
        ]
      }
    },
    "/v2/generic/all/media": {
      "post": {
        "tags": [
          "catalog/digital-resources"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/catalog/modules/digital-resources/provider/provider.js#L15) -> v2/generic/all/media | request: prepareParams: params => {\n  const {\n    sort = {},\n    ...restParams\n  } = params;\n  const transformSort = get(sort, 'field') === 'currentMedia' ? {\n    ...sort,\n    field: 'mediaType'\n  } : sort;\n  return {\n    sort: {\n      ...transformSort\n    },\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/media',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/catalog/modules/digital-resources/provider/provider.js#L31) -> v2/generic/all/media | request: helper.nestedEntities: nestedEntities | helper.keyColumn: keyColumn / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/media',\n  nestedEntities,\n  keyColumn\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "label": {
                            "type": "string"
                          },
                          "currentMedia": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    sort = {},\n    ...restParams\n  } = params;\n  const transformSort = get(sort, 'field') === 'currentMedia' ? {\n    ...sort,\n    field: 'mediaType'\n  } : sort;\n  return {\n    sort: {\n      ...transformSort\n    },\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities\nhelper.keyColumn: keyColumn",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    sort = {},\n    ...restParams\n  } = params;\n  const transformSort = get(sort, 'field') === 'currentMedia' ? {\n    ...sort,\n    field: 'mediaType'\n  } : sort;\n  return {\n    sort: {\n      ...transformSort\n    },\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities\nhelper.keyColumn: keyColumn"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/media',\n  nestedEntities\n}",
          "helperArgs: {\n  url: 'v2/generic/all/media',\n  nestedEntities,\n  keyColumn\n}"
        ]
      }
    },
    "/v2/generic/media/": {
      "post": {
        "tags": [
          "catalog/digital-resources"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/catalog/modules/digital-resources/provider/provider.js#L39) -> v2/generic/media/ | request: helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/media/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "label": {
                      "type": "string"
                    },
                    "currentMedia": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/media/',\n  nestedEntities\n}"
        ]
      }
    },
    "/media": {
      "post": {
        "tags": [
          "catalog/digital-resources"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/catalog/modules/digital-resources/provider/provider.js#L43) -> media | request: helper.method: POST / response: helper.responseContainer: mediaDto / info: helper: getCreateProvider | helperArgs: {\n  url: 'media',\n  method: 'POST',\n  responseContainer: 'mediaDto'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: mediaDto",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "mediaDto": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "label": {
                          "type": "string"
                        },
                        "currentMedia": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'media',\n  method: 'POST',\n  responseContainer: 'mediaDto'\n}"
        ]
      },
      "put": {
        "tags": [
          "catalog/digital-resources"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/catalog/modules/digital-resources/provider/provider.js#L51) -> media | request: helper.method: PUT / response: helper.responseContainer: dmediaDto / info: helper: getDeleteProvider | helperArgs: {\n  url: 'media',\n  method: 'PUT',\n  responseContainer: 'dmediaDto'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: dmediaDto",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "dmediaDto": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "label": {
                          "type": "string"
                        },
                        "currentMedia": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'media',\n  method: 'PUT',\n  responseContainer: 'dmediaDto'\n}"
        ]
      }
    },
    "/media/": {
      "delete": {
        "tags": [
          "catalog/digital-resources"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/catalog/modules/digital-resources/provider/provider.js#L59) -> media/ | request: helper.method: DELETE / info: helper: getUpdateProvider | helperArgs: {\n  url: 'media/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/catalog/modules/digital-resources/provider/provider.js#L66) -> media/ | request: helper.method: DELETE / info: helper: getUpdateProvider | helperArgs: {\n  url: 'media/',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "label": {
                      "type": "string"
                    },
                    "currentMedia": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'media/',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/media/files/upload": {
      "post": {
        "tags": [
          "catalog/digital-resources"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPLOAD (src/srcProject/layout/catalog/modules/digital-resources/provider/provider.js#L73) -> v2/media/files/upload | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "label": {
                      "type": "string"
                    },
                    "currentMedia": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/generic/all/meveoInstance": {
      "post": {
        "tags": [
          "catalog/environments-instances"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/catalog/modules/environments-instances/provider.js#L24) -> v2/generic/all/meveoInstance | request: helper.genericFields: genericFields / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/meveoInstance',\n  genericFields\n}\n- GET_MANY (src/srcProject/layout/catalog/modules/environments-instances/provider.js#L31) -> v2/generic/all/meveoInstance | request: helper.genericFields: genericFields / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/meveoInstance',\n  genericFields\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.genericFields: genericFields",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.genericFields: genericFields"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/meveoInstance',\n  genericFields\n}"
        ]
      }
    },
    "/v2/catalog/priceManagement/pricePlanMatrixVersions/export": {
      "post": {
        "tags": [
          "catalog/export-mass-action",
          "catalog/matrix-lines"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- EXPORT (src/srcProject/layout/catalog/modules/export-mass-action/provider/provider.js#L60) -> v2/catalog/priceManagement/pricePlanMatrixVersions/export | request: options: {\n  method: 'POST'\n}\n- EXPORT_MATRIX_LINES (src/srcProject/layout/catalog/modules/matrix-lines/provider/provider.js#L99) -> v2/catalog/priceManagement/pricePlanMatrixVersions/export | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "version": {
                      "type": "string"
                    },
                    "startDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "endDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "priority": {
                      "type": "string"
                    },
                    "price": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/generic/all/runResults": {
      "post": {
        "tags": [
          "catalog/history-mass-action"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/catalog/modules/history-mass-action/provider/provider.js#L12) -> v2/generic/all/runResults | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/runResults',\n  responseContainer: 'data',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/catalog/modules/history-mass-action/provider/provider.js#L19) -> v2/generic/all/runResults | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/runResults',\n  responseContainer: 'data',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/runResults',\n  responseContainer: 'data',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/invoicingPlan/": {
      "post": {
        "tags": [
          "catalog/history-mass-action"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/catalog/modules/history-mass-action/provider/provider.js#L26) -> v2/generic/invoicingPlan/ | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'id' / response: helper.responseContainer: data / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/invoicingPlan/',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'id'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: 'id'",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: 'id'"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/invoicingPlan/',\n  responseContainer: 'data',\n  nestedEntities,\n  keyColumn: 'id'\n}"
        ]
      }
    },
    "/v2/generic/all/PricePlanMatrixColumn": {
      "post": {
        "tags": [
          "catalog/matrix-columns"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/catalog/modules/matrix-columns/provider/provider.js#L22) -> v2/generic/all/PricePlanMatrixColumn | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/PricePlanMatrixColumn',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/catalog/modules/matrix-columns/provider/provider.js#L28) -> v2/generic/all/PricePlanMatrixColumn | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/PricePlanMatrixColumn',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "version": {
                            "type": "string"
                          },
                          "startDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "endDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "priority": {
                            "type": "string"
                          },
                          "price": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/PricePlanMatrixColumn',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/pricePlanMatrixVersion/": {
      "post": {
        "tags": [
          "catalog/matrix-columns",
          "catalog/price-matrix"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/catalog/modules/matrix-columns/provider/provider.js#L35) -> v2/generic/pricePlanMatrixVersion/ | request: helper.nestedEntities: ['columns.attribute', 'lines.pricePlanMatrixValues.pricePlanMatrixColumn', 'pricePlanMatrix'] / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/pricePlanMatrixVersion/',\n  // Not a typo, we're loading the columns from the version (!)\n  nestedEntities: ['columns.attribute', 'lines.pricePlanMatrixValues.pricePlanMatrixColumn', 'pricePlanMatrix']\n}\n- GET_ONE (src/srcProject/layout/catalog/modules/price-matrix/provider/provider.js#L69) -> v2/generic/pricePlanMatrixVersion/ | request: helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/pricePlanMatrixVersion/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "version": {
                          "type": "string"
                        },
                        "startDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "endDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "priority": {
                          "type": "string"
                        },
                        "price": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "currentVersion": {
                          "type": "number"
                        },
                        "label": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "validity": {
                          "type": "object",
                          "properties": {
                            "from": {
                              "type": "string",
                              "format": "date"
                            },
                            "to": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "matrix": {
                          "type": "string"
                        },
                        "amountWithoutTax": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: ['columns.attribute', 'lines.pricePlanMatrixValues.pricePlanMatrixColumn', 'pricePlanMatrix']\nhelper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: ['columns.attribute', 'lines.pricePlanMatrixValues.pricePlanMatrixColumn', 'pricePlanMatrix']\nhelper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/pricePlanMatrixVersion/',\n  // Not a typo, we're loading the columns from the version (!)\n  nestedEntities: ['columns.attribute', 'lines.pricePlanMatrixValues.pricePlanMatrixColumn', 'pricePlanMatrix']\n}",
          "helperArgs: {\n  url: 'v2/generic/pricePlanMatrixVersion/',\n  nestedEntities\n}"
        ]
      }
    },
    "/{deleteUrl}": {
      "delete": {
        "tags": [
          "catalog/matrix-columns"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/catalog/modules/matrix-columns/provider/provider.js#L60) -> {deleteUrl} | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: deleteUrl,\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/catalog/modules/matrix-columns/provider/provider.js#L67) -> {deleteUrl} | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: deleteUrl,\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "version": {
                      "type": "string"
                    },
                    "startDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "endDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "priority": {
                      "type": "string"
                    },
                    "price": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: deleteUrl,\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/generic/all/pricePlanMatrixLine": {
      "post": {
        "tags": [
          "catalog/matrix-lines"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/catalog/modules/matrix-lines/provider/provider.js#L12) -> v2/generic/all/pricePlanMatrixLine | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/pricePlanMatrixLine',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/catalog/modules/matrix-lines/provider/provider.js#L18) -> v2/generic/all/pricePlanMatrixLine | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/pricePlanMatrixLine',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "version": {
                            "type": "string"
                          },
                          "startDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "endDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "priority": {
                            "type": "string"
                          },
                          "price": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/pricePlanMatrixLine',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/pricePlanMatrixLine/": {
      "post": {
        "tags": [
          "catalog/matrix-lines"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/catalog/modules/matrix-lines/provider/provider.js#L25) -> v2/generic/pricePlanMatrixLine/ | request: helper.nestedEntities: ['columns.attribute', 'pricePlanMatrix'] / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/pricePlanMatrixLine/',\n  nestedEntities: ['columns.attribute', 'pricePlanMatrix']\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "version": {
                      "type": "string"
                    },
                    "startDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "endDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "priority": {
                      "type": "string"
                    },
                    "price": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: ['columns.attribute', 'pricePlanMatrix']",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: ['columns.attribute', 'pricePlanMatrix']"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/pricePlanMatrixLine/',\n  nestedEntities: ['columns.attribute', 'pricePlanMatrix']\n}"
        ]
      }
    },
    "/catalog/pricePlan/pricePlanMatrixLines/": {
      "delete": {
        "tags": [
          "catalog/matrix-lines"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/catalog/modules/matrix-lines/provider/provider.js#L57) -> catalog/pricePlan/pricePlanMatrixLines/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'catalog/pricePlan/pricePlanMatrixLines/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/catalog/modules/matrix-lines/provider/provider.js#L64) -> catalog/pricePlan/pricePlanMatrixLines/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'catalog/pricePlan/pricePlanMatrixLines/',\n  method: 'DELETE'\n}\n- DELETE_LINES (src/srcProject/layout/catalog/modules/matrix-lines/provider/provider.js#L71) -> catalog/pricePlan/pricePlanMatrixLines/ | request: options: {\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "version": {
                      "type": "string"
                    },
                    "startDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "endDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "priority": {
                      "type": "string"
                    },
                    "price": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE\noptions: {\n  method: 'DELETE'\n}",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE\noptions: {\n  method: 'DELETE'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'catalog/pricePlan/pricePlanMatrixLines/',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/catalog/priceManagement/pricePlanMatrixLines/import": {
      "post": {
        "tags": [
          "catalog/matrix-lines"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- IMPORT_MATRIX_LINES (src/srcProject/layout/catalog/modules/matrix-lines/provider/provider.js#L92) -> v2/catalog/priceManagement/pricePlanMatrixLines/import | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "version": {
                      "type": "string"
                    },
                    "startDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "endDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "priority": {
                      "type": "string"
                    },
                    "price": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/priceplanmatrixline/search": {
      "post": {
        "tags": [
          "catalog/matrix-lines"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- SEARCH_LINES (src/srcProject/layout/catalog/modules/matrix-lines/provider/provider.js#L106) -> v2/priceplanmatrixline/search | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "version": {
                      "type": "string"
                    },
                    "startDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "endDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "priority": {
                      "type": "string"
                    },
                    "price": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/generic/offerTemplate/": {
      "post": {
        "tags": [
          "catalog/offers"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/catalog/modules/offers/provider/provider.js#L77) -> v2/generic/offerTemplate/ | request: helper.sync: true | helper.transformResponse: aggregateCommercialRules | urls[0].params: {\n  nestedEntities\n} / info: helper: getOneV2 | helperArgs: {\n  urls: [{\n    url: 'v2/generic/offerTemplate/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'commercialRules/offerRules/:@res.code',\n    responseContainer: 'commercialRules',\n    autoAppendId: false\n  }],\n  sync: true,\n  transformResponse: aggregateCommercialRules\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "lifeCycleStatus": {
                      "type": "string"
                    },
                    "validity": {
                      "type": "object",
                      "properties": {
                        "from": {
                          "type": "string"
                        },
                        "to": {
                          "type": "string"
                        }
                      }
                    },
                    "medias": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "tags": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "isModel": {
                      "type": "boolean"
                    },
                    "description": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "instanceCode": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.sync: true\nhelper.transformResponse: aggregateCommercialRules\nurls[0].params: {\n  nestedEntities\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "nestedEntities": {
                    "description": "Identifier reference: nestedEntities",
                    "x-expression": "nestedEntities"
                  }
                }
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  urls: [{\n    url: 'v2/generic/offerTemplate/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'commercialRules/offerRules/:@res.code',\n    responseContainer: 'commercialRules',\n    autoAppendId: false\n  }],\n  sync: true,\n  transformResponse: aggregateCommercialRules\n}"
        ]
      }
    },
    "/commercialRules/offerRules/:@res.code": {
      "post": {
        "tags": [
          "catalog/offers"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/catalog/modules/offers/provider/provider.js#L77) -> commercialRules/offerRules/:@res.code | request: helper.sync: true | helper.transformResponse: aggregateCommercialRules | urls[1].autoAppendId: false / response: urls[1].responseContainer: commercialRules / info: helper: getOneV2 | helperArgs: {\n  urls: [{\n    url: 'v2/generic/offerTemplate/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'commercialRules/offerRules/:@res.code',\n    responseContainer: 'commercialRules',\n    autoAppendId: false\n  }],\n  sync: true,\n  transformResponse: aggregateCommercialRules\n}",
        "responses": {
          "200": {
            "description": "Successful response. urls[1].responseContainer: commercialRules",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "commercialRules": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "code": {
                          "type": "string"
                        },
                        "lifeCycleStatus": {
                          "type": "string"
                        },
                        "validity": {
                          "type": "object",
                          "properties": {
                            "from": {
                              "type": "string"
                            },
                            "to": {
                              "type": "string"
                            }
                          }
                        },
                        "medias": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "tags": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "isModel": {
                          "type": "boolean"
                        },
                        "description": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "instanceCode": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.sync: true\nhelper.transformResponse: aggregateCommercialRules\nurls[1].autoAppendId: false",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.sync: true\nhelper.transformResponse: aggregateCommercialRules\nurls[1].autoAppendId: false"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  urls: [{\n    url: 'v2/generic/offerTemplate/',\n    params: {\n      nestedEntities\n    }\n  }, {\n    url: 'commercialRules/offerRules/:@res.code',\n    responseContainer: 'commercialRules',\n    autoAppendId: false\n  }],\n  sync: true,\n  transformResponse: aggregateCommercialRules\n}"
        ]
      }
    },
    "/catalog/offerTemplate/": {
      "delete": {
        "tags": [
          "catalog/offers"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/catalog/modules/offers/provider/provider.js#L114) -> catalog/offerTemplate/ | request: helper.method: DELETE | helper.showErrorFromContainer: true / info: helper: getDeleteProvider | helperArgs: {\n  url: 'catalog/offerTemplate/',\n  method: 'DELETE',\n  showErrorFromContainer: true\n}\n- DELETE_MANY (src/srcProject/layout/catalog/modules/offers/provider/provider.js#L122) -> catalog/offerTemplate/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'catalog/offerTemplate/',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "lifeCycleStatus": {
                      "type": "string"
                    },
                    "validity": {
                      "type": "object",
                      "properties": {
                        "from": {
                          "type": "string"
                        },
                        "to": {
                          "type": "string"
                        }
                      }
                    },
                    "medias": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "tags": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "isModel": {
                      "type": "boolean"
                    },
                    "description": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "instanceCode": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE\nhelper.showErrorFromContainer: true",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE\nhelper.showErrorFromContainer: true"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'catalog/offerTemplate/',\n  method: 'DELETE',\n  showErrorFromContainer: true\n}",
          "helperArgs: {\n  url: 'catalog/offerTemplate/',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/catalog/offerTemplate/{offerCode}/update/status": {
      "get": {
        "tags": [
          "catalog/offers"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE_STATUS (src/srcProject/layout/catalog/modules/offers/provider/provider.js#L129) -> catalog/offerTemplate/:offerCode/update/status?status=:toStatus&validFrom=:from&validTo=:to",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "code": {
                      "type": "string"
                    },
                    "lifeCycleStatus": {
                      "type": "string"
                    },
                    "validity": {
                      "type": "object",
                      "properties": {
                        "from": {
                          "type": "string"
                        },
                        "to": {
                          "type": "string"
                        }
                      }
                    },
                    "medias": {
                      "type": "string"
                    },
                    "auditable": {
                      "type": "object",
                      "properties": {
                        "created": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "tags": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "isModel": {
                      "type": "boolean"
                    },
                    "description": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "instanceCode": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "validFrom",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "validTo",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/catalog/offerTemplate/duplicate/{offerCode}": {
      "get": {
        "tags": [
          "CPQ-marketing-manager/offer-models",
          "catalog/offers"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DUPLICATE (src/srcProject/layout/catalog/modules/offers/provider/provider.js#L133) -> catalog/offerTemplate/duplicate/:offerCode?duplicateHierarchy=true&validFrom=:from&validTo=:to\n- DUPLICATE (src/srcProject/layout/CPQ-marketing-manager/modules/offer-models/provider/provider.js#L59) -> catalog/offerTemplate/duplicate/:offerCode?duplicateHierarchy=true&validFrom=:from&validTo=:to",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "code": {
                          "type": "string"
                        },
                        "lifeCycleStatus": {
                          "type": "string"
                        },
                        "validity": {
                          "type": "object",
                          "properties": {
                            "from": {
                              "type": "string"
                            },
                            "to": {
                              "type": "string"
                            }
                          }
                        },
                        "medias": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "tags": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "isModel": {
                          "type": "boolean"
                        },
                        "description": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "instanceCode": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "code": {
                          "type": "string"
                        },
                        "validity": {
                          "type": "object",
                          "properties": {
                            "from": {
                              "type": "string"
                            },
                            "to": {
                              "type": "string"
                            }
                          }
                        },
                        "medias": {
                          "type": "string"
                        },
                        "tags": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "description": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "duplicateHierarchy",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "validFrom",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "validTo",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/v2/importExport/exportData": {
      "post": {
        "tags": [
          "catalog/offers",
          "catalog/products"
        ],
        "summary": "Used in 4 frontend location(s)",
        "description": "- EXPORT_TO_REMOTE_INSTANCE (src/srcProject/layout/catalog/modules/offers/provider/provider.js#L137) -> v2/importExport/exportData | request: options: {\n  method: 'POST'\n}\n- DOWNLAOD_AS_XML (src/srcProject/layout/catalog/modules/offers/provider/provider.js#L144) -> v2/importExport/exportData | request: options: {\n  method: 'POST'\n} / response: responseContainer: 'fileContent' / info: isFile: true\n- EXPORT_TO_REMOTE_INSTANCE (src/srcProject/layout/catalog/modules/products/provider/provider.js#L295) -> v2/importExport/exportData | request: options: {\n  method: 'POST'\n}\n- DOWNLAOD_AS_XML (src/srcProject/layout/catalog/modules/products/provider/provider.js#L302) -> v2/importExport/exportData | request: options: {\n  method: 'POST'\n} / response: responseContainer: 'fileContent' / info: isFile: true",
        "responses": {
          "200": {
            "description": "Successful response. responseContainer: 'fileContent'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "fileContent": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string"
                            },
                            "code": {
                              "type": "string"
                            },
                            "lifeCycleStatus": {
                              "type": "string"
                            },
                            "validity": {
                              "type": "object",
                              "properties": {
                                "from": {
                                  "type": "string"
                                },
                                "to": {
                                  "type": "string"
                                }
                              }
                            },
                            "medias": {
                              "type": "string"
                            },
                            "auditable": {
                              "type": "object",
                              "properties": {
                                "created": {
                                  "type": "string",
                                  "format": "date"
                                }
                              }
                            },
                            "tags": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                }
                              }
                            },
                            "isModel": {
                              "type": "boolean"
                            },
                            "description": {
                              "type": "string"
                            },
                            "status": {
                              "type": "string"
                            },
                            "instanceCode": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "status": {
                              "type": "string"
                            },
                            "productLine": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                }
                              }
                            },
                            "currentVersion": {
                              "type": "object",
                              "properties": {
                                "currentVersion": {
                                  "type": "number"
                                },
                                "tags": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "medias": {
                              "type": "string"
                            },
                            "auditable": {
                              "type": "object",
                              "properties": {
                                "created": {
                                  "type": "string",
                                  "format": "date"
                                }
                              }
                            },
                            "name": {
                              "type": "string"
                            },
                            "reference": {
                              "type": "string"
                            },
                            "isModel": {
                              "type": "boolean"
                            },
                            "instanceCode": {
                              "type": "string"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "isFile: true"
        ]
      }
    },
    "/v2/importExport/importData": {
      "post": {
        "tags": [
          "catalog/offers",
          "catalog/products"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- UPLOAD_FILE (src/srcProject/layout/catalog/modules/offers/provider/provider.js#L152) -> v2/importExport/importData | request: options: {\n  method: 'POST'\n}\n- UPLOAD_FILE (src/srcProject/layout/catalog/modules/products/provider/provider.js#L310) -> v2/importExport/importData | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "code": {
                          "type": "string"
                        },
                        "lifeCycleStatus": {
                          "type": "string"
                        },
                        "validity": {
                          "type": "object",
                          "properties": {
                            "from": {
                              "type": "string"
                            },
                            "to": {
                              "type": "string"
                            }
                          }
                        },
                        "medias": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "tags": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "isModel": {
                          "type": "boolean"
                        },
                        "description": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "instanceCode": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "productLine": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "currentVersion": {
                          "type": "object",
                          "properties": {
                            "currentVersion": {
                              "type": "number"
                            },
                            "tags": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "medias": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "name": {
                          "type": "string"
                        },
                        "reference": {
                          "type": "string"
                        },
                        "isModel": {
                          "type": "boolean"
                        },
                        "instanceCode": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/generic/all/pricePlanMatrixVersion": {
      "post": {
        "tags": [
          "catalog/price-matrix"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/catalog/modules/price-matrix/provider/provider.js#L55) -> v2/generic/all/pricePlanMatrixVersion | request: prepareParams: prepareParams | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/pricePlanMatrixVersion',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/catalog/modules/price-matrix/provider/provider.js#L62) -> v2/generic/all/pricePlanMatrixVersion | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/pricePlanMatrixVersion',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "currentVersion": {
                            "type": "number"
                          },
                          "label": {
                            "type": "string"
                          },
                          "status": {
                            "type": "string"
                          },
                          "validity": {
                            "type": "object",
                            "properties": {
                              "from": {
                                "type": "string",
                                "format": "date"
                              },
                              "to": {
                                "type": "string",
                                "format": "date"
                              }
                            }
                          },
                          "matrix": {
                            "type": "string"
                          },
                          "amountWithoutTax": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: prepareParams\nhelper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: prepareParams\nhelper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/pricePlanMatrixVersion',\n  nestedEntities\n}"
        ]
      }
    },
    "/catalog/pricePlan/pricePlanMatrixVersion": {
      "post": {
        "tags": [
          "catalog/price-matrix"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/catalog/modules/price-matrix/provider/provider.js#L72) -> catalog/pricePlan/pricePlanMatrixVersion | request: helper.method: POST / response: helper.responseContainer: pricePlanVersion / info: helper: getCreateProvider | helperArgs: {\n  url: 'catalog/pricePlan/pricePlanMatrixVersion',\n  method: 'POST',\n  responseContainer: 'pricePlanVersion'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: pricePlanVersion",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pricePlanVersion": {
                      "type": "object",
                      "properties": {
                        "currentVersion": {
                          "type": "number"
                        },
                        "label": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "validity": {
                          "type": "object",
                          "properties": {
                            "from": {
                              "type": "string",
                              "format": "date"
                            },
                            "to": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "matrix": {
                          "type": "string"
                        },
                        "amountWithoutTax": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'catalog/pricePlan/pricePlanMatrixVersion',\n  method: 'POST',\n  responseContainer: 'pricePlanVersion'\n}"
        ]
      },
      "put": {
        "tags": [
          "catalog/price-matrix"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/catalog/modules/price-matrix/provider/provider.js#L79) -> catalog/pricePlan/pricePlanMatrixVersion | request: helper.method: PUT / response: helper.responseContainer: pricePlanVersion / info: helper: getUpdateProvider | helperArgs: {\n  url: 'catalog/pricePlan/pricePlanMatrixVersion',\n  method: 'PUT',\n  responseContainer: 'pricePlanVersion'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: pricePlanVersion",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pricePlanVersion": {
                      "type": "object",
                      "properties": {
                        "currentVersion": {
                          "type": "number"
                        },
                        "label": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "validity": {
                          "type": "object",
                          "properties": {
                            "from": {
                              "type": "string",
                              "format": "date"
                            },
                            "to": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "matrix": {
                          "type": "string"
                        },
                        "amountWithoutTax": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'catalog/pricePlan/pricePlanMatrixVersion',\n  method: 'PUT',\n  responseContainer: 'pricePlanVersion'\n}"
        ]
      }
    },
    "/catalog/pricePlan/{pricePlanMatrixCode}/pricePlanMatrixVersions/{currentVersion}": {
      "delete": {
        "tags": [
          "catalog/price-matrix"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- DELETE_PRICEPLAN (src/srcProject/layout/catalog/modules/price-matrix/provider/provider.js#L87) -> catalog/pricePlan/:pricePlanMatrixCode/pricePlanMatrixVersions/:currentVersion | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: `catalog/pricePlan/:pricePlanMatrixCode/pricePlanMatrixVersions/:currentVersion`,\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "currentVersion": {
                      "type": "number"
                    },
                    "label": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "validity": {
                      "type": "object",
                      "properties": {
                        "from": {
                          "type": "string",
                          "format": "date"
                        },
                        "to": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "matrix": {
                      "type": "string"
                    },
                    "amountWithoutTax": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: `catalog/pricePlan/:pricePlanMatrixCode/pricePlanMatrixVersions/:currentVersion`,\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/catalog/pricePlan/{code}/pricePlanMatrixVersions/{version}/status/PUBLISHED": {
      "put": {
        "tags": [
          "catalog/price-matrix"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- PUBLISH_VERSION (src/srcProject/layout/catalog/modules/price-matrix/provider/provider.js#L94) -> catalog/pricePlan/:code/pricePlanMatrixVersions/:version/status/PUBLISHED | request: options: {\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "currentVersion": {
                      "type": "number"
                    },
                    "label": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "validity": {
                      "type": "object",
                      "properties": {
                        "from": {
                          "type": "string",
                          "format": "date"
                        },
                        "to": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "matrix": {
                      "type": "string"
                    },
                    "amountWithoutTax": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/pricePlans/{ppmc}/pricePlanVersions/{ppmv}/checkIfUsed": {
      "get": {
        "tags": [
          "catalog/price-matrix"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CHECK_IF_USED (src/srcProject/layout/catalog/modules/price-matrix/provider/provider.js#L110) -> v2/pricePlans/:ppmc/pricePlanVersions/:ppmv/checkIfUsed | request: options: {\n  method: 'GET'\n} / info: nestedEntities: nestedEntities",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "currentVersion": {
                      "type": "number"
                    },
                    "label": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "validity": {
                      "type": "object",
                      "properties": {
                        "from": {
                          "type": "string",
                          "format": "date"
                        },
                        "to": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "matrix": {
                      "type": "string"
                    },
                    "amountWithoutTax": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ],
        "x-dev-notes": [
          "nestedEntities: nestedEntities"
        ]
      }
    },
    "/v2/generic/all/pricePlanMatrix": {
      "post": {
        "tags": [
          "catalog/price-plans"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/catalog/modules/price-plans/provider/provider.js#L11) -> v2/generic/all/pricePlanMatrix | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/pricePlanMatrix',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/catalog/modules/price-plans/provider/provider.js#L17) -> v2/generic/all/pricePlanMatrix | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/pricePlanMatrix',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/pricePlanMatrix',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/pricePlanMatrix/": {
      "post": {
        "tags": [
          "catalog/price-plans"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/catalog/modules/price-plans/provider/provider.js#L24) -> v2/generic/pricePlanMatrix/ | request: helper.nestedEntities: nestedEntities / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/pricePlanMatrix/',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/pricePlanMatrix/',\n  nestedEntities\n}"
        ]
      }
    },
    "/catalog/pricePlan/createOrUpdate": {
      "post": {
        "tags": [
          "catalog/price-plans"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/catalog/modules/price-plans/provider/provider.js#L27) -> catalog/pricePlan/createOrUpdate | request: helper.method: POST / response: helper.responseContainerId: entityId / info: helper: getCreateProvider | helperArgs: {\n  url: 'catalog/pricePlan/createOrUpdate',\n  method: 'POST',\n  responseContainerId: 'entityId'\n}\n- UPDATE (src/srcProject/layout/catalog/modules/price-plans/provider/provider.js#L34) -> catalog/pricePlan/createOrUpdate | request: helper.method: POST / info: helper: getUpdateProvider | helperArgs: {\n  url: 'catalog/pricePlan/createOrUpdate',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainerId: entityId"
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'catalog/pricePlan/createOrUpdate',\n  method: 'POST',\n  responseContainerId: 'entityId'\n}",
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'catalog/pricePlan/createOrUpdate',\n  method: 'POST'\n}"
        ]
      }
    },
    "/catalog/pricePlan": {
      "post": {
        "tags": [
          "catalog/price-plans"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE_GET_ID (src/srcProject/layout/catalog/modules/price-plans/provider/provider.js#L40) -> catalog/pricePlan | request: helper.method: POST / info: helper: getCreateProvider | helperArgs: {\n  url: 'catalog/pricePlan',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'catalog/pricePlan',\n  method: 'POST'\n}"
        ]
      }
    },
    "/catalog/products/{productCode}/duplication": {
      "get": {
        "tags": [
          "CPQ-marketing-manager/product-models",
          "catalog/products"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DUPLICATE (src/srcProject/layout/catalog/modules/products/provider/provider.js#L276) -> catalog/products/:productCode/duplication?duplicateHierarchy=true | info: keyColumn: 'id'\n- DUPLICATE (src/srcProject/layout/CPQ-marketing-manager/modules/product-models/provider/provider.js#L131) -> catalog/products/:productCode/duplication?duplicateHierarchy=true | info: keyColumn: 'id'",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "productLine": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "currentVersion": {
                          "type": "object",
                          "properties": {
                            "currentVersion": {
                              "type": "number"
                            },
                            "tags": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "medias": {
                          "type": "string"
                        },
                        "auditable": {
                          "type": "object",
                          "properties": {
                            "created": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        },
                        "name": {
                          "type": "string"
                        },
                        "reference": {
                          "type": "string"
                        },
                        "isModel": {
                          "type": "boolean"
                        },
                        "instanceCode": {
                          "type": "string"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "productLine": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            }
                          }
                        },
                        "medias": {
                          "type": "string"
                        },
                        "currentVersion": {
                          "type": "object",
                          "properties": {
                            "currentVersion": {
                              "type": "number"
                            },
                            "tags": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        "reference": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "duplicateHierarchy",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-dev-notes": [
          "keyColumn: 'id'"
        ]
      }
    },
    "/catalog/products/productLines": {
      "post": {
        "tags": [
          "catalog/products-line"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/catalog/modules/products-line/provider/provider.js#L70) -> catalog/products/productLines | request: prepareParams: prepareParams / response: helper.responseContainerId: actionStatus.entityId / info: helper: getCreateProvider | helperArgs: {\n  url: 'catalog/products/productLines',\n  responseContainerId: 'actionStatus.entityId'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainerId: actionStatus.entityId",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string"
                    },
                    "parentLine": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "seller": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "code": {
                      "type": "string"
                    },
                    "longDescription": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: prepareParams",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: prepareParams"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'catalog/products/productLines',\n  responseContainerId: 'actionStatus.entityId'\n}"
        ]
      },
      "put": {
        "tags": [
          "catalog/products-line"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/catalog/modules/products-line/provider/provider.js#L78) -> catalog/products/productLines | request: prepareParams: prepareParams / info: excludeProperties: ['originalId'] | helper: getUpdateProvider | helperArgs: {\n  url: 'catalog/products/productLines'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string"
                    },
                    "parentLine": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "seller": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "code": {
                      "type": "string"
                    },
                    "longDescription": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: prepareParams",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: prepareParams"
              }
            }
          }
        },
        "x-dev-notes": [
          "excludeProperties: ['originalId']",
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'catalog/products/productLines'\n}"
        ]
      }
    },
    "/catalog/products/productLines/": {
      "delete": {
        "tags": [
          "catalog/products-line"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/catalog/modules/products-line/provider/provider.js#L89) -> catalog/products/productLines/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'catalog/products/productLines/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/catalog/modules/products-line/provider/provider.js#L96) -> catalog/products/productLines/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'catalog/products/productLines/',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "description": {
                      "type": "string"
                    },
                    "parentLine": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "seller": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "code": {
                      "type": "string"
                    },
                    "longDescription": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'catalog/products/productLines/',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/cpq/tags/tagTypes": {
      "post": {
        "tags": [
          "catalog/type-tags"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/catalog/modules/type-tags/provider/provider.js#L63) -> cpq/tags/tagTypes | request: prepareParams: prepareParams | helper.method: POST / info: helper: getCreateProvider | helperArgs: {\n  url: 'cpq/tags/tagTypes',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "seller": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: prepareParams\nhelper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: prepareParams\nhelper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'cpq/tags/tagTypes',\n  method: 'POST'\n}"
        ]
      },
      "put": {
        "tags": [
          "catalog/type-tags"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/catalog/modules/type-tags/provider/provider.js#L70) -> cpq/tags/tagTypes | request: prepareParams: prepareParams | helper.method: PUT / info: excludeProperties: ['originalId'] | helper: getUpdateProvider | helperArgs: {\n  url: 'cpq/tags/tagTypes',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "seller": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: prepareParams\nhelper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: prepareParams\nhelper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "excludeProperties: ['originalId']",
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'cpq/tags/tagTypes',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/cpq/tags/tagTypes/": {
      "delete": {
        "tags": [
          "catalog/type-tags"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/catalog/modules/type-tags/provider/provider.js#L79) -> cpq/tags/tagTypes/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'cpq/tags/tagTypes/',\n  method: 'DELETE'\n}\n- DELETE_MANY (src/srcProject/layout/catalog/modules/type-tags/provider/provider.js#L83) -> cpq/tags/tagTypes/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'cpq/tags/tagTypes/',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "seller": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'cpq/tags/tagTypes/',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/generic/all/journalEntry": {
      "post": {
        "tags": [
          "finance/accounting-entries"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/finance/modules/accounting-entries/provider/provider.js#L84) -> v2/generic/all/journalEntry | request: prepareParams: params => {\n  const {\n    sort,\n    ...restParams\n  } = params;\n\n  // const finalCurrencyAmount =\n  //   currencyAmount > 0 ? currencyAmount : -currencyAmount;\n\n  //   ,\n  // ...(finalCurrencyAmount ? { amount: finalCurrencyAmount } : {})\n\n  const {\n    field,\n    ...restSort\n  } = sort;\n  return {\n    sort: {\n      ...restSort,\n      ...(field === 'supportingDocumentRef.invoiceNumber|reference' ? {\n        field: 'reference'\n      } : {\n        field\n      })\n    },\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/journalEntry',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/finance/modules/accounting-entries/provider/provider.js#L109) -> v2/generic/all/journalEntry | response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/journalEntry'\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "operationNumber": {
                            "anyOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "string"
                              }
                            ]
                          },
                          "documentType": {
                            "type": "string"
                          },
                          "accountOperation": {
                            "type": "object",
                            "properties": {
                              "journal": {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string"
                                  }
                                }
                              },
                              "accountingDate": {
                                "type": "string",
                                "format": "date"
                              }
                            }
                          },
                          "accountingCode": {
                            "type": "object",
                            "properties": {
                              "chartOfAccountTypeEnum": {
                                "type": "string"
                              },
                              "code": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              }
                            }
                          },
                          "amountDebit": {
                            "anyOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "string"
                              }
                            ]
                          },
                          "amountCredit": {
                            "anyOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "string"
                              }
                            ]
                          },
                          "matchingCode": {
                            "type": "string"
                          },
                          "customerAccount": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "registrationNo": {
                                "type": "string"
                              }
                            }
                          },
                          "customerDescriptionOrFullName": {
                            "type": "string"
                          },
                          "seller": {
                            "type": "object",
                            "properties": {
                              "description": {
                                "type": "string"
                              },
                              "code": {
                                "type": "string"
                              }
                            }
                          },
                          "currency": {
                            "type": "string"
                          },
                          "currencyAmount": {
                            "anyOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "string"
                              }
                            ]
                          },
                          "supportingDocumentRef": {
                            "type": "object",
                            "properties": {
                              "tradingCurrency": {
                                "type": "object",
                                "properties": {
                                  "currency": {
                                    "type": "object",
                                    "properties": {
                                      "currencyCode": {
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "auxiliaryAccountCode": {
                            "type": "string"
                          },
                          "auxiliaryAccountLabel": {
                            "type": "string"
                          },
                          "documentRefInvoiceNumber": {
                            "type": "string"
                          },
                          "accountOperationAccountingDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "accountingCodeCode": {
                            "type": "string"
                          },
                          "accountingCodeDescription": {
                            "type": "string"
                          },
                          "customerAccountCode": {
                            "type": "string"
                          },
                          "sellerDescription": {
                            "type": "string"
                          },
                          "sellerCode": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    sort,\n    ...restParams\n  } = params;\n\n  // const finalCurrencyAmount =\n  //   currencyAmount > 0 ? currencyAmount : -currencyAmount;\n\n  //   ,\n  // ...(finalCurrencyAmount ? { amount: finalCurrencyAmount } : {})\n\n  const {\n    field,\n    ...restSort\n  } = sort;\n  return {\n    sort: {\n      ...restSort,\n      ...(field === 'supportingDocumentRef.invoiceNumber|reference' ? {\n        field: 'reference'\n      } : {\n        field\n      })\n    },\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    sort,\n    ...restParams\n  } = params;\n\n  // const finalCurrencyAmount =\n  //   currencyAmount > 0 ? currencyAmount : -currencyAmount;\n\n  //   ,\n  // ...(finalCurrencyAmount ? { amount: finalCurrencyAmount } : {})\n\n  const {\n    field,\n    ...restSort\n  } = sort;\n  return {\n    sort: {\n      ...restSort,\n      ...(field === 'supportingDocumentRef.invoiceNumber|reference' ? {\n        field: 'reference'\n      } : {\n        field\n      })\n    },\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/journalEntry',\n  nestedEntities\n}",
          "helperArgs: {\n  url: 'v2/generic/all/journalEntry'\n}"
        ]
      }
    },
    "/v2/generic/all/AccountingScheme": {
      "post": {
        "tags": [
          "finance/accounting-scheme"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/finance/modules/accounting-scheme/provider/provider.js#L8) -> v2/generic/all/AccountingScheme | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/AccountingScheme',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/finance/modules/accounting-scheme/provider/provider.js#L15) -> v2/generic/all/AccountingScheme | request: helper.nestedEntities: nestedEntities | helper.keyColumn: 'code' / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/AccountingScheme',\n  nestedEntities,\n  keyColumn: 'code'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: 'code'",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: 'code'"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/AccountingScheme',\n  nestedEntities\n}",
          "helperArgs: {\n  url: 'v2/generic/all/AccountingScheme',\n  nestedEntities,\n  keyColumn: 'code'\n}"
        ]
      }
    },
    "/v2/standardReports/AgedReceivables": {
      "post": {
        "tags": [
          "finance/aged-trial-balance"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/finance/modules/aged-trial-balance/provider/provider.js#L74) -> v2/standardReports/AgedReceivables | request: options: {\n  queryKey: '',\n  method: 'GET'\n} / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/standardReports/AgedReceivables'\n}\n- GET_MANY (src/srcProject/layout/finance/modules/aged-trial-balance/provider/provider.js#L85) -> v2/standardReports/AgedReceivables | request: helper.method: GET / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/standardReports/AgedReceivables',\n  method: 'GET'\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "customerAccountDescription": {
                            "type": "string"
                          },
                          "customerAccountCode": {
                            "type": "string"
                          },
                          "sellerDescription": {
                            "type": "string"
                          },
                          "sellerCode": {
                            "type": "string"
                          },
                          "invoiceNumber": {
                            "type": "string"
                          },
                          "dueDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "totalCurrent": {
                            "type": "number"
                          },
                          "total": {
                            "type": "number"
                          },
                          "totalCurrentPlusOverdue": {
                            "type": "number"
                          },
                          "funcCurrency": {
                            "type": "string"
                          },
                          "billedAmount": {
                            "type": "number"
                          },
                          "tradingCurrency": {
                            "type": "string"
                          },
                          "date": {
                            "type": "string"
                          },
                          "customStartDate": {
                            "type": "string"
                          },
                          "stepInDays": {
                            "type": "string"
                          },
                          "numberOfPeriods": {
                            "type": "string"
                          },
                          "startDueDate": {
                            "type": "string"
                          },
                          "endDueDate": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  queryKey: '',\n  method: 'GET'\n}\nhelper.method: GET",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  queryKey: '',\n  method: 'GET'\n}\nhelper.method: GET"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/standardReports/AgedReceivables'\n}",
          "helperArgs: {\n  url: 'v2/standardReports/AgedReceivables',\n  method: 'GET'\n}"
        ]
      }
    },
    "/v2/generic/entities": {
      "get": {
        "tags": [
          "finance/entities",
          "operation/entities"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_ENTITIES (src/srcProject/layout/finance/modules/entities/provider/provider.js#L6) -> v2/generic/entities | request: options: {\n  method: 'GET'\n}\n- GET_ENTITIES (src/srcProject/layout/operation/modules/entities/provider/provider.js#L7) -> v2/generic/entities | request: options: {\n  method: 'GET'\n} / info: keyColumn: keyColumn",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ],
        "x-dev-notes": [
          "keyColumn: keyColumn"
        ]
      }
    },
    "/v2/generic/all/JournalEntry": {
      "post": {
        "tags": [
          "finance/general-ledger"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/finance/modules/general-ledger/provider/provider.js#L131) -> v2/generic/all/JournalEntry | request: prepareParams: prepareParams | helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/JournalEntry',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/finance/modules/general-ledger/provider/provider.js#L138) -> v2/generic/all/JournalEntry | request: prepareParams: prepareParams | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/JournalEntry',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "accountingCode": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              }
                            }
                          },
                          "accountOperation": {
                            "type": "object",
                            "properties": {
                              "accountingDate": {
                                "type": "string",
                                "format": "date"
                              },
                              "journal": {
                                "type": "object",
                                "properties": {
                                  "description": {
                                    "type": "string"
                                  }
                                }
                              },
                              "description": {
                                "type": "string"
                              }
                            }
                          },
                          "operationNumber": {
                            "type": "string"
                          },
                          "amountDebit": {
                            "type": "number"
                          },
                          "amountCredit": {
                            "type": "number"
                          },
                          "balance": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: prepareParams\nhelper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: prepareParams\nhelper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/JournalEntry',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/all/OtherCreditAndCharge": {
      "post": {
        "tags": [
          "finance/miscellaneous-journal"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/finance/modules/miscellaneous-journal/provider/provider.js#L46) -> v2/generic/all/OtherCreditAndCharge | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    currentMonth = false,\n    lastMonth = false,\n    lastThreeMonths = false,\n    lastYear = false,\n    currentYear = false,\n    startingFrom = '',\n    ...restFilter\n  } = filter;\n  const fitlerTransformed = {\n    ...(currentMonth ? getCurrentMonth('a.dueDate') : {}),\n    ...(lastMonth ? getLastMonth('a.dueDate') : {}),\n    ...(lastThreeMonths ? getLastThreeMonths('a.dueDate') : {}),\n    ...(lastYear ? getLastYear('a.dueDate') : {}),\n    ...(currentYear ? getCurrentYear('a.dueDate') : {}),\n    ...(!isEmpty(startingFrom) ? getStartingFromDate('a.dueDate', startingFrom) : {}),\n    ...restFilter\n  };\n  return {\n    filter: fitlerTransformed,\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/OtherCreditAndCharge',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/finance/modules/miscellaneous-journal/provider/provider.js#L82) -> v2/generic/all/OtherCreditAndCharge | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/OtherCreditAndCharge',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "journal": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              }
                            }
                          },
                          "dueDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "accountingCode": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              }
                            }
                          },
                          "description": {
                            "type": "string"
                          },
                          "amountDebit": {
                            "type": "number"
                          },
                          "amountCredit": {
                            "type": "number"
                          },
                          "currentMonth": {
                            "type": "string"
                          },
                          "lastMonth": {
                            "type": "string"
                          },
                          "lastThreeMonths": {
                            "type": "string"
                          },
                          "lastYear": {
                            "type": "string"
                          },
                          "currentYear": {
                            "type": "string"
                          },
                          "startingFrom": {
                            "type": "string"
                          },
                          "betweenDate": {
                            "type": "string",
                            "format": "date"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    currentMonth = false,\n    lastMonth = false,\n    lastThreeMonths = false,\n    lastYear = false,\n    currentYear = false,\n    startingFrom = '',\n    ...restFilter\n  } = filter;\n  const fitlerTransformed = {\n    ...(currentMonth ? getCurrentMonth('a.dueDate') : {}),\n    ...(lastMonth ? getLastMonth('a.dueDate') : {}),\n    ...(lastThreeMonths ? getLastThreeMonths('a.dueDate') : {}),\n    ...(lastYear ? getLastYear('a.dueDate') : {}),\n    ...(currentYear ? getCurrentYear('a.dueDate') : {}),\n    ...(!isEmpty(startingFrom) ? getStartingFromDate('a.dueDate', startingFrom) : {}),\n    ...restFilter\n  };\n  return {\n    filter: fitlerTransformed,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    currentMonth = false,\n    lastMonth = false,\n    lastThreeMonths = false,\n    lastYear = false,\n    currentYear = false,\n    startingFrom = '',\n    ...restFilter\n  } = filter;\n  const fitlerTransformed = {\n    ...(currentMonth ? getCurrentMonth('a.dueDate') : {}),\n    ...(lastMonth ? getLastMonth('a.dueDate') : {}),\n    ...(lastThreeMonths ? getLastThreeMonths('a.dueDate') : {}),\n    ...(lastYear ? getLastYear('a.dueDate') : {}),\n    ...(currentYear ? getCurrentYear('a.dueDate') : {}),\n    ...(!isEmpty(startingFrom) ? getStartingFromDate('a.dueDate', startingFrom) : {}),\n    ...restFilter\n  };\n  return {\n    filter: fitlerTransformed,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/OtherCreditAndCharge',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/all/OpenOrder": {
      "post": {
        "tags": [
          "finance/open-orders"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/finance/modules/open-orders/provider/provider.js#L80) -> v2/generic/all/OpenOrder | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/OpenOrder',\n  nestedEntities\n  //keyColumn: 'code'\n}\n- GET_MANY (src/srcProject/layout/finance/modules/open-orders/provider/provider.js#L88) -> v2/generic/all/OpenOrder | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/OpenOrder',\n  nestedEntities\n  //keyColumn: 'code'\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/finance/modules/open-orders/provider/provider.js#L96) -> v2/generic/all/OpenOrder | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/OpenOrder',\n  nestedEntities\n  //keyColumn: 'code'\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "openOrderNumber": {
                            "type": "string"
                          },
                          "billingAccount": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "customerAccount": {
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          },
                          "activationDate": {
                            "type": "string"
                          },
                          "currency": {
                            "type": "object",
                            "properties": {
                              "currencyCode": {
                                "type": "string"
                              }
                            }
                          },
                          "initialAmount": {
                            "type": "number"
                          },
                          "balance": {
                            "type": "number"
                          },
                          "invoiced": {
                            "anyOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "string"
                              }
                            ]
                          },
                          "status": {
                            "type": "string"
                          },
                          "invoicedBet": {
                            "type": "string"
                          },
                          "tags": {
                            "type": "string"
                          },
                          "containsTags": {
                            "type": "string"
                          },
                          "doesNotContainsTags": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/OpenOrder',\n  nestedEntities\n  //keyColumn: 'code'\n}"
        ]
      }
    },
    "/v2/generic/OpenOrder/": {
      "post": {
        "tags": [
          "finance/open-orders"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/finance/modules/open-orders/provider/provider.js#L105) -> v2/generic/OpenOrder/ | request: helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse / info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/OpenOrder/',\n  // keyColumn: 'code',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "openOrderNumber": {
                      "type": "string"
                    },
                    "billingAccount": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "customerAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "activationDate": {
                      "type": "string"
                    },
                    "currency": {
                      "type": "object",
                      "properties": {
                        "currencyCode": {
                          "type": "string"
                        }
                      }
                    },
                    "initialAmount": {
                      "type": "number"
                    },
                    "balance": {
                      "type": "number"
                    },
                    "invoiced": {
                      "anyOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "status": {
                      "type": "string"
                    },
                    "invoicedBet": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "string"
                    },
                    "containsTags": {
                      "type": "string"
                    },
                    "doesNotContainsTags": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/OpenOrder/',\n  // keyColumn: 'code',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/ordering/open-order": {
      "delete": {
        "tags": [
          "finance/open-orders"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/finance/modules/open-orders/provider/provider.js#L126) -> v2/ordering/open-order | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/ordering/open-order',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "openOrderNumber": {
                      "type": "string"
                    },
                    "billingAccount": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "customerAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "activationDate": {
                      "type": "string"
                    },
                    "currency": {
                      "type": "object",
                      "properties": {
                        "currencyCode": {
                          "type": "string"
                        }
                      }
                    },
                    "initialAmount": {
                      "type": "number"
                    },
                    "balance": {
                      "type": "number"
                    },
                    "invoiced": {
                      "anyOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "status": {
                      "type": "string"
                    },
                    "invoicedBet": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "string"
                    },
                    "containsTags": {
                      "type": "string"
                    },
                    "doesNotContainsTags": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'v2/ordering/open-order',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/ordering/OpenOrder/{code}/status/status": {
      "put": {
        "tags": [
          "finance/open-orders"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CHANGE_STATUS (src/srcProject/layout/finance/modules/open-orders/provider/provider.js#L133) -> v2/ordering/OpenOrder/:code/status/status | request: options: {\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "openOrderNumber": {
                      "type": "string"
                    },
                    "billingAccount": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "customerAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "activationDate": {
                      "type": "string"
                    },
                    "currency": {
                      "type": "object",
                      "properties": {
                        "currencyCode": {
                          "type": "string"
                        }
                      }
                    },
                    "initialAmount": {
                      "type": "number"
                    },
                    "balance": {
                      "type": "number"
                    },
                    "invoiced": {
                      "anyOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "status": {
                      "type": "string"
                    },
                    "invoicedBet": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "string"
                    },
                    "containsTags": {
                      "type": "string"
                    },
                    "doesNotContainsTags": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/generic/export/{entityName}/{format}": {
      "post": {
        "tags": [
          "finance/open-orders"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- EXPORT_LIST (src/srcProject/layout/finance/modules/open-orders/provider/provider.js#L139) -> v2/generic/export/:entityName/:format | request: options: {\n  method: 'POST'\n} / info: excludeProperties: ['format', 'entityName']",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "openOrderNumber": {
                      "type": "string"
                    },
                    "billingAccount": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "customerAccount": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "activationDate": {
                      "type": "string"
                    },
                    "currency": {
                      "type": "object",
                      "properties": {
                        "currencyCode": {
                          "type": "string"
                        }
                      }
                    },
                    "initialAmount": {
                      "type": "number"
                    },
                    "balance": {
                      "type": "number"
                    },
                    "invoiced": {
                      "anyOf": [
                        {
                          "type": "number"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    },
                    "status": {
                      "type": "string"
                    },
                    "invoicedBet": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "string"
                    },
                    "containsTags": {
                      "type": "string"
                    },
                    "doesNotContainsTags": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "excludeProperties: ['format', 'entityName']"
        ]
      }
    },
    "/v2/queryManagement/reportQueries/{id}": {
      "get": {
        "tags": [
          "finance/query-builder",
          "operation/query-builder"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_ONE_QUERY (src/srcProject/layout/finance/modules/query-builder/provider/provider.js#L64) -> v2/queryManagement/reportQueries/:id | request: options: {\n  method: 'GET'\n} / info: nestedEntities: nestedEntities\n- GET_ONE_QUERY (src/srcProject/layout/operation/modules/query-builder/provider/provider.js#L64) -> v2/queryManagement/reportQueries/:id | request: options: {\n  method: 'GET'\n} / info: nestedEntities: nestedEntities",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ],
        "x-dev-notes": [
          "nestedEntities: nestedEntities"
        ]
      },
      "put": {
        "tags": [
          "finance/query-builder",
          "operation/query-builder"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/finance/modules/query-builder/provider/provider.js#L85) -> v2/queryManagement/reportQueries/:id | request: options: {\n  method: 'PUT'\n} / info: resolve: res => {\n  return {\n    data: get(res, 'json')\n  };\n} | excludeProperties: ['id']\n- UPDATE (src/srcProject/layout/operation/modules/query-builder/provider/provider.js#L85) -> v2/queryManagement/reportQueries/:id | request: options: {\n  method: 'PUT'\n} / info: resolve: res => {\n  return {\n    data: get(res, 'json')\n  };\n} | excludeProperties: ['id']",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "resolve: res => {\n  return {\n    data: get(res, 'json')\n  };\n}",
          "excludeProperties: ['id']"
        ]
      },
      "delete": {
        "tags": [
          "finance/query-builder",
          "operation/query-builder"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DELETE_QUERY (src/srcProject/layout/finance/modules/query-builder/provider/provider.js#L103) -> v2/queryManagement/reportQueries/:id | request: options: {\n  method: 'DELETE'\n}\n- DELETE_QUERY (src/srcProject/layout/operation/modules/query-builder/provider/provider.js#L103) -> v2/queryManagement/reportQueries/:id | request: options: {\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'DELETE'\n}",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'DELETE'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/queryManagement/reportQueries": {
      "post": {
        "tags": [
          "finance/query-builder",
          "operation/query-builder"
        ],
        "summary": "Used in 4 frontend location(s)",
        "description": "- GET_MANY (src/srcProject/layout/finance/modules/query-builder/provider/provider.js#L71) -> v2/queryManagement/reportQueries?limit=999999 | request: helper.nestedEntities: nestedEntities | helper.method: GET / response: helper.responseContainer: data / info: autoAppendQuery: false | helper: getListV2 | helperArgs: {\n  url: 'v2/queryManagement/reportQueries?limit=999999',\n  nestedEntities,\n  method: 'GET'\n}\n- CREATE (src/srcProject/layout/finance/modules/query-builder/provider/provider.js#L79) -> v2/queryManagement/reportQueries | request: helper.method: POST / info: helper: getCreateProvider | helperArgs: {\n  url: 'v2/queryManagement/reportQueries',\n  method: 'POST'\n}\n- GET_MANY (src/srcProject/layout/operation/modules/query-builder/provider/provider.js#L71) -> v2/queryManagement/reportQueries?limit=999999 | request: helper.nestedEntities: nestedEntities | helper.method: GET / response: helper.responseContainer: data / info: autoAppendQuery: false | helper: getListV2 | helperArgs: {\n  url: 'v2/queryManagement/reportQueries?limit=999999',\n  nestedEntities,\n  method: 'GET'\n}\n- CREATE (src/srcProject/layout/operation/modules/query-builder/provider/provider.js#L79) -> v2/queryManagement/reportQueries | request: helper.method: POST / info: helper: getCreateProvider | helperArgs: {\n  url: 'v2/queryManagement/reportQueries',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities\nhelper.method: GET\nhelper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities\nhelper.method: GET\nhelper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "autoAppendQuery: false",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/queryManagement/reportQueries?limit=999999',\n  nestedEntities,\n  method: 'GET'\n}",
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/queryManagement/reportQueries',\n  method: 'POST'\n}"
        ]
      }
    },
    "/v2/queryManagement/reportQueries/": {
      "delete": {
        "tags": [
          "finance/query-builder",
          "operation/query-builder"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/finance/modules/query-builder/provider/provider.js#L97) -> v2/queryManagement/reportQueries/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/queryManagement/reportQueries/',\n  method: 'DELETE'\n}\n- DELETE (src/srcProject/layout/operation/modules/query-builder/provider/provider.js#L97) -> v2/queryManagement/reportQueries/ | request: helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/queryManagement/reportQueries/',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'v2/queryManagement/reportQueries/',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/user/external": {
      "put": {
        "tags": [
          "finance/query-builder",
          "operation/query-builder"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- SAVE_EMAIL (src/srcProject/layout/finance/modules/query-builder/provider/provider.js#L150) -> user/external | request: options: {\n  method: 'PUT'\n}\n- SAVE_EMAIL (src/srcProject/layout/operation/modules/query-builder/provider/provider.js#L150) -> user/external | request: options: {\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/queryManagement/reportQueries/verify": {
      "post": {
        "tags": [
          "finance/query-builder",
          "operation/query-builder"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- VALIDATE_QUERY (src/srcProject/layout/finance/modules/query-builder/provider/provider.js#L156) -> v2/queryManagement/reportQueries/verify | request: options: {\n  method: 'POST'\n}\n- VALIDATE_QUERY (src/srcProject/layout/operation/modules/query-builder/provider/provider.js#L156) -> v2/queryManagement/reportQueries/verify | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/generic/all/recordedInvoice": {
      "post": {
        "tags": [
          "finance/sales-journal"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/finance/modules/sales-journal/provider/provider.js#L60) -> v2/generic/all/recordedInvoice | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    currentMonth = false,\n    lastMonth = false,\n    lastThreeMonths = false,\n    currentYear = false,\n    startingFrom = '',\n    ...restFilter\n  } = filter;\n  const fitlerTransformed = {\n    ...(currentMonth ? getCurrentMonth('dueDate') : {}),\n    ...(lastMonth ? getLastMonth('dueDate') : {}),\n    ...(lastThreeMonths ? getLastThreeMonths('dueDate') : {}),\n    ...(currentYear ? getCurrentYear('dueDate') : {}),\n    ...(!isEmpty(startingFrom) ? getStartingFromDate('dueDate', startingFrom) : {}),\n    ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n      'seller.code': ENGIE_MYPOWER_seller\n    } : {}),\n    ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n      'seller.code': ENGIE_EKKO_seller\n    } : {}),\n    ...restFilter\n  };\n  return {\n    filter: fitlerTransformed,\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/recordedInvoice',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/finance/modules/sales-journal/provider/provider.js#L96) -> v2/generic/all/recordedInvoice | response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/recordedInvoice'\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "journal": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              }
                            }
                          },
                          "invoice": {
                            "type": "object",
                            "properties": {
                              "invoiceNumber": {
                                "type": "string"
                              }
                            }
                          },
                          "invoiceDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "accountingCode": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              }
                            }
                          },
                          "description": {
                            "type": "string"
                          },
                          "amountDebit": {
                            "type": "number"
                          },
                          "amountCredit": {
                            "type": "number"
                          },
                          "dueDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "betweenDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "currentMonth": {
                            "type": "string"
                          },
                          "lastMonth": {
                            "type": "string"
                          },
                          "lastThreeMonths": {
                            "type": "string"
                          },
                          "currentYear": {
                            "type": "string"
                          },
                          "startingFrom": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    currentMonth = false,\n    lastMonth = false,\n    lastThreeMonths = false,\n    currentYear = false,\n    startingFrom = '',\n    ...restFilter\n  } = filter;\n  const fitlerTransformed = {\n    ...(currentMonth ? getCurrentMonth('dueDate') : {}),\n    ...(lastMonth ? getLastMonth('dueDate') : {}),\n    ...(lastThreeMonths ? getLastThreeMonths('dueDate') : {}),\n    ...(currentYear ? getCurrentYear('dueDate') : {}),\n    ...(!isEmpty(startingFrom) ? getStartingFromDate('dueDate', startingFrom) : {}),\n    ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n      'seller.code': ENGIE_MYPOWER_seller\n    } : {}),\n    ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n      'seller.code': ENGIE_EKKO_seller\n    } : {}),\n    ...restFilter\n  };\n  return {\n    filter: fitlerTransformed,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    currentMonth = false,\n    lastMonth = false,\n    lastThreeMonths = false,\n    currentYear = false,\n    startingFrom = '',\n    ...restFilter\n  } = filter;\n  const fitlerTransformed = {\n    ...(currentMonth ? getCurrentMonth('dueDate') : {}),\n    ...(lastMonth ? getLastMonth('dueDate') : {}),\n    ...(lastThreeMonths ? getLastThreeMonths('dueDate') : {}),\n    ...(currentYear ? getCurrentYear('dueDate') : {}),\n    ...(!isEmpty(startingFrom) ? getStartingFromDate('dueDate', startingFrom) : {}),\n    ...(isUserHasRoles(ENGIE_MYPOWER_roles) ? {\n      'seller.code': ENGIE_MYPOWER_seller\n    } : {}),\n    ...(isUserHasRoles(ENGIE_EKKO_roles) ? {\n      'seller.code': ENGIE_EKKO_seller\n    } : {}),\n    ...restFilter\n  };\n  return {\n    filter: fitlerTransformed,\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/recordedInvoice',\n  nestedEntities\n}",
          "helperArgs: {\n  url: 'v2/generic/all/recordedInvoice'\n}"
        ]
      }
    },
    "/v2/generic/all/ScriptInstance": {
      "post": {
        "tags": [
          "finance/script-instances"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/finance/modules/script-instances/provider/provider.js#L12) -> v2/generic/all/ScriptInstance | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/ScriptInstance',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/finance/modules/script-instances/provider/provider.js#L19) -> v2/generic/all/ScriptInstance | request: helper.keyColumn: keyColumn | helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  keyColumn,\n  url: 'v2/generic/all/ScriptInstance',\n  nestedEntities\n}\n- CREATE (src/srcProject/layout/finance/modules/script-instances/provider/provider.js#L26) -> v2/generic/all/ScriptInstance | request: helper.keyColumn: keyColumn / response: helper.responseContainerId: id / info: helper: getCreateProvider | helperArgs: {\n  keyColumn,\n  url: 'v2/generic/all/ScriptInstance',\n  responseContainerId: 'id'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data | helper.responseContainerId: id",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "active": {
                                "type": "boolean"
                              }
                            }
                          }
                        },
                        "id": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "active": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "data": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "active": {
                              "type": "boolean"
                            }
                          }
                        },
                        "id": {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            },
                            "active": {
                              "type": "boolean"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: keyColumn",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities\nhelper.keyColumn: keyColumn"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/ScriptInstance',\n  nestedEntities\n}",
          "helperArgs: {\n  keyColumn,\n  url: 'v2/generic/all/ScriptInstance',\n  nestedEntities\n}",
          "helper: getCreateProvider",
          "helperArgs: {\n  keyColumn,\n  url: 'v2/generic/all/ScriptInstance',\n  responseContainerId: 'id'\n}"
        ]
      }
    },
    "/v2/generic/all/ScriptInstance/{id}": {
      "put": {
        "tags": [
          "finance/script-instances"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/finance/modules/script-instances/provider/provider.js#L33) -> v2/generic/all/ScriptInstance/:id | request: helper.keyColumn: keyColumn | helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  keyColumn,\n  url: 'v2/generic/all/ScriptInstance/:id',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "active": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.keyColumn: keyColumn\nhelper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.keyColumn: keyColumn\nhelper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getUpdateProvider",
          "helperArgs: {\n  keyColumn,\n  url: 'v2/generic/all/ScriptInstance/:id',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/v2/generic/all/ScriptInstance/": {
      "post": {
        "tags": [
          "finance/script-instances"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/finance/modules/script-instances/provider/provider.js#L40) -> v2/generic/all/ScriptInstance/ | info: helper: getOneV2 | helperArgs: {\n  url: 'v2/generic/all/ScriptInstance/'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "active": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  url: 'v2/generic/all/ScriptInstance/'\n}"
        ]
      }
    },
    "/v2/standardReports/trialBalances": {
      "post": {
        "tags": [
          "finance/trial-balance"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_MANY (src/srcProject/layout/finance/modules/trial-balance/provider/provider.js#L44) -> v2/standardReports/trialBalances | request: helper.method: GET / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/standardReports/trialBalances',\n  method: 'GET'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "accountingCode": {
                            "type": "string"
                          },
                          "accountingLabel": {
                            "type": "string"
                          },
                          "initialBalance": {
                            "type": "number"
                          },
                          "currentDebitBalance": {
                            "type": "number"
                          },
                          "currentCreditBalance": {
                            "type": "number"
                          },
                          "closingBalance": {
                            "type": "number"
                          },
                          "codeOrLabel": {
                            "type": "string"
                          },
                          "period": {
                            "type": "string"
                          },
                          "betweenDate": {
                            "type": "string",
                            "format": "date"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: GET",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: GET"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/standardReports/trialBalances',\n  method: 'GET'\n}"
        ]
      }
    },
    "/jobInstance/update": {
      "post": {
        "tags": [
          "MACO/job-instances-v1"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/MACO/modules/job-instances-v1/provider/provider.js#L11) -> jobInstance/update | request: helper.method: POST / response: helper.responseContainerId: entityId / info: helper: getUpdateProvider | helperArgs: {\n  url: 'jobInstance/update',\n  method: 'POST',\n  responseContainerId: 'entityId'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainerId: entityId"
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'jobInstance/update',\n  method: 'POST',\n  responseContainerId: 'entityId'\n}"
        ]
      }
    },
    "/jobInstance": {
      "get": {
        "tags": [
          "MACO/job-instances-v1",
          "MACO/maco-elecOperationTraitement",
          "MACO/maco-elecPoDEvents",
          "MACO/maco-feesF15",
          "MACO/maco-fluxEvents",
          "MACO/maco-fluxFees",
          "MACO/maco-fluxXmlR15",
          "MACO/maco-fluxXmlR151"
        ],
        "summary": "Used in 8 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/MACO/modules/job-instances-v1/provider/provider.js#L18) -> jobInstance?jobInstanceCode= | response: responseContainer: 'jobInstanceDto' / info: keyColumn: 'id' | sortCFsByLatest: true\n- FIND_JOB_INSTANCE (src/srcProject/layout/MACO/modules/maco-elecOperationTraitement/provider/provider.js#L108) -> jobInstance?jobInstanceCode=:code | request: options: {\n  method: 'GET'\n} / response: responseContainer: 'jobInstanceDto'\n- FIND_JOB_INSTANCE (src/srcProject/layout/MACO/modules/maco-elecPoDEvents/provider/provider.js#L103) -> jobInstance?jobInstanceCode=:code | request: options: {\n  method: 'GET'\n} / response: responseContainer: 'jobInstanceDto'\n- FIND_JOB_INSTANCE (src/srcProject/layout/MACO/modules/maco-feesF15/provider/provider.js#L91) -> jobInstance?jobInstanceCode=:code | request: options: {\n  method: 'GET'\n} / response: responseContainer: 'jobInstanceDto'\n- FIND_JOB_INSTANCE (src/srcProject/layout/MACO/modules/maco-fluxEvents/provider/provider.js#L62) -> jobInstance?jobInstanceCode=:code | request: options: {\n  method: 'GET'\n} / response: responseContainer: 'jobInstanceDto'\n- FIND_JOB_INSTANCE (src/srcProject/layout/MACO/modules/maco-fluxFees/provider/provider.js#L83) -> jobInstance?jobInstanceCode=:code | request: options: {\n  method: 'GET'\n} / response: responseContainer: 'jobInstanceDto'\n- FIND_JOB_INSTANCE (src/srcProject/layout/MACO/modules/maco-fluxXmlR15/provider/provider.js#L75) -> jobInstance?jobInstanceCode=:code | request: options: {\n  method: 'GET'\n} / response: responseContainer: 'jobInstanceDto'\n- FIND_JOB_INSTANCE (src/srcProject/layout/MACO/modules/maco-fluxXmlR151/provider/provider.js#L55) -> jobInstance?jobInstanceCode=:code | request: options: {\n  method: 'GET'\n} / response: responseContainer: 'jobInstanceDto'",
        "responses": {
          "200": {
            "description": "Successful response. responseContainer: 'jobInstanceDto'",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobInstanceDto": {
                      "anyOf": [
                        {
                          "type": "object",
                          "properties": {
                            "prmId": {
                              "type": "string"
                            },
                            "startDate": {
                              "type": "string",
                              "format": "date"
                            },
                            "endDate": {
                              "type": "string",
                              "format": "date"
                            },
                            "operationType": {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string"
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "prmId": {
                              "anyOf": [
                                {
                                  "type": "string"
                                },
                                {
                                  "type": "number"
                                }
                              ]
                            },
                            "statusCode": {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                },
                                "description": {
                                  "type": "string"
                                }
                              }
                            },
                            "errorCode": {
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string"
                                },
                                "description": {
                                  "type": "string"
                                }
                              }
                            },
                            "integrationUserCode": {
                              "type": "string"
                            },
                            "statusUpdateDate": {
                              "type": "string",
                              "format": "date"
                            },
                            "payload": {
                              "type": "string"
                            },
                            "headerId": {
                              "type": "object",
                              "properties": {
                                "fileName": {
                                  "type": "string"
                                },
                                "creationDate": {
                                  "type": "string",
                                  "format": "date"
                                },
                                "loadingDate": {
                                  "type": "string",
                                  "format": "date"
                                }
                              }
                            },
                            "extId": {
                              "type": "string"
                            },
                            "eventType": {
                              "type": "string"
                            },
                            "eventDate": {
                              "type": "string",
                              "format": "date"
                            },
                            "eventNature": {
                              "type": "string"
                            },
                            "idAffaire": {
                              "type": "string"
                            },
                            "id": {
                              "type": "string"
                            },
                            "arpEicCode": {
                              "type": "string"
                            },
                            "gridContract": {
                              "type": "string"
                            },
                            "supplierEicCode": {
                              "type": "string"
                            },
                            "segmentPrm": {
                              "type": "string"
                            },
                            "etatContractuelEnedis": {
                              "type": "string"
                            },
                            "numDepannage": {
                              "type": "string"
                            },
                            "lastFtaUpdate": {
                              "type": "string",
                              "format": "date"
                            },
                            "lastPsAugmentation": {
                              "type": "string",
                              "format": "date"
                            },
                            "lastPsDiminution": {
                              "type": "string",
                              "format": "date"
                            },
                            "jourFixeReleve": {
                              "type": "string"
                            },
                            "periodiciteReleve": {
                              "type": "string"
                            },
                            "rangReleve": {
                              "type": "string"
                            },
                            "gpsLongitude": {
                              "type": "string"
                            },
                            "gpsLatitude": {
                              "type": "string"
                            },
                            "gpsAltitudeValeur": {
                              "type": "string"
                            },
                            "gpsAltitudeUnite": {
                              "type": "string"
                            },
                            "gpsQuality": {
                              "type": "string"
                            },
                            "datePremierePoseLinky": {
                              "type": "string",
                              "format": "date"
                            },
                            "nivOuvertCompt": {
                              "type": "string"
                            },
                            "dateChangementNiveauOuvertureServices": {
                              "type": "string",
                              "format": "date"
                            },
                            "teleOper": {
                              "type": "string"
                            },
                            "borneFixe": {
                              "type": "string"
                            },
                            "autoproducteur": {
                              "type": "string"
                            },
                            "autoconsoCollectif": {
                              "type": "string"
                            },
                            "typeHebergement": {
                              "type": "string"
                            },
                            "origineEvenement": {
                              "type": "string"
                            },
                            "addressStreetNum": {
                              "type": "string"
                            },
                            "addressStreet": {
                              "type": "string"
                            },
                            "addressStaircase": {
                              "type": "string"
                            },
                            "addressFloor": {
                              "type": "string"
                            },
                            "addressBuilding": {
                              "type": "string"
                            },
                            "city": {
                              "type": "string"
                            },
                            "country": {
                              "type": "string"
                            },
                            "locality": {
                              "type": "string"
                            },
                            "zipCode": {
                              "type": "string"
                            },
                            "codeInsee": {
                              "type": "string"
                            },
                            "refSitContract": {
                              "type": "string"
                            },
                            "numSequence": {
                              "type": "string"
                            },
                            "fta": {
                              "type": "string"
                            },
                            "puissSouscrite": {
                              "type": "string"
                            },
                            "puissSouscriteUnite": {
                              "type": "string"
                            },
                            "idStructureHorosaisonniere": {
                              "type": "string"
                            },
                            "calDist": {
                              "type": "string"
                            },
                            "calFour": {
                              "type": "string"
                            },
                            "calDistCalculated": {
                              "type": "string"
                            },
                            "calFourCalculated": {
                              "type": "string"
                            },
                            "idPlageHeuresCreuses": {
                              "type": "string"
                            },
                            "plageHeuresCreuses": {
                              "type": "string"
                            },
                            "idGroupePeriodeMobile": {
                              "type": "string"
                            },
                            "catClient": {
                              "type": "string"
                            },
                            "residClient": {
                              "type": "boolean"
                            },
                            "tensionLivraison": {
                              "type": "string"
                            },
                            "puissRaccord": {
                              "type": "string"
                            },
                            "domaineTension": {
                              "type": "string"
                            },
                            "branchementProvisoire": {
                              "type": "string"
                            },
                            "etatAlimPrm": {
                              "type": "string"
                            },
                            "dateDebutEtatAlimentation": {
                              "type": "string",
                              "format": "date"
                            },
                            "puissLim": {
                              "type": "string"
                            },
                            "localCoup": {
                              "type": "string"
                            },
                            "dateCoup": {
                              "type": "string",
                              "format": "date"
                            },
                            "motifCoup": {
                              "type": "string"
                            },
                            "motifLim": {
                              "type": "string"
                            },
                            "modeAlimentation": {
                              "type": "string"
                            },
                            "typeCompt": {
                              "type": "string"
                            },
                            "sousTypeCompt": {
                              "type": "string"
                            },
                            "tensionFonctionnementCompt": {
                              "type": "string"
                            },
                            "constructeurCompt": {
                              "type": "string"
                            },
                            "numSerieCompt": {
                              "type": "string"
                            },
                            "calibreCompt": {
                              "type": "string"
                            },
                            "nbCadransCompt": {
                              "type": "string"
                            },
                            "coeffLectureCompt": {
                              "type": "string"
                            },
                            "accessCompt": {
                              "type": "string"
                            },
                            "natureDisjoncteur": {
                              "type": "string"
                            },
                            "numSerieDisjoncteur": {
                              "type": "string"
                            },
                            "calibreDisjoncteur": {
                              "type": "string"
                            },
                            "intensiteDisjoncteur": {
                              "type": "string"
                            },
                            "pptCompt": {
                              "type": "string"
                            },
                            "idXmlC15": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string"
                                }
                              }
                            },
                            "userCodeIntegration": {
                              "type": "string"
                            },
                            "creationDateIntegration": {
                              "type": "string",
                              "format": "date"
                            },
                            "userCodeTraitement": {
                              "type": "string"
                            },
                            "creationDateTraitement": {
                              "type": "string",
                              "format": "date"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "jobInstanceCode",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ],
        "x-dev-notes": [
          "keyColumn: 'id'",
          "sortCFsByLatest: true"
        ]
      }
    },
    "/{maco}/api/rest/v2/billableElecSubscriptions/list": {
      "post": {
        "tags": [
          "MACO/maco-elecAboFacturable"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/MACO/modules/maco-elecAboFacturable/provider/provider.js#L16) -> {maco}/api/rest/v2/billableElecSubscriptions/list | response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/billableElecSubscriptions/list',\n  responseContainer: 'data'\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/MACO/modules/maco-elecAboFacturable/provider/provider.js#L23) -> {maco}/api/rest/v2/billableElecSubscriptions/list | response: helper.responseContainer: data / info: specificAPIEnabled: true | excludeProperties: ['undefined'] | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/billableElecSubscriptions/list',\n  responseContainer: 'data'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true",
          "helper: getListV2",
          "helperArgs: {\n  url: '{maco}/api/rest/v2/billableElecSubscriptions/list',\n  responseContainer: 'data'\n}",
          "excludeProperties: ['undefined']"
        ]
      }
    },
    "/{maco}/api/rest/v2/billableElecSubscriptions/": {
      "get": {
        "tags": [
          "MACO/maco-elecAboFacturable"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/MACO/modules/maco-elecAboFacturable/provider/provider.js#L31) -> {maco}/api/rest/v2/billableElecSubscriptions/ | request: options: {\n  method: 'GET'\n} / info: specificAPIEnabled: true",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ],
        "x-dev-notes": [
          "specificAPIEnabled: true"
        ]
      }
    },
    "/{maco}/api/rest/v2/billableElecSubscriptions/{id}": {
      "put": {
        "tags": [
          "MACO/maco-elecAboFacturable"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/MACO/modules/maco-elecAboFacturable/provider/provider.js#L38) -> {maco}/api/rest/v2/billableElecSubscriptions/:id | request: options: {\n  method: 'PUT'\n} / info: specificAPIEnabled: true",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true"
        ]
      }
    },
    "/{maco}/api/rest/v2/billableElecSubscriptions": {
      "post": {
        "tags": [
          "MACO/maco-elecAboFacturable"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/MACO/modules/maco-elecAboFacturable/provider/provider.js#L46) -> {maco}/api/rest/v2/billableElecSubscriptions | request: options: {\n  method: 'POST'\n} / info: specificAPIEnabled: true",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true"
        ]
      }
    },
    "/{maco}/api/rest/v2/elecCalendars/list": {
      "post": {
        "tags": [
          "MACO/maco-elecCalendar"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/MACO/modules/maco-elecCalendar/provider/provider.js#L16) -> {maco}/api/rest/v2/elecCalendars/list | response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/elecCalendars/list',\n  responseContainer: 'data'\n}\n- GET_MANY (src/srcProject/layout/MACO/modules/maco-elecCalendar/provider/provider.js#L23) -> {maco}/api/rest/v2/elecCalendars/list | response: responseContainer: 'data' / info: specificAPIEnabled: true\n- GET_MANY_REFERENCE (src/srcProject/layout/MACO/modules/maco-elecCalendar/provider/provider.js#L28) -> {maco}/api/rest/v2/elecCalendars/list | response: responseContainer: 'data' / info: specificAPIEnabled: true",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data | responseContainer: 'data'"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true",
          "helper: getListV2",
          "helperArgs: {\n  url: '{maco}/api/rest/v2/elecCalendars/list',\n  responseContainer: 'data'\n}"
        ]
      }
    },
    "/{maco}/api/rest/v2/elecCdrs/": {
      "get": {
        "tags": [
          "MACO/maco-elecCdr"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/MACO/modules/maco-elecCdr/provider/provider.js#L16) -> {maco}/api/rest/v2/elecCdrs/ | request: options: {\n  method: 'GET'\n} / info: specificAPIEnabled: true | keyColumn: keyColumn",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ],
        "x-dev-notes": [
          "specificAPIEnabled: true",
          "keyColumn: keyColumn"
        ]
      }
    },
    "/{maco}/api/rest/v2/elecCdrs/list": {
      "post": {
        "tags": [
          "MACO/maco-elecCdr"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/MACO/modules/maco-elecCdr/provider/provider.js#L25) -> {maco}/api/rest/v2/elecCdrs/list | response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/elecCdrs/list',\n  responseContainer: 'data'\n}\n- GET_MANY (src/srcProject/layout/MACO/modules/maco-elecCdr/provider/provider.js#L32) -> {maco}/api/rest/v2/elecCdrs/list | response: responseContainer: 'data' / info: specificAPIEnabled: true",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data | responseContainer: 'data'"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true",
          "helper: getListV2",
          "helperArgs: {\n  url: '{maco}/api/rest/v2/elecCdrs/list',\n  responseContainer: 'data'\n}"
        ]
      }
    },
    "/{maco}/api/rest/v2/elecBillableConsumption/list": {
      "post": {
        "tags": [
          "MACO/maco-elecConsoFacturable"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/MACO/modules/maco-elecConsoFacturable/provider/provider.js#L16) -> {maco}/api/rest/v2/elecBillableConsumption/list | response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/elecBillableConsumption/list',\n  responseContainer: 'data'\n}\n- GET_MANY (src/srcProject/layout/MACO/modules/maco-elecConsoFacturable/provider/provider.js#L23) -> {maco}/api/rest/v2/elecBillableConsumption/list | response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/elecBillableConsumption/list',\n  responseContainer: 'data'\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/MACO/modules/maco-elecConsoFacturable/provider/provider.js#L30) -> {maco}/api/rest/v2/elecBillableConsumption/list | request: options: {\n  method: 'POST'\n} / response: helper.responseContainer: data / info: specificAPIEnabled: true | excludeProperties: ['undefined'] | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/elecBillableConsumption/list',\n  responseContainer: 'data'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true",
          "helper: getListV2",
          "helperArgs: {\n  url: '{maco}/api/rest/v2/elecBillableConsumption/list',\n  responseContainer: 'data'\n}",
          "excludeProperties: ['undefined']"
        ]
      }
    },
    "/{maco}/api/rest/v2/elecBillableConsumption": {
      "post": {
        "tags": [
          "MACO/maco-elecConsoFacturable"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/MACO/modules/maco-elecConsoFacturable/provider/provider.js#L42) -> {maco}/api/rest/v2/elecBillableConsumption | request: options: {\n  method: 'POST'\n} / response: responseContainer: 'data' / info: specificAPIEnabled: true",
        "responses": {
          "200": {
            "description": "Successful response. responseContainer: 'data'"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true"
        ]
      }
    },
    "/{maco}/api/rest/v2/elecBillableConsumption/{id}": {
      "put": {
        "tags": [
          "MACO/maco-elecConsoFacturable"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/MACO/modules/maco-elecConsoFacturable/provider/provider.js#L50) -> {maco}/api/rest/v2/elecBillableConsumption/:id | request: options: {\n  method: 'PUT'\n} / info: specificAPIEnabled: true",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true"
        ]
      }
    },
    "/{maco}/api/rest/v2/elecBillableCharges/list": {
      "post": {
        "tags": [
          "MACO/maco-elecFraisFacturable"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/MACO/modules/maco-elecFraisFacturable/provider/provider.js#L16) -> {maco}/api/rest/v2/elecBillableCharges/list | response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/elecBillableCharges/list',\n  responseContainer: 'data'\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/MACO/modules/maco-elecFraisFacturable/provider/provider.js#L23) -> {maco}/api/rest/v2/elecBillableCharges/list | response: helper.responseContainer: data / info: specificAPIEnabled: true | excludeProperties: ['undefined'] | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/elecBillableCharges/list',\n  responseContainer: 'data'\n}\n- GET_MANY (src/srcProject/layout/MACO/modules/maco-elecFraisFacturable/provider/provider.js#L32) -> {maco}/api/rest/v2/elecBillableCharges/list | request: options: {\n  method: 'POST'\n} / response: responseContainer: 'data' / info: specificAPIEnabled: true | excludeProperties: ['undefined']",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data | responseContainer: 'data'"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true",
          "helper: getListV2",
          "helperArgs: {\n  url: '{maco}/api/rest/v2/elecBillableCharges/list',\n  responseContainer: 'data'\n}",
          "excludeProperties: ['undefined']"
        ]
      }
    },
    "/{maco}/api/rest/v2/elecBillableCharges/{id}": {
      "put": {
        "tags": [
          "MACO/maco-elecFraisFacturable"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/MACO/modules/maco-elecFraisFacturable/provider/provider.js#L42) -> {maco}/api/rest/v2/elecBillableCharges/:id | request: options: {\n  method: 'PUT'\n} / info: specificAPIEnabled: true",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true"
        ]
      }
    },
    "/{maco}/api/rest/v2/elecBillableCharges": {
      "post": {
        "tags": [
          "MACO/maco-elecFraisFacturable"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/MACO/modules/maco-elecFraisFacturable/provider/provider.js#L49) -> {maco}/api/rest/v2/elecBillableCharges | request: options: {\n  method: 'POST'\n} / info: specificAPIEnabled: true",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true"
        ]
      }
    },
    "/{maco}/api/rest/v2/elecLogs/list": {
      "post": {
        "tags": [
          "MACO/maco-elecLogs"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/MACO/modules/maco-elecLogs/provider/provider.js#L16) -> {maco}/api/rest/v2/elecLogs/list | response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/elecLogs/list',\n  responseContainer: 'data'\n}\n- GET_MANY (src/srcProject/layout/MACO/modules/maco-elecLogs/provider/provider.js#L23) -> {maco}/api/rest/v2/elecLogs/list | response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/elecLogs/list',\n  responseContainer: 'data'\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/MACO/modules/maco-elecLogs/provider/provider.js#L30) -> {maco}/api/rest/v2/elecLogs/list | response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/elecLogs/list',\n  responseContainer: 'data'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "date": {
                            "type": "string",
                            "format": "date"
                          },
                          "userCode": {
                            "type": "string"
                          },
                          "flux": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              }
                            }
                          },
                          "extId": {
                            "type": "string"
                          },
                          "idXml": {
                            "type": "string"
                          },
                          "fileName": {
                            "type": "string"
                          },
                          "status": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              }
                            }
                          },
                          "errorCode": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true",
          "helper: getListV2",
          "helperArgs: {\n  url: '{maco}/api/rest/v2/elecLogs/list',\n  responseContainer: 'data'\n}"
        ]
      }
    },
    "/{maco}/api/rest/v2/ElecProcessingOperations/list": {
      "post": {
        "tags": [
          "MACO/maco-elecOperationTraitement"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/MACO/modules/maco-elecOperationTraitement/provider/provider.js#L16) -> {maco}/api/rest/v2/ElecProcessingOperations/list | response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/ElecProcessingOperations/list',\n  responseContainer: 'data'\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/MACO/modules/maco-elecOperationTraitement/provider/provider.js#L23) -> {maco}/api/rest/v2/ElecProcessingOperations/list | response: helper.responseContainer: data / info: specificAPIEnabled: true | excludeProperties: ['undefined'] | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/ElecProcessingOperations/list',\n  responseContainer: 'data'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "prmId": {
                            "type": "string"
                          },
                          "startDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "endDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "operationType": {
                            "type": "object",
                            "properties": {
                              "description": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true",
          "helper: getListV2",
          "helperArgs: {\n  url: '{maco}/api/rest/v2/ElecProcessingOperations/list',\n  responseContainer: 'data'\n}",
          "excludeProperties: ['undefined']"
        ]
      }
    },
    "/{maco}/api/rest/v2/ElecProcessingOperations/": {
      "get": {
        "tags": [
          "MACO/maco-elecOperationTraitement"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/MACO/modules/maco-elecOperationTraitement/provider/provider.js#L31) -> {maco}/api/rest/v2/ElecProcessingOperations/ | request: options: {\n  method: 'GET'\n} / info: specificAPIEnabled: true",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "prmId": {
                      "type": "string"
                    },
                    "startDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "endDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "operationType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ],
        "x-dev-notes": [
          "specificAPIEnabled: true"
        ]
      }
    },
    "/{maco}/api/rest/v2/ElecProcessingOperations/{id}": {
      "put": {
        "tags": [
          "MACO/maco-elecOperationTraitement"
        ],
        "summary": "Used in 4 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/MACO/modules/maco-elecOperationTraitement/provider/provider.js#L38) -> {maco}/api/rest/v2/ElecProcessingOperations/:id | request: options: {\n  method: 'PUT'\n} / info: specificAPIEnabled: true\n- MODIFY (src/srcProject/layout/MACO/modules/maco-elecOperationTraitement/provider/provider.js#L52) -> {maco}/api/rest/v2/ElecProcessingOperations/:id | request: options: {\n  method: 'PUT'\n}\n- ABANDONED (src/srcProject/layout/MACO/modules/maco-elecOperationTraitement/provider/provider.js#L78) -> {maco}/api/rest/v2/ElecProcessingOperations/:id | request: options: {\n  method: 'PUT'\n} | bodyParams: {\n  statusCode: {\n    code: 'ABANDONED'\n  }\n} / info: appendParamsToBody: false\n- TO_TREAT (src/srcProject/layout/MACO/modules/maco-elecOperationTraitement/provider/provider.js#L90) -> {maco}/api/rest/v2/ElecProcessingOperations/:id | request: bodyParams: {\n  statusCode: {\n    code: 'TO_TREAT'\n  }\n} | options: {\n  method: 'PUT'\n} / info: appendParamsToBody: false",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "prmId": {
                      "type": "string"
                    },
                    "startDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "endDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "operationType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}\nbodyParams: {\n  statusCode: {\n    code: 'ABANDONED'\n  }\n}\nbodyParams: {\n  statusCode: {\n    code: 'TO_TREAT'\n  }\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "example": "ABANDONED"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "example": "TO_TREAT"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true",
          "appendParamsToBody: false"
        ]
      },
      "get": {
        "tags": [
          "MACO/maco-elecOperationTraitement"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- OLD (src/srcProject/layout/MACO/modules/maco-elecOperationTraitement/provider/provider.js#L45) -> {maco}/api/rest/v2/ElecProcessingOperations/:id | request: options: {\n  method: 'GET'\n} / info: specificAPIEnabled: true",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "prmId": {
                      "type": "string"
                    },
                    "startDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "endDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "operationType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ],
        "x-dev-notes": [
          "specificAPIEnabled: true"
        ]
      }
    },
    "/{maco}/api/rest/v2/ElecProcessingOperations": {
      "post": {
        "tags": [
          "MACO/maco-elecOperationTraitement"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/MACO/modules/maco-elecOperationTraitement/provider/provider.js#L58) -> {maco}/api/rest/v2/ElecProcessingOperations | request: options: {\n  method: 'POST'\n} | bodyParams: {\n  creationDate: '@now',\n  userCodeCreation: '@currentUser',\n  statusCode: {\n    code: 'TREATED'\n  }\n} / info: appendBodyParamsToRecordValues: true\n- CREATE_OP (src/srcProject/layout/MACO/modules/maco-elecOperationTraitement/provider/provider.js#L72) -> {maco}/api/rest/v2/ElecProcessingOperations | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "prmId": {
                      "type": "string"
                    },
                    "startDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "endDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "operationType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}\nbodyParams: {\n  creationDate: '@now',\n  userCodeCreation: '@currentUser',\n  statusCode: {\n    code: 'TREATED'\n  }\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "creationDate": {
                    "type": "string",
                    "example": "@now"
                  },
                  "userCodeCreation": {
                    "type": "string",
                    "example": "@currentUser"
                  },
                  "statusCode": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "example": "TREATED"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-dev-notes": [
          "appendBodyParamsToRecordValues: true"
        ]
      }
    },
    "/{maco}/api/rest/v2/elecPodMacos/list": {
      "post": {
        "tags": [
          "MACO/maco-elecPod"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/MACO/modules/maco-elecPod/provider/provider.js#L16) -> {maco}/api/rest/v2/elecPodMacos/list | response: helper.responseContainer: data / info: specificAPIEnabled: true | defaultFilter: [{\n  key: 'validityEndDate',\n  value: '9999-12-31',\n  operation: '='\n}] | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/elecPodMacos/list',\n  responseContainer: 'data'\n}\n- GET_MANY (src/srcProject/layout/MACO/modules/maco-elecPod/provider/provider.js#L30) -> {maco}/api/rest/v2/elecPodMacos/list | response: helper.responseContainer: data / info: keyColumn: keyColumn | specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/elecPodMacos/list',\n  responseContainer: 'data'\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/MACO/modules/maco-elecPod/provider/provider.js#L38) -> {maco}/api/rest/v2/elecPodMacos/list | response: helper.responseContainer: data / info: keyColumn: keyColumn | specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/elecPodMacos/list',\n  responseContainer: 'data'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true",
          "defaultFilter: [{\n  key: 'validityEndDate',\n  value: '9999-12-31',\n  operation: '='\n}]",
          "helper: getListV2",
          "helperArgs: {\n  url: '{maco}/api/rest/v2/elecPodMacos/list',\n  responseContainer: 'data'\n}",
          "keyColumn: keyColumn"
        ]
      }
    },
    "/{maco}/api/rest/v2/elecPodMacos/": {
      "post": {
        "tags": [
          "MACO/maco-elecPod"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/MACO/modules/maco-elecPod/provider/provider.js#L46) -> {maco}/api/rest/v2/elecPodMacos/ | info: specificAPIEnabled: true | keyColumn: keyColumn | helper: getOneV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/elecPodMacos/'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true",
          "keyColumn: keyColumn",
          "helper: getOneV2",
          "helperArgs: {\n  url: '{maco}/api/rest/v2/elecPodMacos/'\n}"
        ]
      }
    },
    "/{maco}/api/rest/v2/elecPodMacos/{id}": {
      "put": {
        "tags": [
          "MACO/maco-elecPod"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/MACO/modules/maco-elecPod/provider/provider.js#L53) -> {maco}/api/rest/v2/elecPodMacos/:id | request: helper.method: PUT | helper.appendParamsToBody: true / info: helper: getUpdateProvider | helperArgs: {\n  url: '{maco}/api/rest/v2/elecPodMacos/:id',\n  method: 'PUT',\n  appendParamsToBody: true\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: PUT\nhelper.appendParamsToBody: true",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: PUT\nhelper.appendParamsToBody: true"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: '{maco}/api/rest/v2/elecPodMacos/:id',\n  method: 'PUT',\n  appendParamsToBody: true\n}"
        ]
      }
    },
    "/{maco}/api/rest/v2/elecPodEvents/list": {
      "post": {
        "tags": [
          "MACO/maco-elecPoDEvents"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/MACO/modules/maco-elecPoDEvents/provider/provider.js#L17) -> {maco}/api/rest/v2/elecPodEvents/list | response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/elecPodEvents/list',\n  responseContainer: 'data'\n}\n- GET_MANY (src/srcProject/layout/MACO/modules/maco-elecPoDEvents/provider/provider.js#L24) -> {maco}/api/rest/v2/elecPodEvents/list | response: helper.responseContainer: data / info: keyColumn: keyColumn | specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/elecPodEvents/list',\n  responseContainer: 'data'\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/MACO/modules/maco-elecPoDEvents/provider/provider.js#L32) -> {maco}/api/rest/v2/elecPodEvents/list | response: helper.responseContainer: data / info: keyColumn: keyColumn | specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/elecPodEvents/list',\n  responseContainer: 'data'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true",
          "helper: getListV2",
          "helperArgs: {\n  url: '{maco}/api/rest/v2/elecPodEvents/list',\n  responseContainer: 'data'\n}",
          "keyColumn: keyColumn"
        ]
      }
    },
    "/{maco}/api/rest/v2/elecPodEvents/": {
      "post": {
        "tags": [
          "MACO/maco-elecPoDEvents"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/MACO/modules/maco-elecPoDEvents/provider/provider.js#L40) -> {maco}/api/rest/v2/elecPodEvents/ | response: helper.responseContainer: data / info: keyColumn: keyColumn | specificAPIEnabled: true | helper: getOneV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/elecPodEvents/',\n  responseContainer: 'data'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "specificAPIEnabled: true",
          "helper: getOneV2",
          "helperArgs: {\n  url: '{maco}/api/rest/v2/elecPodEvents/',\n  responseContainer: 'data'\n}"
        ]
      }
    },
    "/{maco}/api/rest/v2/elecPodEvents/{id}": {
      "put": {
        "tags": [
          "MACO/maco-elecPoDEvents"
        ],
        "summary": "Used in 5 frontend location(s)",
        "description": "- ABANDONED (src/srcProject/layout/MACO/modules/maco-elecPoDEvents/provider/provider.js#L48) -> {maco}/api/rest/v2/elecPodEvents/:id | request: options: {\n  method: 'PUT'\n} | bodyParams: {\n  statusCode: {\n    code: 'ABANDONED'\n  }\n} / info: appendParamsToBody: false\n- TO_TREAT (src/srcProject/layout/MACO/modules/maco-elecPoDEvents/provider/provider.js#L60) -> {maco}/api/rest/v2/elecPodEvents/:id | request: bodyParams: {\n  statusCode: {\n    code: 'TO_TREAT'\n  }\n} | options: {\n  method: 'PUT'\n} / info: appendParamsToBody: false\n- TO_TREAT_MANUALLY (src/srcProject/layout/MACO/modules/maco-elecPoDEvents/provider/provider.js#L72) -> {maco}/api/rest/v2/elecPodEvents/:id | request: bodyParams: {\n  statusCode: {\n    code: 'TO_TREAT_MANUALLY'\n  }\n} | options: {\n  method: 'PUT'\n} / info: appendParamsToBody: false\n- CREATED (src/srcProject/layout/MACO/modules/maco-elecPoDEvents/provider/provider.js#L84) -> {maco}/api/rest/v2/elecPodEvents/:id | request: bodyParams: {\n  statusCode: {\n    code: 'CREATED'\n  }\n} | options: {\n  method: 'PUT'\n} / info: appendParamsToBody: false\n- UPDATE (src/srcProject/layout/MACO/modules/maco-elecPoDEvents/provider/provider.js#L96) -> {maco}/api/rest/v2/elecPodEvents/:id | request: options: {\n  method: 'PUT'\n} / info: appendParamsToBody: true",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}\nbodyParams: {\n  statusCode: {\n    code: 'ABANDONED'\n  }\n}\nbodyParams: {\n  statusCode: {\n    code: 'TO_TREAT'\n  }\n}\nbodyParams: {\n  statusCode: {\n    code: 'TO_TREAT_MANUALLY'\n  }\n}\nbodyParams: {\n  statusCode: {\n    code: 'CREATED'\n  }\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "example": "ABANDONED"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "example": "TO_TREAT"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "example": "TO_TREAT_MANUALLY"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "example": "CREATED"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "x-dev-notes": [
          "appendParamsToBody: false",
          "appendParamsToBody: true"
        ]
      }
    },
    "/{maco}/api/rest/v2/elecProcessingCodes/list": {
      "post": {
        "tags": [
          "MACO/maco-elecProcessingCodes"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/MACO/modules/maco-elecProcessingCodes/provider/provider.js#L12) -> {maco}/api/rest/v2/elecProcessingCodes/list | request: prepareParams: params => {\n  const {\n    sort = {},\n    pagination = {},\n    ...restParams\n  } = params;\n  const {\n    perPage,\n    ...restPag\n  } = pagination;\n  return {\n    sort: {\n      field: keyColumn\n    },\n    pagination: {\n      perPage: '99999',\n      ...restPag\n    },\n    ...restParams\n  };\n} | helper.keyColumn: keyColumn / response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  keyColumn,\n  url: '{maco}/api/rest/v2/elecProcessingCodes/list',\n  responseContainer: 'data'\n}\n- GET_MANY (src/srcProject/layout/MACO/modules/maco-elecProcessingCodes/provider/provider.js#L34) -> {maco}/api/rest/v2/elecProcessingCodes/list | request: helper.keyColumn: keyColumn / response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  keyColumn,\n  url: '{maco}/api/rest/v2/elecProcessingCodes/list',\n  responseContainer: 'data'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    sort = {},\n    pagination = {},\n    ...restParams\n  } = params;\n  const {\n    perPage,\n    ...restPag\n  } = pagination;\n  return {\n    sort: {\n      field: keyColumn\n    },\n    pagination: {\n      perPage: '99999',\n      ...restPag\n    },\n    ...restParams\n  };\n}\nhelper.keyColumn: keyColumn",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    sort = {},\n    pagination = {},\n    ...restParams\n  } = params;\n  const {\n    perPage,\n    ...restPag\n  } = pagination;\n  return {\n    sort: {\n      field: keyColumn\n    },\n    pagination: {\n      perPage: '99999',\n      ...restPag\n    },\n    ...restParams\n  };\n}\nhelper.keyColumn: keyColumn"
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true",
          "helper: getListV2",
          "helperArgs: {\n  keyColumn,\n  url: '{maco}/api/rest/v2/elecProcessingCodes/list',\n  responseContainer: 'data'\n}"
        ]
      }
    },
    "/{maco}/api/rest/v2/elecProcessingOperationTypes/list": {
      "post": {
        "tags": [
          "MACO/maco-elecTypeOperationTraitement"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/MACO/modules/maco-elecTypeOperationTraitement/provider/provider.js#L12) -> {maco}/api/rest/v2/elecProcessingOperationTypes/list | request: prepareParams: params => {\n  const {\n    sort = {},\n    ...restParams\n  } = params;\n  return {\n    sort: {\n      field: keyColumn\n    },\n    ...restParams\n  };\n} | helper.keyColumn: keyColumn / response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  keyColumn,\n  url: '{maco}/api/rest/v2/elecProcessingOperationTypes/list',\n  responseContainer: 'data'\n}\n- GET_MANY (src/srcProject/layout/MACO/modules/maco-elecTypeOperationTraitement/provider/provider.js#L29) -> {maco}/api/rest/v2/elecProcessingOperationTypes/list | request: helper.keyColumn: keyColumn / response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  keyColumn,\n  url: '{maco}/api/rest/v2/elecProcessingOperationTypes/list',\n  responseContainer: 'data'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    sort = {},\n    ...restParams\n  } = params;\n  return {\n    sort: {\n      field: keyColumn\n    },\n    ...restParams\n  };\n}\nhelper.keyColumn: keyColumn",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    sort = {},\n    ...restParams\n  } = params;\n  return {\n    sort: {\n      field: keyColumn\n    },\n    ...restParams\n  };\n}\nhelper.keyColumn: keyColumn"
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true",
          "helper: getListV2",
          "helperArgs: {\n  keyColumn,\n  url: '{maco}/api/rest/v2/elecProcessingOperationTypes/list',\n  responseContainer: 'data'\n}"
        ]
      }
    },
    "/{maco}/api/rest/v2/f15ElecCharges/list": {
      "post": {
        "tags": [
          "MACO/maco-feesF15"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/MACO/modules/maco-feesF15/provider/provider.js#L16) -> {maco}/api/rest/v2/f15ElecCharges/list | response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/f15ElecCharges/list',\n  responseContainer: 'data'\n}\n- GET_MANY (src/srcProject/layout/MACO/modules/maco-feesF15/provider/provider.js#L23) -> {maco}/api/rest/v2/f15ElecCharges/list | response: helper.responseContainer: data / info: keyColumn: keyColumn | specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/f15ElecCharges/list',\n  responseContainer: 'data'\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/MACO/modules/maco-feesF15/provider/provider.js#L31) -> {maco}/api/rest/v2/f15ElecCharges/list | response: helper.responseContainer: data / info: keyColumn: keyColumn | specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/f15ElecCharges/list',\n  responseContainer: 'data'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true",
          "helper: getListV2",
          "helperArgs: {\n  url: '{maco}/api/rest/v2/f15ElecCharges/list',\n  responseContainer: 'data'\n}",
          "keyColumn: keyColumn"
        ]
      }
    },
    "/{maco}/api/rest/v2/f15ElecCharges/": {
      "post": {
        "tags": [
          "MACO/maco-feesF15"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/MACO/modules/maco-feesF15/provider/provider.js#L39) -> {maco}/api/rest/v2/f15ElecCharges/ | response: helper.responseContainer: data / info: keyColumn: keyColumn | specificAPIEnabled: true | helper: getOneV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/f15ElecCharges/',\n  responseContainer: 'data'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "specificAPIEnabled: true",
          "helper: getOneV2",
          "helperArgs: {\n  url: '{maco}/api/rest/v2/f15ElecCharges/',\n  responseContainer: 'data'\n}"
        ]
      }
    },
    "/{maco}/api/rest/v2/f15ElecCharges/{id}": {
      "put": {
        "tags": [
          "MACO/maco-feesF15"
        ],
        "summary": "Used in 4 frontend location(s)",
        "description": "- ABANDONED (src/srcProject/layout/MACO/modules/maco-feesF15/provider/provider.js#L47) -> {maco}/api/rest/v2/f15ElecCharges/:id | request: options: {\n  method: 'PUT'\n} | bodyParams: {\n  statusCode: {\n    code: 'ABANDONED'\n  }\n} / info: appendParamsToBody: false\n- TO_TREAT (src/srcProject/layout/MACO/modules/maco-feesF15/provider/provider.js#L59) -> {maco}/api/rest/v2/f15ElecCharges/:id | request: bodyParams: {\n  statusCode: {\n    code: 'TO_TREAT'\n  }\n} | options: {\n  method: 'PUT'\n} / info: appendParamsToBody: false\n- TO_CHECK (src/srcProject/layout/MACO/modules/maco-feesF15/provider/provider.js#L71) -> {maco}/api/rest/v2/f15ElecCharges/:id | request: bodyParams: {\n  statusCode: {\n    code: 'TO_CHECK'\n  }\n} | options: {\n  method: 'PUT'\n} / info: appendParamsToBody: false\n- MODIFICATION (src/srcProject/layout/MACO/modules/maco-feesF15/provider/provider.js#L83) -> {maco}/api/rest/v2/f15ElecCharges/:id | request: options: {\n  method: 'PUT'\n} / info: appendParamsToBody: true | excludeProperties: ['undefined']",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}\nbodyParams: {\n  statusCode: {\n    code: 'ABANDONED'\n  }\n}\nbodyParams: {\n  statusCode: {\n    code: 'TO_TREAT'\n  }\n}\nbodyParams: {\n  statusCode: {\n    code: 'TO_CHECK'\n  }\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "example": "ABANDONED"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "example": "TO_TREAT"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "example": "TO_CHECK"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "x-dev-notes": [
          "appendParamsToBody: false",
          "appendParamsToBody: true",
          "excludeProperties: ['undefined']"
        ]
      }
    },
    "/{maco}/api/rest/v2/c15ElecXml/list": {
      "post": {
        "tags": [
          "MACO/maco-fluxEvents"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/MACO/modules/maco-fluxEvents/provider/provider.js#L16) -> {maco}/api/rest/v2/c15ElecXml/list | response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/c15ElecXml/list',\n  responseContainer: 'data'\n}\n- GET_MANY (src/srcProject/layout/MACO/modules/maco-fluxEvents/provider/provider.js#L23) -> {maco}/api/rest/v2/c15ElecXml/list | response: helper.responseContainer: data / info: keyColumn: keyColumn | specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/c15ElecXml/list',\n  responseContainer: 'data'\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/MACO/modules/maco-fluxEvents/provider/provider.js#L31) -> {maco}/api/rest/v2/c15ElecXml/list | response: helper.responseContainer: data / info: keyColumn: keyColumn | specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/c15ElecXml/list',\n  responseContainer: 'data'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "prmId": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          },
                          "statusCode": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              }
                            }
                          },
                          "errorCode": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              }
                            }
                          },
                          "integrationUserCode": {
                            "type": "string"
                          },
                          "statusUpdateDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "payload": {
                            "type": "string"
                          },
                          "headerId": {
                            "type": "object",
                            "properties": {
                              "fileName": {
                                "type": "string"
                              },
                              "creationDate": {
                                "type": "string",
                                "format": "date"
                              },
                              "loadingDate": {
                                "type": "string",
                                "format": "date"
                              }
                            }
                          },
                          "extId": {
                            "type": "string"
                          },
                          "eventType": {
                            "type": "string"
                          },
                          "eventDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "eventNature": {
                            "type": "string"
                          },
                          "idAffaire": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "arpEicCode": {
                            "type": "string"
                          },
                          "gridContract": {
                            "type": "string"
                          },
                          "supplierEicCode": {
                            "type": "string"
                          },
                          "segmentPrm": {
                            "type": "string"
                          },
                          "etatContractuelEnedis": {
                            "type": "string"
                          },
                          "numDepannage": {
                            "type": "string"
                          },
                          "lastFtaUpdate": {
                            "type": "string",
                            "format": "date"
                          },
                          "lastPsAugmentation": {
                            "type": "string",
                            "format": "date"
                          },
                          "lastPsDiminution": {
                            "type": "string",
                            "format": "date"
                          },
                          "jourFixeReleve": {
                            "type": "string"
                          },
                          "periodiciteReleve": {
                            "type": "string"
                          },
                          "rangReleve": {
                            "type": "string"
                          },
                          "gpsLongitude": {
                            "type": "string"
                          },
                          "gpsLatitude": {
                            "type": "string"
                          },
                          "gpsAltitudeValeur": {
                            "type": "string"
                          },
                          "gpsAltitudeUnite": {
                            "type": "string"
                          },
                          "gpsQuality": {
                            "type": "string"
                          },
                          "datePremierePoseLinky": {
                            "type": "string",
                            "format": "date"
                          },
                          "nivOuvertCompt": {
                            "type": "string"
                          },
                          "dateChangementNiveauOuvertureServices": {
                            "type": "string",
                            "format": "date"
                          },
                          "teleOper": {
                            "type": "string"
                          },
                          "borneFixe": {
                            "type": "string"
                          },
                          "autoproducteur": {
                            "type": "string"
                          },
                          "autoconsoCollectif": {
                            "type": "string"
                          },
                          "typeHebergement": {
                            "type": "string"
                          },
                          "origineEvenement": {
                            "type": "string"
                          },
                          "addressStreetNum": {
                            "type": "string"
                          },
                          "addressStreet": {
                            "type": "string"
                          },
                          "addressStaircase": {
                            "type": "string"
                          },
                          "addressFloor": {
                            "type": "string"
                          },
                          "addressBuilding": {
                            "type": "string"
                          },
                          "city": {
                            "type": "string"
                          },
                          "country": {
                            "type": "string"
                          },
                          "locality": {
                            "type": "string"
                          },
                          "zipCode": {
                            "type": "string"
                          },
                          "codeInsee": {
                            "type": "string"
                          },
                          "refSitContract": {
                            "type": "string"
                          },
                          "numSequence": {
                            "type": "string"
                          },
                          "fta": {
                            "type": "string"
                          },
                          "puissSouscrite": {
                            "type": "string"
                          },
                          "puissSouscriteUnite": {
                            "type": "string"
                          },
                          "idStructureHorosaisonniere": {
                            "type": "string"
                          },
                          "calDist": {
                            "type": "string"
                          },
                          "calFour": {
                            "type": "string"
                          },
                          "calDistCalculated": {
                            "type": "string"
                          },
                          "calFourCalculated": {
                            "type": "string"
                          },
                          "idPlageHeuresCreuses": {
                            "type": "string"
                          },
                          "plageHeuresCreuses": {
                            "type": "string"
                          },
                          "idGroupePeriodeMobile": {
                            "type": "string"
                          },
                          "catClient": {
                            "type": "string"
                          },
                          "residClient": {
                            "type": "boolean"
                          },
                          "tensionLivraison": {
                            "type": "string"
                          },
                          "puissRaccord": {
                            "type": "string"
                          },
                          "domaineTension": {
                            "type": "string"
                          },
                          "branchementProvisoire": {
                            "type": "string"
                          },
                          "etatAlimPrm": {
                            "type": "string"
                          },
                          "dateDebutEtatAlimentation": {
                            "type": "string",
                            "format": "date"
                          },
                          "puissLim": {
                            "type": "string"
                          },
                          "localCoup": {
                            "type": "string"
                          },
                          "dateCoup": {
                            "type": "string",
                            "format": "date"
                          },
                          "motifCoup": {
                            "type": "string"
                          },
                          "motifLim": {
                            "type": "string"
                          },
                          "modeAlimentation": {
                            "type": "string"
                          },
                          "typeCompt": {
                            "type": "string"
                          },
                          "sousTypeCompt": {
                            "type": "string"
                          },
                          "tensionFonctionnementCompt": {
                            "type": "string"
                          },
                          "constructeurCompt": {
                            "type": "string"
                          },
                          "numSerieCompt": {
                            "type": "string"
                          },
                          "calibreCompt": {
                            "type": "string"
                          },
                          "nbCadransCompt": {
                            "type": "string"
                          },
                          "coeffLectureCompt": {
                            "type": "string"
                          },
                          "accessCompt": {
                            "type": "string"
                          },
                          "natureDisjoncteur": {
                            "type": "string"
                          },
                          "numSerieDisjoncteur": {
                            "type": "string"
                          },
                          "calibreDisjoncteur": {
                            "type": "string"
                          },
                          "intensiteDisjoncteur": {
                            "type": "string"
                          },
                          "pptCompt": {
                            "type": "string"
                          },
                          "idXmlC15": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              }
                            }
                          },
                          "userCodeIntegration": {
                            "type": "string"
                          },
                          "creationDateIntegration": {
                            "type": "string",
                            "format": "date"
                          },
                          "userCodeTraitement": {
                            "type": "string"
                          },
                          "creationDateTraitement": {
                            "type": "string",
                            "format": "date"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true",
          "helper: getListV2",
          "helperArgs: {\n  url: '{maco}/api/rest/v2/c15ElecXml/list',\n  responseContainer: 'data'\n}",
          "keyColumn: keyColumn"
        ]
      }
    },
    "/{maco}/api/rest/v2/c15ElecXml/{id}": {
      "put": {
        "tags": [
          "MACO/maco-fluxEvents"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- ABANDONED (src/srcProject/layout/MACO/modules/maco-fluxEvents/provider/provider.js#L40) -> {maco}/api/rest/v2/c15ElecXml/:id | request: helper.method: PUT | helper.bodyParams: {\n  statusCode: {\n    code: 'ABANDONED'\n  }\n} | helper.appendParamsToBody: false / info: helper: getUpdateProvider | helperArgs: {\n  url: '{maco}/api/rest/v2/c15ElecXml/:id',\n  method: 'PUT',\n  bodyParams: {\n    statusCode: {\n      code: 'ABANDONED'\n    }\n  },\n  appendParamsToBody: false\n}\n- TO_TREAT (src/srcProject/layout/MACO/modules/maco-fluxEvents/provider/provider.js#L51) -> {maco}/api/rest/v2/c15ElecXml/:id | request: helper.method: PUT | helper.bodyParams: {\n  statusCode: {\n    code: 'TO_TREAT'\n  }\n} / info: appendParamsToBody: false | helper: getUpdateProvider | helperArgs: {\n  url: '{maco}/api/rest/v2/c15ElecXml/:id',\n  method: 'PUT',\n  bodyParams: {\n    statusCode: {\n      code: 'TO_TREAT'\n    }\n  }\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "prmId": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "number"
                        }
                      ]
                    },
                    "statusCode": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "errorCode": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        }
                      }
                    },
                    "integrationUserCode": {
                      "type": "string"
                    },
                    "statusUpdateDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "payload": {
                      "type": "string"
                    },
                    "headerId": {
                      "type": "object",
                      "properties": {
                        "fileName": {
                          "type": "string"
                        },
                        "creationDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "loadingDate": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "extId": {
                      "type": "string"
                    },
                    "eventType": {
                      "type": "string"
                    },
                    "eventDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "eventNature": {
                      "type": "string"
                    },
                    "idAffaire": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "arpEicCode": {
                      "type": "string"
                    },
                    "gridContract": {
                      "type": "string"
                    },
                    "supplierEicCode": {
                      "type": "string"
                    },
                    "segmentPrm": {
                      "type": "string"
                    },
                    "etatContractuelEnedis": {
                      "type": "string"
                    },
                    "numDepannage": {
                      "type": "string"
                    },
                    "lastFtaUpdate": {
                      "type": "string",
                      "format": "date"
                    },
                    "lastPsAugmentation": {
                      "type": "string",
                      "format": "date"
                    },
                    "lastPsDiminution": {
                      "type": "string",
                      "format": "date"
                    },
                    "jourFixeReleve": {
                      "type": "string"
                    },
                    "periodiciteReleve": {
                      "type": "string"
                    },
                    "rangReleve": {
                      "type": "string"
                    },
                    "gpsLongitude": {
                      "type": "string"
                    },
                    "gpsLatitude": {
                      "type": "string"
                    },
                    "gpsAltitudeValeur": {
                      "type": "string"
                    },
                    "gpsAltitudeUnite": {
                      "type": "string"
                    },
                    "gpsQuality": {
                      "type": "string"
                    },
                    "datePremierePoseLinky": {
                      "type": "string",
                      "format": "date"
                    },
                    "nivOuvertCompt": {
                      "type": "string"
                    },
                    "dateChangementNiveauOuvertureServices": {
                      "type": "string",
                      "format": "date"
                    },
                    "teleOper": {
                      "type": "string"
                    },
                    "borneFixe": {
                      "type": "string"
                    },
                    "autoproducteur": {
                      "type": "string"
                    },
                    "autoconsoCollectif": {
                      "type": "string"
                    },
                    "typeHebergement": {
                      "type": "string"
                    },
                    "origineEvenement": {
                      "type": "string"
                    },
                    "addressStreetNum": {
                      "type": "string"
                    },
                    "addressStreet": {
                      "type": "string"
                    },
                    "addressStaircase": {
                      "type": "string"
                    },
                    "addressFloor": {
                      "type": "string"
                    },
                    "addressBuilding": {
                      "type": "string"
                    },
                    "city": {
                      "type": "string"
                    },
                    "country": {
                      "type": "string"
                    },
                    "locality": {
                      "type": "string"
                    },
                    "zipCode": {
                      "type": "string"
                    },
                    "codeInsee": {
                      "type": "string"
                    },
                    "refSitContract": {
                      "type": "string"
                    },
                    "numSequence": {
                      "type": "string"
                    },
                    "fta": {
                      "type": "string"
                    },
                    "puissSouscrite": {
                      "type": "string"
                    },
                    "puissSouscriteUnite": {
                      "type": "string"
                    },
                    "idStructureHorosaisonniere": {
                      "type": "string"
                    },
                    "calDist": {
                      "type": "string"
                    },
                    "calFour": {
                      "type": "string"
                    },
                    "calDistCalculated": {
                      "type": "string"
                    },
                    "calFourCalculated": {
                      "type": "string"
                    },
                    "idPlageHeuresCreuses": {
                      "type": "string"
                    },
                    "plageHeuresCreuses": {
                      "type": "string"
                    },
                    "idGroupePeriodeMobile": {
                      "type": "string"
                    },
                    "catClient": {
                      "type": "string"
                    },
                    "residClient": {
                      "type": "boolean"
                    },
                    "tensionLivraison": {
                      "type": "string"
                    },
                    "puissRaccord": {
                      "type": "string"
                    },
                    "domaineTension": {
                      "type": "string"
                    },
                    "branchementProvisoire": {
                      "type": "string"
                    },
                    "etatAlimPrm": {
                      "type": "string"
                    },
                    "dateDebutEtatAlimentation": {
                      "type": "string",
                      "format": "date"
                    },
                    "puissLim": {
                      "type": "string"
                    },
                    "localCoup": {
                      "type": "string"
                    },
                    "dateCoup": {
                      "type": "string",
                      "format": "date"
                    },
                    "motifCoup": {
                      "type": "string"
                    },
                    "motifLim": {
                      "type": "string"
                    },
                    "modeAlimentation": {
                      "type": "string"
                    },
                    "typeCompt": {
                      "type": "string"
                    },
                    "sousTypeCompt": {
                      "type": "string"
                    },
                    "tensionFonctionnementCompt": {
                      "type": "string"
                    },
                    "constructeurCompt": {
                      "type": "string"
                    },
                    "numSerieCompt": {
                      "type": "string"
                    },
                    "calibreCompt": {
                      "type": "string"
                    },
                    "nbCadransCompt": {
                      "type": "string"
                    },
                    "coeffLectureCompt": {
                      "type": "string"
                    },
                    "accessCompt": {
                      "type": "string"
                    },
                    "natureDisjoncteur": {
                      "type": "string"
                    },
                    "numSerieDisjoncteur": {
                      "type": "string"
                    },
                    "calibreDisjoncteur": {
                      "type": "string"
                    },
                    "intensiteDisjoncteur": {
                      "type": "string"
                    },
                    "pptCompt": {
                      "type": "string"
                    },
                    "idXmlC15": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        }
                      }
                    },
                    "userCodeIntegration": {
                      "type": "string"
                    },
                    "creationDateIntegration": {
                      "type": "string",
                      "format": "date"
                    },
                    "userCodeTraitement": {
                      "type": "string"
                    },
                    "creationDateTraitement": {
                      "type": "string",
                      "format": "date"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: PUT\nhelper.bodyParams: {\n  statusCode: {\n    code: 'ABANDONED'\n  }\n}\nhelper.appendParamsToBody: false\nhelper.bodyParams: {\n  statusCode: {\n    code: 'TO_TREAT'\n  }\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "example": "ABANDONED"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "example": "TO_TREAT"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: '{maco}/api/rest/v2/c15ElecXml/:id',\n  method: 'PUT',\n  bodyParams: {\n    statusCode: {\n      code: 'ABANDONED'\n    }\n  },\n  appendParamsToBody: false\n}",
          "appendParamsToBody: false",
          "helperArgs: {\n  url: '{maco}/api/rest/v2/c15ElecXml/:id',\n  method: 'PUT',\n  bodyParams: {\n    statusCode: {\n      code: 'TO_TREAT'\n    }\n  }\n}"
        ]
      }
    },
    "/{maco}/api/rest/v2/f15dElecXml/list": {
      "post": {
        "tags": [
          "MACO/maco-fluxFees"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/MACO/modules/maco-fluxFees/provider/provider.js#L16) -> {maco}/api/rest/v2/f15dElecXml/list | response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/f15dElecXml/list',\n  responseContainer: 'data'\n}\n- GET_MANY (src/srcProject/layout/MACO/modules/maco-fluxFees/provider/provider.js#L23) -> {maco}/api/rest/v2/f15dElecXml/list | response: helper.responseContainer: data / info: keyColumn: keyColumn | specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/f15dElecXml/list',\n  responseContainer: 'data'\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/MACO/modules/maco-fluxFees/provider/provider.js#L31) -> {maco}/api/rest/v2/f15dElecXml/list | response: helper.responseContainer: data / info: keyColumn: keyColumn | specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/f15dElecXml/list',\n  responseContainer: 'data'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true",
          "helper: getListV2",
          "helperArgs: {\n  url: '{maco}/api/rest/v2/f15dElecXml/list',\n  responseContainer: 'data'\n}",
          "keyColumn: keyColumn"
        ]
      }
    },
    "/{maco}/api/rest/v2/f15dElecXml/": {
      "post": {
        "tags": [
          "MACO/maco-fluxFees"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/MACO/modules/maco-fluxFees/provider/provider.js#L39) -> {maco}/api/rest/v2/f15dElecXml/ | response: helper.responseContainer: data / info: keyColumn: keyColumn | specificAPIEnabled: true | helper: getOneV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/f15dElecXml/',\n  responseContainer: 'data'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "specificAPIEnabled: true",
          "helper: getOneV2",
          "helperArgs: {\n  url: '{maco}/api/rest/v2/f15dElecXml/',\n  responseContainer: 'data'\n}"
        ]
      }
    },
    "/{maco}/api/rest/v2/f15dElecXml/{id}": {
      "put": {
        "tags": [
          "MACO/maco-fluxFees"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- ABANDONED (src/srcProject/layout/MACO/modules/maco-fluxFees/provider/provider.js#L47) -> {maco}/api/rest/v2/f15dElecXml/:id | request: options: {\n  method: 'PUT'\n} | bodyParams: {\n  statusCode: {\n    code: 'ABANDONED'\n  }\n} / info: appendParamsToBody: false\n- TO_TREAT (src/srcProject/layout/MACO/modules/maco-fluxFees/provider/provider.js#L59) -> {maco}/api/rest/v2/f15dElecXml/:id | request: bodyParams: {\n  statusCode: {\n    code: 'TO_TREAT'\n  }\n} | options: {\n  method: 'PUT'\n} / info: appendParamsToBody: false\n- TO_CHECK (src/srcProject/layout/MACO/modules/maco-fluxFees/provider/provider.js#L71) -> {maco}/api/rest/v2/f15dElecXml/:id | request: bodyParams: {\n  statusCode: {\n    code: 'TO_CHECK'\n  }\n} | options: {\n  method: 'PUT'\n} / info: appendParamsToBody: false",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}\nbodyParams: {\n  statusCode: {\n    code: 'ABANDONED'\n  }\n}\nbodyParams: {\n  statusCode: {\n    code: 'TO_TREAT'\n  }\n}\nbodyParams: {\n  statusCode: {\n    code: 'TO_CHECK'\n  }\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "example": "ABANDONED"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "example": "TO_TREAT"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "example": "TO_CHECK"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "x-dev-notes": [
          "appendParamsToBody: false"
        ]
      }
    },
    "/{maco}/api/rest/v2/r15ElecXml/list": {
      "post": {
        "tags": [
          "MACO/maco-fluxXmlR15"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/MACO/modules/maco-fluxXmlR15/provider/provider.js#L16) -> {maco}/api/rest/v2/r15ElecXml/list | response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/r15ElecXml/list',\n  responseContainer: 'data'\n}\n- GET_MANY (src/srcProject/layout/MACO/modules/maco-fluxXmlR15/provider/provider.js#L23) -> {maco}/api/rest/v2/r15ElecXml/list | response: helper.responseContainer: data / info: keyColumn: keyColumn | specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/r15ElecXml/list',\n  responseContainer: 'data'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true",
          "helper: getListV2",
          "helperArgs: {\n  url: '{maco}/api/rest/v2/r15ElecXml/list',\n  responseContainer: 'data'\n}",
          "keyColumn: keyColumn"
        ]
      }
    },
    "/{maco}/api/rest/v2/r15ElecXml/": {
      "post": {
        "tags": [
          "MACO/maco-fluxXmlR15"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/MACO/modules/maco-fluxXmlR15/provider/provider.js#L31) -> {maco}/api/rest/v2/r15ElecXml/ | response: helper.responseContainer: data / info: keyColumn: keyColumn | specificAPIEnabled: true | helper: getOneV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/r15ElecXml/',\n  responseContainer: 'data'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "specificAPIEnabled: true",
          "helper: getOneV2",
          "helperArgs: {\n  url: '{maco}/api/rest/v2/r15ElecXml/',\n  responseContainer: 'data'\n}"
        ]
      }
    },
    "/{maco}/api/rest/v2/r15ElecXml/{id}": {
      "put": {
        "tags": [
          "MACO/maco-fluxXmlR15"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- ABANDONED (src/srcProject/layout/MACO/modules/maco-fluxXmlR15/provider/provider.js#L39) -> {maco}/api/rest/v2/r15ElecXml/:id | request: options: {\n  method: 'PUT'\n} | bodyParams: {\n  statusCode: {\n    code: 'ABANDONED'\n  }\n} / info: appendParamsToBody: false\n- TO_TREAT (src/srcProject/layout/MACO/modules/maco-fluxXmlR15/provider/provider.js#L51) -> {maco}/api/rest/v2/r15ElecXml/:id | request: bodyParams: {\n  statusCode: {\n    code: 'TO_TREAT'\n  }\n} | options: {\n  method: 'PUT'\n} / info: appendParamsToBody: false\n- TO_CHECK (src/srcProject/layout/MACO/modules/maco-fluxXmlR15/provider/provider.js#L63) -> {maco}/api/rest/v2/r15ElecXml/:id | request: bodyParams: {\n  statusCode: {\n    code: 'TO_CHECK'\n  }\n} | options: {\n  method: 'PUT'\n} / info: appendParamsToBody: false",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}\nbodyParams: {\n  statusCode: {\n    code: 'ABANDONED'\n  }\n}\nbodyParams: {\n  statusCode: {\n    code: 'TO_TREAT'\n  }\n}\nbodyParams: {\n  statusCode: {\n    code: 'TO_CHECK'\n  }\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "example": "ABANDONED"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "example": "TO_TREAT"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "example": "TO_CHECK"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "x-dev-notes": [
          "appendParamsToBody: false"
        ]
      }
    },
    "/{maco}/api/rest/v2/r151ElecXml/list": {
      "post": {
        "tags": [
          "MACO/maco-fluxXmlR151"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/MACO/modules/maco-fluxXmlR151/provider/provider.js#L16) -> {maco}/api/rest/v2/r151ElecXml/list | response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/r151ElecXml/list',\n  responseContainer: 'data'\n}\n- GET_MANY (src/srcProject/layout/MACO/modules/maco-fluxXmlR151/provider/provider.js#L23) -> {maco}/api/rest/v2/r151ElecXml/list | response: helper.responseContainer: data / info: keyColumn: keyColumn | specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/r151ElecXml/list',\n  responseContainer: 'data'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true",
          "helper: getListV2",
          "helperArgs: {\n  url: '{maco}/api/rest/v2/r151ElecXml/list',\n  responseContainer: 'data'\n}",
          "keyColumn: keyColumn"
        ]
      }
    },
    "/{maco}/api/rest/v2/r151ElecXml/{id}": {
      "put": {
        "tags": [
          "MACO/maco-fluxXmlR151"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- ABANDONED (src/srcProject/layout/MACO/modules/maco-fluxXmlR151/provider/provider.js#L31) -> {maco}/api/rest/v2/r151ElecXml/:id | request: options: {\n  method: 'PUT'\n} | bodyParams: {\n  statusCode: {\n    code: 'ABANDONED'\n  }\n} / info: appendParamsToBody: false\n- TO_TREAT (src/srcProject/layout/MACO/modules/maco-fluxXmlR151/provider/provider.js#L43) -> {maco}/api/rest/v2/r151ElecXml/:id | request: bodyParams: {\n  statusCode: {\n    code: 'TO_TREAT'\n  }\n} | options: {\n  method: 'PUT'\n} / info: appendParamsToBody: false",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}\nbodyParams: {\n  statusCode: {\n    code: 'ABANDONED'\n  }\n}\nbodyParams: {\n  statusCode: {\n    code: 'TO_TREAT'\n  }\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "example": "ABANDONED"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "example": "TO_TREAT"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "x-dev-notes": [
          "appendParamsToBody: false"
        ]
      }
    },
    "/{maco}/api/rest/v2/marketMessages/list": {
      "post": {
        "tags": [
          "MACO/maco-marketMessage"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/MACO/modules/maco-marketMessage/provider/provider.js#L4) -> {maco}/api/rest/v2/marketMessages/list | response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/marketMessages/list',\n  responseContainer: 'data'\n}\n- GET_MANY (src/srcProject/layout/MACO/modules/maco-marketMessage/provider/provider.js#L11) -> {maco}/api/rest/v2/marketMessages/list | response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/marketMessages/list',\n  responseContainer: 'data'\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/MACO/modules/maco-marketMessage/provider/provider.js#L18) -> {maco}/api/rest/v2/marketMessages/list | response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/marketMessages/list',\n  responseContainer: 'data'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true",
          "helper: getListV2",
          "helperArgs: {\n  url: '{maco}/api/rest/v2/marketMessages/list',\n  responseContainer: 'data'\n}"
        ]
      }
    },
    "/{maco}/api/rest/v2/marketMessageFiles/list": {
      "post": {
        "tags": [
          "MACO/maco-marketMessageFile"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/MACO/modules/maco-marketMessageFile/provider/provider.js#L16) -> {maco}/api/rest/v2/marketMessageFiles/list | response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/marketMessageFiles/list',\n  responseContainer: 'data'\n}\n- GET_MANY (src/srcProject/layout/MACO/modules/maco-marketMessageFile/provider/provider.js#L23) -> {maco}/api/rest/v2/marketMessageFiles/list | response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/marketMessageFiles/list',\n  responseContainer: 'data'\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/MACO/modules/maco-marketMessageFile/provider/provider.js#L30) -> {maco}/api/rest/v2/marketMessageFiles/list | response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/marketMessageFiles/list',\n  responseContainer: 'data'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true",
          "helper: getListV2",
          "helperArgs: {\n  url: '{maco}/api/rest/v2/marketMessageFiles/list',\n  responseContainer: 'data'\n}"
        ]
      }
    },
    "/{maco}/api/rest/v2/marketMessageTypes/list": {
      "post": {
        "tags": [
          "MACO/maco-marketMessageType"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/MACO/modules/maco-marketMessageType/provider/provider.js#L16) -> {maco}/api/rest/v2/marketMessageTypes/list | request: prepareParams: params => {\n  const {\n    sort = {},\n    ...restParams\n  } = params;\n  return {\n    sort: {\n      field: keyColumn\n    },\n    ...restParams\n  };\n} | helper.keyColumn: keyColumn / response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  keyColumn,\n  url: '{maco}/api/rest/v2/marketMessageTypes/list',\n  responseContainer: 'data'\n}\n- GET_MANY (src/srcProject/layout/MACO/modules/maco-marketMessageType/provider/provider.js#L33) -> {maco}/api/rest/v2/marketMessageTypes/list | request: helper.keyColumn: keyColumn / response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  keyColumn,\n  url: '{maco}/api/rest/v2/marketMessageTypes/list',\n  responseContainer: 'data'\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/MACO/modules/maco-marketMessageType/provider/provider.js#L41) -> {maco}/api/rest/v2/marketMessageTypes/list | request: helper.keyColumn: keyColumn / response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  keyColumn,\n  url: '{maco}/api/rest/v2/marketMessageTypes/list',\n  responseContainer: 'data'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    sort = {},\n    ...restParams\n  } = params;\n  return {\n    sort: {\n      field: keyColumn\n    },\n    ...restParams\n  };\n}\nhelper.keyColumn: keyColumn",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    sort = {},\n    ...restParams\n  } = params;\n  return {\n    sort: {\n      field: keyColumn\n    },\n    ...restParams\n  };\n}\nhelper.keyColumn: keyColumn"
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true",
          "helper: getListV2",
          "helperArgs: {\n  keyColumn,\n  url: '{maco}/api/rest/v2/marketMessageTypes/list',\n  responseContainer: 'data'\n}"
        ]
      }
    },
    "/{maco}/api/rest/v2/marketMessageTypes/": {
      "post": {
        "tags": [
          "MACO/maco-marketMessageType"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/MACO/modules/maco-marketMessageType/provider/provider.js#L49) -> {maco}/api/rest/v2/marketMessageTypes/ | request: helper.keyColumn: keyColumn / response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getOneV2 | helperArgs: {\n  keyColumn,\n  url: '{maco}/api/rest/v2/marketMessageTypes/',\n  responseContainer: 'data'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.keyColumn: keyColumn",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.keyColumn: keyColumn"
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true",
          "helper: getOneV2",
          "helperArgs: {\n  keyColumn,\n  url: '{maco}/api/rest/v2/marketMessageTypes/',\n  responseContainer: 'data'\n}"
        ]
      }
    },
    "/{maco}/api/rest/v2/r15ElecRelHeader/list": {
      "post": {
        "tags": [
          "MACO/maco-reliefR15"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/MACO/modules/maco-reliefR15/provider/provider.js#L16) -> {maco}/api/rest/v2/r15ElecRelHeader/list | response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/r15ElecRelHeader/list',\n  responseContainer: 'data'\n}\n- GET_MANY (src/srcProject/layout/MACO/modules/maco-reliefR15/provider/provider.js#L23) -> {maco}/api/rest/v2/r15ElecRelHeader/list | response: helper.responseContainer: data / info: keyColumn: keyColumn | specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/r15ElecRelHeader/list',\n  responseContainer: 'data'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true",
          "helper: getListV2",
          "helperArgs: {\n  url: '{maco}/api/rest/v2/r15ElecRelHeader/list',\n  responseContainer: 'data'\n}",
          "keyColumn: keyColumn"
        ]
      }
    },
    "/{maco}/api/rest/v2/r15ElecRelHeader/": {
      "get": {
        "tags": [
          "MACO/maco-reliefR15"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/MACO/modules/maco-reliefR15/provider/provider.js#L31) -> {maco}/api/rest/v2/r15ElecRelHeader/ | request: options: {\n  method: 'GET'\n} / info: specificAPIEnabled: true",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-request-hints": [
          "options: {\n  method: 'GET'\n}"
        ],
        "x-dev-notes": [
          "specificAPIEnabled: true"
        ]
      },
      "post": {
        "tags": [
          "MACO/maco-reliefR15"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/MACO/modules/maco-reliefR15/provider/provider.js#L38) -> {maco}/api/rest/v2/r15ElecRelHeader/ | request: options: {\n  method: 'POST'\n} / info: specificAPIEnabled: true",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true"
        ]
      }
    },
    "/{maco}/api/rest/v2/r15ElecRelHeader/{id}": {
      "put": {
        "tags": [
          "MACO/maco-reliefR15"
        ],
        "summary": "Used in 4 frontend location(s)",
        "description": "- ABANDONED (src/srcProject/layout/MACO/modules/maco-reliefR15/provider/provider.js#L45) -> {maco}/api/rest/v2/r15ElecRelHeader/:id | request: options: {\n  method: 'PUT'\n} | bodyParams: {\n  statusCode: {\n    code: 'ABANDONED'\n  }\n} / info: appendParamsToBody: false\n- TO_TREAT (src/srcProject/layout/MACO/modules/maco-reliefR15/provider/provider.js#L57) -> {maco}/api/rest/v2/r15ElecRelHeader/:id | request: bodyParams: {\n  statusCode: {\n    code: 'TO_TREAT'\n  }\n} | options: {\n  method: 'PUT'\n} / info: appendParamsToBody: false\n- TO_CHECK (src/srcProject/layout/MACO/modules/maco-reliefR15/provider/provider.js#L69) -> {maco}/api/rest/v2/r15ElecRelHeader/:id | request: bodyParams: {\n  statusCode: {\n    code: 'TO_CHECK'\n  }\n} | options: {\n  method: 'PUT'\n} / info: appendParamsToBody: false\n- MODIFICATION (src/srcProject/layout/MACO/modules/maco-reliefR15/provider/provider.js#L81) -> {maco}/api/rest/v2/r15ElecRelHeader/:id | request: options: {\n  method: 'PUT'\n} / info: appendParamsToBody: true | excludeProperties: ['undefined']",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}\nbodyParams: {\n  statusCode: {\n    code: 'ABANDONED'\n  }\n}\nbodyParams: {\n  statusCode: {\n    code: 'TO_TREAT'\n  }\n}\nbodyParams: {\n  statusCode: {\n    code: 'TO_CHECK'\n  }\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "example": "ABANDONED"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "example": "TO_TREAT"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "example": "TO_CHECK"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "x-dev-notes": [
          "appendParamsToBody: false",
          "appendParamsToBody: true",
          "excludeProperties: ['undefined']"
        ]
      }
    },
    "/{maco}/api/rest/v2/r15ElecRelDetail/list": {
      "post": {
        "tags": [
          "MACO/maco-reliefR15-details"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/MACO/modules/maco-reliefR15-details/provider/provider.js#L16) -> {maco}/api/rest/v2/r15ElecRelDetail/list | response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/r15ElecRelDetail/list',\n  responseContainer: 'data'\n}\n- GET_MANY (src/srcProject/layout/MACO/modules/maco-reliefR15-details/provider/provider.js#L23) -> {maco}/api/rest/v2/r15ElecRelDetail/list | response: helper.responseContainer: data / info: keyColumn: keyColumn | specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/r15ElecRelDetail/list',\n  responseContainer: 'data'\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/MACO/modules/maco-reliefR15-details/provider/provider.js#L31) -> {maco}/api/rest/v2/r15ElecRelDetail/list | response: helper.responseContainer: data / info: keyColumn: keyColumn | specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/r15ElecRelDetail/list',\n  responseContainer: 'data'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true",
          "helper: getListV2",
          "helperArgs: {\n  url: '{maco}/api/rest/v2/r15ElecRelDetail/list',\n  responseContainer: 'data'\n}",
          "keyColumn: keyColumn"
        ]
      }
    },
    "/{maco}/api/rest/v2/r15ElecRelDetail/": {
      "post": {
        "tags": [
          "MACO/maco-reliefR15-details"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/MACO/modules/maco-reliefR15-details/provider/provider.js#L39) -> {maco}/api/rest/v2/r15ElecRelDetail/ | response: helper.responseContainer: data / info: keyColumn: keyColumn | specificAPIEnabled: true | helper: getOneV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/r15ElecRelDetail/',\n  responseContainer: 'data'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "specificAPIEnabled: true",
          "helper: getOneV2",
          "helperArgs: {\n  url: '{maco}/api/rest/v2/r15ElecRelDetail/',\n  responseContainer: 'data'\n}"
        ]
      }
    },
    "/{maco}/api/rest/v2/r15ElecRelDetail/{id}": {
      "put": {
        "tags": [
          "MACO/maco-reliefR15-details"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- ABANDONED (src/srcProject/layout/MACO/modules/maco-reliefR15-details/provider/provider.js#L47) -> {maco}/api/rest/v2/r15ElecRelDetail/:id | request: options: {\n  method: 'PUT'\n} | bodyParams: {\n  statusCode: {\n    code: 'ABANDONED'\n  }\n} / info: appendParamsToBody: false\n- TO_TREAT (src/srcProject/layout/MACO/modules/maco-reliefR15-details/provider/provider.js#L59) -> {maco}/api/rest/v2/r15ElecRelDetail/:id | request: bodyParams: {\n  statusCode: {\n    code: 'TO_TREAT'\n  }\n} | options: {\n  method: 'PUT'\n} / info: appendParamsToBody: false\n- UPDATE (src/srcProject/layout/MACO/modules/maco-reliefR15-details/provider/provider.js#L77) -> {maco}/api/rest/v2/r15ElecRelDetail/:id | request: options: {\n  method: 'PUT'\n} / info: appendParamsToBody: true | excludeProperties: ['undefined']",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}\nbodyParams: {\n  statusCode: {\n    code: 'ABANDONED'\n  }\n}\nbodyParams: {\n  statusCode: {\n    code: 'TO_TREAT'\n  }\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "example": "ABANDONED"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "example": "TO_TREAT"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "x-dev-notes": [
          "appendParamsToBody: false",
          "appendParamsToBody: true",
          "excludeProperties: ['undefined']"
        ]
      }
    },
    "/{maco}/api/rest/v2/r151ElecRelHeader/list": {
      "post": {
        "tags": [
          "MACO/maco-reliefR151"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/MACO/modules/maco-reliefR151/provider/provider.js#L16) -> {maco}/api/rest/v2/r151ElecRelHeader/list | response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/r151ElecRelHeader/list',\n  responseContainer: 'data'\n}\n- GET_MANY (src/srcProject/layout/MACO/modules/maco-reliefR151/provider/provider.js#L23) -> {maco}/api/rest/v2/r151ElecRelHeader/list | response: helper.responseContainer: data / info: keyColumn: keyColumn | specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/r151ElecRelHeader/list',\n  responseContainer: 'data'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true",
          "helper: getListV2",
          "helperArgs: {\n  url: '{maco}/api/rest/v2/r151ElecRelHeader/list',\n  responseContainer: 'data'\n}",
          "keyColumn: keyColumn"
        ]
      }
    },
    "/{maco}/api/rest/v2/r151ElecRelHeader/{id}": {
      "put": {
        "tags": [
          "MACO/maco-reliefR151"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- ABANDONED (src/srcProject/layout/MACO/modules/maco-reliefR151/provider/provider.js#L31) -> {maco}/api/rest/v2/r151ElecRelHeader/:id | request: options: {\n  method: 'PUT'\n} | bodyParams: {\n  statusCode: {\n    code: 'ABANDONED'\n  }\n} / info: appendParamsToBody: false\n- TO_TREAT (src/srcProject/layout/MACO/modules/maco-reliefR151/provider/provider.js#L43) -> {maco}/api/rest/v2/r151ElecRelHeader/:id | request: bodyParams: {\n  statusCode: {\n    code: 'TO_TREAT'\n  }\n} | options: {\n  method: 'PUT'\n} / info: appendParamsToBody: false",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}\nbodyParams: {\n  statusCode: {\n    code: 'ABANDONED'\n  }\n}\nbodyParams: {\n  statusCode: {\n    code: 'TO_TREAT'\n  }\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "example": "ABANDONED"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "example": "TO_TREAT"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "x-dev-notes": [
          "appendParamsToBody: false"
        ]
      }
    },
    "/{maco}/api/rest/v2/r151ElecRelDetail/list": {
      "post": {
        "tags": [
          "MACO/maco-reliefR151-details"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/MACO/modules/maco-reliefR151-details/provider/provider.js#L16) -> {maco}/api/rest/v2/r151ElecRelDetail/list | response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/r151ElecRelDetail/list',\n  responseContainer: 'data'\n}\n- GET_MANY (src/srcProject/layout/MACO/modules/maco-reliefR151-details/provider/provider.js#L23) -> {maco}/api/rest/v2/r151ElecRelDetail/list | response: helper.responseContainer: data / info: keyColumn: keyColumn | specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/r151ElecRelDetail/list',\n  responseContainer: 'data'\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/MACO/modules/maco-reliefR151-details/provider/provider.js#L31) -> {maco}/api/rest/v2/r151ElecRelDetail/list | response: helper.responseContainer: data / info: keyColumn: keyColumn | specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  url: '{maco}/api/rest/v2/r151ElecRelDetail/list',\n  responseContainer: 'data'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "Payload structure not automatically inferred. See provider configuration.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload structure not automatically inferred. See provider configuration."
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true",
          "helper: getListV2",
          "helperArgs: {\n  url: '{maco}/api/rest/v2/r151ElecRelDetail/list',\n  responseContainer: 'data'\n}",
          "keyColumn: keyColumn"
        ]
      }
    },
    "/{maco}/api/rest/v2/r151ElecRelDetail/{id}": {
      "put": {
        "tags": [
          "MACO/maco-reliefR151-details"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- ABANDONED (src/srcProject/layout/MACO/modules/maco-reliefR151-details/provider/provider.js#L39) -> {maco}/api/rest/v2/r151ElecRelDetail/:id | request: options: {\n  method: 'PUT'\n} | bodyParams: {\n  statusCode: {\n    code: 'ABANDONED'\n  }\n} / info: appendParamsToBody: false\n- TO_TREAT (src/srcProject/layout/MACO/modules/maco-reliefR151-details/provider/provider.js#L51) -> {maco}/api/rest/v2/r151ElecRelDetail/:id | request: bodyParams: {\n  statusCode: {\n    code: 'TO_TREAT'\n  }\n} | options: {\n  method: 'PUT'\n} / info: appendParamsToBody: false",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}\nbodyParams: {\n  statusCode: {\n    code: 'ABANDONED'\n  }\n}\nbodyParams: {\n  statusCode: {\n    code: 'TO_TREAT'\n  }\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "example": "ABANDONED"
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "statusCode": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "example": "TO_TREAT"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "x-dev-notes": [
          "appendParamsToBody: false"
        ]
      }
    },
    "/{maco}/api/rest/v2/elecRelMotifs/list": {
      "post": {
        "tags": [
          "MACO/maco-reliefReason"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/MACO/modules/maco-reliefReason/provider/provider.js#L16) -> {maco}/api/rest/v2/elecRelMotifs/list | request: prepareParams: params => {\n  const {\n    sort = {},\n    ...restParams\n  } = params;\n  return {\n    sort: {\n      field: keyColumn\n    },\n    ...restParams\n  };\n} | helper.keyColumn: keyColumn / response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  keyColumn,\n  url: '{maco}/api/rest/v2/elecRelMotifs/list',\n  responseContainer: 'data'\n}\n- GET_MANY (src/srcProject/layout/MACO/modules/maco-reliefReason/provider/provider.js#L33) -> {maco}/api/rest/v2/elecRelMotifs/list | request: helper.keyColumn: keyColumn / response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  keyColumn,\n  url: '{maco}/api/rest/v2/elecRelMotifs/list',\n  responseContainer: 'data'\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/MACO/modules/maco-reliefReason/provider/provider.js#L41) -> {maco}/api/rest/v2/elecRelMotifs/list | request: helper.keyColumn: keyColumn / response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getListV2 | helperArgs: {\n  keyColumn,\n  url: '{maco}/api/rest/v2/elecRelMotifs/list',\n  responseContainer: 'data'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    sort = {},\n    ...restParams\n  } = params;\n  return {\n    sort: {\n      field: keyColumn\n    },\n    ...restParams\n  };\n}\nhelper.keyColumn: keyColumn",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    sort = {},\n    ...restParams\n  } = params;\n  return {\n    sort: {\n      field: keyColumn\n    },\n    ...restParams\n  };\n}\nhelper.keyColumn: keyColumn"
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true",
          "helper: getListV2",
          "helperArgs: {\n  keyColumn,\n  url: '{maco}/api/rest/v2/elecRelMotifs/list',\n  responseContainer: 'data'\n}"
        ]
      }
    },
    "/{maco}/api/rest/v2/elecRelMotifs/": {
      "post": {
        "tags": [
          "MACO/maco-reliefReason"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/MACO/modules/maco-reliefReason/provider/provider.js#L49) -> {maco}/api/rest/v2/elecRelMotifs/ | request: helper.keyColumn: keyColumn / response: helper.responseContainer: data / info: specificAPIEnabled: true | helper: getOneV2 | helperArgs: {\n  keyColumn,\n  url: '{maco}/api/rest/v2/elecRelMotifs/',\n  responseContainer: 'data'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.keyColumn: keyColumn",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.keyColumn: keyColumn"
              }
            }
          }
        },
        "x-dev-notes": [
          "specificAPIEnabled: true",
          "helper: getOneV2",
          "helperArgs: {\n  keyColumn,\n  url: '{maco}/api/rest/v2/elecRelMotifs/',\n  responseContainer: 'data'\n}"
        ]
      }
    },
    "/v2/generic/all/BillingCycle": {
      "post": {
        "tags": [
          "operation/billing-cycles"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/operation/modules/billing-cycles/provider/provider.js#L18) -> v2/generic/all/BillingCycle | request: helper.nestedEntities: nestedEntities | helper.genericFields: genericFields / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/BillingCycle',\n  nestedEntities,\n  genericFields\n}\n- GET_MANY (src/srcProject/layout/operation/modules/billing-cycles/provider/provider.js#L26) -> v2/generic/all/BillingCycle | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/BillingCycle',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string"
                          },
                          "id": {
                            "type": "string"
                          },
                          "code": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "calendar": {
                            "type": "string"
                          },
                          "filters": {
                            "type": "string"
                          },
                          "invoiceType": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities\nhelper.genericFields: genericFields",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities\nhelper.genericFields: genericFields"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/BillingCycle',\n  nestedEntities,\n  genericFields\n}",
          "helperArgs: {\n  url: 'v2/generic/all/BillingCycle',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/all/cdr": {
      "post": {
        "tags": [
          "operation/cdr"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/operation/modules/cdr/provider/provider.js#L93) -> v2/generic/all/cdr | request: prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    status = [],\n    search,\n    ...restFilter\n  } = filter;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: get(validity, key)\n  };\n  if (restFilter.eventDate) restFilter.eventDate = setTimeInStamp(restFilter.eventDate);\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      'or accessCode parameter1 parameter2 parameter3 parameter4': search,\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to'),\n      ...(status.length === 0 ? {} : {\n        status: status\n      })\n    },\n    ...restParams\n  };\n  return transformedFilters;\n} | helper.nestedEntities: nestedEntities / response: transformResponse: rep => {\n  const {\n    total,\n    data\n  } = rep;\n  const dataMapped = data.map(i => {\n    const {\n      id,\n      eventDate,\n      quantity,\n      accessCode,\n      parameter1,\n      parameter2,\n      parameter3,\n      parameter4,\n      status,\n      rejectReason,\n      parameter5,\n      parameter6,\n      parameter7,\n      parameter8,\n      parameter9,\n      dateParam1,\n      dateParam2,\n      dateParam3,\n      dateParam4,\n      dateParam5,\n      decimalParam1,\n      decimalParam2,\n      decimalParam3,\n      decimalParam4,\n      decimalParam5,\n      extraParam\n    } = i;\n    return {\n      id,\n      eventDate,\n      quantity,\n      accessCode,\n      parameter1,\n      parameter2,\n      parameter3,\n      parameter4,\n      status,\n      rejectReason,\n      parameter5,\n      parameter6,\n      parameter7,\n      parameter8,\n      parameter9,\n      dateParam1,\n      dateParam2,\n      dateParam3,\n      dateParam4,\n      dateParam5,\n      decimalParam1,\n      decimalParam2,\n      decimalParam3,\n      decimalParam4,\n      decimalParam5,\n      extraParam,\n      items: [{\n        parameter: trans('rejectReason'),\n        value: rejectReason\n      }, {\n        parameter: trans('parameter5'),\n        value: parameter5\n      }, {\n        parameter: trans('parameter6'),\n        value: parameter6\n      }, {\n        parameter: trans('parameter7'),\n        value: parameter7\n      }, {\n        parameter: trans('parameter8'),\n        value: parameter8\n      }, {\n        parameter: trans('parameter9'),\n        value: parameter9\n      }, {\n        parameter: trans('dateParam1'),\n        value: getDate(dateParam1)\n      }, {\n        parameter: trans('dateParam2'),\n        value: getDate(dateParam2)\n      }, {\n        parameter: trans('dateParam3'),\n        value: getDate(dateParam3)\n      }, {\n        parameter: trans('dateParam4'),\n        value: getDate(dateParam4)\n      }, {\n        parameter: trans('dateParam5'),\n        value: getDate(dateParam4)\n      }, {\n        parameter: trans('decimalParam1'),\n        value: decimalParam1\n      }, {\n        parameter: trans('decimalParam2'),\n        value: decimalParam2\n      }, {\n        parameter: trans('decimalParam3'),\n        value: decimalParam3\n      }, {\n        parameter: trans('decimalParam4'),\n        value: decimalParam4\n      }, {\n        parameter: trans('decimalParam5'),\n        value: decimalParam5\n      }, {\n        parameter: trans('extraParam'),\n        value: extraParam\n      }]\n    };\n  });\n  return {\n    total,\n    data: dataMapped\n  };\n} | helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/cdr',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/operation/modules/cdr/provider/provider.js#L202) -> v2/generic/all/cdr | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/cdr',\n  nestedEntities\n}\n- GET_MANY_REFERENCE (src/srcProject/layout/operation/modules/cdr/provider/provider.js#L205) -> v2/generic/all/cdr | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/cdr',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: rep => {\n  const {\n    total,\n    data\n  } = rep;\n  const dataMapped = data.map(i => {\n    const {\n      id,\n      eventDate,\n      quantity,\n      accessCode,\n      parameter1,\n      parameter2,\n      parameter3,\n      parameter4,\n      status,\n      rejectReason,\n      parameter5,\n      parameter6,\n      parameter7,\n      parameter8,\n      parameter9,\n      dateParam1,\n      dateParam2,\n      dateParam3,\n      dateParam4,\n      dateParam5,\n      decimalParam1,\n      decimalParam2,\n      decimalParam3,\n      decimalParam4,\n      decimalParam5,\n      extraParam\n    } = i;\n    return {\n      id,\n      eventDate,\n      quantity,\n      accessCode,\n      parameter1,\n      parameter2,\n      parameter3,\n      parameter4,\n      status,\n      rejectReason,\n      parameter5,\n      parameter6,\n      parameter7,\n      parameter8,\n      parameter9,\n      dateParam1,\n      dateParam2,\n      dateParam3,\n      dateParam4,\n      dateParam5,\n      decimalParam1,\n      decimalParam2,\n      decimalParam3,\n      decimalParam4,\n      decimalParam5,\n      extraParam,\n      items: [{\n        parameter: trans('rejectReason'),\n        value: rejectReason\n      }, {\n        parameter: trans('parameter5'),\n        value: parameter5\n      }, {\n        parameter: trans('parameter6'),\n        value: parameter6\n      }, {\n        parameter: trans('parameter7'),\n        value: parameter7\n      }, {\n        parameter: trans('parameter8'),\n        value: parameter8\n      }, {\n        parameter: trans('parameter9'),\n        value: parameter9\n      }, {\n        parameter: trans('dateParam1'),\n        value: getDate(dateParam1)\n      }, {\n        parameter: trans('dateParam2'),\n        value: getDate(dateParam2)\n      }, {\n        parameter: trans('dateParam3'),\n        value: getDate(dateParam3)\n      }, {\n        parameter: trans('dateParam4'),\n        value: getDate(dateParam4)\n      }, {\n        parameter: trans('dateParam5'),\n        value: getDate(dateParam4)\n      }, {\n        parameter: trans('decimalParam1'),\n        value: decimalParam1\n      }, {\n        parameter: trans('decimalParam2'),\n        value: decimalParam2\n      }, {\n        parameter: trans('decimalParam3'),\n        value: decimalParam3\n      }, {\n        parameter: trans('decimalParam4'),\n        value: decimalParam4\n      }, {\n        parameter: trans('decimalParam5'),\n        value: decimalParam5\n      }, {\n        parameter: trans('extraParam'),\n        value: extraParam\n      }]\n    };\n  });\n  return {\n    total,\n    data: dataMapped\n  };\n} | helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "eventDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "quantity": {
                            "type": "string"
                          },
                          "accessCode": {
                            "type": "string"
                          },
                          "parameter1": {
                            "type": "string"
                          },
                          "parameter2": {
                            "type": "string"
                          },
                          "parameter3": {
                            "type": "string"
                          },
                          "parameter4": {
                            "type": "string"
                          },
                          "status": {
                            "type": "string"
                          },
                          "motif": {
                            "type": "string"
                          },
                          "searchBar": {
                            "type": "string"
                          },
                          "items": {
                            "type": "string"
                          },
                          "parameter": {
                            "type": "string"
                          },
                          "value": {
                            "type": "string"
                          },
                          "parameter5": {
                            "type": "string"
                          },
                          "parameter6": {
                            "type": "string"
                          },
                          "parameter7": {
                            "type": "string"
                          },
                          "parameter8": {
                            "type": "string"
                          },
                          "parameter9": {
                            "type": "string"
                          },
                          "dateParam1": {
                            "type": "string",
                            "format": "date"
                          },
                          "dateParam2": {
                            "type": "string",
                            "format": "date"
                          },
                          "dateParam3": {
                            "type": "string",
                            "format": "date"
                          },
                          "dateParam4": {
                            "type": "string",
                            "format": "date"
                          },
                          "dateParam5": {
                            "type": "string",
                            "format": "date"
                          },
                          "decimalParam1": {
                            "type": "string"
                          },
                          "decimalParam2": {
                            "type": "string"
                          },
                          "decimalParam3": {
                            "type": "string"
                          },
                          "decimalParam4": {
                            "type": "string"
                          },
                          "decimalParam5": {
                            "type": "string"
                          },
                          "extraParam": {
                            "type": "string"
                          },
                          "rejectReason": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    status = [],\n    search,\n    ...restFilter\n  } = filter;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: get(validity, key)\n  };\n  if (restFilter.eventDate) restFilter.eventDate = setTimeInStamp(restFilter.eventDate);\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      'or accessCode parameter1 parameter2 parameter3 parameter4': search,\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to'),\n      ...(status.length === 0 ? {} : {\n        status: status\n      })\n    },\n    ...restParams\n  };\n  return transformedFilters;\n}\nhelper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    filter = {},\n    ...restParams\n  } = params;\n  const {\n    validity = {},\n    status = [],\n    search,\n    ...restFilter\n  } = filter;\n  const transformDateFilters = key => get(validity, key) && {\n    [`validity.${key}`]: get(validity, key)\n  };\n  if (restFilter.eventDate) restFilter.eventDate = setTimeInStamp(restFilter.eventDate);\n  const transformedFilters = {\n    filter: {\n      ...restFilter,\n      'or accessCode parameter1 parameter2 parameter3 parameter4': search,\n      ...transformDateFilters('from'),\n      ...transformDateFilters('to'),\n      ...(status.length === 0 ? {} : {\n        status: status\n      })\n    },\n    ...restParams\n  };\n  return transformedFilters;\n}\nhelper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/cdr',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/cdr/": {
      "post": {
        "tags": [
          "operation/cdr"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- GET_ONE (src/srcProject/layout/operation/modules/cdr/provider/provider.js#L209) -> v2/generic/cdr/ | request: helper.sync: true | helper.transformResponse: rep => {\n  return rep;\n} | urls[0].params: {\n  nestedEntities\n} / info: helper: getOneV2 | helperArgs: {\n  urls: [{\n    url: 'v2/generic/cdr/',\n    params: {\n      nestedEntities\n    }\n  }],\n  sync: true,\n  transformResponse: rep => {\n    return rep;\n  } //transformRecord\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "eventDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "quantity": {
                      "type": "string"
                    },
                    "accessCode": {
                      "type": "string"
                    },
                    "parameter1": {
                      "type": "string"
                    },
                    "parameter2": {
                      "type": "string"
                    },
                    "parameter3": {
                      "type": "string"
                    },
                    "parameter4": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "motif": {
                      "type": "string"
                    },
                    "searchBar": {
                      "type": "string"
                    },
                    "items": {
                      "type": "string"
                    },
                    "parameter": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    },
                    "parameter5": {
                      "type": "string"
                    },
                    "parameter6": {
                      "type": "string"
                    },
                    "parameter7": {
                      "type": "string"
                    },
                    "parameter8": {
                      "type": "string"
                    },
                    "parameter9": {
                      "type": "string"
                    },
                    "dateParam1": {
                      "type": "string",
                      "format": "date"
                    },
                    "dateParam2": {
                      "type": "string",
                      "format": "date"
                    },
                    "dateParam3": {
                      "type": "string",
                      "format": "date"
                    },
                    "dateParam4": {
                      "type": "string",
                      "format": "date"
                    },
                    "dateParam5": {
                      "type": "string",
                      "format": "date"
                    },
                    "decimalParam1": {
                      "type": "string"
                    },
                    "decimalParam2": {
                      "type": "string"
                    },
                    "decimalParam3": {
                      "type": "string"
                    },
                    "decimalParam4": {
                      "type": "string"
                    },
                    "decimalParam5": {
                      "type": "string"
                    },
                    "extraParam": {
                      "type": "string"
                    },
                    "rejectReason": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.sync: true\nhelper.transformResponse: rep => {\n  return rep;\n}\nurls[0].params: {\n  nestedEntities\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "nestedEntities": {
                    "description": "Identifier reference: nestedEntities",
                    "x-expression": "nestedEntities"
                  }
                }
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getOneV2",
          "helperArgs: {\n  urls: [{\n    url: 'v2/generic/cdr/',\n    params: {\n      nestedEntities\n    }\n  }],\n  sync: true,\n  transformResponse: rep => {\n    return rep;\n  } //transformRecord\n}"
        ]
      }
    },
    "/v2/mediation/cdrs": {
      "post": {
        "tags": [
          "operation/cdr"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/operation/modules/cdr/provider/provider.js#L226) -> v2/mediation/cdrs | request: helper.method: POST / response: helper.responseContainerId: id / info: keyColumn: keyColumn | helper: getCreateProvider | helperArgs: {\n  url: 'v2/mediation/cdrs',\n  method: 'POST',\n  responseContainerId: 'id'\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainerId: id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "object",
                      "properties": {
                        "eventDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "quantity": {
                          "type": "string"
                        },
                        "accessCode": {
                          "type": "string"
                        },
                        "parameter1": {
                          "type": "string"
                        },
                        "parameter2": {
                          "type": "string"
                        },
                        "parameter3": {
                          "type": "string"
                        },
                        "parameter4": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "motif": {
                          "type": "string"
                        },
                        "searchBar": {
                          "type": "string"
                        },
                        "items": {
                          "type": "string"
                        },
                        "parameter": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        },
                        "parameter5": {
                          "type": "string"
                        },
                        "parameter6": {
                          "type": "string"
                        },
                        "parameter7": {
                          "type": "string"
                        },
                        "parameter8": {
                          "type": "string"
                        },
                        "parameter9": {
                          "type": "string"
                        },
                        "dateParam1": {
                          "type": "string",
                          "format": "date"
                        },
                        "dateParam2": {
                          "type": "string",
                          "format": "date"
                        },
                        "dateParam3": {
                          "type": "string",
                          "format": "date"
                        },
                        "dateParam4": {
                          "type": "string",
                          "format": "date"
                        },
                        "dateParam5": {
                          "type": "string",
                          "format": "date"
                        },
                        "decimalParam1": {
                          "type": "string"
                        },
                        "decimalParam2": {
                          "type": "string"
                        },
                        "decimalParam3": {
                          "type": "string"
                        },
                        "decimalParam4": {
                          "type": "string"
                        },
                        "decimalParam5": {
                          "type": "string"
                        },
                        "extraParam": {
                          "type": "string"
                        },
                        "rejectReason": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/mediation/cdrs',\n  method: 'POST',\n  responseContainerId: 'id'\n}"
        ]
      },
      "delete": {
        "tags": [
          "operation/import-cdr"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- DELETE_MANY (src/srcProject/layout/operation/modules/import-cdr/provider/provider.js#L51) -> v2/mediation/cdrs | request: prepareParams: params => {\n  const {\n    data\n  } = params;\n  const {\n    code\n  } = data;\n  return {\n    ids: code\n  };\n} | helper.method: DELETE / info: helper: getDeleteProvider | helperArgs: {\n  url: 'v2/mediation/cdrs',\n  method: 'DELETE'\n  // keyColumn: nestedEntities,\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    data\n  } = params;\n  const {\n    code\n  } = data;\n  return {\n    ids: code\n  };\n}\nhelper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    data\n  } = params;\n  const {\n    code\n  } = data;\n  return {\n    ids: code\n  };\n}\nhelper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'v2/mediation/cdrs',\n  method: 'DELETE'\n  // keyColumn: nestedEntities,\n}"
        ]
      }
    },
    "/v2/mediation/cdrs/{id}": {
      "put": {
        "tags": [
          "operation/cdr"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/operation/modules/cdr/provider/provider.js#L235) -> v2/mediation/cdrs/:id | request: prepareParams: params => {\n  delete params.data.originalId;\n  return params;\n} | helper.keyColumn: keyColumn | helper.method: PUT / info: helper: getUpdateProvider | helperArgs: {\n  keyColumn,\n  url: 'v2/mediation/cdrs/:id',\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "eventDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "quantity": {
                      "type": "string"
                    },
                    "accessCode": {
                      "type": "string"
                    },
                    "parameter1": {
                      "type": "string"
                    },
                    "parameter2": {
                      "type": "string"
                    },
                    "parameter3": {
                      "type": "string"
                    },
                    "parameter4": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "motif": {
                      "type": "string"
                    },
                    "searchBar": {
                      "type": "string"
                    },
                    "items": {
                      "type": "string"
                    },
                    "parameter": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    },
                    "parameter5": {
                      "type": "string"
                    },
                    "parameter6": {
                      "type": "string"
                    },
                    "parameter7": {
                      "type": "string"
                    },
                    "parameter8": {
                      "type": "string"
                    },
                    "parameter9": {
                      "type": "string"
                    },
                    "dateParam1": {
                      "type": "string",
                      "format": "date"
                    },
                    "dateParam2": {
                      "type": "string",
                      "format": "date"
                    },
                    "dateParam3": {
                      "type": "string",
                      "format": "date"
                    },
                    "dateParam4": {
                      "type": "string",
                      "format": "date"
                    },
                    "dateParam5": {
                      "type": "string",
                      "format": "date"
                    },
                    "decimalParam1": {
                      "type": "string"
                    },
                    "decimalParam2": {
                      "type": "string"
                    },
                    "decimalParam3": {
                      "type": "string"
                    },
                    "decimalParam4": {
                      "type": "string"
                    },
                    "decimalParam5": {
                      "type": "string"
                    },
                    "extraParam": {
                      "type": "string"
                    },
                    "rejectReason": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  delete params.data.originalId;\n  return params;\n}\nhelper.keyColumn: keyColumn\nhelper.method: PUT",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  delete params.data.originalId;\n  return params;\n}\nhelper.keyColumn: keyColumn\nhelper.method: PUT"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getUpdateProvider",
          "helperArgs: {\n  keyColumn,\n  url: 'v2/mediation/cdrs/:id',\n  method: 'PUT'\n}"
        ]
      }
    },
    "/v2/cdr/": {
      "delete": {
        "tags": [
          "operation/cdr"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/operation/modules/cdr/provider/provider.js#L247) -> v2/cdr/ | request: prepareParams: params => {\n  return params;\n} | helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'v2/cdr/',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "eventDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "quantity": {
                      "type": "string"
                    },
                    "accessCode": {
                      "type": "string"
                    },
                    "parameter1": {
                      "type": "string"
                    },
                    "parameter2": {
                      "type": "string"
                    },
                    "parameter3": {
                      "type": "string"
                    },
                    "parameter4": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "motif": {
                      "type": "string"
                    },
                    "searchBar": {
                      "type": "string"
                    },
                    "items": {
                      "type": "string"
                    },
                    "parameter": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    },
                    "parameter5": {
                      "type": "string"
                    },
                    "parameter6": {
                      "type": "string"
                    },
                    "parameter7": {
                      "type": "string"
                    },
                    "parameter8": {
                      "type": "string"
                    },
                    "parameter9": {
                      "type": "string"
                    },
                    "dateParam1": {
                      "type": "string",
                      "format": "date"
                    },
                    "dateParam2": {
                      "type": "string",
                      "format": "date"
                    },
                    "dateParam3": {
                      "type": "string",
                      "format": "date"
                    },
                    "dateParam4": {
                      "type": "string",
                      "format": "date"
                    },
                    "dateParam5": {
                      "type": "string",
                      "format": "date"
                    },
                    "decimalParam1": {
                      "type": "string"
                    },
                    "decimalParam2": {
                      "type": "string"
                    },
                    "decimalParam3": {
                      "type": "string"
                    },
                    "decimalParam4": {
                      "type": "string"
                    },
                    "decimalParam5": {
                      "type": "string"
                    },
                    "extraParam": {
                      "type": "string"
                    },
                    "rejectReason": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  return params;\n}\nhelper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  return params;\n}\nhelper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'v2/cdr/',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/cdr/": {
      "delete": {
        "tags": [
          "operation/cdr"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- DELETE_MANY (src/srcProject/layout/operation/modules/cdr/provider/provider.js#L291) -> cdr/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: 'cdr/',\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "eventDate": {
                      "type": "string",
                      "format": "date"
                    },
                    "quantity": {
                      "type": "string"
                    },
                    "accessCode": {
                      "type": "string"
                    },
                    "parameter1": {
                      "type": "string"
                    },
                    "parameter2": {
                      "type": "string"
                    },
                    "parameter3": {
                      "type": "string"
                    },
                    "parameter4": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "motif": {
                      "type": "string"
                    },
                    "searchBar": {
                      "type": "string"
                    },
                    "items": {
                      "type": "string"
                    },
                    "parameter": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    },
                    "parameter5": {
                      "type": "string"
                    },
                    "parameter6": {
                      "type": "string"
                    },
                    "parameter7": {
                      "type": "string"
                    },
                    "parameter8": {
                      "type": "string"
                    },
                    "parameter9": {
                      "type": "string"
                    },
                    "dateParam1": {
                      "type": "string",
                      "format": "date"
                    },
                    "dateParam2": {
                      "type": "string",
                      "format": "date"
                    },
                    "dateParam3": {
                      "type": "string",
                      "format": "date"
                    },
                    "dateParam4": {
                      "type": "string",
                      "format": "date"
                    },
                    "dateParam5": {
                      "type": "string",
                      "format": "date"
                    },
                    "decimalParam1": {
                      "type": "string"
                    },
                    "decimalParam2": {
                      "type": "string"
                    },
                    "decimalParam3": {
                      "type": "string"
                    },
                    "decimalParam4": {
                      "type": "string"
                    },
                    "decimalParam5": {
                      "type": "string"
                    },
                    "extraParam": {
                      "type": "string"
                    },
                    "rejectReason": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: 'cdr/',\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/generic/all/EDR": {
      "post": {
        "tags": [
          "operation/event-details-records"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/operation/modules/event-details-records/provider/provider.js#L17) -> v2/generic/all/EDR | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/EDR',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/operation/modules/event-details-records/provider/provider.js#L22) -> v2/generic/all/EDR | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/EDR',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "eventVersion": {
                            "type": "number"
                          },
                          "eventKey": {
                            "type": "string"
                          },
                          "eventDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "status": {
                            "type": "string"
                          },
                          "rejectReason": {
                            "type": "string"
                          },
                          "subscription": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              }
                            }
                          },
                          "originBatch": {
                            "type": "string"
                          },
                          "originRecord": {
                            "type": "string"
                          },
                          "accessCode": {
                            "type": "string"
                          },
                          "quantity": {
                            "type": "number"
                          },
                          "parameter1": {
                            "type": "string"
                          },
                          "parameter2": {
                            "type": "string"
                          },
                          "parameter3": {
                            "type": "string"
                          },
                          "parameter4": {
                            "type": "string"
                          },
                          "parameter5": {
                            "type": "string"
                          },
                          "parameter6": {
                            "type": "string"
                          },
                          "parameter7": {
                            "type": "string"
                          },
                          "parameter8": {
                            "type": "string"
                          },
                          "parameter9": {
                            "type": "string"
                          },
                          "dateParam1": {
                            "type": "string",
                            "format": "date"
                          },
                          "dateParam2": {
                            "type": "string",
                            "format": "date"
                          },
                          "dateParam3": {
                            "type": "string",
                            "format": "date"
                          },
                          "dateParam4": {
                            "type": "string",
                            "format": "date"
                          },
                          "dateParam5": {
                            "type": "string",
                            "format": "date"
                          },
                          "decimalParam1": {
                            "type": "number"
                          },
                          "decimalParam2": {
                            "type": "number"
                          },
                          "decimalParam3": {
                            "type": "number"
                          },
                          "decimalParam4": {
                            "type": "number"
                          },
                          "decimalParam5": {
                            "type": "number"
                          },
                          "extraParameter": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/EDR',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/all/mediationSetting": {
      "post": {
        "tags": [
          "operation/event-details-records-settings"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/operation/modules/event-details-records-settings/provider/provider.js#L20) -> v2/generic/all/mediationSetting | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/mediationSetting',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/operation/modules/event-details-records-settings/provider/provider.js#L25) -> v2/generic/all/mediationSetting | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/mediationSetting',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data"
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/mediationSetting',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/mediationSetting": {
      "post": {
        "tags": [
          "operation/event-details-records-settings"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/operation/modules/event-details-records-settings/provider/provider.js#L30) -> v2/mediationSetting | request: helper.method: POST / info: helper: getUpdateProvider | helperArgs: {\n  url: 'v2/mediationSetting',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getUpdateProvider",
          "helperArgs: {\n  url: 'v2/mediationSetting',\n  method: 'POST'\n}"
        ]
      }
    },
    "/admin/files/createDir": {
      "post": {
        "tags": [
          "operation/import-cdr"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE_DIR (src/srcProject/layout/operation/modules/import-cdr/provider/provider.js#L322) -> admin/files/createDir | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/billing/invoicevalidationrules": {
      "post": {
        "tags": [
          "operation/invoice-validation"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/operation/modules/invoice-validation/provider/provider.js#L79) -> v2/billing/invoicevalidationrules | request: helper.method: POST / info: helper: getCreateProvider | helperArgs: {\n  url: 'v2/billing/invoicevalidationrules',\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number"
                    },
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "invoiceValidationScript": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "invoiceValidationRulesNumber": {
                      "type": "string"
                    },
                    "hasValidationScript": {
                      "type": "boolean"
                    },
                    "hasRules": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: POST",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: POST"
              }
            }
          }
        },
        "x-dev-notes": [
          "helper: getCreateProvider",
          "helperArgs: {\n  url: 'v2/billing/invoicevalidationrules',\n  method: 'POST'\n}"
        ]
      }
    },
    "/v2/billing/invoicevalidationrules/": {
      "delete": {
        "tags": [
          "operation/invoice-validation"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- DELETE (src/srcProject/layout/operation/modules/invoice-validation/provider/provider.js#L101) -> v2/billing/invoicevalidationrules/ | request: helper.method: DELETE / info: keyColumn: keyColumn | helper: getDeleteProvider | helperArgs: {\n  url: `v2/billing/invoicevalidationrules/`,\n  method: 'DELETE'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number"
                    },
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "invoiceValidationScript": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "invoiceValidationRulesNumber": {
                      "type": "string"
                    },
                    "hasValidationScript": {
                      "type": "boolean"
                    },
                    "hasRules": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.method: DELETE",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.method: DELETE"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getDeleteProvider",
          "helperArgs: {\n  url: `v2/billing/invoicevalidationrules/`,\n  method: 'DELETE'\n}"
        ]
      }
    },
    "/v2/billing/invoiceLines/markForAdjustment": {
      "post": {
        "tags": [
          "operation/mass-adjustments"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- MARK_FOR_ADJUSTMENT (src/srcProject/layout/operation/modules/mass-adjustments/provider/provider.js#L27) -> v2/billing/invoiceLines/markForAdjustment | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/billing/invoiceLines/unmarkForAdjustment": {
      "post": {
        "tags": [
          "operation/mass-adjustments"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UNMARK_FOR_ADJUSTMENT (src/srcProject/layout/operation/modules/mass-adjustments/provider/provider.js#L33) -> v2/billing/invoiceLines/unmarkForAdjustment | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/generic/all/ReportExtractExecutionResult": {
      "post": {
        "tags": [
          "operation/report-extract-history"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/operation/modules/report-extract-history/provider/provider.js#L13) -> v2/generic/all/ReportExtractExecutionResult | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/ReportExtractExecutionResult',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/operation/modules/report-extract-history/provider/provider.js#L20) -> v2/generic/all/ReportExtractExecutionResult | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/ReportExtractExecutionResult',\n  nestedEntities\n}",
        "responses": {
          "200": {
            "description": "Successful response. helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "reportExtract": {
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string"
                              },
                              "description": {
                                "type": "string"
                              },
                              "category": {
                                "type": "string"
                              }
                            }
                          },
                          "startDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "endDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "lineCount": {
                            "type": "string"
                          },
                          "status": {
                            "type": "boolean"
                          },
                          "errorMessage": {
                            "type": "string"
                          },
                          "auditable": {
                            "type": "object",
                            "properties": {
                              "creator": {
                                "type": "string"
                              }
                            }
                          },
                          "filePath": {
                            "type": "string"
                          },
                          "searchBar": {
                            "type": "string"
                          },
                          "creator": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "helper.nestedEntities: nestedEntities",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "helper.nestedEntities: nestedEntities"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/ReportExtractExecutionResult',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/all/reportExtract": {
      "post": {
        "tags": [
          "operation/report-extracts"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- GET_LIST (src/srcProject/layout/operation/modules/report-extracts/provider/provider.js#L38) -> v2/generic/all/reportExtract | request: prepareParams: params => {\n  const {\n    sort = {},\n    ...restParams\n  } = params;\n  const {\n    field,\n    order,\n    ...restSort\n  } = sort;\n  const transformSort = {\n    ...restSort,\n    ...(field === 'active' ? {\n      field: 'disabled',\n      order: order === 'ASC' ? 'DESC' : 'ASC'\n    } : {\n      field,\n      order\n    })\n  };\n  return {\n    sort: {\n      ...transformSort\n    },\n    ...restParams\n  };\n} | helper.nestedEntities: nestedEntities | helper.genericFields: genericFields / response: transformResponse: transformResponse | helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/reportExtract',\n  nestedEntities,\n  genericFields\n}\n- GET_MANY (src/srcProject/layout/operation/modules/report-extracts/provider/provider.js#L61) -> v2/generic/all/reportExtract | request: helper.nestedEntities: nestedEntities / response: helper.responseContainer: data / info: keyColumn: keyColumn | helper: getListV2 | helperArgs: {\n  url: 'v2/generic/all/reportExtract',\n  nestedEntities\n}\n- GET_MANY (src/srcProject/layout/operation/modules/report-extracts/provider/provider.js#L68) -> v2/generic/all/reportExtract",
        "responses": {
          "200": {
            "description": "Successful response. transformResponse: transformResponse | helper.responseContainer: data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "category": {
                            "type": "string"
                          },
                          "filenameFormat": {
                            "type": "string"
                          },
                          "active": {
                            "type": "boolean"
                          },
                          "customTableCode": {
                            "type": "string"
                          },
                          "executionResults": {
                            "type": "object",
                            "properties": {
                              "endDate": {
                                "type": "string",
                                "format": "date"
                              },
                              "status": {
                                "type": "boolean"
                              }
                            }
                          },
                          "filePath": {
                            "type": "string"
                          },
                          "searchBar": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "prepareParams: params => {\n  const {\n    sort = {},\n    ...restParams\n  } = params;\n  const {\n    field,\n    order,\n    ...restSort\n  } = sort;\n  const transformSort = {\n    ...restSort,\n    ...(field === 'active' ? {\n      field: 'disabled',\n      order: order === 'ASC' ? 'DESC' : 'ASC'\n    } : {\n      field,\n      order\n    })\n  };\n  return {\n    sort: {\n      ...transformSort\n    },\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities\nhelper.genericFields: genericFields",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "prepareParams: params => {\n  const {\n    sort = {},\n    ...restParams\n  } = params;\n  const {\n    field,\n    order,\n    ...restSort\n  } = sort;\n  const transformSort = {\n    ...restSort,\n    ...(field === 'active' ? {\n      field: 'disabled',\n      order: order === 'ASC' ? 'DESC' : 'ASC'\n    } : {\n      field,\n      order\n    })\n  };\n  return {\n    sort: {\n      ...transformSort\n    },\n    ...restParams\n  };\n}\nhelper.nestedEntities: nestedEntities\nhelper.genericFields: genericFields"
              }
            }
          }
        },
        "x-dev-notes": [
          "keyColumn: keyColumn",
          "helper: getListV2",
          "helperArgs: {\n  url: 'v2/generic/all/reportExtract',\n  nestedEntities,\n  genericFields\n}",
          "helperArgs: {\n  url: 'v2/generic/all/reportExtract',\n  nestedEntities\n}"
        ]
      }
    },
    "/v2/generic/reportExtract": {
      "get": {
        "tags": [
          "operation/report-extracts"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- CREATE (src/srcProject/layout/operation/modules/report-extracts/provider/provider.js#L71) -> v2/generic/reportExtract\n- DELETE (src/srcProject/layout/operation/modules/report-extracts/provider/provider.js#L80) -> v2/generic/reportExtract\n- DELETE_MANY (src/srcProject/layout/operation/modules/report-extracts/provider/provider.js#L83) -> v2/generic/reportExtract",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "category": {
                      "type": "string"
                    },
                    "filenameFormat": {
                      "type": "string"
                    },
                    "active": {
                      "type": "boolean"
                    },
                    "customTableCode": {
                      "type": "string"
                    },
                    "executionResults": {
                      "type": "object",
                      "properties": {
                        "endDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "status": {
                          "type": "boolean"
                        }
                      }
                    },
                    "filePath": {
                      "type": "string"
                    },
                    "searchBar": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/generic/reportExtract/{id}": {
      "put": {
        "tags": [
          "operation/report-extracts"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- UPDATE (src/srcProject/layout/operation/modules/report-extracts/provider/provider.js#L74) -> v2/generic/reportExtract/:id | request: options: {\n  method: 'PUT'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "category": {
                      "type": "string"
                    },
                    "filenameFormat": {
                      "type": "string"
                    },
                    "active": {
                      "type": "boolean"
                    },
                    "customTableCode": {
                      "type": "string"
                    },
                    "executionResults": {
                      "type": "object",
                      "properties": {
                        "endDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "status": {
                          "type": "boolean"
                        }
                      }
                    },
                    "filePath": {
                      "type": "string"
                    },
                    "searchBar": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'PUT'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'PUT'\n}"
              }
            }
          }
        }
      }
    },
    "/finance/reportExtracts/{code}/disable": {
      "post": {
        "tags": [
          "operation/report-extracts"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- DISABLE_EXTRACT (src/srcProject/layout/operation/modules/report-extracts/provider/provider.js#L87) -> finance/reportExtracts/:code/disable | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "category": {
                      "type": "string"
                    },
                    "filenameFormat": {
                      "type": "string"
                    },
                    "active": {
                      "type": "boolean"
                    },
                    "customTableCode": {
                      "type": "string"
                    },
                    "executionResults": {
                      "type": "object",
                      "properties": {
                        "endDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "status": {
                          "type": "boolean"
                        }
                      }
                    },
                    "filePath": {
                      "type": "string"
                    },
                    "searchBar": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/finance/reportExtracts/{code}/enable": {
      "post": {
        "tags": [
          "operation/report-extracts"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- ENABLE_EXTRACT (src/srcProject/layout/operation/modules/report-extracts/provider/provider.js#L93) -> finance/reportExtracts/:code/enable | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "category": {
                      "type": "string"
                    },
                    "filenameFormat": {
                      "type": "string"
                    },
                    "active": {
                      "type": "boolean"
                    },
                    "customTableCode": {
                      "type": "string"
                    },
                    "executionResults": {
                      "type": "object",
                      "properties": {
                        "endDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "status": {
                          "type": "boolean"
                        }
                      }
                    },
                    "filePath": {
                      "type": "string"
                    },
                    "searchBar": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/finance/reportExtracts/run": {
      "post": {
        "tags": [
          "operation/report-extracts"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- RUN_EXTRACT (src/srcProject/layout/operation/modules/report-extracts/provider/provider.js#L99) -> finance/reportExtracts/run | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "category": {
                      "type": "string"
                    },
                    "filenameFormat": {
                      "type": "string"
                    },
                    "active": {
                      "type": "boolean"
                    },
                    "customTableCode": {
                      "type": "string"
                    },
                    "executionResults": {
                      "type": "object",
                      "properties": {
                        "endDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "status": {
                          "type": "boolean"
                        }
                      }
                    },
                    "filePath": {
                      "type": "string"
                    },
                    "searchBar": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/v2/rating/walletOperation/markToRerate": {
      "post": {
        "tags": [
          "operation/wallet-operations"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- TO_RERATE (src/srcProject/layout/operation/modules/wallet-operations/provider/provider.js#L68) -> v2/rating/walletOperation/markToRerate | request: options: {\n  method: 'POST'\n}",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "quantity": {
                      "type": "string"
                    },
                    "amountWithoutTax": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "number"
                        }
                      ]
                    },
                    "subscription": {
                      "type": "object",
                      "properties": {
                        "order": {
                          "type": "string"
                        }
                      }
                    },
                    "chargeInstance": {
                      "type": "string"
                    },
                    "product": {
                      "type": "string"
                    },
                    "currency": {
                      "type": "object",
                      "properties": {
                        "currencyCode": {
                          "type": "string"
                        }
                      }
                    },
                    "offerTemplate": {
                      "type": "string"
                    },
                    "contract": {
                      "type": "string"
                    },
                    "orderNumber": {
                      "type": "string"
                    },
                    "billingAccount": {
                      "type": "string"
                    },
                    "unbilled": {
                      "type": "string"
                    },
                    "operationDate": {
                      "type": "string"
                    },
                    "serviceInstance": {
                      "type": "string"
                    },
                    "parameter1": {
                      "type": "string"
                    },
                    "parameter2": {
                      "type": "string"
                    },
                    "parameter3": {
                      "type": "string"
                    },
                    "billed": {
                      "type": "string"
                    },
                    "pricePlanMatrixVersion": {
                      "type": "string"
                    },
                    "jobInstance": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string"
                        }
                      }
                    },
                    "startDate": {
                      "type": "string"
                    },
                    "endDate": {
                      "type": "string"
                    },
                    "nbItemsToProcess": {
                      "type": "string"
                    },
                    "nbItemsCorrectlyProcessed": {
                      "type": "string"
                    },
                    "nbItemsProcessedWithWarning": {
                      "type": "string"
                    },
                    "nbItemsProcessedWithError": {
                      "type": "string"
                    },
                    "report": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "description": "options: {\n  method: 'POST'\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "options: {\n  method: 'POST'\n}"
              }
            }
          }
        }
      }
    },
    "/geocode/search/": {
      "get": {
        "tags": [
          "srcProject/CPQ"
        ],
        "summary": "Used in 3 frontend location(s)",
        "description": "- fetch (src/srcProject/widgets/CPQ/PrestationV2/components/ConfigAttributes/GroupedAttributes.tsx#L169) -> https://carto.mediapost.fr/geocode/search/?q={encodeURIComponent_contractualizationAddress_}&limit=1\n- fetch (src/srcProject/widgets/CPQ/PrestationV2/components/PopupGeo/Map.tsx#L9) -> https://carto.mediapost.fr/geocode/search/?q={encodeURIComponent_query_}\n- fetch (src/srcProject/widgets/CPQ/PrestationV2/components/PopupGeo/Map.tsx#L107) -> https://carto.mediapost.fr/geocode/search/?q={encodeURIComponent_address_}&limit=1",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/geocode/reverse/": {
      "get": {
        "tags": [
          "srcProject/CPQ"
        ],
        "summary": "Used in 2 frontend location(s)",
        "description": "- fetch (src/srcProject/widgets/CPQ/PrestationV2/components/ConfigAttributes/GroupedAttributes.tsx#L177) -> https://carto.mediapost.fr/geocode/reverse/?lon={lon}&lat={lat}\n- fetch (src/srcProject/widgets/CPQ/PrestationV2/components/PopupGeo/Map.tsx#L140) -> https://carto.mediapost.fr/geocode/reverse/?lon={lng}&lat={lat}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "parameters": [
          {
            "name": "lon",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lat",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/{path}": {
      "get": {
        "tags": [
          "srcProject/CPQ"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- fetch (src/srcProject/widgets/CPQ/PrestationV2/components/ProductConfig/uploadVisuel.tsx#L180) -> {path} | request: fetch.options: {\n  headers: {\n    'Content-type': '*/*',\n    Authorization: `Bearer ${token}`,\n    accept: accept\n  }\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-request-hints": [
          "fetch.options: {\n  headers: {\n    'Content-type': '*/*',\n    Authorization: `Bearer ${token}`,\n    accept: accept\n  }\n}"
        ]
      }
    },
    "/{SERVER_URL}/opencell/api/rest/annexe/list/{formRecord_quoteVersionId}": {
      "get": {
        "tags": [
          "srcProject/CPQ"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- fetch (src/srcProject/widgets/CPQ/QuoteV2/components/Dialogs/QuoteSignDialog.js#L231) -> {SERVER_URL}/opencell/api/rest/annexe/list/{formRecord_quoteVersionId} | request: fetch.method: GET | fetch.options: {\n  method: 'GET',\n  headers: {\n    Authorization: `Bearer ${token}`\n  }\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "x-request-hints": [
          "fetch.method: GET",
          "fetch.options: {\n  method: 'GET',\n  headers: {\n    Authorization: `Bearer ${token}`\n  }\n}"
        ]
      }
    },
    "/{SERVER_URL}/opencell/api/rest/eDevisSigne/downloadEdevisSigne/{_form_getState_values_currentQuoteVersion_id}": {
      "post": {
        "tags": [
          "srcProject/CPQ"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- fetch (src/srcProject/widgets/CPQ/QuoteV2/components/Header/Tabs/TabDevis.tsx#L857) -> {SERVER_URL}/opencell/api/rest/eDevisSigne/downloadEdevisSigne/{_form_getState_values_currentQuoteVersion_id} | request: fetch.method: POST | fetch.options: {\n  method: 'POST',\n  headers: {\n    Authorization: `Bearer ${token}`,\n    'Content-Type': 'application/octet-stream'\n  },\n  body: JSON.stringify({})\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "fetch.method: POST\nfetch.options: {\n  method: 'POST',\n  headers: {\n    Authorization: `Bearer ${token}`,\n    'Content-Type': 'application/octet-stream'\n  },\n  body: JSON.stringify({})\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/{SERVER_URL}/opencell/api/{url}": {
      "{method}": {
        "tags": [
          "src/user/hooks"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- fetch (src/user/hooks/useGlobalAppSettings.tsx#L38) -> {SERVER_URL}/opencell/api/{url} | request: fetch.method: {METHOD} | fetch.options: {\n  headers,\n  method,\n  body: JSON.stringify({\n    limit: 1,\n    nestedEntities\n  }),\n  maxRetry: 3,\n  timeout: 5000\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "fetch.method: {METHOD}\nfetch.options: {\n  headers,\n  method,\n  body: JSON.stringify({\n    limit: 1,\n    nestedEntities\n  }),\n  maxRetry: 3,\n  timeout: 5000\n}",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": "integer",
                    "example": 1
                  },
                  "nestedEntities": {
                    "description": "Identifier reference: nestedEntities",
                    "x-expression": "nestedEntities"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{SERVER_URL}/opencell/api/rest/user": {
      "put": {
        "tags": [
          "src/user/utils"
        ],
        "summary": "Used in 1 frontend location(s)",
        "description": "- fetch (src/user/utils/keycloak.js#L193) -> {SERVER_URL}/opencell/api/rest/user | request: fetch.method: PUT | fetch.options: {\n  method: 'PUT',\n  headers,\n  maxRetry: 3,\n  timeout: 5000,\n  body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n}",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        },
        "requestBody": {
          "description": "fetch.method: PUT\nfetch.options: {\n  method: 'PUT',\n  headers,\n  maxRetry: 3,\n  timeout: 5000,\n  body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n}",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "description": "Identifier reference: data",
                "x-expression": "data"
              }
            }
          }
        }
      }
    }
  }
}