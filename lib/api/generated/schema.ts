/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/rest/billingCycle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for billing cycle with a given code.
         * @description Search for billing cycle with a given code.
         */
        get: operations["    GET_BillingCycle_search"];
        /**
         * Update an existing billing cycle.
         * @description Update an existing billing cycle.
         */
        put: operations["    PUT_BillingCycle_update"];
        /**
         * Create a new billing cycle.
         * @description Create a new billing cycle.
         */
        post: operations["    POST_BillingCycle_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billingCycle/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing billing cycle with a given code
         * @description Create new or update an existing billing cycle with a given code
         */
        post: operations["    POST_BillingCycle_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billingCycle/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billingCycle/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for list of billingCycles.
         * @description Search for list of billingCycles.
         */
        get: operations["    GET_BillingCycle_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billingCycle/{billingCycleCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove an existing billing cycle with a given code.
         * @description Remove an existing billing cycle with a given code.
         */
        delete: operations["    DELETE_BillingCycle_{billingCycleCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/calendar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for calendar with a given code.
         * @description Search for calendar with a given code.
         */
        get: operations["    GET_Calendar_search"];
        /**
         * Update calendar.
         * @description Update calendar.
         */
        put: operations["    PUT_Calendar_update"];
        /**
         * Create a new calendar.
         * @description Create a new calendar.
         */
        post: operations["    POST_Calendar_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/calendar/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing calendar with a given code.
         * @description Create new or update an existing calendar with a given code.
         */
        post: operations["    POST _Calendar_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/calendar/bankingDateStatus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the banking date status.
         * @description Gets the banking date status.
         */
        get: operations["    GET_Calendar_bankingDateStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/calendar/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/calendar/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a list of all calendars.
         * @description Retrieve a list of all calendars.
         */
        get: operations["    GET _Calendar_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/calendar/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Calendars matching a given criteria
         * @description List Calendars matching a given criteria
         */
        get: operations["    GET_Calendar_listGetAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/calendar/{calendarCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove calendar with a given code.
         * @description Remove calendar with a given code.
         */
        delete: operations["    DELETE _Calendar_{calendarCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/configurations/properties": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Converts system properties into json string.
         * @description Converts system properties into json string.
         */
        get: operations["    GET_Configuration_properties"];
        put?: never;
        /**
         * set configuration property
         * @description set configuration property
         */
        post: operations["    POST_Configuration_properties"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/configurations/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/configurations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * set configuration property
         * @description set configuration property
         */
        post: operations["    POST_Configuration_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/countryIso": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search country with a given country code.
         * @description Search country with a given country code.
         */
        get: operations["    GET_CountryIso_ "];
        /**
         * Modify a country
         * @description Modify a country. Same input parameter as create. The country and tradingCountry are created if they don't exists. The operation fails if the tradingCountry is null.
         */
        put: operations["    PUT_CountryIso_update"];
        /**
         * Creates a tradingCountry base from the supplied country code
         * @description Creates a tradingCountry base from the supplied country code. If the country code does not exists, a country and tradingCountry records are created
         */
        post: operations["    POST_CountryIso_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/countryIso/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Creates or modify a tradingCountry base from the supplied country code.
         * @description Creates or modify a tradingCountry base from the supplied country code.
         */
        post: operations["    POST_CountryIso_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/countryIso/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_3"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/countryIso/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all countries.
         * @description List all countries.
         */
        get: operations["    GET_CountryIso_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/countryIso/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List countries ISO matching a given criteria
         * @description List countries ISO matching a given criteria
         */
        get: operations["    GET_CountryIso_listGetAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/countryIso/{countryCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Does not delete a country but the tradingCountry associated to it.
         * @description Does not delete a country but the tradingCountry associated to it.
         */
        delete: operations["    DELETE_CountryIso_{countryCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/country": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search Trading country with a given country code.
         * @description Search Trading country with a given country code.
         */
        get: operations["    GET_Country_search"];
        /**
         * Modify a country
         * @description Modify a country. Same input parameter as create. The country and tradingCountry are created if they don't exists. The operation fails if the tradingCountry is null.
         */
        put: operations["    PUT_Country_update"];
        /**
         * Creates a Trading Country base from the supplied country code
         * @description Creates a Trading Country base from the supplied country code. If the country code does not exists, a country and tradingCountry records are created
         */
        post: operations["    POST_Country_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/country/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or update a Trading Country base from the supplied country code
         * @description Create or update a Trading Country base from the supplied country code. If the country code does not exists, a country and tradingCountry records are created
         */
        post: operations["    POST_Country_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/country/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable a Trading country with a given country code
         * @description Disable a Trading country with a given country code
         */
        post: operations["    POST_Country_{code}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/country/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Trading country with a given country code
         * @description Enable a Trading country with a given country code
         */
        post: operations["    POST_Country_{code}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/country/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_4"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/country/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for list of trading countries.
         * @description Search for list of trading countries.
         */
        get: operations["    GET_Country_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/country/{countryCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Does not delete a country but the tradingCountry associated to it.
         * @description Does not delete a country but the tradingCountry associated to it.
         */
        delete: operations["    DELETE_Country_{countryCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/country/{countryCode}/{currencyCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Does not delete a country but the tradingCountry associated to it.
         * @description Does not delete a country but the tradingCountry associated to it.
         */
        delete: operations["    DELETE_Country_{countryCode}_{currencyCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/currencyIso": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search currency with a given currency code.
         * @description Search currency with a given currency code.
         */
        get: operations["    GET_CurrencyIso_ "];
        /**
         * Modify a tradingCurrency
         * @description Modify a tradingCurrency. Same input parameter as create. The currency and tradingCurrency are created if they don't exists. The operation fails if the tradingCurrency is null
         */
        put: operations["    PUT_CurrencyIso_update"];
        /**
         * Creates tradingCurrency base on currency code. If the currency code does not exists, a currency record is created
         * @description Creates tradingCurrency base on currency code. If the currency code does not exists, a currency record is created
         */
        post: operations["    POST_CurrencyIso_ "];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/currencyIso/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Creates or modify a tradingCurrency base on currency code.
         * @description Creates or modify a tradingCurrency base on currency code.
         */
        post: operations["    POST_CurrencyIso_createOrUpdate "];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/currencyIso/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_5"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/currencyIso/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all currencies.
         * @description List all currencies.
         */
        get: operations["    GET_CurrencyIso_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/currencyIso/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List currencies ISO matching a given criteria
         * @description List currencies ISO matching a given criteria
         */
        get: operations["    GET_CurrencyIso_listGetAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/currencyIso/{currencyCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove currency with a given currency code.
         * @description Remove currency with a given currency code.
         */
        delete: operations["    DELETE_CurrencyIso_{currencyCode} "];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/currency/addExchangeRate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * API to add Exchange Rate
         * @description API to add Exchange Rate
         */
        post: operations["ADD_EXCHANGE_RATE"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/currency/addFunctionalCurrency": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * API to add functional currency to the main provider
         * @description API to add functional currency to the main provider
         */
        post: operations["ADD_FUNCTIONAL_CURRENCY"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/currency": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search currency with a given currency code.
         * @description Search currency with a given currency code.
         */
        get: operations["GET_Currency_search"];
        /**
         * Modify a tradingCurrency
         * @description Modify a tradingCurrency. Same input parameter as create. The currency and tradingCurrency are created if they don't exists. The operation fails if the tradingCurrency is null
         */
        put: operations["PUT_Currency_update"];
        /**
         * Creates tradingCurrency base on currency code. If the currency code does not exists, a currency record is created
         * @description Creates tradingCurrency base on currency code. If the currency code does not exists, a currency record is created
         */
        post: operations["POST_Currency_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/currency/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or Update tradingCurrency base on currency code. If the currency code does not exists, a currency record is created
         * @description Create or Update tradingCurrency base on currency code. If the currency code does not exists, a currency record is created
         */
        post: operations["POST_Currency_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/currency/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable a Trading currency with a given currency code
         * @description Disable a Trading currency with a given currency code
         */
        post: operations["POST_Currency_{code}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/currency/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Trading currency with a given currency code
         * @description Enable a Trading currency with a given currency code
         */
        post: operations["POST_Currency_{code}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/currency/importExchangeRate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * API to import an exchange Rate from a file
         * @description Import an exchange Rate from a file
         */
        post: operations["importExchangeRate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/currency/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_6"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/currency/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for list of trading currencies.
         * @description Search for list of trading currencies.
         */
        get: operations["GET_Currency_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/currency/{currencyCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove currency with a given currency code.
         * @description Remove currency with a given currency code.
         */
        delete: operations["DELETE_Currency_{currencyCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/currency/exchangeRate/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * API to delete an exchange Rate
         * @description delete an existing exchange rate
         */
        delete: operations["removeExchangeRateById"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/currency/updateExchangeRate/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * API to update exchange rate
         * @description API to update exchange rate
         */
        put: operations["UPDATE_EXCHANGE_RATE"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/filter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a filter with a given code
         * @description Find a filter with a given code
         */
        get: operations["    GET_Filter_search"];
        /**
         * update an existing filter
         * @description update an existing filter.Same input parameter as create. If the filter code does not exists, a filter record is created. The operation fails if the filter is null
         */
        put: operations["    PUT_Filter_update"];
        /**
         * Creates filter based on filter code. If the filter code does not exists, a filter record is created
         * @description Creates filter based on filter code. If the filter code does not exists, a filter record is created
         */
        post: operations["    POST_Filter_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/filter/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing filter with a given code
         * @description Create new or update an existing filter with a given code
         */
        post: operations["    POST_Filter_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/filter/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable a Filter with a given code
         * @description Disable a Filter with a given code
         */
        post: operations["    POST_Filter_{code}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/filter/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Filter with a given code
         * @description Enable a Filter with a given code
         */
        post: operations["    POST_Filter_{code}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/filter/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_7"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/genericCode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * find
         * @description find
         */
        get: operations["    GET_GenericCode_search"];
        /**
         * update
         * @description update
         */
        put: operations["    PUT_GenericCode_update"];
        /**
         * create
         * @description create
         */
        post: operations["    POST_GenericCode_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/genericCode/sequence": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * createSequence
         * @description createSequence
         */
        post: operations["    POST_GenericCode_sequence_"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/genericCode/generateCode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * getGenericCode
         * @description getGenericCode
         */
        post: operations["    POST_GenericCode_generateCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/genericCode/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_8"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoiceCategory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search invoice with a given code.
         * @description Search invoice with a given code.
         */
        get: operations["    GET_InvoiceCategory_search"];
        /**
         * Update invoice category.
         * @description Update invoice category.
         */
        put: operations["    PUT_InvoiceCategory_update"];
        /**
         * Create invoice category. Description per language can be defined
         * @description Create invoice category. Description per language can be defined
         */
        post: operations["    POST_InvoiceCategory_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoiceCategory/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or update invoice with a given code.
         * @description Create or update invoice with a given code.
         */
        post: operations["    POST_InvoiceCategory_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoiceCategory/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_9"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoiceCategory/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for list of invoice categories.
         * @description Search for list of invoice categories.
         */
        get: operations["    GET_InvoiceCategory_list"];
        put?: never;
        /**
         * List InvoiceCategory matching a given criteria
         * @description List InvoiceCategory matching a given criteria
         */
        post: operations["    POST_InvoiceCategory_list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoiceCategory/{invoiceCategoryCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove invoice with a given code.
         * @description Remove invoice with a given code.
         */
        delete: operations["    DELETE_InvoiceCategory_{invoiceCategoryCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoiceSequence": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search invoiceSequence with a given code.
         * @description Search invoiceSequence with a given code.
         */
        get: operations["    GET_InvoiceSequence_search"];
        /**
         * Update invoiceSequence.
         * @description Update invoiceSequence.
         */
        put: operations["    PUT_InvoiceSequence_update"];
        /**
         * Create invoiceSequence.
         * @description Create invoiceSequence.
         */
        post: operations["    POST_InvoiceSequence_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoiceSequence/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing invoiceSequence with a given code.
         * @description Create new or update an existing invoiceSequence with a given code.
         */
        post: operations["    POST_InvoiceSequence_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoiceSequence/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_10"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoiceSequence/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List of invoiceSequence.
         * @description List of invoiceSequence.
         */
        get: operations["    GET_InvoiceSequence_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoiceSubCategory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for invoice sub category with a given code.
         * @description Search for invoice sub category with a given code.
         */
        get: operations["    GET_InvoiceSubCategory_search"];
        /**
         * Update invoice sub category.
         * @description Update invoice sub category.
         */
        put: operations["    PUT_InvoiceSubCategory_update"];
        /**
         * Create invoice sub category.
         * @description Create invoice sub category.
         */
        post: operations["    POST_InvoiceSubCategory_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoiceSubCategory/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or update invoice sub category.
         * @description Create or update invoice sub category.
         */
        post: operations["    POST_InvoiceSubCategory_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoiceSubCategory/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_11"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoiceSubCategory/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for list of invoiceSubCategories.
         * @description Search for list of invoiceSubCategories.
         */
        get: operations["    GET_InvoiceSubCategory_list"];
        put?: never;
        /**
         * List InvoiceSubCategory matching a given criteria
         * @description List InvoiceSubCategory matching a given criteria
         */
        post: operations["    POST_InvoiceSubCategory_list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoiceSubCategory/{invoiceSubCategoryCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove invoice sub category with a given code.
         * @description Remove invoice sub category with a given code.
         */
        delete: operations["    DELETE_InvoiceSubCategory_{invoiceSubCategoryCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoiceType": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search invoiceType with a given code.
         * @description Search invoiceType with a given code.
         */
        get: operations["    GET_InvoiceType_search"];
        /**
         * Update invoiceType. Description per language can be defined
         * @description Update invoiceType. Description per language can be defined
         */
        put: operations["    PUT_InvoiceType_update"];
        /**
         * Create invoiceType. Description per language can be defined
         * @description Create invoiceType. Description per language can be defined
         */
        post: operations["    POST_InvoiceType_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoiceType/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing invoiceType with a given code.
         * @description Create new or update an existing invoiceType with a given code.
         */
        post: operations["    POST_InvoiceType_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoiceType/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_12"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoiceType/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List of invoiceType.
         * @description List of invoiceType.
         */
        get: operations["    GET_InvoiceType_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoiceType/{invoiceTypeCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove invoiceType with a given code.
         * @description Remove invoiceType with a given code.
         */
        delete: operations["    DELETE_InvoiceType_{invoiceTypeCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/languageIso": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search language given a code.
         * @description Search language given a code.
         */
        get: operations["    GET_LanguageIso_search"];
        /**
         * modify a language
         * @description modify a language. Same input parameter as create. The language and trading Language are created if they don't exists. The operation fails if the tradingLanguage is null.
         */
        put: operations["    PUT_LanguageIso_update"];
        /**
         * Creates tradingLanguage base on language code. If the language code does not exists, a language record is created.
         * @description Creates tradingLanguage base on language code. If the language code does not exists, a language record is created.
         */
        post: operations["    POST_LanguageIso_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/languageIso/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or update a language if it doesn't exists.
         * @description Create or update a language if it doesn't exists.
         */
        post: operations["    POST_LanguageIso_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/languageIso/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_13"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/languageIso/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all languages.
         * @description List all languages.
         */
        get: operations["    GET_LanguageIso_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/languageIso/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List languages ISO matching a given criteria
         * @description List languages ISO matching a given criteria
         */
        get: operations["    GET_LanguageIso_listGetAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/languageIso/{languageCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Does not delete a language but the tradingLanguage associated to it.
         * @description Does not delete a language but the tradingLanguage associated to it.
         */
        delete: operations["    DELETE_LanguageIso_{languageCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/language": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search language given a code.
         * @description Search language given a code.
         */
        get: operations["    GET_Language_search"];
        /**
         * modify a language
         * @description modify a language. Same input parameter as create. The language and trading Language are created if they don't exists. The operation fails if the tradingLanguage is null.
         */
        put: operations["    PUT_Language_update"];
        /**
         * Creates tradingLanguage base on language code. If the language code does not exists, a language record is created.
         * @description Creates tradingLanguage base on language code. If the language code does not exists, a language record is created.
         */
        post: operations["    POST_Language_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/language/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or update a language if it doesn't exists.
         * @description Create or update a language if it doesn't exists.
         */
        post: operations["    POST_Language_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/language/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable a Trading language with a given language code
         * @description Disable a Trading language with a given language code
         */
        post: operations["    POST_Language_{code}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/language/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Trading language with a given language code
         * @description Enable a Trading language with a given language code
         */
        post: operations["    POST_Language_{code}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/language/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_14"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/language/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for list of trading languages.
         * @description Search for list of trading languages.
         */
        get: operations["    GET_Language_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/language/{languageCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Does not delete a language but the tradingLanguage associated to it.
         * @description Does not delete a language but the tradingLanguage associated to it.
         */
        delete: operations["    DELETE_Language_{languageCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/massImport/uploadAndImport": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload file and detect its type.
         * @description Upload file and detect its type.
         */
        post: operations["    POST_UploadMass"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/occTemplate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search OccTemplate with a given code.
         * @description Search OccTemplate with a given code.
         */
        get: operations["    GET_OccTemplate_search"];
        /**
         * Update OccTemplate.
         * @description Update OccTemplate.
         */
        put: operations["    PUT_OccTemplate_update"];
        /**
         * Create OccTemplate.
         * @description Create OccTemplate.
         */
        post: operations["    POST_OccTemplate_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/occTemplate/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or update OccTemplate.
         * @description Create or update OccTemplate.
         */
        post: operations["    POST_OccTemplate_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/occTemplate/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_15"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/occTemplate/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get List of OccTemplates matching a given criteria
         * @description Get List of OccTemplates matching a given criteria
         */
        get: operations["    GET_OccTemplate_list"];
        put?: never;
        /**
         * Get List of OccTemplates matching a given criteria
         * @description Get List of OccTemplates matching a given criteria
         */
        post: operations["    POST_OccTemplate_list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/occTemplate/{occTemplateCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove OccTemplate with a given code.
         * @description Remove OccTemplate with a given code.
         */
        delete: operations["    DELETE_OccTemplate_{occTemplateCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/PdfInvoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a PDF invoice with a given invoice number and a customer account code.
         * @description Find a PDF invoice with a given invoice number and a customer account code.
         */
        get: operations["    GET_PdfInvoice_search"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/PdfInvoice/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_16"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/provider": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve provider information.
         * @description Retrieve provider information.
         */
        get: operations["    GET_Provider_search"];
        /**
         * Update provider.
         * @description Update provider.
         */
        put: operations["    PUT_Provider_update"];
        /**
         * Create provider. Deprecated in v. 4.5. Use updateProvider() instead.
         * @deprecated
         * @description Create provider. Deprecated in v. 4.5. Use updateProvider() instead.
         */
        post: operations["    POST_Provider_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/provider/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or update a provider if it doesn't exists. Deprecated in v. 4.5. Use updateProvider() instead.
         * @deprecated
         * @description Create or update a provider if it doesn't exists. Deprecated in v. 4.5. Use updateProvider() instead.
         */
        post: operations["    POST_Provider_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/provider/createTenant": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register a new tenant
         * @description Register a new tenant
         */
        post: operations["    POST_Provider_createTenant"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/provider/getCustomerAccountConfiguration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns list of payment method and credit categories.
         * @description Returns list of payment method and credit categories.
         */
        get: operations["    GET_Provider_getCustomerAccountConfiguration"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/provider/getCustomerConfiguration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns list of customer brands, categories and titles.
         * @description Returns list of customer brands, categories and titles.
         */
        get: operations["    GET_Provider_getCustomerConfiguration"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/provider/getInvoicingConfiguration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns list of invoicing configuration (calendars, taxes, invoice categories, invoice sub categories, billing cycles and termination reasons
         * @description Returns list of invoicing configuration (calendars, taxes, invoice categories, invoice sub categories, billing cycles and termination reasons.
         */
        get: operations["    GET_Provider_getInvoicingConfiguration"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/provider/findProviderCF": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a provider Cf with a given provider code.
         * @description Find a provider Cf with a given provider code.
         */
        get: operations["    GET_Provider_findProviderCF"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/provider/getTradingConfiguration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns list of trading countries, currencies and languages.
         * @description Returns list of trading countries, currencies and languages.
         */
        get: operations["    GET_Provider_getTradingConfiguration"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/provider/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_17"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/provider/listTenants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List tenants
         * @description List tenants
         */
        get: operations["    GET_Provider_listTenants"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/provider/{providerCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove a tenant
         * @description Remove a tenant
         */
        delete: operations["    DELETE_Provider_{providerCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/provider/updateProviderCF": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update a provider CF.
         * @description Update a provider CF.
         */
        put: operations["    PUT_Provider_updateProviderCF"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * THIS IS A TEMPORARY API FOR DYNAMIC PORTAL USE ONLY.  IT MAY BE REMOVED AT ANY TIME.
         * @description THIS IS A TEMPORARY API FOR DYNAMIC PORTAL USE ONLY.  IT MAY BE REMOVED AT ANY TIME.
         */
        get: operations["    GET_Query_search"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search role.
         * @deprecated
         */
        get: operations["find"];
        /** Update role */
        put: operations["update"];
        /** Create role */
        post: operations["create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/role/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or update role.
         * @deprecated
         */
        post: operations["createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/role/{roleName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search role. */
        get: operations["findV2"];
        put?: never;
        post?: never;
        /** Remove role. */
        delete: operations["remove"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/role/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_18"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/role/external": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List external roles.
         * @deprecated
         */
        get: operations["listExternalRoles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/role/externals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List external roles. */
        get: operations["listExternalRolesV2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/role/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List roles matching a given criteria.
         * @deprecated
         */
        get: operations["listGet"];
        put?: never;
        /**
         * List roles matching a given criteria.
         * @deprecated
         */
        post: operations["listPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/role/filtering": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List roles matching a given criteria. */
        get: operations["listGetV2"];
        put?: never;
        /** List roles matching a given criteria. */
        post: operations["listPostV2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/scriptInstance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a script instance with a given code.
         * @description Find a script instance with a given code.
         */
        get: operations["    GET_ScriptInstance_search"];
        /**
         * Update an existing script instance.
         * @description Update an existing script instance.
         */
        put: operations["    PUT_ScriptInstance_update"];
        /**
         * Create a new script instance.
         * @description Create a new script instance.
         */
        post: operations["    POST_ScriptInstance_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/scriptInstance/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing script instance with a given code.
         * @description Create new or update an existing script instance with a given code.
         */
        post: operations["    POST_ScriptInstance_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/scriptInstance/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable a Script instance with a given code
         * @description Disable a Script instance with a given code
         */
        post: operations["    POST_ScriptInstance_{code}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/scriptInstance/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Script instance with a given code
         * @description Enable a Script instance with a given code
         */
        post: operations["    POST_ScriptInstance_{code}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/scriptInstance/execute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Execute a script instance with a given code and list of parameters for the context of the script
         * @description Execute a script instance with a given code and list of parameters for the context of the script
         */
        get: operations["    GET_ScriptInstance_execute"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/scriptInstance/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_19"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/scriptInstance/{scriptInstanceCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove an existing script instance with a given code .
         * @description Remove an existing script instance with a given code .
         */
        delete: operations["    DELETE_ScriptInstance_{scriptInstanceCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/seller": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for seller with a given code.
         * @description Search for seller with a given code.
         */
        get: operations["    GET_Seller_search"];
        /**
         * Update seller.
         * @description Update seller.
         */
        put: operations["    PUT_Seller_update"];
        /**
         * Create seller.
         * @description Create seller.
         */
        post: operations["    POST_Seller_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/seller/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or update a seller.
         * @description Create or update a seller.
         */
        post: operations["    POST_Seller_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/seller/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_91"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/seller/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all sellers.
         * @description List all sellers.
         */
        get: operations["    GET_Seller_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/seller/listSellerCodes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for all seller's code.
         * @description Search for all seller's code.
         */
        get: operations["    GET_Seller_listSellerCodes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/seller/{sellerCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove seller with a given code.
         * @description Remove seller with a given code.
         */
        delete: operations["    DELETE_Seller_{sellerCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/tax": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search tax with a given code.
         * @description Search tax with a given code.
         */
        get: operations["    GET_Tax_search"];
        /**
         * Update tax. Description per language can be defined
         * @description Update tax. Description per language can be defined
         */
        put: operations["    PUT_Tax_update"];
        /**
         * Create tax. Description per language can be defined
         * @description Create tax. Description per language can be defined
         */
        post: operations["    POST_Tax_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/tax/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or uptadate a tax.
         * @description Create or uptadate a tax.
         */
        post: operations["    POST _Tax_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/tax/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_21"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/tax/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for the list of taxes.
         * @description Search for the list of taxes.
         */
        get: operations["    GET _Tax_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/tax/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List taxes matching a given criteria
         * @description List taxes matching a given criteria
         */
        get: operations["    GET_Tax_listGetAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/tax/{taxCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove tax with a given code.
         * @description Remove tax with a given code.
         */
        delete: operations["    DELETE_Tax_{taxCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/terminationReason": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a termination reason with a given code.
         * @description Find a termination reason with a given code.
         */
        get: operations["    GET_TerminationReason_search"];
        /**
         * Update an existing termination reason.
         * @description Update an existing termination reason.
         */
        put: operations["    PUT_TerminationReason_update"];
        /**
         * Create a new termination reason.
         * @description Create a new termination reason.
         */
        post: operations["    POST_TerminationReason_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/terminationReason/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing termination reason with a given code.
         * @description Create new or update an existing termination reason with a given code.
         */
        post: operations["    POST_TerminationReason_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/terminationReason/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_22"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/terminationReason/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List of termination reasons.
         * @description List of termination reasons.
         */
        get: operations["    GET_TerminationReason_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/terminationReason/{terminationReasonCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove an existing termination reason with a given code.
         * @description Remove an existing termination reason with a given code.
         */
        delete: operations["    DELETE_TerminationReason_{terminationReasonCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/usage/chargeAggregate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for charge aggregate isage from a user account code during a period of time.
         * @description Search for charge aggregate isage from a user account code during a period of time.
         */
        get: operations["    GET_Usage_chargeAggregate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for all opened ratedTransactions with a given userAccountCode,fromDate and toDate .
         * @description Search for all opened ratedTransactions with a given userAccountCode,fromDate and toDate .
         */
        get: operations["    GET_Usage_search"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/usage/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_23"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search user with a given username.
         * @deprecated
         */
        get: operations["find_1"];
        /** Update user */
        put: operations["update_1"];
        /** Create user */
        post: operations["create_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/user/external": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Updates a user in keycloak and core given a username. */
        put: operations["updateExternalUser"];
        /** Creates a user in keycloak and core. */
        post: operations["createExternalUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/user/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or update user based on the username.
         * @deprecated
         */
        post: operations["createOrUpdate_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/user/external/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Deletes a user in keycloak and core given a username. */
        delete: operations["deleteExternalUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/user/name/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search user with a given username. */
        get: operations["findV2_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/user/current": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getCurrentUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/user/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_24"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/user/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all users. */
        get: operations["list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/user/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List users matching a given criteria.
         * @deprecated
         */
        get: operations["listGet_1"];
        put?: never;
        /**
         * List users matching a given criteria.
         * @deprecated
         */
        post: operations["listPost_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/user/filtering": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List users matching a given criteria. */
        get: operations["listGetV2_1"];
        put?: never;
        /** List users matching a given criteria. */
        post: operations["listPostV2_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/user/{username}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove user with a given username */
        delete: operations["remove_1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for an access with a given access code and subscription code.
         * @description Search for an access with a given access code and subscription code.
         */
        get: operations["    GET_Access_search"];
        /**
         * Update an existing access
         * @description Update an existing access
         */
        put: operations["    PUT_Access_update"];
        /**
         * Create a new access
         * @description Create a new access
         */
        post: operations["    POST_Access_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/access/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing access
         * @description Create new or update an existing access
         */
        post: operations["    POST_Access_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/access/{accessCode}/{subscriptionCode}/{startDate}/{endDate}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable an Access point with a given access code and subscription code.
         * @description Disable an Access point with a given access code and subscription code.
         */
        post: operations["    POST_Access_{accessCode}_{subscriptionCode}_{startDate}_{endDate}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/access/{accessCode}/{subscriptionCode}/{startDate}/{endDate}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable an Access point with a given access code and subscription code.
         * @description Enable an Access point with a given access code and subscription code.
         */
        post: operations["    POST_Access_{accessCode}_{subscriptionCode}_{startDate}_{endDate}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/access/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_25"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/access/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Access filtered by subscriptionCode.
         * @description List Access filtered by subscriptionCode.
         */
        get: operations["    GET_Access_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/access/{accessCode}/{subscriptionCode}/{startDate}/{endDate}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove an access with a given access code and subscription code.
         * @description Remove an access with a given access code and subscription code.
         */
        delete: operations["    DELETE_Access_{accessCode}_{subscriptionCode}_{startDate}_{endDate}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/accountHierarchy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update account hierarchy */
        put: operations["update_2"];
        /** Create account hierarchy */
        post: operations["create_2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/accountHierarchy/createCRMAccountHierarchy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a CRMAccountHerarchy */
        post: operations["createCRMAccountHierarchy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/accountHierarchy/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create or update Account Hierarchy based on code */
        post: operations["createOrUpdate_2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/accountHierarchy/createOrUpdateCRMAccountHierarchy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create or update a CRM Account Hierarchy */
        post: operations["createOrUpdateCRMAccountHierarchy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/accountHierarchy/customerHierarchyUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update account hierarchy
         * @description This service allows to create / update (if exist already) and close / terminate (if termination date is set) a list of customer, customer accounts, billing accounts, user accounts, subscriptions, services, and access in one transaction. It can activate and terminate subscription and service instance. Close customer account. Terminate billing and user account
         */
        post: operations["customerHierarchyUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/accountHierarchy/find": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search for a list of customer accounts given a set of filter
         * @deprecated
         */
        post: operations["find_2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/accountHierarchy/findAccountHierarchy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Find account hierarchy
         * @description Is an update of findAccountHierarchy wherein the user can search on 1 or multiple levels of the hierarchy in 1 search. These are the modes that can be combined by using bitwise - or |. Example: If we search on level=BA for lastName=legaspi and found a match, the search will return the hierarchy from BA to CUST. If we search on level=UA for address1=my_address and found a match, the search will return the hierarchy from UA to CUST.", notes = "CUST = 1, CA = 2, BA = 4, UA = 8
         */
        post: operations["findAccountHierarchy2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/accountHierarchy/filtering": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Search for a list of customer accounts given a set of filter */
        post: operations["findV2_2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/accountHierarchy/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_26"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/accountHierarchy/updateCRMAccountHierarchy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update a CRM Account HerarHierarchychy */
        post: operations["updateCRMAccountHierarchy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/billingAccount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for a billing account with a given code
         * @deprecated
         */
        get: operations["find_3"];
        /** Update existing billing account */
        put: operations["update_3"];
        /** Create a new billing account */
        post: operations["create_3"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/billingAccount/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or update Billing Account based on cod
         * @deprecated
         */
        post: operations["createOrUpdate_3"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/billingAccount/filterCountersByPeriod": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * filter counters by period date
         * @deprecated
         */
        get: operations["filterBillingAccountCountersByPeriod"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/billingAccount/{billingAccountCode}/filterCountersByPeriod": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** filter counters by period date */
        get: operations["filterBillingAccountCountersByPeriodV2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/billingAccount/{billingAccountCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search for a billing account with a given code */
        get: operations["findV2_3"];
        put?: never;
        post?: never;
        /** Remove a billing account with a Billing Account Code */
        delete: operations["remove_2"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/billingAccount/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_27"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/billingAccount/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List BillingAccount filter by customerAccountCode
         * @deprecated
         */
        get: operations["listByCustomerAccount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/billingAccount/customerAccounts/{customerAccountCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List BillingAccount filter by customerAccountCode */
        get: operations["listByCustomerAccountV2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/billingAccount/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all billing accounts. */
        get: operations["listGetAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/businessAccountModel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for a business account model.
         * @description Search for a business account model.
         */
        get: operations["    GET_BusinessAccountModel_ "];
        /**
         * Update an existing business account model.
         * @description Update an existing business account model.
         */
        put: operations["    PUT_BusinessAccountModel_ "];
        /**
         * Create a new business account model.
         * @description Create a new business account model.
         */
        post: operations["    POST_BusinessAccountModel_ "];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/businessAccountModel/findParents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Find parent entities based on account hierarchy code.
         * @description Find parent entities based on account hierarchy code.
         */
        post: operations["    POST_BusinessAccountModel_findParents"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/businessAccountModel/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_28"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/businessAccountModel/install": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Install business account module.
         * @description Install business account module.
         */
        put: operations["    PUT_BusinessAccountModel_install "];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/businessAccountModel/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Return meveo's modules.
         * @description Return meveo's modules.
         */
        get: operations["    GET_BusinessAccountModel_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/businessAccountModel/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List MeveoModuleDtos matching a given criteria
         * @description List MeveoModuleDtos matching a given criteria
         */
        get: operations["    GET_BusinessAccountModel_listGetAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/businessAccountModel/{businessAccountModelCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove business account model with a given business account model code.
         * @description Remove business account model with a given business account model code.
         */
        delete: operations["    DELETE_BusinessAccountModel_{businessAccountModelCode} "];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customerAccount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a customer account
         * @deprecated
         */
        get: operations["find_4"];
        /** Update a customer account */
        put: operations["update_4"];
        /** Create a customer account */
        post: operations["create_4"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customerAccount/creditCategory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a credit category */
        post: operations["createCreditCategory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customerAccount/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or update a customer account
         * @deprecated
         */
        post: operations["createOrUpdate_4"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customerAccount/filterCountersByPeriod": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Filter counters by period date.
         * @deprecated
         */
        get: operations["filterCustomerAccountCountersByPeriod"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customerAccount/{customerAccountCode}/filterCountersByPeriod": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Filter counters by period date. */
        get: operations["filterCustomerAccountCountersByPeriodV2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customerAccount/{customerAccountCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a customer account */
        get: operations["findV2_4"];
        put?: never;
        post?: never;
        /** Delete a customer account */
        delete: operations["remove_3"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customerAccount/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_29"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customerAccount/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List CustomerAccount filtered by customerCode
         * @deprecated
         */
        get: operations["listByCustomer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customerAccount/customers/{customerCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List CustomerAccount filtered by customerCode */
        get: operations["listByCustomerV2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customerAccount/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all customer accounts. */
        get: operations["listGetAll_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customerAccount/creditCategory/{creditCategoryCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** delete a credit category */
        delete: operations["removeCreditCategory"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customerAccount/transferAccount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Transfer an amount from one customer to another */
        post: operations["transferAccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customer/anonymizeGdpr": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Anonymization of a specific customer
         * @deprecated
         */
        get: operations["anonymizeGdpr"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customer/{customerCode}/gdprAnonymization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["anonymizeGdprV2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for a customer with a given code
         * @deprecated
         */
        get: operations["find_5"];
        /** Update an existing customer */
        put: operations["update_5"];
        /** Create a new customer */
        post: operations["create_5"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customer/createBrand": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new customer brand
         * @deprecated
         */
        post: operations["createBrand"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customer/brands": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update an existing customer brand */
        put: operations["updateBrandV2"];
        /** Create a new customer brand */
        post: operations["createBrandV2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customer/createCategory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new customer category
         * @deprecated
         */
        post: operations["createCategory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customer/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update an existing customer category */
        put: operations["updateCategoryV2"];
        /** Create a new customer category */
        post: operations["createCategoryV2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customer/sequence": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Updates a new customer sequence with a given code. */
        put: operations["updateCustomerSequence"];
        /** Creates a new customer sequence */
        post: operations["createCustomerSequence"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customer/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update existing customer
         * @deprecated
         */
        post: operations["createOrUpdate_5"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customer/createOrUpdateBrand": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing customer brand
         * @deprecated
         */
        post: operations["createOrUpdateBrand"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customer/createOrUpdateCategory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing customer category
         * @deprecated
         */
        post: operations["createOrUpdateCategory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customer/exportCustomerHierarchy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Exports an account hierarchy given a specific customer
         * @deprecated
         */
        get: operations["exportCustomerHierarchy"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customer/{customerCode}/exportation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Exports an account hierarchy given a specific customer */
        get: operations["exportCustomerHierarchyV2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customer/filterCountersByPeriod": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Filter counters by period date */
        get: operations["filterCustomerCountersByPeriod"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customer/{customerCode}/filterCountersByPeriod": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Filter counters by period date */
        get: operations["filterCustomerCountersByPeriodV2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customer/category/{categoryCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for a customer category with a given code
         * @deprecated
         */
        get: operations["findCategory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customer/categories/{categoryCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search for a customer category with a given code */
        get: operations["findCategoryV2"];
        put?: never;
        post?: never;
        /** Remove an existing customer category with a given category code */
        delete: operations["removeCategoryV2"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customer/{customerCode}/rootParent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Customer root parent */
        get: operations["findRootParent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customer/{customerCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search for a customer with a given code */
        get: operations["findV2_5"];
        put?: never;
        post?: never;
        /** Remove customer with a given code */
        delete: operations["remove_4"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customer/customerNumberSequence": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update the Provider's customer number sequence configuration */
        put: operations["updateCustomerNumberSequence"];
        /** Calculates and returns the next value of the mandate number */
        post: operations["getNextCustomerNumber"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customer/sequence/{code}/next": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generates the next customer sequence number */
        post: operations["getNextCustomerSequenceNumber"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customer/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_30"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customer/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all customers. */
        get: operations["list_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customer/list47": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["list47"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customer/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List customers matching a given criteria
         * @deprecated
         */
        get: operations["listGet_2"];
        put?: never;
        /**
         * List customers matching a given criteria
         * @deprecated
         */
        post: operations["listPost_2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customer/filtering": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** List customers matching a given criteria */
        post: operations["listPostV2_2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customer/removeBrand/{brandCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove existing customer brand with a given brand code
         * @deprecated
         */
        delete: operations["removeBrand"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customer/brands/{brandCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove existing customer brand with a given brand code */
        delete: operations["removeBrandV2"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customer/removeCategory/{categoryCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove an existing customer category with a given category code
         * @deprecated
         */
        delete: operations["removeCategory"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customer/updateBrand": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update an existing customer brand
         * @deprecated
         */
        put: operations["updateBrand"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/customer/updateCategory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update an existing customer category
         * @deprecated
         */
        put: operations["updateCategory"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/providerContact": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for a provider contact with a given code
         * @description Search for a provider contact with a given code
         */
        get: operations["    GET_ProviderContact_search"];
        /**
         * Update an existing provider contact
         * @description Update an existing provider contact
         */
        put: operations["    PUT_ProviderContact_update"];
        /**
         * Create a provider contact
         * @description Create a provider contact
         */
        post: operations["    POST_ProviderContact_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/providerContact/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing provider contact
         * @description Create new or update an existing provider contact
         */
        post: operations["    POST_ProviderContact_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/providerContact/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_31"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/providerContact/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List of provider contacts
         * @description List of provider contacts
         */
        get: operations["    GET_ProviderContact_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/providerContact/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove an existing provider contact with a given code
         * @description Remove an existing provider contact with a given code
         */
        delete: operations["    DELETE_ProviderContact_{code}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/title": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for a title with a given code
         * @description Search for a title with a given code
         */
        get: operations["    GET_Title_search"];
        /**
         * Update an existing title
         * @description Update an existing title
         */
        put: operations["    PUT_Title_update"];
        /**
         * Create a new title
         * @description Create a new title
         */
        post: operations["    POST_Title_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/title/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing title
         * @description Create new or update an existing title
         */
        post: operations["    POST_Title_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/title/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_32"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/title/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List titles
         * @description List titles
         */
        get: operations["    GET_Title_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/title/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List titles matching a given criteria
         * @description List titles matching a given criteria
         */
        get: operations["    GET_Title_listGetAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/title/{titleCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove an existing title with a given code
         * @description Remove an existing title with a given code
         */
        delete: operations["    DELETE_Title_{titleCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/userAccount/applyProduct": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Filter counters by period date */
        post: operations["applyProduct"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/userAccount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for a user account with a given code
         * @deprecated
         */
        get: operations["find_6"];
        /** Update an existing user account */
        put: operations["update_6"];
        /** Create a new user account */
        post: operations["create_6"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/userAccount/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing user account
         * @deprecated
         */
        post: operations["createOrUpdate_6"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/userAccount/filterCountersByPeriod": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Filter counters by period date */
        get: operations["filterUserAccountCountersByPeriod"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/userAccount/{userAccountCode}/filterCountersByPeriod": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Filter counters by period date */
        get: operations["filterUserAccountCountersByPeriodV2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/userAccount/{userAccountCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search for a user account with a given code */
        get: operations["findV2_6"];
        put?: never;
        post?: never;
        /** Remove an existing user account with a given code */
        delete: operations["remove_5"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/userAccount/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_33"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/userAccount/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List user accounts filtered by a billing account's code
         * @deprecated
         */
        get: operations["listByBillingAccount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/userAccount/billingAccounts/{billingAccountCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List user accounts filtered by a billing account's code */
        get: operations["listByBillingAccountV2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/account/userAccount/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all user accounts. */
        get: operations["listGetAll_2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/admin/audit/{enableORdisable}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update audit logging
         * @description Update audit logging
         */
        put: operations["    PUT_Audit_{enableORdisable}"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/admin/audit/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_34"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/admin/fileFormat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for a File format with a given code
         * @description Search for a File format with a given code
         */
        get: operations["    GET_FileFormat_search"];
        /**
         * Update an existing File format
         * @description Update an existing File format
         */
        put: operations["    PUT_FileFormat_update"];
        /**
         * Create a new File format
         * @description Create a new File format
         */
        post: operations["    POST_FileFormat_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/admin/fileFormat/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing File formats
         * @description Create new or update an existing File formats
         */
        post: operations["    POST_FileFormat_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/admin/fileFormat/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_35"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/admin/fileFormat/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List fileFormats matching a given criteria
         * @description List fileFormats matching a given criteria
         */
        get: operations["    GET_FileFormat_listGetAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/admin/fileFormat/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove an existing File format with a given code
         * @description Remove an existing File format with a given code
         */
        delete: operations["    DELETE_FileFormat_{code}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/admin/fileFormat/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search File formats by matching a given criteria
         * @description Search File formats by matching a given criteria
         */
        get: operations["    GET_FileFormat_list"];
        put?: never;
        /**
         * Search for File formats by matching a given criteria
         * @description Search for File formats by matching a given criteria
         */
        post: operations["    POST_FileFormat_list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/admin/files/createDir": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a directory
         * @description Create a directory
         */
        post: operations["    POST_Files_createDir"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/admin/files/downloadFile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download file with a given file name.
         * @description Download file with a given file name.
         */
        get: operations["    GET_Files_downloadFile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/admin/files/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_36"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/admin/files/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the list of files
         * @description Get the list of files
         */
        get: operations["    GET_Files_all"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/admin/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the list of files in a specific directory
         * @description Get the list of files in a specific directory
         */
        get: operations["    GET_Files_search"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/admin/files/suppressDirectory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Suppress the directory
         * @description Suppress the directory
         */
        post: operations["    POST_Files_suppressDirectory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/admin/files/suppressFile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Suppress the file
         * @description Suppress the file
         */
        post: operations["    POST_Files_suppressFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/admin/files/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload the file form.
         * @description Upload the file form.
         */
        post: operations["    POST_Files_upload"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/admin/files/uploadFileBase64": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload the file with the specific file data in 64 base.
         * @description Upload the file with the specific file data in 64 base.
         */
        post: operations["    POST_Files_uploadFileBase64"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/admin/files/uploadZippedFileBase64": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload the zipped file with the file data.
         * @description Upload the zipped file with the file data.
         */
        post: operations["    POST_Files_uploadZippedFileBase64"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/admin/files/zipDirectory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Will make a archive of a directory
         * @description Will make a archive of a directory
         */
        post: operations["    POST_Files_zipDirectory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/admin/files/zipFile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Will make a archive of a file
         * @description Will make a archive of a file
         */
        post: operations["    POST_Files_zipFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/accountingCode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Finds an AccountingCode.
         * @description Finds an AccountingCode.
         */
        get: operations["    GET_AccountingCode_search"];
        /**
         * Updates AccountingCode. An existing AccountingCode is search using the code field.
         * @description Updates AccountingCode. An existing AccountingCode is search using the code field.
         */
        put: operations["    PUT_AccountingCode_update"];
        /**
         * Creates a new AccountingCode.
         * @description Creates a new AccountingCode.
         */
        post: operations["    POST_AccountingCode_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/accountingCode/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or update an AccountingCode. Checks if the code already exists.
         * @description Create or update an AccountingCode. Checks if the code already exists.
         */
        post: operations["    POST_AccountingCode_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/accountingCode/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable a Accounting code with a given code
         * @description Disable a Accounting code with a given code
         */
        post: operations["    POST_AccountingCode_{code}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/accountingCode/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Accounting code with a given code
         * @description Enable a Accounting code with a given code
         */
        post: operations["    POST_AccountingCode_{code}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/accountingCode/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_37"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/accountingCode/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List AccountingCodes matching a given criteria
         * @description List AccountingCodes matching a given criteria
         */
        get: operations["    GET_AccountingCode_listGetAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/accountingCode/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List AccountingCode matching the given criteria.
         * @description List AccountingCode matching the given criteria.
         */
        get: operations["    GET_AccountingCode_list"];
        put?: never;
        /**
         * List AccountingCode matching the given criteria.
         * @description List AccountingCode matching the given criteria.
         */
        post: operations["    POST_AccountingCode_list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/accountingCode/{accountingCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Removes an AccountingCode entity.
         * @description Removes an AccountingCode entity.
         */
        delete: operations["    DELETE_AccountingCode_{accountingCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/invoicingPlanItems": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for a invoicingPlanItem with a given code
         * @description Search for a invoicingPlanItem with a given code
         */
        get: operations["GET_InvoicingPlanItem_search"];
        /**
         * Update an existing invoicingPlanItem
         * @description Update an existing invoicingPlanItem
         */
        put: operations["PUT_InvoicingPlanItem_update"];
        /**
         * Create a new invoicingPlanItem
         * @description Create a new invoicingPlanItem
         */
        post: operations["POST_InvoicingPlanItem_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/invoicingPlanItems/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing invoicingPlanItem
         * @description Create new or update an existing invoicingPlanItem
         */
        post: operations["POST_InvoicingPlanItem_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/invoicingPlanItems/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_38"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/invoicingPlanItems/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * List invoicingPlanItems matching a given criteria
         * @description List invoicingPlanItems matching a given criteria
         */
        post: operations["POST_InvoicingPlanItem_list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/invoicingPlanItems/{invoicingPlanItemCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove an existing invoicingPlanItem with a given code
         * @description Remove an existing invoicingPlanItem with a given code
         */
        delete: operations["DELETE_InvoicingPlanItem_{invoicingPlanItemCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/invoicingPlans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for a invoicingPlan with a given code
         * @description Search for a invoicingPlan with a given code
         */
        get: operations["GET_InvoicingPlan_search"];
        /**
         * Update an existing invoicingPlan
         * @description Update an existing invoicingPlan
         */
        put: operations["PUT_InvoicingPlan_update"];
        /**
         * Create a new invoicingPlan
         * @description Create a new invoicingPlan
         */
        post: operations["POST_InvoicingPlan_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/invoicingPlans/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_39"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/invoicingPlans/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * List invoicingPlans matching a given criteria
         * @description List invoicingPlans matching a given criteria
         */
        post: operations["POST_InvoicingPlan_list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/invoicingPlans/{invoicingPlanCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove an existing invoicingPlan with a given code
         * @description Remove an existing invoicingPlan with a given code
         */
        delete: operations["DELETE_InvoicingPlan_{invoicingPlanCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/invoicing/cancelBillingRun": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Cancel a billing run based on billingRun id.
         * @description Cancel a billing run based on billingRun id.
         */
        put: operations["    PUT_Invoicing_cancelBillingRun"];
        /**
         * Cancels a billing run
         * @description Cancels a billing run. Sets RatedTransaction.status associated to billing run to OPEN. Remove aggregates and invoice associated to the billing run. Set billingAccount.billingRun to null.
         */
        post: operations["    POST_Invoicing_cancelBillingRun"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/invoicing/billingRun/{billingRunId}/cancelInvoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Move invoices to a new Billing Run with the same parameters as the current one, and also in status REJECTED|POSTINVOICED.
         * @description Move invoices to a new Billing Run with the same parameters as the current one, and also in status REJECTED|POSTINVOICED.
         */
        put: operations["    PUT_Invoicing_billingRun_{billingRunId}_cancelInvoice"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/invoicing/billingRun/{billingRunId}/canceledInvoices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete canceled invoices for a given billing run.
         * @description Delete canceled invoices for a given billing run.
         */
        delete: operations["    DELETE_Invoicing_billingRun_{billingRunId}_canceledInvoices"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/invoicing/createBillingRun": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new billing run. The id of the created BillingRun is returned on 'message' field of response object.
         * @description Create a new billing run. The id of the created BillingRun is returned on 'message' field of response object.
         */
        post: operations["    POST_Invoicing_createBillingRun"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/invoicing/createOrUpdateBillingRun": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or Update billing run. The id of the created BillingRun is returned on 'message' field of response object.
         * @description Create a new billing run. The id of the created BillingRun is returned on 'message' field of response object.
         */
        post: operations["    POST_Invoicing_createBillingRun_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/invoicing/getBillingAccountListInRun": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Returns the list of billable billing accounts of a billing run
         * @description Returns the list of billable billing accounts of a billing run
         */
        post: operations["    POST_Invoicing_getBillingAccountListInRun"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/invoicing/getBillingRunInfo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search for a billing run info with a given Id
         * @description Search for a billing run info with a given Id
         */
        post: operations["    POST_Invoicing_getBillingRunInfo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/invoicing/getPostInvoicingReport": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Returns the post-invoicing report for a given billing run Id
         * @description Returns the post-invoicing report for a given billing run Id
         */
        post: operations["    POST_Invoicing_getPostInvoicingReport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/invoicing/getPreInvoicingReport": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Returns the pre-invoicing report for a given billing run Id
         * @description Returns the pre-invoicing report for a given billing run Id
         */
        post: operations["    POST_Invoicing_getPreInvoicingReport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/invoicing/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_40"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/invoicing/billingRun/{billingRunId}/invalidateInvoiceDocuments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * This API will empty xml_filename and pdf_filename from all invoices in the specified billing run.
         * @description This API will empty xml_filename and pdf_filename from all invoices in the specified billing run.
         */
        put: operations["    PUT_Invoicing_billingRun_{billingRunId}_invalidateInvoice"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/invoicing/billingRun/{billingRunId}/moveInvoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Move invoices to a new Billing Run with the same parameters as the current one, and also in status REJECTED|POSTINVOICED.
         * @description Move invoices to a new Billing Run with the same parameters as the current one, and also in status REJECTED|POSTINVOICED.
         */
        put: operations["    PUT_Invoicing_billingRun_{billingRunId}_moveInvoice"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/invoicing/rebuildInvoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Recompute invoices based on RatedTransactions and re-apply invoiceValidationScript
         * @description Recompute invoices based on RatedTransactions and re-apply invoiceValidationScript
         */
        put: operations["    PUT_Invoicing_rebuildInvoice"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/invoicing/billingRun/{billingRunId}/rejectInvoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Reject one or several invoices (change status to REJECTED). Body will contains a list of invoice ids.
         * @description Reject one or several invoices (change status to REJECTED). Body will contains a list of invoice ids.
         */
        put: operations["    PUT_Invoicing_billingRun_{billingRunId}_rejectInvoice"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/invoicing/validateBillingRun": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Validate a billing run based on billingRun id.
         * @description Validate a billing run based on billingRun id.
         */
        put: operations["    PUT_Invoicing_validateBillingRun"];
        /**
         * Depending on the status of the billing run, produce the pre-invoicing report, the post-Invoicing report or validates a billing run
         * @description Depending on the status of the billing run, produce the pre-invoicing report, the post-Invoicing report or validates a billing run. Sets the next invoice date of a billing account to the next calendar date.
         */
        post: operations["    POST_Invoicing_validateBillingRun"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/invoicing/billingRun/{billingRunId}/validateInvoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Validate one or several invoices (change status to DRAFT). Body will contain a list of invoice id
         * @description Validate one or several invoices (change status to DRAFT). Body will contain a list of invoice id
         */
        put: operations["    PUT_Invoicing_billingRun_{billingRunId}_validateInvoice"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/mediation/cancelReservation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancels the reservation
         * @description Cancels the reservation
         */
        post: operations["    POST_Mediation_cancelReservation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/mediation/chargeCdr": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Same as registerCdrList, but at the same process rate the EDR created
         * @description Same as registerCdrList, but at the same process rate the EDR created
         */
        post: operations["    POST_Mediation_chargeCdr"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/mediation/confirmReservation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Confirms the reservation
         * @description Confirms the reservation
         */
        post: operations["    POST_Mediation_confirmReservation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/mediation/createCDR": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["createCDR"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/mediation/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_82"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/mediation/notifyOfRejectedCdrs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Notify of rejected CDRs
         * @description Notify of rejected CDRs
         */
        post: operations["    POST_Mediation_notifyOfRejectedCdrs"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/mediation/processCdrList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Convert CDRs to EDRs
         * @description Convert CDRs to EDRs
         */
        post: operations["    POST_Mediation_processCdrList"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/mediation/registerCdrList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Accepts a list of CDR line. This CDR is parsed and created as EDR. CDR is same format use in mediation job
         * @description Accepts a list of CDR line. This CDR is parsed and created as EDR. CDR is same format use in mediation job
         */
        post: operations["    POST_Mediation_registerCdrList"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/mediation/reserveCdr": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Allows the user to reserve a CDR, this will create a new reservation entity attached to a wallet operation
         * @description Allows the user to reserve a CDR, this will create a new reservation entity attached to a wallet operation. A reservation has expiration limit save in the provider entity (PREPAID_RESRV_DELAY_MS)
         */
        post: operations["    POST_Mediation_reserveCdr"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/ratedTransaction/cancelRatedTransactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Call service to cancel one or many opened Rated Transactions according to the passed query, cancel an opened Rated Transaction is to set status to CANCELED
         * @description Call service to cancel one or many opened Rated Transactions according to the passed query, cancel an opened Rated Transaction is to set status to CANCELED.
         */
        post: operations["    POST_RatedTransaction_cancelRatedTransactions"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/ratedTransaction/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_42"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/ratedTransaction/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List ratedTransactions matching a given criteria
         * @description List ratedTransactions matching a given criteria
         */
        get: operations["    GET_RatedTransaction_listGetAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/ratedTransaction/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of rated transactions
         * @description Get a list of rated transactions
         */
        get: operations["    GET_RatedTransaction_list"];
        put?: never;
        /**
         * Get a list of rated transactions
         * @description Get a list of rated transactions
         */
        post: operations["    POST_RatedTransaction_list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Activate a given Subscription.
         * @description Activate a given Subscription.
         */
        put: operations["    PUT_Subscription_activate"];
        /**
         * Activate a given Subscription.
         * @description Activate a given Subscription.
         */
        post: operations["    POST_Subscription_activate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/activateForCustomer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Activate a given Subscription for a customer.
         * @description Activate a given Subscription for a customer.
         */
        post: operations["    POST_Subscription_activateForCustomer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/activatePatchedSubscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Activate the patched version of a given Subscription.
         * @description Activate the patched version of a given Subscription.
         */
        post: operations["    POST_Patched_Subscription_activate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/activateServices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Activate services
         * @description Activate services. Subscription should not be in status (RESILIATED OR CANCELLED). This service allows to override the charge instance price before activation. This service is actually a 2 step process: service instantiation then activation. If service.subscriptionDate is not set a service is only instantiated else it's instantiated then activated.
         */
        post: operations["    POST_Subscription_activateServices"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/applyOneShotChargeInstance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Apply one shot charge. Subscription should not be in status (RESILIATED OR CANCELLED).
         * @description Apply one shot charge. Subscription should not be in status (RESILIATED OR CANCELLED).
         */
        post: operations["    POST_Subscription_applyOneShotChargeInstance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/applyProduct": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Apply a product on a subscription.
         * @description Apply a product on a subscription.
         */
        post: operations["    POST_Subscription_applyProduct"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/cancelSubscriptionRenewal/{subscriptionCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancels the renewal term of an active subscription.
         * @description Cancels the renewal term of an active subscription.
         */
        post: operations["    POST_Subscription_cancelSubscriptionRenewal_{subscriptionCode}"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/cancelSubscriptionTermination/{subscriptionCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancels the programed termination of a subscription.
         * @description Cancels the programed termination of a subscription.
         */
        post: operations["    POST_Subscription_cancelSubscriptionRenewal_{subscriptionCode}_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for a subscription with a given code.
         * @description Search for a subscription with a given code.
         */
        get: operations["    GET_Subscription_search"];
        /**
         * Updates a subscription. It cannot update a subscription with status=RESILIATED
         * @description Updates a subscription. It cannot update a subscription with status=RESILIATED
         */
        put: operations["    PUT_Subscription_update"];
        /**
         * Create a subscription. It does not activate it
         * @description Create a subscription. It does not activate it
         */
        post: operations["    POST_Subscription_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or update subscription information ONLY. Does not include access, services nor products
         * @description Create or update subscription information ONLY. Does not include access, services nor products
         */
        post: operations["    POST_Subscription_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/createOrUpdatePartial": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or update subscription information WITH access, services and products
         * @description Create or update subscription information WITH access, services and products. Terminates subscription if termination date is provided on subscription. Terminates service if termination date is provided on service. Activates inactive service if service subscription date is provided. Instantiates service if no matching service found. Updates service if matching service found. Only those services, access and products passed will be afected.
         */
        post: operations["    POST_Subscription_createOrUpdatePartial"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/{subscriptionId}/delete-si": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * API to delete 'INACTIVE' and 'PENDING' serviceInstance from subscription
         * @description API to delete 'INACTIVE' and 'PENDING' serviceInstance from subscription
         */
        delete: operations["DELETE_Subscription_serviceInstance"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/findByCustomer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List subscriptions matching a given criteria
         * @description List subscriptions matching a given criteria
         */
        get: operations["    GET_Subscription_findByCustomer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/dueDateDelay": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns the due date delay information.
         * @description Returns the due date delay information.
         */
        get: operations["    GET_Subscription_dueDateDelay"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/serviceInstance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find service instance.
         * @description Find service instance.
         */
        get: operations["    GET_SubscriptionserviceInstance"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/listOneshotChargeOthers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for a subscription with a given code.
         * @description Search for a subscription with a given code.
         */
        get: operations["    GET_Subscription_listOneshotChargeOthers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_43"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/instantiateServices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Instantiate a Service subscription
         * @description Instantiate a Service subscription
         */
        post: operations["    POST_Subscription_instantiateServices"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List subscriptions matching a given criteria
         * @description List subscriptions matching a given criteria
         */
        get: operations["    GET_Subscription_listGetAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/listAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Deprecated in v.4.7.2 Use /list instead.
         * @deprecated
         * @description Deprecated in v.4.7.2 Use /list instead.
         */
        get: operations["    GET_Subscription_listAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List subscriptions matching a given criteria
         * @description List subscriptions matching a given criteria
         */
        get: operations["    GET_Subscription_list"];
        put?: never;
        /**
         * List subscriptions matching a given criteria
         * @description List subscriptions matching a given criteria
         */
        post: operations["    POST_Subscription_list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/serviceInstances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns a list of service instances.
         * @description Returns a list of service instances.
         */
        get: operations["    GET_SubscriptionserviceInstances"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/{code}/offer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * patch subscription
         * @description patch subscription
         */
        patch: operations["    PATCH_Subscription_{code}_offer"];
        trace?: never;
    };
    "/api/rest/billing/subscription/rate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Give a rate data for subscription
         * @description Give a rate data for subscription
         */
        post: operations["    POST_Subscription_rate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/resumeServices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Resume an existing services
         * @description Resume an existing services
         */
        put: operations["    PUT_SubscriptionresumeServices"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/resume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Resume an existing subscription
         * @description Resume an existing subscription
         */
        put: operations["    PUT_Subscriptionresume"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/{code}/offer/rollback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * rollback offer
         * @description rollback offer
         */
        patch: operations["    PATCH_Subscription{code}_offer_rollback"];
        trace?: never;
    };
    "/api/rest/billing/subscription/subscribeAndActivateProducts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * subscribe And Activate Products
         * @description Create a subscribe And Activate Products
         */
        post: operations["POST_Subscription_subscribeAndActivateProducts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/subscribeAndActivateServices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a subscription and activate services in a single transaction.
         * @deprecated
         * @description Create a subscription and activate services in a single transaction.
         */
        post: operations["    POST_Subscription_subscribeAndActivateServices"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/subscribeAndInstantiateProducts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a subscription and instanciate product in a single transaction.
         * @description Create a subscription and instanciate product in a single transaction.
         */
        post: operations["    POST_Subscription_subscribeAndInstantiateProducts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/suspendServices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Suspend an existing services
         * @description Suspend an existing services
         */
        put: operations["    PUT_SubscriptionsuspendServices"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/suspend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Suspend an existing subscription
         * @description Suspend an existing subscription
         */
        put: operations["    PUT_Subscriptionsuspend"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/oneShotCharge/{subscriptionCode}/{oneshotChargeCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Search for a subscription with a given code.
         * @description Search for a subscription with a given code.
         */
        delete: operations["    DELETE_Subscription_oneShotCharge_{subscriptionCode}_{oneshotChargeCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/terminateServices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Terminate a list of services. If a service is already TERMINATED, an error is thrown.
         * @description Terminate a list of services. If a service is already TERMINATED, an error is thrown.
         */
        post: operations["    POST_Subscription_terminateServices"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/terminate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Terminate a subscription. If subscription status is RESILIATED, an error is thrown
         * @description Terminate a subscription. If subscription status is RESILIATED, an error is thrown
         */
        put: operations["    PUT_Subscription_terminate"];
        /**
         * Terminate a subscription. If subscription status is RESILIATED, an error is thrown
         * @description Terminate a subscription. If subscription status is RESILIATED, an error is thrown
         */
        post: operations["    POST_Subscription_terminate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/subscription/updateServices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update existing services
         * @description Update existing services
         */
        put: operations["    PUT_SubscriptionupdateServices"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/wallet/reservation/{reservationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Cancel a reservation given an id.
         * @description Cancel a reservation given an id.
         */
        delete: operations["    DELETE_Wallet_reservation_{reservationId:[0-9]+}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/wallet/reservation/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Confirm a reservation given an id.
         * @description Confirm a reservation given an id.
         */
        post: operations["    POST_Wallet_reservation_confirm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/wallet/operation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new operation
         * @description Create a new operation
         */
        post: operations["    POST_Wallet_operation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/wallet/template/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing wallet template
         * @description Create new or update an existing wallet template
         */
        post: operations["    POST_Wallet_template_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/wallet/reservation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Updates a reservation. Same as create we just need to pass the id of the reservation.
         * @description Updates a reservation. Same as create we just need to pass the id of the reservation.
         */
        put: operations["    PUT_Wallet_reservation"];
        /**
         * Create reservation for a given offer, user account, seller, provider and date.
         * @description Create reservation for a given offer, user account, seller, provider and date.
         */
        post: operations["    POST_Wallet_reservation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/wallet/template": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for a wallet template with a given code
         * @description Search for a wallet template with a given code
         */
        get: operations["    GET_Wallet_template"];
        /**
         * Update an existing wallet template
         * @description Update an existing wallet template
         */
        put: operations["    PUT_Wallet_template"];
        /**
         * Create a new wallet template
         * @description Create a new wallet template
         */
        post: operations["    POST_Wallet_template"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/wallet/balance/current": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Gets the current (open or reserved) wallet balance amount at a given level and date period. In wallet operation, status='OPEN OR RESERVED'.
         * @description Gets the current (open or reserved) wallet balance amount at a given level and date period. In wallet operation, status='OPEN OR RESERVED'.
         */
        post: operations["    POST_Wallet_balance_current"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/wallet/operation/find": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search for an operation with a given (example) code. Deprecated in v.4.7.2
         * @deprecated
         * @description Search for an operation with a given (example) code. Deprecated in v.4.7.2
         */
        post: operations["    POST_Wallet_operation_find"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/wallet/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_44"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/wallet/operation/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List wallet operations matching a given criteria
         * @description List wallet operations matching a given criteria
         */
        get: operations["    GET_Wallet_operation_listGetAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/wallet/operation/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List wallet operations matching a given criteria
         * @description List wallet operations matching a given criteria
         */
        get: operations["    GET_Wallet_operation_list"];
        put?: never;
        /**
         * List wallet operations matching a given criteria
         * @description List wallet operations matching a given criteria
         */
        post: operations["    POST_Wallet_operation_list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/wallet/balance/open": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Gets the open wallet balance amount at a given level and date period. In wallet operation, status='OPEN'.
         * @description Gets the open wallet balance amount at a given level and date period. In wallet operation, status='OPEN'.
         */
        post: operations["    POST_Wallet_balance_open"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/wallet/template/{walletTemplateCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove an existing wallet template with a given code
         * @description Remove an existing wallet template with a given code
         */
        delete: operations["    DELETE_Wallet_template_{walletTemplateCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/wallet/balance/reserved": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Gets the reserved wallet balance amount at a given level and date period. In wallet operation, status='RESERVED'.
         * @description Gets the reserved wallet balance amount at a given level and date period. In wallet operation, status='RESERVED'.
         */
        post: operations["    POST_Wallet_balance_reserved"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/bundleTemplate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update bundleTemplate
         * @description Update bundleTemplate
         */
        put: operations["    PUT_BundleTemplate_update"];
        /**
         * Create bundleTemplate
         * @description Create bundleTemplate
         */
        post: operations["    POST_BundleTemplate_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/bundleTemplate/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or update bundleTemplate
         * @description Create or update bundleTemplate
         */
        post: operations["    POST_BundleTemplate_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/bundleTemplate/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_45"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/businessOfferModel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Remove an existing business offer model with a given code.
         * @description Remove an existing business offer model with a given code.
         */
        get: operations["    GET_BusinessOfferModel_search"];
        /**
         * Update an existing business offer model.
         * @description Update an existing business offer model.
         */
        put: operations["    PUT_BusinessOfferModel_update"];
        /**
         * Create a new business offer model.
         * @description Create a new business offer model.
         */
        post: operations["    POST_BusinessOfferModel_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/businessOfferModel/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing business offer model.
         * @description Create new or update an existing business offer model.
         */
        post: operations["    POST_BusinessOfferModel_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/businessOfferModel/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_46"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/businessOfferModel/install": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Install business offer model module.
         * @description Install business offer model module.
         */
        put: operations["    PUT_BusinessOfferModel_install"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/businessOfferModel/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List business offer models.
         * @description List business offer models.
         */
        get: operations["    GET_BusinessOfferModel_list"];
        put?: never;
        /**
         * List business offer models.
         * @description List business offer models.
         */
        post: operations["    POST_BusinessOfferModel_list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/businessOfferModel/{businessOfferModelCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove an existing business offer model with a given code.
         * @description Remove an existing business offer model with a given code.
         */
        delete: operations["    DELETE_BusinessOfferModel_{businessOfferModelCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/businessProductModel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Remove an existing business product model with a given code
         * @description Remove an existing business product model with a given code
         */
        get: operations["    GET_BusinessProductModel_search"];
        /**
         * Update an existing business product model
         * @description Update an existing business product model
         */
        put: operations["    PUT_BusinessProductModel_update"];
        /**
         * Create a new business product model
         * @description Create a new business product model
         */
        post: operations["    POST_BusinessProductModel_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/businessProductModel/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing business product model
         * @description Create new or update an existing business product model
         */
        post: operations["    POST_BusinessProductModel_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/businessProductModel/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_47"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/businessProductModel/install": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Install business product model module
         * @description Install business product model module
         */
        put: operations["    PUT_BusinessProductModel_install"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/businessProductModel/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List business product models
         * @description List business product models
         */
        get: operations["    GET_BusinessProductModel_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/businessProductModel/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Business Product Models matching a given criteria
         * @description List Business Product Models matching a given criteria
         */
        get: operations["    GET_BusinessProductModel_listGetAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/businessProductModel/{businessProductModelCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove an existing business product model with a given code
         * @description Remove an existing business product model with a given code
         */
        delete: operations["    DELETE_BusinessProductModel_{businessProductModelCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/businessServiceModel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for a business service model with a given code
         * @description Search for a business service model with a given code
         */
        get: operations["    GET_BusinessServiceModel_search"];
        /**
         * Update an existing business service model
         * @description Update an existing business service model
         */
        put: operations["    PUT_BusinessServiceModel_update"];
        /**
         * Create a new business service model
         * @description Create a new business service model
         */
        post: operations["    POST_BusinessServiceModel_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/businessServiceModel/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing business service model
         * @description Create new or update an existing business service model
         */
        post: operations["    POST_BusinessServiceModel_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/businessServiceModel/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_48"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/businessServiceModel/install": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Install business offer model module
         * @description Install business offer model module
         */
        put: operations["    PUT_BusinessServiceModel_install"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/businessServiceModel/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List business service model
         * @description List business service model
         */
        get: operations["    GET_BusinessServiceModel_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/businessServiceModel/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Business Service Models matching a given criteria
         * @description List Business Service Models matching a given criteria
         */
        get: operations["    GET_BusinessServiceModel_listGetAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/businessServiceModel/{businessServiceModelCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove an existing business service model with a given code
         * @description Remove an existing business service model with a given code
         */
        delete: operations["    DELETE_BusinessServiceModel_{businessServiceModelCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/channel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for a channel with a given code
         * @description Search for a channel with a given code
         */
        get: operations["    GET_Channel_search"];
        /**
         * Update an existing channel
         * @description Update an existing channel
         */
        put: operations["    PUT_Channel_update"];
        /**
         * Create a new channel
         * @description Create a new channel
         */
        post: operations["    POST_Channel_create"];
        /**
         * Remove an existing channel with a given code
         * @description Remove an existing channel with a given code
         */
        delete: operations["    DELETE_Channel_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/channel/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing channel
         * @description Create new or update an existing channel
         */
        post: operations["    POST_Channel_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/channel/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable a Channel with a given code
         * @description Disable a Channel with a given code
         */
        post: operations["    POST_Channel_{code}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/channel/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Channel with a given code
         * @description Enable a Channel with a given code
         */
        post: operations["    POST_Channel_{code}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/channel/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_49"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/channelsAndSegments/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_50"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/channelsAndSegments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns all the active channels list
         * @description Returns all the active channels list
         */
        get: operations["    GET_ChannelsAndSegments_search"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/chargeTemplates/{chargeTemplateCode}/duplicate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * add duplicate charge template for a given code
         * @description add duplicate charge template for a given code
         */
        post: operations["POST_ChargeTemplate_chargeTemplates_{chargeTemplateCode}"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/chargeTemplate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for a charge template with a given code
         * @deprecated
         * @description Search for a charge template with a given code
         */
        get: operations["    GET_ChargeTemplate_chargeTemplate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/chargeTemplates/{chargeTemplateCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for a charge template with a given code
         * @description Search for a charge template with a given code
         */
        get: operations["GET_ChargeTemplate_chargeTemplates_{chargeTemplateCode}"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_52"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/chargeTemplates/{chargeTemplateCode}/status/{status}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * update charge template status for a given code
         * @description update charge template status for a given code
         */
        put: operations["PUT_ChargeTemplate_chargeTemplates_{chargeTemplateCode}"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/counterTemplate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search counter template with a given code.
         * @description Search counter template with a given code.
         */
        get: operations["    GET_CounterTemplate_search"];
        /**
         * Update counter template.
         * @description Update counter template.
         */
        put: operations["    PUT_CounterTemplate_update"];
        /**
         * Create counter template.
         * @description Create counter template.
         */
        post: operations["    POST_CounterTemplate_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/counterTemplate/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or update a counter Template.
         * @description Create or update a counter Template.
         */
        post: operations["    POST_CounterTemplate_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/counterTemplate/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable a Counter template with a given code
         * @description Disable a Counter template with a given code
         */
        post: operations["    POST_CounterTemplate_{code}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/counterTemplate/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Counter template with a given code
         * @description Enable a Counter template with a given code
         */
        post: operations["    POST_CounterTemplate_{code}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/counterTemplate/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_51"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/counterTemplate/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List CounterTemplates matching a given criteria
         * @description List CounterTemplates matching a given criteria
         */
        get: operations["    GET_CounterTemplate_listGetAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/counterTemplate/{counterTemplateCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove counter template with a given code.
         * @description Remove counter template with a given code.
         */
        delete: operations["    DELETE_CounterTemplate_{counterTemplateCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/discountPlanItem": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a discount plan item with a given code.
         * @description Find a discount plan item with a given code.
         */
        get: operations["    GET_DiscountPlanItem_search"];
        /**
         * update an existed discount plan item.
         * @description update an existed discount plan item.
         */
        put: operations["    PUT_DiscountPlanItem_update"];
        /**
         * Create a new discount plan item.
         * @description Create a new discount plan item.
         */
        post: operations["    POST_DiscountPlanItem_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/discountPlanItem/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * create/update a discount plan item.
         * @description create/update a discount plan item.
         */
        post: operations["    POST_DiscountPlanItem_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/discountPlanItem/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable a Discount plan item with a given code
         * @description Disable a Discount plan item with a given code
         */
        post: operations["    POST_DiscountPlanItem_{code}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/discountPlanItem/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Discount plan item with a given code
         * @description Enable a Discount plan item with a given code
         */
        post: operations["    POST_DiscountPlanItem_{code}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/discountPlanItem/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_53"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/discountPlanItem/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all discount plan items by current user.
         * @description List all discount plan items by current user.
         */
        get: operations["    GET_DiscountPlanItem_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/discountPlanItem/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List DiscountPlanItems matching a given criteria
         * @description List DiscountPlanItems matching a given criteria
         */
        get: operations["    GET_DiscountPlanItem_listGetAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/discountPlanItem/{discountPlanItemCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * remove a discount plan item by code.
         * @description remove a discount plan item by code.
         */
        delete: operations["    DELETE_DiscountPlanItem_{discountPlanItemCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/discountPlan": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a discount plan with a given code
         * @description Find a discount plan with a given code
         */
        get: operations["    GET_DiscountPlan_search"];
        /**
         * Update an existing discount plan
         * @description Update an existing discount plan
         */
        put: operations["    PUT_DiscountPlan_update"];
        /**
         * Create a new discount plan
         * @description Create a new discount plan
         */
        post: operations["    POST_DiscountPlan_create"];
        /**
         * Remove an existing discount plan with a given code
         * @description Remove an existing discount plan with a given code
         */
        delete: operations["    DELETE_DiscountPlan_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/discountPlan/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing discount plan
         * @description Create new or update an existing discount plan
         */
        post: operations["    POST_DiscountPlan_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/discountPlan/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Discount plan with a given code
         * @description Enable a Discount plan with a given code
         */
        post: operations["    POST_DiscountPlan_{code}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/discountPlan/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * List DiscountPlans matching a given criteria
         * @description List DiscountPlans matching a given criteria
         */
        post: operations["    POST_DiscountPlan_{code}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/discountPlan/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_54"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/discountPlan/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List discount plan
         * @description List discount plan
         */
        get: operations["    GET_DiscountPlan_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/discountPlan/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["listGetAll_3"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/offerTemplateCategory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a offer template category with a given code
         * @description Find a offer template category with a given code
         */
        get: operations["    GET_OfferTemplateCategory_search"];
        /**
         * Update an existing offer template category
         * @description Update an existing offer template category
         */
        put: operations["    PUT_OfferTemplateCategory_update"];
        /**
         * Create a new offer template category
         * @description Create a new offer template category
         */
        post: operations["    POST_OfferTemplateCategory_create"];
        /**
         * Remove an existing offer template category with a given code
         * @description Remove an existing offer template category with a given code
         */
        delete: operations["    DELETE_OfferTemplateCategory_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/offerTemplateCategory/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing offer template category
         * @description Create new or update an existing offer template category
         */
        post: operations["    POST_OfferTemplateCategory_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/offerTemplateCategory/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable a Offer template category with a given code
         * @description Disable a Offer template category with a given code
         */
        post: operations["    POST_OfferTemplateCategory_{code}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/offerTemplateCategory/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Offer template category with a given code
         * @description Enable a Offer template category with a given code
         */
        post: operations["    POST_OfferTemplateCategory_{code}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/offerTemplateCategory/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_55"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/offerTemplateCategory/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List DiscountPlanItems matching a given criteria
         * @description List DiscountPlanItems matching a given criteria
         */
        get: operations["    GET_OfferTemplateCategory_listGetAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/offerTemplate/{offerCode}/addProduct": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add existing product to an offer
         * @description Add existing product to an offer
         */
        post: operations["addProduct"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/offerTemplate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search offer template with a given code and validity dates
         * @description Search offer template with a given code and validity dates. If no validity dates are provided, an offer template valid on a current date will be returned.
         */
        get: operations["    GET_OfferTemplate_search"];
        /**
         * Update offer template.
         * @description Update offer template.
         */
        put: operations["    PUT_OfferTemplate_update"];
        /**
         * Create offer template.
         * @description Create offer template.
         */
        post: operations["    POST_OfferTemplate_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/offerTemplate/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove offer template with a given code and validity dates
         * @description Remove offer template with a given code and validity dates. If no validity dates are provided, an offer template valid on a current date will be deleted.
         */
        post: operations["    POST_OfferTemplate_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/offerTemplate/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Offer template with a given code
         * @description Enable a Offer template with a given code
         */
        post: operations["    POST_OfferTemplate_{code}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/offerTemplate/{offerCode}/dissociateProducts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * dissociate existing product from an offer
         * @description dissociate existing product from an offer
         */
        post: operations["dissociateProduct"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/offerTemplate/duplicate/{offerTemplateCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["duplicateOffer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/offerTemplate/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or update offer template based on a given code.
         * @description Create or update offer template based on a given code.
         */
        post: operations["    POST_OfferTemplate_{code}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/offerTemplate/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_56"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/offerTemplate/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["list_2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/offerTemplate/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Offer templates matching filtering and query criteria or code and validity dates
         * @description List Offer templates matching filtering and query criteria or code and validity dates.  If neither date is provided, validity dates will not be considered. If only validFrom is provided, a search will return offers valid on a given date. If only validTo date is provided, a search will return offers valid from today to a given date.
         */
        get: operations["    GET_OfferTemplate_list"];
        put?: never;
        /**
         * List Offer templates matching a given criteria
         * @description List Offer templates matching a given criteria
         */
        post: operations["    POST_OfferTemplate_list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/offerTemplate/cpq/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * List offers matching the customer and seller contexts
         * @description Get offers matching the customer and seller contexts, it returns offers and their products
         */
        post: operations["listPost_3"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/offerTemplate/massDisable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Disable all offer templates match the filter.
         * @description Disable all offer templates match the filter.
         */
        put: operations["    PUT_OfferTemplate_massEnable"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/offerTemplate/massEnable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Enable all offer templates match the filter.
         * @description Enable all offer templates match the filter.
         */
        put: operations["    PUT_OfferTemplate_massEnable_1"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/offerTemplate/{offerTemplateCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * List offerTemplates matching a given criteria
         * @description List offerTemplates matching a given criteria
         */
        delete: operations["    DELETE_OfferTemplate_{offerTemplateCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/offerTemplate/{offerTemplateCode}/update/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["updateStatus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/oneShotChargeTemplate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search one shot charge templatewith a given code.
         * @description Search one shot charge templatewith a given code.
         */
        get: operations["    GET_OneShotChargeTemplate_search"];
        /**
         * Update one shot charge template.
         * @description Update one shot charge template.
         */
        put: operations["    PUT_OneShotChargeTemplate_update"];
        /**
         * Create one shot charge template.
         * @description Create one shot charge template.
         */
        post: operations["    POST_OneShotChargeTemplate_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/oneShotChargeTemplate/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove one shot charge tesmplate with a given code.
         * @description Remove one shot charge tesmplate with a given code.
         */
        post: operations["    POST_OneShotChargeTemplate_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/oneShotChargeTemplate/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a One shot charge template with a given code
         * @description Enable a One shot charge template with a given code
         */
        post: operations["    POST_OneShotChargeTemplate_{code}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/oneShotChargeTemplate/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing.
         * @description Create new or update an existing.
         */
        post: operations["    POST_OneShotChargeTemplate_{code}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/oneShotChargeTemplate/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_57"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/oneShotChargeTemplate/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["list_3"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/oneShotChargeTemplate/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List one shot charge template with the following filters.
         * @description List one shot charge template with the following filters.
         */
        get: operations["    GET_OneShotChargeTemplate_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/oneShotChargeTemplate/{oneShotChargeTemplateCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Return the list of oneShotChargeTemplates.
         * @description Return the list of oneShotChargeTemplates.
         */
        delete: operations["    DELETE_OneShotChargeTemplate_{oneShotChargeTemplateCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/pricePlan/{pricePlanMatrixCode}/pricePlanMatrixVersions/{pricePlanMatrixVersion}/pricePlanMatrixLines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * update all price plan matrix lines
         * @description update all price plan matrix lines
         */
        put: operations["updatePricePlanMatrixLines"];
        /**
         * add all price plan matrix lines
         * @description add all price plan matrix lines
         */
        post: operations["addPricePlanMatrixLines"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/pricePlan": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * find a price plan matrix with a given code
         * @description Find a price plan matrix with a given code
         */
        get: operations["find_7"];
        /**
         * Update an existing price plan matrix
         * @description Update an existing price plan matrix
         */
        put: operations["update_7"];
        /**
         * create a price plan
         * @description create a price plan matrix
         */
        post: operations["create_7"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/pricePlan/{pricePlanMatrixCode}/pricePlanMatrixVersions/{pricePlanMatrixVersion}/pricePlanMatrixColumns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * update a price plan matrix column
         * @description update a price plan matrix column
         */
        put: operations["update_8"];
        /**
         * create a price plan matrix column
         * @description create a price plan matrix column
         */
        post: operations["create_8"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/pricePlan/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing price plan matrix
         * @description Create new or update an existing price plan matrix
         */
        post: operations["createOrUpdate_7"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/pricePlan/pricePlanMatrixVersion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * update a price plan version
         * @description update an existing price plan version
         */
        put: operations["updateMatrixPricePlanVersion"];
        /**
         * create or update a price plan version
         * @description create a price plan version if it doesn't exist or update an existing price plan version
         */
        post: operations["createOrUpdateMatrixPricePlanVersion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/pricePlan/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable a Price plan with a given code
         * @description Disable a Price plan with a given code
         */
        post: operations["disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/pricePlan/{pricePlanMatrixCode}/{pricePlanMatrixVersion}/duplication": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * duplicate a price plan matrix version
         * @description duplicate a product version
         */
        post: operations["duplicatePricePlan"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/pricePlan/{pricePlanMatrixCode}/pricePlanMatrixVersions/{pricePlanMatrixVersion}/duplication": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * duplicate a price plan matrix version
         * @description duplicate a product version
         */
        post: operations["duplicatePricePlanVersion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/pricePlan/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Price plan with a given code
         * @description Enable a Price plan with a given code
         */
        post: operations["enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/pricePlan/pricePlanMatrixColumns/{pricePlanMatrixColumnCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get a price plan matrix column
         * @description get a price plan matrix column
         */
        get: operations["findPricePlanMatrixColumn"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/pricePlan/pricePlanMatrixLines/{pricePlanMatrixLineId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get a price plan matrix line
         * @description get a price plan matrix line
         */
        get: operations["getPricePlanMatrixLine"];
        put?: never;
        post?: never;
        /**
         * delete a price plan matrix line
         * @description delete a price plan matrix line
         */
        delete: operations["removePricePlanMatrixLine"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/pricePlan/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_58"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/pricePlan/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all price plans. */
        get: operations["listGetAll_4"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/pricePlan/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List price plan matrix
         * @description List price plan matrix
         */
        get: operations["listPricePlanByEventCode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/pricePlan/pricePlanMatrixVersions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get the price plan versions
         * @description load the list of ppm versions
         */
        get: operations["listPricePlanMatrixVersions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/pricePlan/{pricePlanCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove an existing price plan matrix with a given code
         * @description Remove an existing price plan matrix with a given code
         */
        delete: operations["remove_6"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/pricePlan/{pricePlanMatrixCode}/pricePlanMatrixVersions/{pricePlanMatrixVersion}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * remove a price plan version
         * @description remove a price plan version with price plan code and current version
         */
        delete: operations["removeMatrixPricePlanVersion"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/pricePlan/{pricePlanMatrixCode}/pricePlanMatrixVersions/{pricePlanMatrixVersion}/pricePlanMatrixColumns/{pricePlanMatrixColumnCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * delete a price plan matrix column
         * @description delete a price plan matrix column
         */
        delete: operations["removePricePlanMatrixColumnCode"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/pricePlan/pricePlanMatrixLines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * delete list of a price plan matrix line
         * @description delete list of a price plan matrix line
         */
        delete: operations["removePricePlanMatrixLines"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/pricePlan/{pricePlanMatrixCode}/pricePlanMatrixVersions/{pricePlanMatrixVersion}/status/{status}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * update the price plan version status
         * @description the product with status DRAFT can be change to PUBLIED or CLOSED
         */
        put: operations["updatePricePlanMatrixVersionStatus"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/pricePlan/{pricePlanMatrixCode}/pricePlanMatrixVersions/{pricePlanMatrixVersion}/pricePlanMatrixLines/updateWithoutDelete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Creat and update all price plan matrix lines
         * @description Creat/update all price plan matrix lines
         */
        put: operations["updateWithoutDeletePricePlanMatrixLines"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/products/{productCode}/addCharges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Allow to add existing charges from existing product
         * @description Allow to add existing charges to an existing product
         */
        post: operations["addCharges"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/products/productLines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * This endpoint allows to create or update a product line
         * @description create a product line if it doesn't exist or update an existing product line
         */
        post: operations["createOrUpdateProductLine"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/products/productVersions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * This endpoint allows to create or update a product version
         * @description create a product version if it doesn't exist or update an existing product line
         */
        post: operations["createOrUpdateProductVersion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get products matching the given criteria
         * @description Get products matching the given criteria
         */
        get: operations["listProducts"];
        put?: never;
        /**
         * This endpoint allows to create a new product
         * @description creation of the product
         */
        post: operations["createProduct"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/products/{productCode}/duplication": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * This endpoint allows to duplicate a product
         * @description duplicate a product with the published its version or a recent version
         */
        post: operations["duplicateProduct"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/products/{productCode}/productVersions/{productVersion}/duplication": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * This endpoint allows to duplicate a product version
         * @description duplicate a product version
         */
        post: operations["duplicateProductVersion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/products/{productCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * This endpoint allows to find an existing product
         * @description retrieving a product with its code
         */
        get: operations["findProductByCode"];
        /**
         * This endpoint allows to update a product
         * @description to update the product the status must be DRAFT otherwise exception will be thrown
         */
        put: operations["updateProduct"];
        post?: never;
        /**
         * This endpoint allows to remove an existing product
         * @description remove a product by its code
         */
        delete: operations["removeProduct"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/products/productLines/{productLineCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * This endpoint allows to retrieve a product line
         * @description retrieving a product line with its code
         */
        get: operations["findProductLineByCode"];
        put?: never;
        post?: never;
        /**
         * This endpoint allows to remove an existing product line
         * @description remove a product line by its code
         */
        delete: operations["removeProductLine"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/products/{productCode}/productVersions/{productVersion}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * This endpoint allows to find a product version
         * @description find a product version
         */
        get: operations["findProductVersion"];
        put?: never;
        post?: never;
        /**
         * This endpoint allows to remove a product version
         * @description remove a product version with product code and current version
         */
        delete: operations["removeProductVersion"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/products/{productCode}/productVersions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * This endpoint allows to find all product versions related to a product
         * @description find product versions by product code
         */
        get: operations["findProductVersions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/products/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_59"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/products/cpq/offers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get products with their attributes that match the quote offer context
         * @description Get products with their attributes that match the offer context
         */
        post: operations["listPost_4"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/products/{productCode}/removeCharges": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Allow to remove existing charges from existing product
         * @description remove to add existing charges from existing product
         */
        post: operations["removeCharge"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/products/{productCode}/status/{status}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * This endpoint allows to update product status
         * @description the product with status DRAFT can be change to ACTIVE or CLOSED, if the product status is ACTIVE then the only value possible is CLOSED otherwise it will throw exception
         */
        put: operations["updateProductStatus"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/products/{productCode}/productVersions/{productVersion}/status/{status}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * This endpoint allows to update the product version status
         * @description the product with status DRAFT can be change to PUBLIED or CLOSED
         */
        put: operations["updateProductVersionStatus"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/recurringChargeTemplate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a recurring charge template with a given code.
         * @description Find a recurring charge template with a given code.
         */
        get: operations["    GET_RecurringChargeTemplate_search"];
        /**
         * Return the list of recurringChargeTemplates.
         * @description Return the list of recurringChargeTemplates.
         */
        put: operations["    PUT_RecurringChargeTemplate_update"];
        /**
         * Create a new recurring charge template.
         * @description Create a new recurring charge template.
         */
        post: operations["    POST_RecurringChargeTemplate_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/recurringChargeTemplate/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove an existing recurring charge template with a given code.
         * @description Remove an existing recurring charge template with a given code.
         */
        post: operations["    POST_RecurringChargeTemplate_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/recurringChargeTemplate/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Recurring charge template with a given code
         * @description Enable a Recurring charge template with a given code
         */
        post: operations["    POST_RecurringChargeTemplate_{code}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/recurringChargeTemplate/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing recurring charge template
         * @description Create new or update an existing recurring charge template
         */
        post: operations["    POST_RecurringChargeTemplate_{code}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/recurringChargeTemplate/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_60"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/recurringChargeTemplate/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["list_4"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/recurringChargeTemplate/{recurringChargeTemplateCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Update an existing recurring charge template.
         * @description Update an existing recurring charge template.
         */
        delete: operations["    DELETE_RecurringChargeTemplate_{recurringChargeTemplateCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/serviceTemplate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a service template with a given code.
         * @description Find a service template with a given code.
         */
        get: operations["    GET_ServiceTemplate_search"];
        /**
         * Update an existing service template.
         * @description Update an existing service template.
         */
        put: operations["    PUT_ServiceTemplate_update"];
        /**
         * Create a new service template.
         * @description Create a new service template.
         */
        post: operations["    POST_ServiceTemplate_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/serviceTemplate/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing service template
         * @description Create new or update an existing service template
         */
        post: operations["    POST_ServiceTemplate_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/serviceTemplate/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable a Service template with a given code
         * @description Disable a Service template with a given code
         */
        post: operations["    POST_ServiceTemplate_{code}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/serviceTemplate/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Service template with a given code
         * @description Enable a Service template with a given code
         */
        post: operations["    POST_ServiceTemplate_{code}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/serviceTemplate/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_61"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/serviceTemplate/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Gets a service template list matching given criteria .
         * @description Gets a service template list matching given criteria .
         */
        post: operations["    POST_ServiceTemplate_list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/serviceTemplate/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["listGetAll_5"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/serviceTemplate/{serviceTemplateCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove service template with a given code.
         * @description Remove service template with a given code.
         */
        delete: operations["    DELETE_ServiceTemplate_{serviceTemplateCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/triggeredEdr": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find triggered edr with a given code.
         * @description Find triggered edr with a given code.
         */
        get: operations["    GET_TriggeredEdr_search"];
        /**
         * Update an existing triggered edr. template
         * @description Update an existing triggered edr. template
         */
        put: operations["    PUT_TriggeredEdr_update"];
        /**
         * Create a new triggered edr. template
         * @description Create a new triggered edr. template
         */
        post: operations["    POST_TriggeredEdr_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/triggeredEdr/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing triggered edr template
         * @description Create new or update an existing triggered edr template
         */
        post: operations["    POST_TriggeredEdr_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/triggeredEdr/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_62"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/triggeredEdr/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets a triggeredEdrs list.
         * @description Gets a triggeredEdrs list.
         */
        get: operations["    GET_TriggeredEdr_listGetAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/triggeredEdr/{triggeredEdrCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove an existing triggered edr template with a given code.
         * @description Remove an existing triggered edr template with a given code.
         */
        delete: operations["    DELETE_TriggeredEdr_{triggeredEdrCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/unitOfMeasure": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for a unitOfMeasure with a given code
         * @description Search for a unitOfMeasure with a given code
         */
        get: operations["    GET_UnitOfMeasure_search"];
        /**
         * Update an existing unitOfMeasure
         * @description Update an existing unitOfMeasure
         */
        put: operations["update_9"];
        /**
         * Create a new unitOfMeasure
         * @description Create a new unitOfMeasure
         */
        post: operations["create_9"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/unitOfMeasure/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing unitOfMeasure
         * @description Create new or update an existing unitOfMeasure
         */
        post: operations["createOrUpdate_8"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/unitOfMeasure/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove an existing unitOfMeasure with a given code
         * @description Remove an existing unitOfMeasure with a given code
         */
        delete: operations["delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/unitOfMeasure/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_63"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/unitOfMeasure/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all currencies.
         * @description List all currencies.
         */
        get: operations["    GET_UnitOfMeasure_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/unitOfMeasure/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List UnitOfMeasures matching a given criteria
         * @description List UnitOfMeasures matching a given criteria
         */
        get: operations["    GET_UnitOfMeasure_listGetAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/usageChargeTemplate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find an existing usage charge template with a given code.
         * @description Find an existing usage charge template with a given code.
         */
        get: operations["    GET_UsageChargeTemplate_search"];
        /**
         * Update usage charge template.
         * @description Update usage charge template.
         */
        put: operations["    PUT_UsageChargeTemplate_update"];
        /**
         * Create new usage charge template.
         * @description Create new usage charge template.
         */
        post: operations["    POST_UsageChargeTemplate_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/usageChargeTemplate/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing charge template with a given code.
         * @description Create new or update an existing charge template with a given code.
         */
        post: operations["    POST_UsageChargeTemplate_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/usageChargeTemplate/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable a Usage charge template with a given code
         * @description Disable a Usage charge template with a given code
         */
        post: operations["    POST_UsageChargeTemplate_{code}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/usageChargeTemplate/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Usage charge template with a given code
         * @description Enable a Usage charge template with a given code
         */
        post: operations["    POST_UsageChargeTemplate_{code}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/usageChargeTemplate/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_64"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/usageChargeTemplate/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["listGetAll_6"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/usageChargeTemplate/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * List UsageChargeTemplate matching a given criteria
         * @description List UsageChargeTemplate matching a given criteria
         */
        post: operations["    POST_UsageChargeTemplate_list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/usageChargeTemplate/{usageChargeTemplateCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove usage charge template with a given code.
         * @description Remove usage charge template with a given code.
         */
        delete: operations["    DELETE_UsageChargeTemplate_{usageChargeTemplateCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/dateLimiteSignatureDevis/{codeQuote}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getDateLimiteDevis"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/dateLimiteSignatureDevis/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_65"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/abonnement": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["getAbonnements"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/abonnement/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_66"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/absences/{id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["cancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/absences": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllByCurrentUserOrUserId"];
        put: operations["update_10"];
        post: operations["create_10"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/absences/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["delete_1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/absences/substitute_by_plan_id/{plan_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["findSubstituteByValidationPlanId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/absences/approvers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["findTemporaryApprover"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/absences/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["findUserByFirstnameAndLastname"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/absences/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_67"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/clientX/account/access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["find_8"];
        put: operations["update_11"];
        post: operations["create_11"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/clientX/account/access/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_68"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/annexe/list/{quoteVersionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAnnexes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billingInvoice/{idDevis}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getInvoices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billingInvoice/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_69"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/contract/quoteVersion/{quoteVersionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getContracts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/contract/customerId/{customerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getContractsByCustomerId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/contract/dto/customerId/{customerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getContractsDTOByCustomerId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/contract/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_70"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/quotes/overlay/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_71"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/quotes/overlay": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Modify a quote */
        put: operations["updateQuoteAPI"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/quotes/overlay/{quoteCode}/status/{status}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["updateQuoteStatusAPI"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/customerHierarchy/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["getCustomerHierarchy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/customerHierarchy/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_72"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/customer/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_73"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/customer/infos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["searchCustomerInfos"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/dashboardInfos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["getDashboardDatas"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/dashboardInfos/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_74"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/duplication/duplicatePrestation/{quoteCode}/{version}/{quoteItemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["duplicatePrestation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/duplication/duplicateQuote/{quoteCode}/{version}/{avenant}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["duplicateQuote"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/duplication/duplicateQuote/{quoteCode}/{version}/{avenant}/{quoteItemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["duplicateQuoteWithSpecifiedQuoteOffer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/duplication/duplicateVersion/{quoteCode}/{version}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["duplicateVersion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/duplication/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_75"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/eDevisSigne/downloadEdevisSigne/{quoteVersionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["downloadEdevisSigne"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/eDevisSigne/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_76"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/eDevisSigne/resendESignatureLink/{quoteVersionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["resendESignatureLink"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/generateInvoicePDF/duplicata/enrichi/{id}/pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["duplicataEnrichiXmlAndPdf"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/generateInvoicePDF/archive/{id}/pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["generateAndArchivePdfInvoice"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/generateInvoicePDF/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getInvoicePdf"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/generateInvoicePDF/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_77"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/GenerateInvoiceXML/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_78"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/infosVendeur/{clientDonneurOrdreId}/{createurDevisId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getInfoVendeur"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/infosVendeur/listValidVendeur": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["getListValidVendeurs"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/infosVendeur/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_79"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/initCPQquoteData": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["getInfoCpqQuote"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/initCPQquoteData/V2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["getInfoCpqQuoteV2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/initCPQquoteData/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_80"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/managePayment/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_81"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/managePayment/{ClientDonneurOrdreCode}/{ClientFactureCode}/{MontantDevis}/{totalChargesOther}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["update_12"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/billing/mediation/registerCdrList/v2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Accepts a list of CDR line. This CDR is parsed and created as EDR. CDR is same format use in mediation job
         * @description Accepts a list of CDR line. This CDR is parsed and created as EDR. CDR is same format use in mediation job
         */
        post: operations["    POST_Mediation_registerCdrList_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAll"];
        put: operations["update_13"];
        post: operations["create_12"];
        delete: operations["delete_2"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/messages/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllByCurrentUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/messages/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_41"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalog/products/v2/cpq/offers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get products with their attributes that match the quote offer context
         * @description Get products with their attributes that match the offer context
         */
        post: operations["listPost_5"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/ProductsLine": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getProductsLine"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/ProductsLine/{quoteId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getProductsLine_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/ProductsLine/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_83"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/proxyFacebook/interet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getInteret"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/proxyFacebook/lieux": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getLieux"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/proxyFacebook/region": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getRegion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/proxyFacebook/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_84"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/proxyFacebook/simulation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["simulation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/proxyVisiperf/activiteClient": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getActiviteClient"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/proxyVisiperf/listActiviteClient": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getListActiviteClient"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/proxyVisiperf/localiteClient": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getLocaliteClient"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/proxyVisiperf/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_85"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/proxyVisiperf/simulation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["simulation_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/proxyVisiperf/valider": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["valider"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/proxyVisiperf/validerPackClick": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["validerPackClick"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/quotes/quoteVersions/{quoteCode}/{quoteVersion}/v2/quotation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get quote quotation V2 */
        post: operations["quoteQuotation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoice/{id}/createRefund": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["createAdjustment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoice/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_125"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/reminderValidation/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_87"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/reminderValidation/invoice/{invoiceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["remindValidationAvoir"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/reminderValidation/{quoteId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["updateQuoteStatusAPI_1"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/quote/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_89"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/quote/smc/tarification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["smcTarification"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/quote/create/quoteitems": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["createQuoteitems"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/quote/update/quoteitems": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["updateQuoteitems"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/quote/update/quoteitemsAfterModif": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["updateQuoteitemsAfterModif"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/RechercheClientParInterlocuteur/interlocuteur": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getCustomersByInetr"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/RechercheClientParInterlocuteur/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_88"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/refund/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_140"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/refund/searchMotif": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["searchRefundMotif"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/seller/findByCode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["searchSeller"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/SendEmailDevis/{idDevis}/{idInterlocuteur}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["envoyerEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/SendEmailDevis/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_20"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/sendEmailFactureDuplicata/{idDevis}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["envoyerEmail_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/sendEmailFactureDuplicata/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_92"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/sendEmailURLPaiement/{idDevis}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["envoyerEmail_2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/sendEmailURLPaiement/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_93"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/sendEmailURLPaiement/invoice/{invoiceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["resendPaymentLink"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/sendLink/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_94"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/sendLink/{idDevis}/{idBillingAccout}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["update_14"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/suiviPrestation/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_95"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/suiviPrestation/{quoteOfferId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["suiviPrestation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/updateDefaultBillingAccount/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_96"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/updateDefaultBillingAccount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["updateDefaultBillingAccount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/updateBonDeCommande/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_97"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/updateBonDeCommande/{quoteId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["updateBonDeCommande"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/updateVendeur/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_98"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/updateVendeur/{idDevis}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["updateVendeur"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/Communication/inbound": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Receives inbound communication from external source given the rest url above
         * @description Receives inbound communication from external source given the rest url above. MEVEO handles it by throwing an inbount communication event with the communicationRequestDto.
         */
        post: operations["    POST_Communication_inbound"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/Communication/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_99"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/communication/emailTemplate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find an email template with a given code
         * @description Find an email template with a given code
         */
        get: operations["    GET_EmailTemplate_search"];
        /**
         * update an emailTemplate by dto
         * @description update an emailTemplate by dto
         */
        put: operations["    PUT_EmailTemplate_update"];
        /**
         * Create an email template by dto
         * @description Create an email template by dto
         */
        post: operations["POST_EmailTemplate_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/communication/emailTemplate/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing email template by dto
         * @description Create new or update an existing email template by dto
         */
        post: operations["    POST_EmailTemplate_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/communication/emailTemplate/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_100"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/communication/emailTemplate/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List email templates
         * @description List email templates
         */
        get: operations["    GET_EmailTemplate_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/communication/emailTemplate/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * remove an emailTemplate by code
         * @description remove an emailTemplate by code
         */
        delete: operations["    DELETE_EmailTemplate_{code}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/communication/meveoInstance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a meveoInstance by code
         * @description Find a meveoInstance by code
         */
        get: operations["    GET_MeveoInstance_search"];
        /**
         * Update a meveoInstance by dto
         * @description Update a meveoInstance by dto
         */
        put: operations["    PUT_MeveoInstance_update"];
        /**
         * Create a meveoInstance by dto.
         * @description Create a meveoInstance by dto.
         */
        post: operations["POST_MeveoInstance_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/communication/meveoInstance/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * CreateOrUpdate a meveoInstance by dto
         * @description CreateOrUpdate a meveoInstance by dto
         */
        post: operations["    POST_MeveoInstance_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/communication/meveoInstance/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_101"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/communication/meveoInstance/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List meveoInstances
         * @description List meveoInstances
         */
        get: operations["    GET_MeveoInstance_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/communication/meveoInstance/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove a meveoInstance by code
         * @description Remove a meveoInstance by code
         */
        delete: operations["    DELETE_MeveoInstance_{code}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/attributes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * This endpoint allows to update an existing Attribute
         * @description Updating an existing Attribute
         */
        put: operations["update_15"];
        /**
         * This endpoint allows to create new attribute
         * @description Creating a new attribute
         */
        post: operations["create_13"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/attributes/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * This endpoint allows to find an attribute by its code
         * @description Finding an attribute by its code
         */
        get: operations["findByCode"];
        put?: never;
        post?: never;
        /**
         * This endpoint allows to  delete an existing Attribute
         * @description Deleting an existing Attribute with its code
         */
        delete: operations["delete_3"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/attributes/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_102"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/attributes/cpq/offers/{productCode}/{productVersion}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get attributes related to the given product that match the quote offer context
         * @description Get attributes related to the given product that match the quote offer context
         */
        post: operations["listPost_6"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/orderManagement/commercialOrders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get commercial orders matching the given criteria
         * @description Get commercial orders matching the given criteria
         */
        get: operations["listCommercialOrder"];
        /** update an existing order */
        put: operations["update_16"];
        /** Create a order */
        post: operations["create_14"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/orderManagement/commercialOrders/orderOffers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * This endpoint allows to update an existing order offer
         * @description Updating an existing order offer
         */
        put: operations["updateOrderOffer"];
        /**
         * This endpoint allows to create new order offer
         * @description Creating a new order offer
         */
        post: operations["createOrderOffer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/orderManagement/commercialOrders/{orderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** delete an existing order */
        delete: operations["delete_4"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/orderManagement/commercialOrders/orderOffers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get order offer matching the given order id
         * @description Get order offer matching the given order id
         */
        get: operations["findOrderOffer"];
        put?: never;
        post?: never;
        /**
         * This endpoint allows to  delete an existing order offer
         * @description Deleting an existing order offer with its id
         */
        delete: operations["deleteOrderOffer"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/orderManagement/commercialOrders/{orderId}/duplication": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** duplicate an order */
        post: operations["duplicate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/orderManagement/commercialOrders/{orderNumber}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get commercial orders matching the given order number
         * @description Get commercial order matching the given order number
         */
        get: operations["findByOrderNumber"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/orderManagement/commercialOrders/{orderId}/orderValidation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Launch the order validation process
         * @description Launch the order validation process
         */
        post: operations["orderValidationProcess"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/orderManagement/commercialOrders/{commercialOrderId}/invoicingPlans/{invoicingPlanCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** update commercial order invoicing plan */
        put: operations["updateOrderInvoicingPlan"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/orderManagement/commercialOrders/{commercialOrderId}/orderProgress/{progressValue}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** update order progress */
        put: operations["updateOrderProgress"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/orderManagement/commercialOrders/{orderId}/status/{statusTarget}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** update status for order */
        put: operations["updateStatus_1"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/orderManagement/commercialOrders/{commercialOrderId}/userAccounts/{userAccountCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** update commercial order user account */
        put: operations["updateUserAccount"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/commercialRules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get commercial rules matching the given criteria
         * @description Get commercial rules matching the given criteria
         */
        get: operations["list_5"];
        /**
         * This endpoint allows to update an existing CommercialRule
         * @description Updating an existing CommercialRule
         */
        put: operations["update_17"];
        /**
         * This endpoint allows to create new commercialRule
         * @description Creating a new commercialRule
         */
        post: operations["create_15"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/commercialRules/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * This endpoint allows to find a commercialRule by its code
         * @description Finding a commercialRule by its code
         */
        get: operations["findByCode_1"];
        put?: never;
        post?: never;
        /**
         * This endpoint allows to  delete an existing CommercialRule
         * @description Deleting an existing CommercialRule with its code
         */
        delete: operations["delete_5"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/commercialRules/attributeRules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get attribute commercial rules
         * @description Get attribute commercial rules
         */
        get: operations["findAttributeRules"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/commercialRules/groupedAttributeRules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get grouped attribute commercial rules
         * @description Get grouped attribute commercial rules
         */
        get: operations["findGroupedAttributeRules"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/commercialRules/offerRules/{offerCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get offer commercial rules
         * @description Get offer commercial rules
         */
        get: operations["findOfferRules"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/commercialRules/productRules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get product commercial rules
         * @description Get product commercial rules
         */
        get: operations["findProductRules"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/commercialRules/tagRules/{tagCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get tag commercial rules
         * @description Get tag commercial rules
         */
        get: operations["findTagRules"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/commercialRules/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_103"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/contracts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * This endpoint allows to find a Contract by accountCode and contractAccountLevel parameters
         * @description Find a Contract type by accountCode and contractAccountLevel parameters
         */
        get: operations["findByCode_3"];
        /**
         * This endpoint allows to update an existing Contract
         * @description Updating an existing Contract
         */
        put: operations["updateContract"];
        /**
         * This endpoint allows to create new contract
         * @description Creating a new contract
         */
        post: operations["createContract"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/contracts/contractLines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * This endpoint allows to create new contract Line
         * @description Creating a new contract Line
         */
        put: operations["updateContractLine"];
        /**
         * This endpoint allows to create new contract Line
         * @description Creating a new contract Line
         */
        post: operations["createContractLine"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/contracts/{contractCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * This endpoint allows to find a Contract by ContractCode parameter
         * @description Find a Contract type by contractCode parameter
         */
        get: operations["findByCode_2"];
        put?: never;
        post?: never;
        /**
         * This endpoint allows to  delete an existing Contract
         * @description Deleting an existing Contract with its code
         */
        delete: operations["deleteContract"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/contracts/contractLines/{contractCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * This endpoint allows to  delete an existing Contract item
         * @description Deleting an existing Contract with its code
         */
        delete: operations["deleteContractLine"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/contracts/{contractCode}/duplicate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Duplicate a Contract by contracCode parameter
         * @description Duplicate a Contract by contracCode parameter
         */
        post: operations["duplicateContract"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/contracts/contractLines/{contractItemCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * This endpoint allows to find a Contract item by contractItemCode parameters
         * @description Find a Contract item type by contractItemCode parameters
         */
        get: operations["getContractLine"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/contracts/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_104"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/contracts/{contractCode}/status/{status}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * This endpoint allows update the contract status
         * @description update contract status
         */
        put: operations["updateStatus_2"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/quotes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of quotes optionally filtered by some criteria */
        get: operations["findQuotes"];
        /** Modify a quote */
        put: operations["updateQuote"];
        /** Create a quote */
        post: operations["createQuote"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/quotes/quoteItems": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Modify a quote item */
        put: operations["updateQuoteItem"];
        /** Create a quote item */
        post: operations["createQuoteItem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/quotes/quoteVersions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a quote version */
        post: operations["createQuoteVersion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/quotes/{quoteCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a quote by its code */
        get: operations["getQuote"];
        put?: never;
        post?: never;
        /** Delete a quote. */
        delete: operations["deleteQuote"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/quotes/quoteItems/{quoteItemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get f quote offer by quote id */
        get: operations["findQuoteItem"];
        put?: never;
        post?: never;
        /** Delete a quote item */
        delete: operations["deleteQuoteItem"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/quotes/quoteVersions/{quoteCode}/{quoteVersion}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a quote version */
        delete: operations["deleteQuoteVersion"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/quotes/{quoteCode}/{quoteVersion}/duplication": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * this endpoint allow you to duplicate a quote and it quote version
         * @description duplicate quote and their related entities
         */
        post: operations["duplicateQuote_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/quotes/quoteVersions/{quoteCode}/{quoteVersion}/duplication": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * this endpoint allow you to duplicate a quote version
         * @description duplicate quote version and their related entities
         */
        post: operations["duplicateQuoteVersion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/quotes/quoteItems/{quoteCode}/quoteVersions/{quoteVersion}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get List of quote offer by quote code and quote version number */
        get: operations["findQuoteItems"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/quotes/quoteVersions/{quoteCode}/{currentVersion}/xmlGeneration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate the quote XML and optionnaly quote PDF if generatePdf is True */
        post: operations["generateQuoteXml"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/quotes/quoteVersions/{quoteCode}/{currentVersion}/pdfGeneration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get the quote PDF. if generatePdf is true, the PDF is generated and override existing one if already exists */
        post: operations["getQuotePDF"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/quotes/quotePrices/override": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["overridePrices"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/quotes/{quoteCode}/quoteVersions/{quoteVersion}/orderPlacement": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Place an order based on a quote */
        post: operations["placeOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/quotes/quoteVersions/{quoteCode}/{quoteVersion}/quotation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get quote quotation */
        post: operations["quoteQuotation_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/quotes/{quoteCode}/status/{status}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * this endpoint allow you to update a quote of status
         * @description status can not be modified if is already Cancelled or rejected
         */
        put: operations["updateQuoteStatus"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/quotes/quoteVersions/{quoteCode}/{currentVersion}/status/{status}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * this endpoint allow you to update a quote version of status
         * @description status can not be modified if is already Closed or Published
         */
        put: operations["updateQuoteVersionStatus"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/groupedAttributes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * This endpoint allows to retrieve a Grouped attribute information by its code
         * @description retrieve and return an existing grouped attribute
         */
        get: operations["find_9"];
        /**
         * updating a existing grouped attribute by its code
         * @description check if the code is not null for updating a existing grouped attribute
         */
        put: operations["update_18"];
        /**
         * This endpoint allows to create new groupedAttribute
         * @description Creating a new groupedAttribute
         */
        post: operations["create_16"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/groupedAttributes/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_105"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/groupedAttributes/{groupedAttributeCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * remove a grouped attribute
         * @description Remove an Grouped Attribute with a given grouped attribute code
         */
        delete: operations["remove_7"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/media": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * update an existing Media
         * @description update an exsiting  Media
         */
        put: operations["update_19"];
        /**
         * Create a new Media
         * @description creation of a new Media
         */
        post: operations["createMedai"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/media/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * get an existing Media
         * @description get an exsiting  Media
         */
        get: operations["findByCode_4"];
        put?: never;
        post?: never;
        /**
         * delete an existing Media
         * @description delete an exsiting  Media
         */
        delete: operations["deleteMedia"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/orderManagement/orderTypes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** update an existing order type */
        put: operations["update_20"];
        /** Create a order type */
        post: operations["create_17"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/orderManagement/orderTypes/{orderTypeCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get order type matching the given order number
         * @description Get order type matching the given order number
         */
        get: operations["find_10"];
        put?: never;
        post?: never;
        /** delete an existing order */
        delete: operations["delete_6"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/orderManagement/orderTypes/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get order type matching the given criteria
         * @description Get order type matching the given criteria
         */
        post: operations["list_6"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * This endpoint allows to find a tag by codeTag parameter
         * @description Find a tag type by codeTag parameter
         */
        get: operations["findByCode_5"];
        /**
         * This endpoint allows to update an existing Tag
         * @description Updating an existing Tag
         */
        put: operations["updateTag"];
        /**
         * This endpoint allows to create new tag
         * @description Creating a new tag
         */
        post: operations["createTag"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/tags/tagTypes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * This endpoint allows to update new tag type
         * @description updating a new tag type
         */
        put: operations["updateTagType"];
        /**
         * This endpoint allows to create new tag type
         * @description Creating a new tag type
         */
        post: operations["createTagType"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/tags/{codeTag}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * This endpoint allows to  delete an existing Tag
         * @description Deleting an existing Tag with its code
         */
        delete: operations["deleteTag"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/tags/tagTypes/{codeTagType}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * This endpoint allows to retrieve a tag type
         * @description Retrieving a tag type with code tag type parameter
         */
        get: operations["findTagTypeBycode"];
        put?: never;
        post?: never;
        /**
         * This endpoint allows to  delete an existing Tag type
         * @description Deleting an existing Tag type
         */
        delete: operations["deleteTagType"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/cpq/tags/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_106"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/addressbook/addContact": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Create a new contact address for a contact code
         * @description Create a new contact address for a contact code
         */
        get: operations["    GET_AddressBook_addContact"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/addressbook/createAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Create All addressbook
         * @description Create All addressbook
         */
        get: operations["GET_AddressBook_createAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/addressbook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a AddressBook with a given code and from
         * @description Find a AddressBook with a given code and from
         */
        get: operations["    GET_AddressBook_search"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/addressbook/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_107"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/addressbook/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List of address
         * @description List of address
         */
        get: operations["    GET_AddressBook_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/contact/{code}/{tag}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Add a tag to a contact with his code
         * @description Add a tag to a contact with his code
         */
        put: operations["    PUT_Contact_{code}_{tag}"];
        post?: never;
        /**
         * Delete a tag to a contact with his code
         * @description Delete a tag to a contact with his code
         */
        delete: operations["    DELETE_Contact_{code}_{tag}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/contact": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a contact with a given code
         * @description Find a contact with a given code
         */
        get: operations["    GET_Contact_search"];
        /**
         * Update a contact CRM informatopn
         * @description Update a contact CRM informatopn
         */
        put: operations["    PUT_Contact_update"];
        /**
         * Create a new CRM Contact
         * @description Create a new CRM Contact
         */
        post: operations["POST_Contact_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/contact/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or update a CRM contact
         * @description Create or update a CRM contact
         */
        post: operations["    POST_Contact_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/contact/importCSVFile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import the contact list from a file
         * @description Import the contact list from a file
         */
        post: operations["    POST_Contact_importCSVFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/contact/importCSVText": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import the contact list to a CSV file text
         * @description Import the contact list to a CSV file text
         */
        post: operations["    POST_Contact_importCSVText"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/contact/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_108"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/contact/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List contacts matching a given criteria
         * @description List contacts matching a given criteria
         */
        get: operations["    GET_Contact_list"];
        put?: never;
        /**
         * Retrieve a list by using paging and filter option
         * @description Retrieve a list by using paging and filter option
         */
        post: operations["    POST_Contact_list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/contact/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Contacts matching a given criteria
         * @description List Contacts matching a given criteria
         */
        get: operations["    GET_Contact_listGetAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/contact/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a contact with a given code
         * @description Delete a contact with a given code
         */
        delete: operations["    DELETE_Contact_{code}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/customEntityInstance/{customEntityTemplateCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update an existing custom entity instance using a custom entity template
         * @description Update an existing custom entity instance using a custom entity template
         */
        put: operations["    PUT_CustomEntityInstance_{customEntityTemplateCode}"];
        /**
         * Create a new custom entity instance using a custom entity template.
         * @description Create a new custom entity instance using a custom entity template.
         */
        post: operations["    POST_CustomEntityInstance_{customEntityTemplateCode}"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/customEntityInstance/{customEntityTemplateCode}/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing custom entity instance with a given code.
         * @description Create new or update an existing custom entity instance with a given code.
         */
        post: operations["    POST_CustomEntityInstance_{customEntityTemplateCode}_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/customEntityInstance/{customEntityTemplateCode}/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable a Custom entity instance with a given code
         * @description Disable a Custom entity instance with a given code
         */
        post: operations["    POST_CustomEntityInstance_{customEntityTemplateCode}_{code}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/customEntityInstance/{customEntityTemplateCode}/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Custom entity instance with a given code
         * @description Enable a Custom entity instance with a given code
         */
        post: operations["    POST_CustomEntityInstance_{customEntityTemplateCode}_{code}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/customEntityInstance/{customEntityTemplateCode}/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a #### with a given (exemple) code .
         * @description Find a #### with a given (exemple) code .
         */
        get: operations["    GET_CustomEntityInstance_{customEntityTemplateCode}_{code}"];
        put?: never;
        post?: never;
        /**
         * Remove an existing custom entity instance with a given code from a custom entity template given by code
         * @description Remove an existing custom entity instance with a given code from a custom entity template given by code
         */
        delete: operations["    DELETE_CustomEntityInstance_{customEntityTemplateCode}_{code}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/customEntityInstance/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_109"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/customEntityInstance/list/{customEntityTemplateCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List custom entity instances.
         * @description List custom entity instances.
         */
        get: operations["    GET_CustomEntityInstance_list_{customEntityTemplateCode}"];
        put?: never;
        /**
         * Search in custom entity instances.
         * @description Search in custom entity instances.
         */
        post: operations["    POST_CustomEntityInstance_list_{customEntityTemplateCode}"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/customFieldTemplate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get custom field definition
         * @description Get custom field definition
         */
        get: operations["    GET_CustomFieldTemplate_search"];
        /**
         * Update existing custom field definition
         * @description Update existing custom field definition
         */
        put: operations["    PUT_CustomFieldTemplate_update"];
        /**
         * Define a new custom field
         * @description Define a new custom field
         */
        post: operations["    POST_CustomFieldTemplate_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/customFieldTemplate/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Define new or update existing custom field definition
         * @description Define new or update existing custom field definition
         */
        post: operations["    POST_CustomFieldTemplate_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/customFieldTemplate/{customFieldTemplateCode}/{appliesTo}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable a Custom field template with a given code
         * @description Disable a Custom field template with a given code
         */
        post: operations["    POST_CustomFieldTemplate_{customFieldTemplateCode}_{appliesTo}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/customFieldTemplate/{customFieldTemplateCode}/{appliesTo}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Custom field template with a given code
         * @description Enable a Custom field template with a given code
         */
        post: operations["    POST_CustomFieldTemplate_{customFieldTemplateCode}_{appliesTo}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/customFieldTemplate/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_110"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/customFieldTemplate/{customFieldTemplateCode}/{appliesTo}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove custom field definition given its code and entity it applies to
         * @description Remove custom field definition given its code and entity it applies to
         */
        delete: operations["    DELETE_CustomFieldTemplate_{customFieldTemplateCode}_{appliesTo}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/customTable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update existing data in a custom table
         * @description Update existing data in a custom table
         */
        put: operations["    PUT_CustomTable_update"];
        /**
         * Append data to a custom table
         * @description Append data to a custom table
         */
        post: operations["    POST_CustomTable_create"];
        /**
         * Remove an existing data from a custom table.
         * @description Remove an existing data from a custom table.
         */
        delete: operations["    DELETE_CustomTable_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/customTable/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Append or update data in a custom table
         * @description Append or update data in a custom table
         */
        post: operations["    POST_CustomTable_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/customTable/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mark records as disabled in a custom table. Applies only to those custom tables that contain a field 'disabled'
         * @description Mark records as disabled in a custom table. Applies only to those custom tables that contain a field 'disabled'
         */
        post: operations["    POST_CustomTable_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/customTable/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mark records as enabled in a custom table. Applies only to those custom tables that contain a field 'disabled'
         * @description Mark records as enabled in a custom table. Applies only to those custom tables that contain a field 'disabled'
         */
        post: operations["    POST_CustomTable_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/customTable/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_111"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/customTable/list/{customTableCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search in custom tables
         * @description Search in custom tables
         */
        post: operations["    POST_CustomTable_list_{customTableCode}"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/customTable/listFromWrapper": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search in custom tables using CustomTableWrapper
         * @description Search in custom tables using CustomTableWrapper
         */
        post: operations["    POST_CustomTable_listFromWrapper"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/customTable/{customTableCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove existing data from a custom table given search parameters
         * @description Remove existing data from a custom table given search parameters
         */
        delete: operations["    DELETE_CustomTable_{customTableCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/entityCustomization/action": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get entity action definition */
        get: operations["findAction"];
        /** Update existing entity action definition */
        put: operations["updateAction"];
        /** Define a new entity action */
        post: operations["createAction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/entityCustomization/entity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** update entity template */
        put: operations["updateEntityTemplate"];
        /** create entity template */
        post: operations["createEntityTemplate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/entityCustomization/field": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get custom field definition
         * @deprecated
         */
        get: operations["findField"];
        /** Update existing custom field definition */
        put: operations["updateField"];
        /** Define a new custom field */
        post: operations["createField"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/entityCustomization/action/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Define new or update existing entity action definition
         * @deprecated
         */
        post: operations["createOrUpdateAction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/entityCustomization/cet/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * create or update customized entity template
         * @deprecated
         */
        post: operations["createOrUpdateCustumizedEntityTemplate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/entityCustomization/entity/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * create or update entity template
         * @deprecated
         */
        post: operations["createOrUpdateEntityTemplate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/entityCustomization/field/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Define new or update existing custom field definition
         * @deprecated
         */
        post: operations["createOrUpdateField"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/entityCustomization/customize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Customize a standard Meveo entity definition by adding fields and/or custom actions */
        put: operations["customizeEntity"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/entityCustomization/field/{actionCode}/{appliesTo}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Disable a Entity action with a given code */
        post: operations["disableAction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/entityCustomization/entity/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** disable entity template */
        post: operations["disableEntityTemplate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/entityCustomization/field/{customFieldTemplateCode}/{appliesTo}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** disable a Custom field template with a given code */
        post: operations["disableField"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/entityCustomization/field/{actionCode}/{appliesTo}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Enable a Entity action with a given code */
        post: operations["enableAction"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/entityCustomization/entity/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** enable entity template */
        post: operations["enableEntityTemplate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/entityCustomization/field/{customFieldTemplateCode}/{appliesTo}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Custom field template with a given code
         * @deprecated
         */
        post: operations["enableField"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/entityCustomization/entity/action/execute/{actionCode}/{appliesTo}/{entityCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Execute and action of a given entity */
        post: operations["execute"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/entityCustomization/action/{actionCode}/{appliesTo}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get entity action definition */
        get: operations["findActionV2"];
        put?: never;
        post?: never;
        /** Remove entity action definition given its code and entity it applies to */
        delete: operations["removeAction"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/entityCustomization/customize/{customizedEntityClass}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get customizations made on a standard Meveo entity given its class */
        get: operations["findEntityCustomizations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/entityCustomization/entity/{customEntityTemplateCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** get entity template */
        get: operations["findEntityTemplate"];
        put?: never;
        post?: never;
        /** delete entity template */
        delete: operations["removeEntityTemplate"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/entityCustomization/field/{customFieldTemplateCode}/{appliesTo}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get custom field definition */
        get: operations["findFieldV2"];
        put?: never;
        post?: never;
        /** Remove custom field definition given its code and entity it applies to */
        delete: operations["removeField"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/entityCustomization/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_112"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/entityCustomization/listBusinessEntityForCFVByCode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns a List of BusinessEntities given a CustomFieldTemplate code. The CustomFieldTemplate is pulled from the database and entityClass is use in query. For example entity class is of type OfferTemplate, then it will return a list of OfferTemplates.
         * @deprecated
         */
        get: operations["listBusinessEntityForCFVByCode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/entityCustomization/listBusinessEntityForCFVByCode/{code}/{wildcode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns a List of BusinessEntities given a CustomFieldTemplate code. The CustomFieldTemplate is pulled from the database and entityClass is use in query. For example entity class is of type OfferTemplate, then it will return a list of OfferTemplates. */
        get: operations["listBusinessEntityForCFVByCodeV2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/entityCustomization/entity/listELFiltered": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns a list of filtered CustomFieldTemplate of an entity. The list of entity is evaluted againsts the entity with the given code. */
        get: operations["listELFiltered"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/entityCustomization/entities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** list entity template */
        get: operations["listEntityTemplates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/entityCustomization/entity/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** list entity template */
        get: operations["listEntityTemplates_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/unitaryCustomTable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * update a single customTable row
         * @description update custom table data row
         */
        put: operations["update_21"];
        /**
         * Create a single customTable row
         * @description Returns the id of the created table row
         */
        post: operations["create_18"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/unitaryCustomTable/{tableName}/{id}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * enable a single customTable row
         * @description update custom table data row
         */
        post: operations["disable_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/unitaryCustomTable/{tableName}/{id}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * enable a single customTable row
         * @description update custom table data row
         */
        post: operations["enable_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/unitaryCustomTable/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_113"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/unitaryCustomTable/{tableName}/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * delete a single customTable row
         * @description delete custom table data row
         */
        delete: operations["remove_8"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/dashboard/getDashboardData": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["getDashboardData"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/dataCollector": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a data collector with a given code.
         * @description Find a data collector with a given code.
         */
        get: operations["    GET_DataCollector_search"];
        put?: never;
        /**
         * Create a new data collector using a DataCollectorDto.
         * @description Create a new data collector using a DataCollectorDto.
         */
        post: operations["    POST_DataCollector_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/dataCollector/executeQuery": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Execute data collector SQL query
         * @description Execute data collector SQL query
         */
        get: operations["    GET_DataCollector_executeQuery"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/dataCollector/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_114"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/document/sign/procedures": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Creates the procedure.
         * @description Creates the procedure.
         */
        post: operations["    POST _DocumentSign_procedures "];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/document/sign/files/{id}/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download the files with the given id
         * @description Download the files with the given id
         */
        get: operations["    GET _DocumentSign_files_{id}_download "];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/document/sign/procedures/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the procedure by id.
         * @description Gets the procedure by id.
         */
        get: operations["    GET _DocumentSign_procedures_{id} "];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/document/sign/procedures/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the procedure status by id.
         * @description Gets the procedure status by id.
         */
        get: operations["    GET _DocumentSign_procedures_{id}_status "];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/document/sign/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_115"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/document/pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate PDF document.
         * @description Generate PDF document.
         */
        post: operations["    POST_PDFDocument_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/document/pdf/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_116"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/dunning/dunningDocument/addPayments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Add Payments to dunningDocument.
         * @description Add Payments to dunningDocument.
         */
        put: operations["    PUT_DunningDocument_addPayments"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/dunning/dunningDocument": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for a dunningDocument with a given code.
         * @description Search for a dunningDocument with a given code.
         */
        get: operations["    GET_DunningDocument_search"];
        put?: never;
        /**
         * Create a dunningDocument.
         * @description Create a dunningDocument.
         */
        post: operations["    POST_DunningDocument_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/dunning/dunningDocument/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_117"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/dunning/dunningDocument/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * List dunningDocuments matching a given criteria
         * @description List dunningDocuments matching a given criteria
         */
        post: operations["    POST_DunningDocument_list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/chart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a chart with a given code
         * @description Find a chart with a given code
         */
        get: operations["    GET_Chart_search"];
        /**
         * Update an existing chart
         * @description Update an existing chart
         */
        put: operations["    PUT_Chart_update"];
        /**
         * Create a new chart
         * @description Create a new chart
         */
        post: operations["    POST_Chart_create"];
        /**
         * Remove an existing chart with a given code
         * @description Remove an existing chart with a given code
         */
        delete: operations["    DELETE_Chart_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/chart/bar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update an existing bar chart
         * @description Update an existing bar chart
         */
        put: operations["    PUT_Chart_bar"];
        /**
         * Create a new bar chart
         * @description Create a new bar chart
         */
        post: operations["    POST_Chart_bar"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/chart/line": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update an existing line chart
         * @description Update an existing line chart
         */
        put: operations["    PUT_Chart_line"];
        /**
         * Create a new line chart
         * @description Create a new line chart
         */
        post: operations["    POST_Chart_line"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/chart/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing chart with a given code
         * @description Create new or update an existing chart with a given code
         */
        post: operations["    POST_Chart_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/chart/pie": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update an existing pie chart
         * @description Update an existing pie chart
         */
        put: operations["    PUT_Chart_pie"];
        /**
         * Create a new pie chart
         * @description Create a new pie chart
         */
        post: operations["    POST_Chart_pie"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/chart/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable a Chart with a given code
         * @description Disable a Chart with a given code
         */
        post: operations["    POST_Chart_{code}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/chart/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Chart with a given code
         * @description Enable a Chart with a given code
         */
        post: operations["    POST_Chart_{code}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/chart/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_118"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/chart/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Calendars matching a given criteria
         * @description List Calendars matching a given criteria
         */
        get: operations["    GET_Chart_listGetAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/measurableQuantity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Measurable quantity from a given code.
         * @description Get Measurable quantity from a given code.
         */
        get: operations["    GET_MeasurableQuantity_search"];
        /**
         * Update Measurable quantity from mesearable quantities.
         * @description Update Measurable quantity from mesearable quantities.
         */
        put: operations["    PUT_MeasurableQuantity_update"];
        /**
         * Create a Measurable quantity.
         * @description Create a Measurable quantity.
         */
        post: operations["    POST_MeasurableQuantity_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/measurableQuantity/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable a Measurable quantity with a given code
         * @description Disable a Measurable quantity with a given code
         */
        post: operations["    POST_MeasurableQuantity_{code}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/measurableQuantity/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Measurable quantity with a given code
         * @description Enable a Measurable quantity with a given code
         */
        post: operations["    POST_MeasurableQuantity_{code}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/measurableQuantity/findMVByDateAndPeriod": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a Measurable value during a period of date and period
         * @description Find a Measurable value during a period of date and period
         */
        get: operations["    GET_MeasurableQuantity_findMVByDateAndPeriod"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/measurableQuantity/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_119"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/measurableQuantity/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Measurable quantity with a given code.
         * @description List Measurable quantity with a given code.
         */
        get: operations["    GET_MeasurableQuantity_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/measurableQuantity/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove Measurable quantity with a given code.
         * @description Remove Measurable quantity with a given code.
         */
        delete: operations["    DELETE_MeasurableQuantity_{code}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/filteredList/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_120"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/filteredList/listByFilter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Execute a filter to retrieve a list of entities
         * @description Execute a filter to retrieve a list of entities
         */
        post: operations["    POST_FilteredList_listByFilter"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/finance/reportExtracts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for a report extract with a given code.
         * @description Search for a report extract with a given code.
         */
        get: operations["    GET_ReportExtract_search"];
        put?: never;
        /**
         * Updates a report extract with the given data.
         * @description Updates a report extract with the given data.
         */
        post: operations["    POST_ReportExtract_create_1"];
        /**
         * Delete a Report Extract with a given code.
         * @description Delete a Report Extract with a given code.
         */
        delete: operations["    DELETE_ReportExtract_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/finance/reportExtracts/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create / update a report extract with the given data.
         * @description Create / update a report extract with the given data.
         */
        post: operations["    POST_ReportExtract_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/finance/reportExtracts/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable a Report extract with a given code
         * @description Disable a Report extract with a given code
         */
        post: operations["    POST_ReportExtract_{code}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/finance/reportExtracts/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Report extract with a given code
         * @description Enable a Report extract with a given code
         */
        post: operations["    POST_ReportExtract_{code}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/finance/reportExtracts/executionHistory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Finds and returns a list of ReportExtract history for a given code.
         * @description Finds and returns a list of ReportExtract history for a given code.
         */
        get: operations["    GET_ReportExtract_executionHistory_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/finance/reportExtracts/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_121"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/finance/reportExtracts/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns a paginated list of ReportExtract.
         * @description Returns a paginated list of ReportExtract.
         */
        get: operations["GET_ReportExtract_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/finance/reportExtracts/executionHistory/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns a list of filtered and paginated report extract execution history.
         * @description Returns a list of filtered and paginated report extract execution history.
         */
        get: operations["    GET_ReportExtract_executionHistory_list"];
        put?: never;
        /**
         * Returns a list of filtered and paginated report extract execution history.
         * @description Returns a list of filtered and paginated report extract execution history.
         */
        post: operations["    POST_ReportExtract_executionHistory_list_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/finance/reportExtracts/run": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Runs a report extract with the given parameter.
         * @description Runs a report extract with the given parameter.
         */
        post: operations["    POST_ReportExtract_run"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/admin/genericWorkflow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a workflow with a given code
         * @description Find a workflow with a given code
         */
        get: operations["    GET_GenericWorkflow_search"];
        /**
         * Update an existing workflow
         * @description Update an existing workflow
         */
        put: operations["    PUT_GenericWorkflow_update"];
        /**
         * Create a new workflow
         * @description Create a new workflow
         */
        post: operations["    POST_GenericWorkflow_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/admin/genericWorkflow/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing workflow with a given code
         * @description Create new or update an existing workflow with a given code
         */
        post: operations["    POST_GenericWorkflow_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/admin/genericWorkflow/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable a Workflow with a given code
         * @description Disable a Workflow with a given code
         */
        post: operations["    POST_GenericWorkflow_{code}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/admin/genericWorkflow/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Workflow with a given code
         * @description Enable a Workflow with a given code
         */
        post: operations["    POST_GenericWorkflow_{code}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/admin/genericWorkflow/execute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Execute a workflow
         * @description Execute a workflow
         */
        post: operations["    POST_GenericWorkflow_execute"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/admin/genericWorkflow/executeTransition": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * execute transition
         * @description execute transition
         */
        post: operations["    POST_GenericWorkflow_executeTransition"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/admin/genericWorkflow/findByEntity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a workflow by entity
         * @description Find a workflow by entity
         */
        get: operations["    GET_GenericWorkflow_findByEntity"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/admin/genericWorkflow/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find workflow history
         * @description Find workflow history
         */
        get: operations["    GET_GenericWorkflow_history"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/admin/genericWorkflow/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_122"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/admin/genericWorkflow/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List of workflows.
         * @description List of workflows.
         */
        get: operations["    GET_GenericWorkflow_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/admin/genericWorkflow/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove an existing workflow with a given code
         * @description Remove an existing workflow with a given code
         */
        delete: operations["    DELETE_GenericWorkflow_{code}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/hierarchy/userGroupLevel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for a user group level with a given code.
         * @description Search for a user group level with a given code.
         */
        get: operations["    GET_UserHierarchyLevel_search"];
        /**
         * Update an existing user hierarchy level
         * @description Update an existing user hierarchy level
         */
        put: operations["    PUT_UserHierarchyLevel_update"];
        /**
         * Create a new user hierarchy level
         * @description Create a new user hierarchy level
         */
        post: operations["    POST_UserHierarchyLevel_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/hierarchy/userGroupLevel/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing user hierarchy level with a given code
         * @description Create new or update an existing user hierarchy level with a given code
         */
        post: operations["    POST_UserHierarchyLevel_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/hierarchy/userGroupLevel/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_123"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/hierarchy/userGroupLevel/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List user hierarchy levels matching a given criteria
         * @description List user hierarchy levels matching a given criteria
         */
        get: operations["    GET_UserHierarchyLevel_list"];
        put?: never;
        /**
         * List user hierarchy levels matching a given criteria
         * @description List user hierarchy levels matching a given criteria
         */
        post: operations["    POST_UserHierarchyLevel_list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/hierarchy/userGroupLevel/{hierarchyLevelCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove an existing hierarchy level with a given code
         * @description Remove an existing hierarchy level with a given code
         */
        delete: operations["    DELETE_UserHierarchyLevel_{hierarchyLevelCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/importExport/checkImportDataResult": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check for execution results for a given execution identifier
         * @description Check for execution results for a given execution identifier
         */
        get: operations["    GET_ImportExport_checkImportDataResult"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/importExport/generateEntityList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * returns an entity list CSV
         * @description returns an entity list CSV
         */
        post: operations["    POST_ImportExport_generateEntityList"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/importExport/exportData": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * export data
         * @description export data
         */
        post: operations["    POST_ImportExport_exportData"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/importExport/exportDataFromEntityList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * export Data From Entity List
         * @description export Data From Entity List
         */
        post: operations["    POST_ImportExport_exportDataFromEntityList"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/importExport/importData": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send a file to be imported. ImportExportResponseDto.executionId contains
         * @description Send a file to be imported. ImportExportResponseDto.executionId contains
         */
        post: operations["    POST_ImportExport_importData"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/importExport/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_124"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoice/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Cancel an invoice based on invoice id.
         * @description Cancel an invoice based on invoice id.
         */
        put: operations["    PUT_Invoice_cancel"];
        /**
         * Cancel an invoice based on invoice id.
         * @description Cancel an invoice based on invoice id.
         */
        post: operations["    POST_Invoice_cancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for an invoice given an invoice id or invoice number and invoice type.
         * @description Search for an invoice given an invoice id or invoice number and invoice type.
         */
        get: operations["    GET_Invoice_search"];
        put?: never;
        /**
         * Create invoice. Invoice number depends on invoice type
         * @description Create invoice. Invoice number depends on invoice type
         */
        post: operations["    POST_Invoice_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoice/listInvoiceByCustomerAccount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for a list of invoices given a customer account code
         * @deprecated
         * @description Search for a list of invoices given a customer account code.  Deprecated in v.4.7.2, use list() instead with criteria billingAccount.customerAccount.code=xxx
         */
        get: operations["    GET_Invoice_listInvoiceByCustomerAccount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoice/fetchPdfInvoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Finds an invoice based on invoice number and optionally an invoice type and return it as pdf as byte []
         * @description Finds an invoice based on invoice number and optionally an invoice type and return it as pdf as byte []. Invoice is not recreated, instead invoice stored as pdf in database is returned.
         */
        post: operations["    POST_Invoice_fetchPdfInvoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoice/getPdfInvoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Finds an invoice based on invoice number and return it as pdf as byte []
         * @description Finds an invoice based on invoice number and return it as pdf as byte []. Invoice is not recreated, instead invoice stored as pdf in database is returned.
         */
        get: operations["    GET_Invoice_getPdfInvoice"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoice/getPdfInvoiceWithType": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Finds an invoice based on invoice number and invoice type and return it as pdf as byte []
         * @description Finds an invoice based on invoice number and invoice type and return it as pdf as byte []. Invoice is not recreated, instead invoice stored as pdf in database is returned.
         */
        get: operations["    GET_Invoice_getPdfInvoiceWithType"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoice/fetchXMLInvoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Finds an invoice based on its invoice number and optionally an invoice type and return it as xml string.
         * @description Finds an invoice based on its invoice number and optionally an invoice type and return it as xml string.
         */
        post: operations["    POST_Invoice_fetchXMLInvoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoice/getXMLInvoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Finds an invoice based on its invoice number and return it as xml string.
         * @description Finds an invoice based on its invoice number and return it as xml string.
         */
        get: operations["    GET_Invoice_getXMLInvoice"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoice/getXMLInvoiceWithType": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Finds an invoice based on invoice number and invoice type. It returns the result as xml string
         * @description Finds an invoice based on invoice number and invoice type. It returns the result as xml string
         */
        get: operations["    GET_Invoice_getXMLInvoiceWithType"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoice/generateDraftInvoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate a Draft invoice
         * @description Generate a Draft invoice
         */
        post: operations["    POST_Invoice_generateDraftInvoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoice/generateInvoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Launch all the invoicing process for a given billingAccount, that's mean
         * @description Launch all the invoicing process for a given billingAccount, that's mean.  <ul> <li>Create rated transactions <li>Create an exceptional billingRun with given dates <li>Validate the pre-invoicing report <li>Validate the post-invoicing report <li>Validate the BillingRun  </ul>
         */
        post: operations["    POST_Invoice_generateInvoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoice/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List invoices matching a given criteria
         * @description List invoices matching a given criteria
         */
        get: operations["    GET_Invoice_listGetAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoice/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List invoices matching a given criteria.
         * @description List invoices matching a given criteria.
         */
        get: operations["    GET_Invoice_list"];
        put?: never;
        /**
         * List invoices matching a given criteria.
         * @description List invoices matching a given criteria.
         */
        post: operations["    POST_Invoice_list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoice/listPresentInAR": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List invoices with account operation for a given customer account  Deprecated in v
         * @deprecated
         * @description List invoices with account operation for a given customer account  Deprecated in v.4.8. Use list() instead with criteria recordedInvoice=IS_NOT_NULL and billingAccount.customerAccount.code=xxx
         */
        get: operations["    GET_Invoice_listPresentInAR"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoice/sendByEmail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send invoice by Email.
         * @description Send invoice by Email.
         */
        post: operations["    POST_Invoice_sendByEmail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/invoice/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Validate an invoice based on invoice id.
         * @description Validate an invoice based on invoice id.
         */
        put: operations["    PUT_Invoice_validate"];
        /**
         * Validate an invoice based on the invoice id.
         * @description Validate an invoice based on the invoice id.
         */
        post: operations["    POST_Invoice_validate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/jobInstance/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new job */
        post: operations["create_19"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/jobInstance/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create new or update an existing job with a given code */
        post: operations["createOrUpdate_9"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/jobInstance/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Disable a Job with a given code */
        post: operations["disable_2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/jobInstance/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Enable a Job with a given code */
        post: operations["enable_2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/jobInstance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find a job with a given code */
        get: operations["find_11"];
        /** Update an existing job */
        put: operations["updatePut"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/jobInstance/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_86"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/jobInstance/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search for list of jobInstances */
        get: operations["list_7"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/jobInstance/{jobInstanceCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove an existing job with a given code */
        delete: operations["remove_9"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/jobInstance/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update an existing job */
        post: operations["update_22"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/job/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new job instance
         * @description Create a new job instance
         */
        post: operations["    POST_Job_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/job/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing job instance with a given code
         * @deprecated
         * @description Create new or update an existing job instance with a given code
         */
        post: operations["    POST_Job_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/job/timer/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing timer entity with a given code
         * @deprecated
         * @description Create new or update an existing timer entity with a given code
         */
        post: operations["    POST_Job_timer_createOrUpdate_"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/job/timer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a timer with a given code
         * @deprecated
         * @description Find a timer with a given code
         */
        get: operations["    GET_Job_timer_"];
        /**
         * Update an existing timer entity
         * @description Update an existing timer entity
         */
        put: operations["    PUT_Job_timer_"];
        /**
         * Create a new timer entity
         * @description Create a new timer entity
         */
        post: operations["    POST_Job_timer_"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/job": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a job instance with a given code
         * @deprecated
         * @description Find a job instance with a given code
         */
        get: operations["    GET_Job_search"];
        /**
         * Update an existing job instance
         * @description Update an existing job instance
         */
        put: operations["    PUT_Job_update"];
        /**
         * Create a new job instance
         * @description Create a new job instance
         */
        post: operations["    POST_Job_create_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/job/execute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Execute a given job instance info
         * @deprecated
         * @description Execute a given job instance info
         */
        post: operations["    POST_Job_execute"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/job/execution": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Execute a given job instance info
         * @description Execute a given job instance info
         */
        post: operations["    POST_Job_execution"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/job/jobReport": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a job execution result.
         * @deprecated
         * @description Find a job execution result.
         */
        get: operations["    GET_Job_jobReport"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/job/{code}/jobExecution/{id}/jobReport": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a job execution result.
         * @description Find a job execution result.
         */
        get: operations["    GET_Job{code}_jobExecution_{id}_jobReport"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/job/timers/{timerCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a timer with a given code
         * @description Find a timer with a given code
         */
        get: operations["    GET_Job_timers_{timerCode}"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/job/{jobInstanceCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a job instance with a given code
         * @description Find a job instance with a given code
         */
        get: operations["    GET_Job_{jobInstanceCode}"];
        put?: never;
        post?: never;
        /**
         * Remove an existing job instance with a given code
         * @description Remove an existing job instance with a given code
         */
        delete: operations["    DELETE_Job_{jobInstanceCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/job/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_126"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/job/jobReport/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List jobExecutions matching a given criteria
         * @description List jobExecutions matching a given criteria
         */
        get: operations["    GET_Job_jobReport_listGetAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/job/jobReport/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Job execution list matching a given criteria
         * @description Job execution list matching a given criteria
         */
        get: operations["    GET_Job_jobReport_list"];
        put?: never;
        /**
         * Job execution list matching a given criteria
         * @description Job execution list matching a given criteria
         */
        post: operations["    POST_Job_jobReport_list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/job/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Deprecated in v.4.7.2 Use /list instead.
         * @description Deprecated in v.4.7.2 Use /list instead.
         */
        get: operations["    GET_Job_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/job/listCategories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List job categories
         * @description List job categories
         */
        get: operations["    GET_Job_listCategories"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/job/timer/{timerCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove an existing timer with a given code
         * @description Remove an existing timer with a given code
         */
        delete: operations["    DELETE_Job_timer_{timerCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/job/stop/{jobInstanceCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Stop a given job instance info for put endpoint
         * @description Stop a given job instance info for put endpoint
         */
        put: operations["    PUT_Job_stop_{jobInstanceCode}"];
        /**
         * Stop a given job instance info
         * @deprecated
         * @description Stop a given job instance info
         */
        post: operations["    POST_Job_stop_{jobInstanceCode}"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/timerEntity/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new timer schedule
         * @description Create a new timer schedule
         */
        post: operations["    POST_TimerEntity_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/timerEntity/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing timer schedule with a given code
         * @description Create new or update an existing timer schedule with a given code
         */
        post: operations["    POST_TimerEntity_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/timerEntity/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable a Timer schedule with a given code
         * @description Disable a Timer schedule with a given code
         */
        post: operations["    POST_TimerEntity_{code}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/timerEntity/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Timer schedule with a given code
         * @description Enable a Timer schedule with a given code
         */
        post: operations["    POST_TimerEntity_{code}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/timerEntity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a timer schedule with a given code
         * @description Find a timer schedule with a given code
         */
        get: operations["    GET_TimerEntity_search"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/timerEntity/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_127"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/timerEntity/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update an existing timer schedule
         * @description Update an existing timer schedule
         */
        post: operations["    POST_TimerEntity_update"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/manualInvoice/{id}/invoiceLines": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["addInvoiceLines"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/manualInvoice/discountedLine/refresh/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["checkAndUpdateDisounctInvoiceLine"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/manualInvoice/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["createManualInvoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/manualInvoice/avoir/wf/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["createOrUpdateWorkflowCreditNote"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/manualInvoice/{invoicId}/duplicate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["duplicateInvoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/manualInvoice/invoiceLine/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getInvoiceLine"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/manualInvoice/{id}/invoiceLines/{lineId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["updateInvoiceLine"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/manualInvoice/updateStatus/{id}/{status}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["updateStatus_3"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/manualInvoice/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["updateWithoutIl"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/manualInvoice/validate/invoice/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["validateInvoiceRefacturation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/metrics/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search metrics configuration with a given code.
         * @description Search metrics configuration with a given code.
         */
        get: operations["    GET_MetricsConfiguration_search"];
        /**
         * Update an existing MetricConfiguration. If the MetricsConfiguration code exists, a metrics configuration record is updated
         * @description Update an existing MetricConfiguration. If the MetricsConfiguration code exists, a metrics configuration record is updated
         */
        put: operations["    PUT_MetricsConfiguration_update"];
        /**
         * Creates a MetricConfiguration. If the MetricConfiguration code does not exists, a metrics configuration record is created
         * @description Creates a MetricConfiguration. If the MetricConfiguration code does not exists, a metrics configuration record is created
         */
        post: operations["    POST_MetricsConfiguration_create"];
        /**
         * Delete metrics configuration with a given code.
         * @description Delete metrics configuration with a given code.
         */
        delete: operations["    DELETE_MetricsConfiguration_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/metrics/config/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_128"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/module": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a Meveo's module with a given code
         * @description Find a Meveo's module with a given code
         */
        get: operations["    GET_Module_search"];
        /**
         * Update an existing Meveo module
         * @description Update an existing Meveo module
         */
        put: operations["    PUT_Module_update"];
        /**
         * Create a new meveo module
         * @description Create a new meveo module
         */
        post: operations["    POST_Module_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/module/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing Meveo module
         * @description Create new or update an existing Meveo module
         */
        post: operations["    POST_Module_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/module/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove an existing module with a given code
         * @description Remove an existing module with a given code
         */
        delete: operations["    DELETE_Module_{code}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/module/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable a Opencell module with a given code
         * @description Disable a Opencell module with a given code
         */
        post: operations["    POST_Module_{code}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/module/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Disable a Meveo's module with a given code
         * @description Disable a Meveo's module with a given code
         */
        get: operations["    GET_Module_disable"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/module/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Opencell module with a given code
         * @description Enable a Opencell module with a given code
         */
        post: operations["    POST_Module_{code}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/module/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Enable a Meveo's module with a given code
         * @description Enable a Meveo's module with a given code
         */
        get: operations["    GET_Module_enable"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/module/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_129"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/module/install": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Install Meveo module
         * @description Install Meveo module
         */
        put: operations["    PUT_Module_install"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/module/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all Meveo's modules
         * @description List all Meveo's modules
         */
        get: operations["    GET_Module_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/module/uninstall": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * uninstall a Meveo's module with a given code
         * @description uninstall a Meveo's module with a given code
         */
        get: operations["    GET_Module_uninstall"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/notification/email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a email notification with a given code
         * @description Find a email notification with a given code
         */
        get: operations["    GET_EmailNotification_search"];
        /**
         * Update an existing email notification
         * @description Update an existing email notification
         */
        put: operations["    PUT_EmailNotification_update"];
        /**
         * Create a new email notification
         * @description Create a new email notification
         */
        post: operations["    POST_EmailNotification_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/notification/email/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing email notification with a given code
         * @description Create new or update an existing email notification with a given code
         */
        post: operations["    POST_EmailNotification_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/notification/email/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable a Email notification with a given code
         * @description Disable a Email notification with a given code
         */
        post: operations["    POST_EmailNotification_{code}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/notification/email/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Email notification with a given code
         * @description Enable a Email notification with a given code
         */
        post: operations["    POST_EmailNotification_{code}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/notification/email/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_130"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/notification/email/{notificationCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove an existing email notification with a given code
         * @description Remove an existing email notification with a given code
         */
        delete: operations["    DELETE_EmailNotification_{notificationCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/notification/jobTrigger": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a job trigger with a given code
         * @description Find a job trigger with a given code
         */
        get: operations["    GET_JobTrigger_search"];
        /**
         * Update an existing job trigger
         * @description Update an existing job trigger
         */
        put: operations["    PUT_JobTrigger_update"];
        /**
         * Create a new job trigger
         * @description Create a new job trigger
         */
        post: operations["    POST_JobTrigger_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/notification/jobTrigger/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing job trigger with a given code
         * @description Create new or update an existing job trigger with a given code
         */
        post: operations["    POST_JobTrigger_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/notification/jobTrigger/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable a Job execution trigger notification with a given code
         * @description Disable a Job execution trigger notification with a given code
         */
        post: operations["    POST_JobTrigger_{code}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/notification/jobTrigger/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Job execution trigger notification with a given code
         * @description Enable a Job execution trigger notification with a given code
         */
        post: operations["    POST_JobTrigger_{code}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/notification/jobTrigger/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_131"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/notification/jobTrigger/{notificationCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove an existing job trigger with a given code
         * @description Remove an existing job trigger with a given code
         */
        delete: operations["    DELETE_JobTrigger_{notificationCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/notification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a notification with a given code
         * @description Find a notification with a given code
         */
        get: operations["    GET_Notification_search"];
        /**
         * Update an existing notification
         * @description Update an existing notification
         */
        put: operations["    PUT_Notification_update"];
        /**
         * Create a new notification
         * @description Create a new notification
         */
        post: operations["    POST_Notification_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/notification/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing notification with a given code
         * @description Create new or update an existing notification with a given code
         */
        post: operations["    POST_Notification_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/notification/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable a Script type notification with a given code
         * @description Disable a Script type notification with a given code
         */
        post: operations["    POST_Notification_{code}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/notification/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Script type notification with a given code
         * @description Enable a Script type notification with a given code
         */
        post: operations["    POST_Notification_{code}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/notification/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_132"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/notification/listInboundRequest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List inbound requests
         * @description List inbound requests
         */
        get: operations["    GET_Notification_listInboundRequest"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/notification/listNotificationHistory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List the notification history
         * @description List the notification history
         */
        get: operations["    GET_Notification_listNotificationHistory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/notification/{notificationCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove an existing notification with a given code
         * @description Remove an existing notification with a given code
         */
        delete: operations["    DELETE_Notification_{notificationCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/communications/sms/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_133"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/communications/sms/send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["send"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/notification/webhook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a web hook notification with a given code
         * @description Find a web hook notification with a given code
         */
        get: operations["    GET_WebHookNotification_search"];
        /**
         * Update an existing web hook notification
         * @description Update an existing web hook notification
         */
        put: operations["    PUT_WebHookNotification_update"];
        /**
         * Create a new web hook notification
         * @description Create a new web hook notification
         */
        post: operations["    POST_WebHookNotification_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/notification/webhook/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing web hook notification with a given code
         * @description Create new or update an existing web hook notification with a given code
         */
        post: operations["    POST_WebHookNotification_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/notification/webhook/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable a Webhook notification with a given code
         * @description Disable a Webhook notification with a given code
         */
        post: operations["    POST_WebHookNotification_{code}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/notification/webhook/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Webhook notification with a given code
         * @description Enable a Webhook notification with a given code
         */
        post: operations["    POST_WebHookNotification_{code}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/notification/webhook/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_134"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/notification/webhook/{notificationCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove an existing web hook notification with a given code
         * @description Remove an existing web hook notification with a given code
         */
        delete: operations["    DELETE_WebHookNotification_{notificationCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/accountOperation/addLitigation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add a new litigation
         * @description Add a new litigation
         */
        post: operations["    POST_AccountOperation_addLitigation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/accountOperation/cancelLitigation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel a litigation
         * @description Cancel a litigation
         */
        post: operations["    POST_AccountOperation_cancelLitigation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/accountOperation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Finds an accountOperation given an id.
         * @description Finds an accountOperation given an id.
         */
        get: operations["    GET_AccountOperation_search"];
        put?: never;
        /**
         * Create a new account operation
         * @description Create a new account operation
         */
        post: operations["    POST_AccountOperation_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/accountOperation/findByCustomerAccount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List accountOperations matching customer account
         * @description List accountOperations matching customer account
         */
        get: operations["    GET_AccountOperation_findByCustomerAccount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/accountOperation/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_135"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/accountOperation/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List account operations matching a given criteria
         * @description List account operations matching a given criteria
         */
        get: operations["    GET_AccountOperation_list"];
        put?: never;
        /**
         * List account operations matching a given criteria
         * @description List account operations matching a given criteria
         */
        post: operations["    POST_AccountOperation_list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/accountOperation/{accountOperationId}/listMatchedOperations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List matched operations for a given account operation
         * @description List matched operations for a given account operation
         */
        get: operations["    GET_AccountOperation_{accountOperationId}_listMatchedOperations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/accountOperation/matchOperations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Match operations
         * @description Match operations
         */
        post: operations["    POST_AccountOperation_matchOperations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/accountOperation/transferAccountOperation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Transfer an account operation from one customer to another.
         * @description Transfer an account operation from one customer to another.
         */
        post: operations["    POST_AccountOperation_transferAccountOperation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/accountOperation/unMatchingOperations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unmatching operations
         * @description Unmatching operations
         */
        post: operations["    POST_AccountOperation_unMatchingOperations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/accountOperation/{id}/updateAccountingDate/{newAccountingDate}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update accounting date of an account operation
         * @description Update accounting date of an account operation
         */
        put: operations["    PUT_AccountOperation_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/accountOperation/{id}/status/{newStatus}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update status of an account operation
         * @description Update status of an account operation
         */
        put: operations["    PUT_AccountOperation_updateStatus"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/creditCategory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a credit category payment with a credit category code
         * @description Get a credit category payment with a credit category code
         */
        get: operations["GET_CreditCategory_search"];
        /**
         * Update a credit category payment
         * @description Update a credit category payment
         */
        put: operations["PUT_CreditCategory_update"];
        /**
         * Create a new credit category
         * @description Create a new credit category
         */
        post: operations["POST_CreditCategory_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/creditCategory/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or update a credit category payment
         * @description Create or update a credit category payment
         */
        post: operations["POST_CreditCategory_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/creditCategory/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_136"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/creditCategory/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve the list of credit category paiement
         * @description Retrieve the list of credit category paiement
         */
        get: operations["GET_CreditCategory_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/creditCategory/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List creditCategories matching a given criteria
         * @description List creditCategories matching a given criteria
         */
        get: operations["GET_CreditCategory_listGetAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/creditCategory/{creditCategoryCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a credit category with his given code
         * @description Delete a credit category with his given code
         */
        delete: operations["DELETE_CreditCategory_{creditCategoryCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/ddrequestLotOp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a ddrequestLotOp by dto
         * @description Create a ddrequestLotOp by dto
         */
        post: operations["    POST_DDRequestLotOp_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/ddrequestLotOp/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_137"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/ddrequestLotOp/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List ddrequestLotOps by fromDueDate,toDueDate,status
         * @description List ddrequestLotOps by fromDueDate,toDueDate,status
         */
        get: operations["    GET_DDRequestLotOp_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/iban/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_138"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/iban/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * validate the iban and/or bic
         * @description validate the iban and/or bic
         */
        get: operations["    GET_IBan_validate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/cardPaymentMethod": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve card payment method by its id.
         * @description Retrieve card payment method by its id.
         */
        get: operations["    GET_Payment_cardPaymentMethod"];
        /**
         * Update existing card payment method.
         * @description Update existing card payment method.
         */
        put: operations["    PUT_Payment_cardPaymentMethod"];
        /**
         * Add a new card payment method. It will be marked as preferred.
         * @description Add a new card payment method. It will be marked as preferred.
         */
        post: operations["    POST_Payment_cardPaymentMethod"];
        /**
         * Remove card payment method. If it was marked as preferred, some other payment method will be marked as preferred
         * @description Remove card payment method. If it was marked as preferred, some other payment method will be marked as preferred
         */
        delete: operations["    DELETE_Payment_cardPaymentMethod"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/ddRequestBuilder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve ddRequest builder by its code.
         * @description Retrieve ddRequest builder by its code.
         */
        get: operations["    GET_Payment_ddRequestBuilder"];
        /**
         * Update existing ddRequest builder.
         * @description Update existing ddRequest builder.
         */
        put: operations["    PUT_Payment_ddRequestBuilder"];
        /**
         * Add a new ddRequest builder.
         * @description Add a new ddRequest builder.
         */
        post: operations["    POST_Payment_ddRequestBuilder"];
        /**
         * Remove ddRequest builder.
         * @description Remove ddRequest builder.
         */
        delete: operations["    DELETE_Payment_ddRequestBuilder"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/paymentGateway": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve payment gateway by its code.
         * @description Retrieve payment gateway by its code.
         */
        get: operations["    GET_Payment_paymentGateway"];
        /**
         * Update existing payment gateway.
         * @description Update existing payment gateway.
         */
        put: operations["    PUT_Payment_paymentGateway"];
        /**
         * Add a new payment gateway.
         * @description Add a new payment gateway.
         */
        post: operations["    POST_Payment_paymentGateway"];
        /**
         * Remove payment gateway.
         * @description Remove payment gateway.
         */
        delete: operations["    DELETE_Payment_paymentGateway"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/paymentMethod": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve payment method by its id.
         * @description Retrieve payment method by its id.
         */
        get: operations["    GET_Payment_paymentMethod"];
        /**
         * Update existing payment method.
         * @description Update existing payment method.
         */
        put: operations["    PUT_Payment_paymentMethod"];
        /**
         * Add a new payment method. It will be marked as preferred.
         * @description Add a new payment method. It will be marked as preferred.
         */
        post: operations["    POST_Payment_paymentMethod"];
        /**
         * Remove payment method. If it was marked as preferred, some other payment method will be marked as preferred
         * @description Remove payment method. If it was marked as preferred, some other payment method will be marked as preferred
         */
        delete: operations["    DELETE_Payment_paymentMethod"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/paymentGateway/approveSepaDDMandate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * approve SepaDDMandate
         * @description approve SepaDDMandate
         */
        get: operations["    GET_Payment_paymentGateway_approveSepaDDMandate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/paymentScheduleInstance/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Cancel  payment Schedules instance.
         * @description Cancel  payment Schedules instance.
         */
        put: operations["    PUT_Payment_paymentScheduleInstance_cancel"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/paymentGateway/checkMandate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets a created mandate.
         * @description Gets a created mandate.
         */
        get: operations["    GET_Payment_paymentGateway_checkMandate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Creates automated payment. It also process if a payment is matching or not Deprecated and replaced by reatePayment using /payment path
         * @deprecated
         * @description Creates automated payment. It also process if a payment is matching or not Deprecated and replaced by reatePayment using /payment path
         */
        post: operations["    POST_Payment_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/ddRequestBuilder/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or update ddRequest builder.
         * @description Create or update ddRequest builder.
         */
        post: operations["    POST_Payment_ddRequestBuilder_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/paymentGateway/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or update payment gateway.
         * @description Create or update payment gateway.
         */
        post: operations["    POST_Payment_paymentGateway_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/paymentScheduleTemplate/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or update payment Schedules template.
         * @description Create or update payment Schedules template.
         */
        post: operations["    POST_Payment_paymentScheduleTemplate_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Creates automated payment. It also process if a payment is matching or not
         * @description Creates automated payment. It also process if a payment is matching or not
         */
        post: operations["    POST_Payment_create_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/paymentScheduleTemplate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * find  payment Schedules template.
         * @description find  payment Schedules template.
         */
        get: operations["    GET_Payment_paymentScheduleTemplate"];
        /**
         * Create  payment Schedules template.
         * @description Create  payment Schedules template.
         */
        put: operations["    PUT_Payment_paymentScheduleTemplate"];
        /**
         * Create  payment Schedules template.
         * @description Create  payment Schedules template.
         */
        post: operations["    POST_Payment_paymentScheduleTemplate"];
        /**
         * remove  payment Schedules template.
         * @description remove  payment Schedules template.
         */
        delete: operations["    DELETE_Payment_paymentScheduleTemplate"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/paymentGateway/rumSequence": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Updates a RUM sequence associated to the given payment gateway.
         * @description Updates a RUM sequence associated to the given payment gateway.
         */
        put: operations["    PUT_Payment_paymentGateway_rumSequence"];
        /**
         * Creates a RUM sequence associated to the given payment gateway.
         * @description Creates a RUM sequence associated to the given payment gateway.
         */
        post: operations["    POST_Payment_paymentGateway_rumSequence"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/paymentGateway/rumSequence/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Finds the RUM sequence with the specified code.
         * @description Finds the RUM sequence with the specified code.
         */
        get: operations["    GET_Payment_paymentGateway_rumSequence_{code}"];
        put?: never;
        post?: never;
        /**
         * Deletes the RUM sequence with the specified code.
         * @description Deletes the RUM sequence with the specified code.
         */
        delete: operations["    DELETE_Payment_paymentGateway_rumSequence_{code}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/ddRequestBuilder/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable a ddRequest builder with a given code
         * @description Disable a ddRequest builder with a given code
         */
        post: operations["    POST_Payment_ddRequestBuilder_{code}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/paymentGateway/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable a Payment gateway with a given code
         * @description Disable a Payment gateway with a given code
         */
        post: operations["    POST_Payment_paymentGateway_{code}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/paymentMethod/{id}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable a Payment method with a given id
         * @description Disable a Payment method with a given id
         */
        post: operations["    POST_Payment_paymentMethod_{id}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/ddRequestBuilder/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a ddRequest builder with a given code
         * @description Enable a ddRequest builder with a given code
         */
        post: operations["    POST_Payment_ddRequestBuilder_{code}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/paymentGateway/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Payment gateway with a given code
         * @description Enable a Payment gateway with a given code
         */
        post: operations["    POST_Payment_paymentGateway_{code}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/paymentMethod/{id}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Payment method with a given id
         * @description Enable a Payment method with a given id
         */
        post: operations["    POST_Payment_paymentMethod_{id}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/paymentMethod/findByCustomerAccount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Payment Methods matching a customer account
         * @description List Payment Methods matching a customer account
         */
        get: operations["    GET_Payment_paymentMethod_findByCustomerAccount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/paymentScheduleInstance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find  PaymentScheduleInstance by ID
         * @description Find  PaymentScheduleInstance by ID
         */
        get: operations["    GET_Payment_paymentScheduleInstance"];
        /**
         * Update  payment Schedules instance.
         * @description Update  payment Schedules instance.
         */
        put: operations["    PUT_Payment_paymentScheduleInstance"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/paymentGateway/getHostedCheckoutStatus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the Hosted Checkout Status.
         * @description Get the Hosted Checkout Status.
         */
        get: operations["    GET_Payment_paymentGateway_getHostedCheckoutStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/paymentGateway/getHostedCheckoutUrl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the Hosted Checkout URL for payment.
         * @description Get the Hosted Checkout URL for payment.
         */
        get: operations["    GET_Payment_paymentGateway_getHostedCheckoutUrl"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/paymentGateway/rumSequence/{code}/next": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generates the next RUM sequence number.
         * @description Generates the next RUM sequence number.
         */
        post: operations["    POST_Payment_paymentGateway_rumSequence_{code}_next"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_139"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/customerPayment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns a list of account operations along with the balance of a customer.
         * @description Returns a list of account operations along with the balance of a customer.
         */
        get: operations["    GET_Payment_customerPayment"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/cardPaymentMethod/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List available card payment methods for a given customer account identified either by id or by code.
         * @description List available card payment methods for a given customer account identified either by id or by code.
         */
        get: operations["    GET_Payment_cardPaymentMethod_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/ddRequestBuilder/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List DDRequest Builders matching a given criteria
         * @description List DDRequest Builders matching a given criteria
         */
        get: operations["    GET_Payment_ddRequestBuilder_list"];
        put?: never;
        /**
         * List DDRequest Builders matching a given criteria.
         * @description List DDRequest Builders matching a given criteria.
         */
        post: operations["    POST_Payment_ddRequestBuilder_list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/paymentMethod/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List paymentMethods matching a given criteria
         * @description List paymentMethods matching a given criteria
         */
        get: operations["    GET_Payment_paymentMethod_listGetAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/paymentGateway/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List payment gateways matching a given criteria
         * @description List payment gateways matching a given criteria
         */
        get: operations["    GET_Payment_paymentGateway_list"];
        put?: never;
        /**
         * List payment gateways matching a given criteria.
         * @description List payment gateways matching a given criteria.
         */
        post: operations["    POST_Payment_paymentGateway_list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/history/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Payment matching a given criteria.
         * @description List Payment matching a given criteria.
         */
        get: operations["    GET_Payment_history_list"];
        put?: never;
        /**
         * List invoices matching a given criteria.
         * @description List invoices matching a given criteria.
         */
        post: operations["    POST_Payment_history_list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/paymentMethod/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Payment Methods matching a given criteria
         * @description List Payment Methods matching a given criteria
         */
        get: operations["    GET_Payment_paymentMethod_list"];
        put?: never;
        /**
         * List Payment Methods matching a given criteria
         * @description List Payment Methods matching a given criteria
         */
        post: operations["    POST_Payment_paymentMethod_list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/paymentScheduleInstance/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List  paymentScheduleInstance matching a given criteria
         * @description List  paymentScheduleInstance matching a given criteria
         */
        get: operations["    GET_Payment_paymentScheduleInstance_list"];
        put?: never;
        /**
         * List  PaymentScheduleInstance matching a given criteria
         * @description List  PaymentScheduleInstance matching a given criteria
         */
        post: operations["    POST_Payment_paymentScheduleInstance_list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/paymentScheduleTemplate/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List  PaymentScheduleTemplate matching a given criteria
         * @description List  PaymentScheduleTemplate matching a given criteria
         */
        get: operations["    GET_Payment_paymentScheduleTemplate_list"];
        put?: never;
        /**
         * List  PaymentScheduleTemplate matching a given criteria
         * @description List  PaymentScheduleTemplate matching a given criteria
         */
        post: operations["    POST_Payment_paymentScheduleTemplate_list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/paymentScheduleInstance/{id}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Payment schedule instance item, the update is only about amount and requestPaymentDate.
         * @description Update Payment schedule instance item, the update is only about amount and requestPaymentDate.
         */
        put: operations["    PUT_Payment_paymentScheduleInstance_{id}_items"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/paymentScheduleInstance/terminate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Terminate  payment Schedules instance.
         * @description Terminate  payment Schedules instance.
         */
        put: operations["    PUT_Payment_paymentScheduleInstance_terminate"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/refund": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Creates refund.
         * @description Creates refund.
         */
        post: operations["    POST_Refund_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/revenueRecognitionRule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a revenue recognition rule with a given code
         * @description Find a revenue recognition rule with a given code
         */
        get: operations["    GET_RevenueRecognitionRules_search"];
        /**
         * Update an existing revenue recognition rule
         * @description Update an existing revenue recognition rule
         */
        put: operations["    PUT_RevenueRecognitionRules_update"];
        /**
         * Create a new revenue recognition rule
         * @description Create a new revenue recognition rule
         */
        post: operations["    POST_RevenueRecognitionRules_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/revenueRecognitionRule/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing revenue recognition rule with a given code
         * @description Create new or update an existing revenue recognition rule with a given code
         */
        post: operations["    POST_RevenueRecognitionRules_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/revenueRecognitionRule/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable a Revenue recognition rule with a given code
         * @description Disable a Revenue recognition rule with a given code
         */
        post: operations["    POST_RevenueRecognitionRules_{code}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/revenueRecognitionRule/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Revenue recognition rule with a given code
         * @description Enable a Revenue recognition rule with a given code
         */
        post: operations["    POST_RevenueRecognitionRules_{code}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/revenueRecognitionRule/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_90"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/revenueRecognitionRule/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * List of revenue recognition rules.
         * @description List of revenue recognition rules.
         */
        post: operations["    POST_RevenueRecognitionRules_list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/revenueRecognitionRule/{revenueRecognitionRuleCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove an existing revenue recognition rule with a given code
         * @description Remove an existing revenue recognition rule with a given code
         */
        delete: operations["    DELETE_RevenueRecognitionRules_{revenueRecognitionRuleCode}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/rumSequences/nextMandateNumber": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Calculates and returns the next value of the mandate number.
         * @description Calculates and returns the next value of the mandate number.
         */
        post: operations["POST_RumSequencenextMandateNumber"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/rumSequences/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_141"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/payment/rumSequences": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update the Provider's RUM sequence configuration.
         * @description Update the Provider's RUM sequence configuration.
         */
        put: operations["PUT_RumSequence_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/sepaliaProxy/PES/{quoteNumber}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["contraliaPES"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/sepaliaProxy/mandates/{coclicoId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["mandates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/bpel/api_sivente/cash": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["createPayment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/bpel/api_sivente/invoices/{no_facture}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getInvoiceDetails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/bpel/api_sivente/users/{login}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getUserManager"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/bpel/api_sivente/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_142"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/bpel/api_sivente/customers_lp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["putCustomerByCoclico"];
        post: operations["postCustomerByCoclico"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/webdataProxy/comptage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["comptage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/webdataProxy/deleteSQAJob": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["deleteSQAJob"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/entityList/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["entityList"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/mdpSubscription/applyExtraCharge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["applyExtraCharge"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/taxCategory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for a Tax category with a given code
         * @description Search for a Tax category with a given code
         */
        get: operations["    GET_TaxCategory_search"];
        /**
         * Update an existing Tax category
         * @description Update an existing Tax category
         */
        put: operations["    PUT_TaxCategory_update"];
        /**
         * Create a new Tax category
         * @description Create a new Tax category
         */
        post: operations["    POST_TaxCategory_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/taxCategory/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing Tax category
         * @description Create new or update an existing Tax category
         */
        post: operations["    POST_TaxCategory_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/taxCategory/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_143"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/taxCategory/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List taxCategories matching a given criteria
         * @description List taxCategories matching a given criteria
         */
        get: operations["    GET_TaxCategory_listGetAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/taxCategory/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove an existing Tax category with a given code
         * @description Remove an existing Tax category with a given code
         */
        delete: operations["    DELETE_TaxCategory_{code}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/taxCategory/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search Tax category by matching a given criteria
         * @description Search Tax category by matching a given criteria
         */
        get: operations["    GET_TaxCategory_list"];
        put?: never;
        /**
         * Search for Tax category by matching a given criteria
         * @description Search for Tax category by matching a given criteria
         */
        post: operations["    POST_TaxCategory_list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/taxClass": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for a Tax class with a given code
         * @description Search for a Tax class with a given code
         */
        get: operations["    GET_TaxClass_search"];
        /**
         * Update an existing Tax class
         * @description Update an existing Tax class
         */
        put: operations["    PUT_TaxClass_update"];
        /**
         * Create a new Tax class
         * @description Create a new Tax class
         */
        post: operations["    POST_TaxClass_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/taxClass/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing Tax class
         * @description Create new or update an existing Tax class
         */
        post: operations["    POST_TaxClass_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/taxClass/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_144"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/taxClass/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List taxClasses matching a given criteria
         * @description List taxClasses matching a given criteria
         */
        get: operations["    GET_TaxClass_listGetAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/taxClass/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove an existing Tax class with a given code
         * @description Remove an existing Tax class with a given code
         */
        delete: operations["    DELETE_TaxClass_{code}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/taxClass/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search Tax class by matching a given criteria
         * @description Search Tax class by matching a given criteria
         */
        get: operations["    GET_TaxClass_list"];
        put?: never;
        /**
         * Search for Tax class by matching a given criteria
         * @description Search for Tax class by matching a given criteria
         */
        post: operations["    POST_TaxClass_list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/taxMapping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for a Tax mapping with a given id
         * @description Search for a Tax mapping with a given id
         */
        get: operations["    GET_TaxMapping_search"];
        /**
         * Update an existing Tax mapping
         * @description Update an existing Tax mapping
         */
        put: operations["    PUT_TaxMapping_update"];
        /**
         * Create a new Tax mapping
         * @description Create a new Tax mapping
         */
        post: operations["    POST_TaxMapping_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/taxMapping/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create new or update an existing Tax mapping
         * @description Create new or update an existing Tax mapping
         */
        post: operations["    POST_TaxMapping_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/taxMapping/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_145"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/taxMapping/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List taxMappings matching a given criteria
         * @description List taxMappings matching a given criteria
         */
        get: operations["    GET_TaxMapping_listGetAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/taxMapping/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove an existing Tax mapping with a given id
         * @description Remove an existing Tax mapping with a given id
         */
        delete: operations["    DELETE_TaxMapping_{id}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/taxMapping/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search Tax mapping by matching a given criteria
         * @description Search Tax mapping by matching a given criteria
         */
        get: operations["    GET_TaxMapping_list"];
        put?: never;
        /**
         * Search for Tax mapping by matching a given criteria
         * @description Search for Tax mapping by matching a given criteria
         */
        post: operations["    POST_TaxMapping_list"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalogManagement/createOfferFromBOM": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create offer from BOM definition
         * @description Create offer from BOM definition
         */
        post: operations["    POST_Catalog_createOfferFromBOM"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalogManagement/productChargeTemplate/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or update product charge template
         * @description Create or update product charge template
         */
        post: operations["    POST_Catalog_productChargeTemplate_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalogManagement/productTemplate/createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or update product template
         * @description Create or update product template
         */
        post: operations["    POST_Catalog_productTemplate_createOrUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalogManagement/productChargeTemplate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update product charge template
         * @description Update product charge template
         */
        put: operations["    PUT_Catalog_productChargeTemplate"];
        /**
         * Create product charge template
         * @description Create product charge template
         */
        post: operations["    POST_Catalog_productChargeTemplate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalogManagement/createProductFromBPM": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create product from BPM definition
         * @description Create product from BPM definition
         */
        post: operations["    POST_Catalog_createProductFromBPM"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalogManagement/productTemplate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update product template
         * @description Update product template
         */
        put: operations["    PUT_Catalog_productTemplate"];
        /**
         * Create product template
         * @description Create product template
         */
        post: operations["    POST_Catalog_productTemplate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalogManagement/createServiceFromBSM": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create service from BSM definition
         * @description Create service from BSM definition
         */
        post: operations["    POST_Catalog_createServiceFromBSM"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalogManagement/productChargeTemplate/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable a Product charge template with a given code
         * @description Disable a Product charge template with a given code
         */
        post: operations["    POST_Catalog_productChargeTemplate_{code}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalogManagement/productTemplate/{code}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable a Product template with a given code
         * @description Disable a Product template with a given code
         */
        post: operations["    POST_Catalog_productTemplate_{code}_disable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalogManagement/productChargeTemplate/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Product charge template with a given code
         * @description Enable a Product charge template with a given code
         */
        post: operations["    POST_Catalog_productChargeTemplate_{code}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalogManagement/productTemplate/{code}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable a Product template with a given code
         * @description Enable a Product template with a given code
         */
        post: operations["    POST_Catalog_productTemplate_{code}_enable"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalogManagement/category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of categories
         * @description Get a list of categories
         */
        get: operations["    GET_Catalog_category"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalogManagement/productOffering": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of product offerings optionally filtering by some criteria
         * @description Get a list of product offerings optionally filtering by some criteria
         */
        get: operations["    GET_Catalog_productOffering"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalogManagement/productSpecification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of product specifications optionally filtering by some criteria
         * @description Get a list of product specifications optionally filtering by some criteria
         */
        get: operations["    GET_Catalog_productSpecification"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalogManagement/category/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a single category by its code
         * @description Get a single category by its code
         */
        get: operations["    GET_Catalog_category_{code}"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalogManagement/productChargeTemplate/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a single productChargeTemplate by its code
         * @description Get a single productChargeTemplate by its code
         */
        get: operations["    GET_Catalog_productChargeTemplate_{code}"];
        put?: never;
        post?: never;
        /**
         * Delete a single productChargeTemplate by its code
         * @description Delete a single productChargeTemplate by its code
         */
        delete: operations["    DELETE_Catalog_productChargeTemplate_{code}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalogManagement/productOffering/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get details of a single Product template and validity dates
         * @description Get details of a single Product template and validity dates. If no validity dates are provided, an Product template valid on a current date will be returned.
         */
        get: operations["    GET_Catalog_productOffering_{id}"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalogManagement/productSpecification/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get details of a single product
         * @description Get details of a single product
         */
        get: operations["    GET_Catalog_productSpecification_{id}"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalogManagement/productTemplate/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a single productTemplate by its code and validity dates
         * @description Get a single productTemplate by its code and validity dates. If no validity dates are provided, a product template valid on a current date will be deleted.
         */
        get: operations["    GET_Catalog_productTemplate_{code}"];
        put?: never;
        post?: never;
        /**
         * Delete a single productTemplate by its code and validity dates
         * @description Delete a single productTemplate by its code and validity dates. If no validity dates are provided, a product template valid on a current date will be deleted.
         */
        delete: operations["    DELETE_Catalog_productTemplate_{code}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalogManagement/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get version of application */
        get: operations["index_146"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalogManagement/productChargeTemplate/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets a productChargeTemplate list.
         * @description Gets a productChargeTemplate list.
         */
        get: operations["    GET_Catalog_productChargeTemplate_listGetAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalogManagement/productTemplate/listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets a productTemplates list.
         * @description Gets a productTemplates list.
         */
        get: operations["    GET_Catalog_productTemplate_listGetAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalogManagement/productChargeTemplate/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all productChargeTemplates
         * @description List all productChargeTemplates
         */
        get: operations["    GET_Catalog_productChargeTemplate_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/catalogManagement/productTemplate/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all product templates optionally filtering by code and validity dates
         * @description List all product templates optionally filtering by code and validity dates. If neither date is provided, validity dates will not be considered. If only validFrom is provided, a search will return products valid on a given date. If only validTo date is provided, a search will return products valid from today to a given date.
         */
        get: operations["    GET_Catalog_productTemplate_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/orderManagement/productOrder/{orderId}/applicableDueDateDelay": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Evaluate and return the dueDateDelayEL. It checks the EL in this order: Order, CustomerAccount, BillingCycle.
         * @description Evaluate and return the dueDateDelayEL. It checks the EL in this order: Order, CustomerAccount, BillingCycle.
         */
        get: operations["    GET_Order_{orderId}_applicableDueDateDelay"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/orderManagement/productOrder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of product orders optionaly filtered by some criteria
         * @description Get a list of product orders optionaly filtered by some criteria
         */
        get: operations["    GET_Order_search"];
        put?: never;
        /**
         * Place a new product order
         * @description Place a new product order
         */
        post: operations["    POST_Order_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/orderManagement/productOrder/{orderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get details of a single product order
         * @description Get details of a single product order
         */
        get: operations["    GET_Order_{orderId}"];
        put?: never;
        post?: never;
        /**
         * Delete a product order
         * @description Delete a product order
         */
        delete: operations["    DELETE_Order_{orderId}"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/orderManagement/productOrder/{orderId}/simpleDueDateDelay": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Updates the dueDateDelayEL of an Order.
         * @description Updates the dueDateDelayEL of an Order.
         */
        put: operations["    PUT_Order_{orderId}_simpleDueDateDelay"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/orderManagement/productOrder/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Modify partially a product order
         * @description Modify partially a product order
         */
        patch: operations["    PATCH_Order_{id}"];
        trace?: never;
    };
    "/api/rest/orderManagement/productOrder/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * validate a product order
         * @description validate a product order
         */
        get: operations["    GET_Order_validate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/quoteManagement/productQuote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of product quotes optionally filtered by some criteria */
        get: operations["findProductQuotes"];
        put?: never;
        /** Create a product quote */
        post: operations["createProductQuote"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/quoteManagement/productQuote/quoteItem": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a quote item */
        post: operations["createQuoteItem_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/quoteManagement/productQuote/quoteVersion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update a quote version */
        put: operations["updateQuoteVersion"];
        /** Create a quote version */
        post: operations["createQuoteVersion_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/quoteManagement/productQuote/{quoteCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a product quote by its code */
        get: operations["getProductQuote"];
        /** Modify a product quote */
        put: operations["updateProductQuote"];
        post?: never;
        /** Delete a product quote. */
        delete: operations["deleteProductQuote"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/quoteManagement/productQuote/quoteItem/{quoteItemCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Modify a quote item */
        put: operations["updateQuoteItem_1"];
        post?: never;
        /** Delete a quote item */
        delete: operations["deleteQuoteItem_1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/quoteManagement/productQuote/quoteVersion/{quoteCode}/{quoteVersion}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a quote version */
        delete: operations["deleteQuoteVersion_1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/quoteManagement/productQuote/placeOrder/{quoteCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Place an order based on a product quote */
        post: operations["placeOrder_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getApplicationVersion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ActionStatus: {
            /**
             * @description Tells whether the instance of this status object is ok or not
             * @example possible value are : SUCCESS, FAIL
             * @enum {string}
             */
            status: "SUCCESS" | "FAIL" | "WARNING";
            errorCode?: components["schemas"]["ApiErrorCodeEnum"];
            /** @description A detailed error message if applicable, can contain the entity id that was created */
            message: string;
            /**
             * Format: int64
             * @description The entity identifier after creation of an entity
             */
            entityId?: number;
            /** @description The entity code after creation of an entity */
            entityCode?: string;
            /**
             * Format: int32
             * @description Number of items/records affected by the action
             */
            nrAffected?: number;
        };
        /** @description error code */
        ApiErrorCodeEnum: Record<string, never>;
        BillingCycleDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            billingTemplateName?: string;
            billingTemplateNameEL?: string;
            /** Format: int32 */
            invoiceDateDelay?: number;
            invoiceDateDelayEL: string;
            /** Format: int32 */
            dueDateDelay?: number;
            dueDateDelayEL?: string;
            /** Format: int32 */
            invoiceDateProductionDelay?: number;
            invoiceDateProductionDelayEL?: string;
            lastTransactionDateDelayEL?: string;
            lastTransactionDateEL?: string;
            calendar: string;
            invoicingThreshold?: number;
            splitPerPaymentMethod?: boolean;
            invoiceTypeCode?: string;
            invoiceTypeEl?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
            /** @enum {string} */
            type?: "BILLINGACCOUNT" | "SUBSCRIPTION" | "ORDER";
            /** @enum {string} */
            referenceDate?: "TODAY" | "NEXT_INVOICE_DATE" | "LAST_TRANSACTION_DATE" | "END_DATE";
            scriptInstanceCode?: string;
            /** @enum {string} */
            checkThreshold?: "BEFORE_DISCOUNT" | "AFTER_DISCOUNT" | "POSITIVE_RT" | "POSITIVE_IL";
            collectionDateDelayEl?: string;
            computeDatesAtValidation?: boolean;
            thresholdPerEntity?: boolean;
            billingRunValidationScriptCode?: string;
            filters?: {
                [key: string]: Record<string, never>;
            };
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
            /** Format: int32 */
            lastTransactionDateDelay?: number;
            transactionDateDelayEL?: string;
        };
        CustomFieldDto: {
            code?: string;
            description?: string;
            /** @enum {string} */
            fieldType?: "STRING" | "DATE" | "LONG" | "DOUBLE" | "LIST" | "CHECKBOX_LIST" | "ENTITY" | "TEXT_AREA" | "CHILD_ENTITY" | "MULTI_VALUE" | "BOOLEAN" | "CUSTOM_TABLE_WRAPPER" | "URL";
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
            /** Format: date-time */
            valueDate?: string;
            /** Format: date-time */
            valuePeriodStartDate?: string;
            /** Format: date-time */
            valuePeriodEndDate?: string;
            /** Format: int32 */
            valuePeriodPriority?: number;
            stringValue?: string;
            /** Format: date-time */
            dateValue?: string;
            /** Format: int64 */
            longValue?: number;
            /** Format: double */
            doubleValue?: number;
            booleanValue?: boolean;
            mapValue?: {
                [key: string]: components["schemas"]["CustomFieldValueDto"];
            };
            entityReferenceValue?: components["schemas"]["EntityReferenceDto"];
            valueConverted?: Record<string, never>;
            /** @enum {string} */
            indexType?: "STORE_ONLY" | "INDEX" | "INDEX_NOT_ANALYZE";
            fileValue?: string;
            formattedValue?: components["schemas"]["CustomFieldFormattedValueDto"];
            urlReferenceValue?: components["schemas"]["UrlReferenceDto"];
            guiPosition?: string;
            customTableCode?: string;
            dataFilter?: string;
            fields?: string;
            empty?: boolean;
            value?: components["schemas"]["CustomFieldValueDto"][];
        };
        CustomFieldFormattedValueDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            singleValue?: string;
            listValue?: string[];
            mapValue?: {
                [key: string]: string;
            };
        };
        CustomFieldValueDto: {
            value?: Record<string, never>;
            empty?: boolean;
        };
        /** @description The custom fields */
        CustomFieldsDto: {
            customField?: components["schemas"]["CustomFieldDto"][];
            inheritedCustomField?: components["schemas"]["CustomFieldDto"][];
            empty?: boolean;
        };
        EntityReferenceDto: {
            classname?: string;
            code?: string;
            /** Format: int64 */
            id?: number;
            empty?: boolean;
        };
        LanguageDescriptionDto: {
            /** @description The language code */
            languageCode?: string;
            /** @description The description */
            description?: string;
        };
        UrlReferenceDto: {
            url?: string;
            regexp?: string;
            label?: string;
            /** Format: int32 */
            length?: number;
            empty?: boolean;
        };
        GetBillingCycleResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            billingCycle?: components["schemas"]["BillingCycleDto"];
        };
        BillingCyclesDto: {
            billingCycle?: components["schemas"]["BillingCycleDto"][];
        };
        BillingCyclesResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            billingCycles?: components["schemas"]["BillingCyclesDto"];
        };
        PagingAndFiltering: {
            /** @description Full text search filter. Mutually exclusive with filters attribute. fullTextFilter has priority */
            fullTextFilter?: string;
            /**
             * @description Search filters (key = Filter key, value = search pattern or value).
             * @example <ul>
             *     <li>invoice number equals '1578AU': Filter key: invoiceNumber. Filter value: 1578AU</li>
             *     <li>invoice number is not '1578AU': Filter key: ne invoiceNumber. Filter value: 1578AU</li>
             *     <li>invoice number is null: Filter key: invoiceNumber. Filter value: IS_NULL</li>
             *     <li>invoice number is not empty: Filter key: invoiceNumber. Filter value: IS_NOT_NULL</li>
             *     <li>Invoice date is between 2017-05-01 and 2017-06-01: Filter key: fromRange invoiceDate. Filter value: 2017-05-01 Filter key: toRange invoiceDate. Filter value:
             *     2017-06-01</li>
             *     <li>Date is between creation and update dates: Filter key: minmaxRange audit.created audit.updated. Filter value: 2017-05-25</li>
             *     <li>invoice number is any of 158AU, 159KU or 189LL: Filter key: inList invoiceNumber. Filter value: 158AU,159KU,189LL</li>
             *     <li>any of param1, param2 or param3 fields contains 'energy': Filter key: wildcardOr param1 param2 param3. Filter value: energy</li>
             *     <li>any of param1, param2 or param3 fields start with 'energy': Filter key: likeCriterias param1 param2 param3. Filter value: *energy</li>
             *     <li>any of param1, param2 or param3 fields is 'energy': Filter key: likeCriterias param1 param2 param3. Filter value: energy</li>
             *     </ul>
             */
            filters?: {
                [key: string]: Record<string, never>;
            };
            /** @description Data retrieval options/fieldnames separated by a comma */
            fields?: string;
            /**
             * Format: int32
             * @description Pagination - from record number
             */
            offset?: number;
            /**
             * Format: int32
             * @description Pagination - number of items to retrieve
             */
            limit?: number;
            /** @description Sorting - field to sort by - a field from a main entity being searched. See Data model for a list of fields */
            sortBy?: string;
            /**
             * @description Sorting - sort ordee
             * @enum {string}
             */
            sortOrder?: "ASCENDING" | "DESCENDING";
            multiSortOrder?: string;
            /** Format: int32 */
            totalNumberOfRecords?: number;
            /** Format: int32 */
            loadReferenceDepth?: number;
        };
        /** @description List of intervals */
        CalendarDateIntervalDto: {
            /**
             * Format: int32
             * @description The interval begin
             */
            intervalBegin?: number;
            /**
             * Format: int32
             * @description The interval end
             */
            intervalEnd?: number;
        };
        /** @description calendar associated to subscription renewal */
        CalendarDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            /**
             * @description calendar type
             * @example possible value are : YEARLY, DAILY, PERIOD, INTERVAL, INTERSECT, UNION, APPEND, BANKING, FIXED
             * @enum {string}
             */
            calendarType: "YEARLY" | "DAILY" | "PERIOD" | "INTERVAL" | "INTERSECT" | "UNION" | "APPEND" | "BANKING" | "FIXED";
            /** @description list of fixed date */
            fixedDates?: string[];
            /** @description list of the day */
            days?: components["schemas"]["DayInYearDto"][];
            /** @description list of the hour */
            hours?: components["schemas"]["HourInDayDto"][];
            /**
             * Format: int32
             * @description Period length
             */
            periodLength?: number;
            /**
             * @description Period measurement unit
             * @example MONTH, DAY_OF_MONTH, HOUR_OF_DAY, MINUTE, SECOND
             * @enum {string}
             */
            periodUnit?: "MONTH" | "DAY_OF_MONTH" | "HOUR_OF_DAY" | "MINUTE" | "SECOND";
            /**
             * Format: int32
             * @description Number of periods
             */
            nbPeriods?: number;
            /** @description Code of the first calendar to intersect/union */
            joinCalendar1Code?: string;
            /** @description Code of the second calendar to intersect/union */
            joinCalendar2Code?: string;
            /**
             * @description Interval type
             * @example possible value are : DAY, HOUR, WDAY
             * @enum {string}
             */
            intervalType?: "DAY" | "HOUR" | "WDAY";
            /** @description List of intervals */
            intervals?: components["schemas"]["CalendarDateIntervalDto"][];
            /**
             * Format: int32
             * @description The weekend begin
             */
            weekendBegin?: number;
            /** Format: int32 */
            weekendEnd?: number;
            /**
             * Format: date-time
             * @description The end dat
             */
            endDate?: string;
            /**
             * Format: date-time
             * @description The start date
             */
            startDate?: string;
            /** @description Calendar initialization date - expression to determine a value for calendar initialization date */
            initDateEL?: string;
            /** @description list of the days of holiday */
            holidays?: components["schemas"]["CalendarHolidayDto"][];
            /** @description lsit of language description */
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
        };
        /** @description list of the days of holiday */
        CalendarHolidayDto: {
            /**
             * Format: int32
             * @description The holiday begin
             */
            holidayBegin?: number;
            /**
             * Format: int32
             * @description The holiday end
             */
            holidayEnd?: number;
        };
        /** @description list of the day */
        DayInYearDto: {
            /**
             * Format: int32
             * @description day in the year
             */
            day?: number;
            /**
             * @description month of the year
             * @example possible value are : JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER
             * @enum {string}
             */
            month?: "JANUARY" | "FEBRUARY" | "MARCH" | "APRIL" | "MAY" | "JUNE" | "JULY" | "AUGUST" | "SEPTEMBER" | "OCTOBER" | "NOVEMBER" | "DECEMBER";
        };
        /** @description list of the hour */
        HourInDayDto: {
            /**
             * Format: int32
             * @description hour
             */
            hour?: number;
            /**
             * Format: int32
             * @description minute of the hours
             */
            min?: number;
        };
        GetCalendarResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            calendar?: components["schemas"]["CalendarDto"];
        };
        BankingDateStatusDto: {
            /** Format: date-time */
            date?: string;
            isWorkingDate?: boolean;
            workingDate?: boolean;
        };
        BankingDateStatusResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            bankingDateStatus?: components["schemas"]["BankingDateStatusDto"];
        };
        CalendarsDto: {
            calendar?: components["schemas"]["CalendarDto"][];
        };
        ListCalendarResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            calendars?: components["schemas"]["CalendarsDto"];
        };
        GetConfigurationResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            properties?: components["schemas"]["PropertyDto"][];
        };
        PropertyDto: {
            key?: string;
            value?: string;
        };
        ConfigurationDto: {
            property?: string;
            value?: string;
        };
        PropertiesDto: {
            properties?: components["schemas"]["PropertyDto"][];
        };
        CountryIsoDto: {
            countryCode?: string;
            description?: string;
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
            currencyCode: string;
            languageCode: string;
        };
        GetCountryIsoResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            country?: components["schemas"]["CountryIsoDto"];
        };
        GetCountriesIsoResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            countries?: components["schemas"]["CountryIsoDto"][];
        };
        CountryDto: {
            countryCode?: string;
            name?: string;
            currencyCode: string;
            languageCode?: string;
            disabled?: boolean;
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
        };
        GetTradingCountryResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            country?: components["schemas"]["CountryDto"];
        };
        TradingCountriesDto: {
            country?: components["schemas"]["TradingCountryDto"][];
        };
        TradingCountriesResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            tradingCountries?: components["schemas"]["TradingCountriesDto"];
        };
        TradingCountryDto: {
            countryCode?: string;
            description?: string;
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
            currencyCode: string;
            languageCode: string;
        };
        CurrencyIsoDto: {
            code?: string;
            description?: string;
        };
        GetCurrencyIsoResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            currency?: components["schemas"]["CurrencyIsoDto"];
        };
        GetCurrenciesIsoResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            currencies?: components["schemas"]["CurrencyIsoDto"][];
        };
        ExchangeRateDto: {
            /** Format: date-time */
            fromDate?: string;
            exchangeRate?: number;
        };
        /** @description The Order attached to this invoice */
        Resource: {
            links?: {
                title?: string;
                uriBuilder?: Record<string, never>;
                rel?: string;
                rels?: string[];
                params?: {
                    [key: string]: string;
                };
                /** Format: uri */
                uri?: string;
                type?: string;
            }[];
            code?: string;
            /** Format: int64 */
            id?: number;
        };
        CurrencyDto: {
            /** Format: int64 */
            id?: number;
            code?: string;
            description?: string;
            disabled?: boolean;
            prCurrencyToThis?: number;
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
            symbol?: string;
            /** Format: int32 */
            decimalPlaces?: number;
        };
        GetTradingCurrencyResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            currency?: components["schemas"]["CurrencyDto"];
        };
        FileUploadForm: {
            data?: string[];
            filename?: string;
            fileFormat?: string;
        };
        CurrenciesDto: {
            currency?: components["schemas"]["CurrencyDto"][];
        };
        TradingCurrenciesResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            tradingCurrencies?: components["schemas"]["CurrenciesDto"];
        };
        FilterDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            shared?: boolean;
            inputXml?: string;
            pollingQuery?: string;
            entityClass?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
        };
        GetFilterResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            filter?: components["schemas"]["FilterDto"];
        };
        GenericCodeDto: {
            formatEL?: string;
            entityClass?: string;
            prefixOverride?: string;
            sequence?: components["schemas"]["SequenceDto"];
        };
        SequenceDto: {
            prefixEL?: string;
            invoiceSequenceCode?: string;
            /** Format: int32 */
            sequenceSize?: number;
            /** Format: int64 */
            currentInvoiceNb?: number;
            sequencePattern?: string;
            /** @enum {string} */
            sequenceType?: "RUM" | "CUSTOMER_NO" | "SEQUENCE" | "NUMERIC" | "ALPHA_UP" | "UUID" | "REGEXP";
        };
        GetGenericCodeResponseDto: {
            genericCodeDto?: components["schemas"]["GenericCodeDto"];
        };
        GenericCodeResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            generatedCode?: string;
            sequenceType?: string;
            pattern?: string;
        };
        InvoiceCategoryDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
            occTemplateCode: string;
            occTemplateNegativeCode?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
            /** Format: int32 */
            sortIndex?: number;
        };
        GetInvoiceCategoryResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            invoiceCategory?: components["schemas"]["InvoiceCategoryDto"];
        };
        InvoiceCategoriesDto: {
            invoiceCategory?: components["schemas"]["InvoiceCategoryDto"][];
        };
        InvoiceCategoryResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            invoiceCategories?: components["schemas"]["InvoiceCategoriesDto"];
        };
        InvoiceSequenceDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            /** Format: int32 */
            sequenceSize?: number;
            /** Format: int64 */
            currentInvoiceNb?: number;
            sequencePattern?: string;
            /** @enum {string} */
            sequenceType?: "RUM" | "CUSTOMER_NO" | "SEQUENCE" | "NUMERIC" | "ALPHA_UP" | "UUID" | "REGEXP";
        };
        GetInvoiceSequenceResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            invoiceSequenceDto?: components["schemas"]["InvoiceSequenceDto"];
        };
        GetInvoiceSequencesResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            invoiceSequencesDto?: components["schemas"]["InvoiceSequencesDto"];
        };
        InvoiceSequencesDto: {
            invoiceSequences?: components["schemas"]["InvoiceSequenceDto"][];
        };
        InvoiceSubCategoryDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            invoiceCategory: string;
            accountingCode: string;
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
            customFields?: components["schemas"]["CustomFieldsDto"];
            occTemplateCode: string;
            occTemplateNegativeCode?: string;
            /** Format: int32 */
            sortIndex?: number;
        };
        GetInvoiceSubCategoryResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            invoiceSubCategory?: components["schemas"]["InvoiceSubCategoryDto"];
        };
        InvoiceSubCategoriesDto: {
            invoiceSubCategory?: components["schemas"]["InvoiceSubCategoryDto"][];
        };
        InvoiceSubCategoryResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            invoiceSubCategories?: components["schemas"]["InvoiceSubCategoriesDto"];
        };
        InvoiceTypeDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            occTemplateCode: string;
            occTemplateNegativeCode?: string;
            occTemplateCodeEl?: string;
            occTemplateNegativeCodeEl?: string;
            customInvoiceXmlScriptInstanceCode?: string;
            sequenceDto?: components["schemas"]["SequenceDto"];
            invoiceValidationScriptCode?: string;
            sellerSequences?: {
                [key: string]: components["schemas"]["SequenceDto"];
            };
            appliesTo?: string[];
            matchingAuto?: boolean;
            invoiceAccountable?: boolean;
            billingTemplateName?: string;
            pdfFilenameEL?: string;
            xmlFilenameEL?: string;
            billingTemplateNameEL?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
            useSelfSequence?: boolean;
            mailingType?: string;
            emailTemplateCode?: string;
            /** @description Exclude from Aged Trial Balance */
            excludeFromAgedTrialBalance?: boolean;
        };
        GetInvoiceTypeResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            invoiceTypeDto?: components["schemas"]["InvoiceTypeDto"];
        };
        GetInvoiceTypesResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            invoiceTypesDto?: components["schemas"]["InvoiceTypesDto"];
        };
        InvoiceTypesDto: {
            invoiceTypes?: components["schemas"]["InvoiceTypeDto"][];
        };
        LanguageIsoDto: {
            code?: string;
            description?: string;
        };
        GetLanguageIsoResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            language?: components["schemas"]["LanguageIsoDto"];
        };
        GetLanguagesIsoResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            languages?: components["schemas"]["LanguageIsoDto"][];
        };
        LanguageDto: {
            code?: string;
            description?: string;
            disabled?: boolean;
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
        };
        GetTradingLanguageResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            language?: components["schemas"]["LanguageDto"];
        };
        LanguagesDto: {
            language?: components["schemas"]["LanguageDto"][];
        };
        TradingLanguagesResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            tradingLanguages?: components["schemas"]["LanguagesDto"];
        };
        ImportFileTypeDto: {
            /** @description Name of the uploaded file */
            fileName: string;
            /**
             * @description Type of the uploaded file
             * @enum {string}
             */
            fileType: "CUSTOMER" | "CUSTOMER_ACCOUNT" | "PAYMENT_METHOD" | "BILLING_ACCOUNT" | "USER_ACCOUNT" | "SUBSCRIPTION" | "SERVICE_INSTANCE" | "ATTRIBUTE_INSTANCE" | "ACCESS_POINT" | "COUNTER" | "UNKNOWN";
        };
        FileImportForm: {
            data?: string[];
            filename?: string;
            files?: string;
        };
        AccountingSchemeDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            /** @description a long description */
            longDescription?: string;
            /** @description i18n a long description */
            longDescriptionsTranslated?: components["schemas"]["LanguageDescriptionDto"][];
            /** @description the script code */
            scriptCode: string;
        };
        GetOccTemplateResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            occTemplate?: components["schemas"]["OccTemplateDto"];
        };
        OccTemplateDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            accountingCode: string;
            accountCode?: string;
            /** @enum {string} */
            occCategory: "DEBIT" | "CREDIT";
            accountCodeClientSide?: string;
            /** @description The journal code */
            journalCode?: string;
            accountingScheme?: components["schemas"]["AccountingSchemeDto"];
            /** @description contract accounting code */
            contractAccountingCode?: string;
            /** @description contra Accounting Code 2 */
            contraAccountingCode2?: string;
        };
        GetOccTemplatesResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            occTemplates?: components["schemas"]["OccTemplatesDto"];
        };
        OccTemplatesDto: {
            occTemplate?: components["schemas"]["OccTemplateDto"][];
        };
        PdfInvoiceResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            pdfInvoice?: string[];
        };
        /** @description Bank account information */
        BankCoordinatesDto: {
            /** @description The bank code */
            bankCode: string;
            /** @description The branch code */
            branchCode: string;
            /** @description The account number */
            accountNumber: string;
            /** @description The key */
            key: string;
            /** @description The iban */
            iban: string;
            /** @description The bic */
            bic: string;
            /** @description The account owner */
            accountOwner: string;
            /** @description The bank name */
            bankName: string;
            /** @description The bank id */
            bankId?: string;
            /** @description The issuer number */
            issuerNumber?: string;
            /** @description The issuer name */
            issuerName?: string;
            /** @description The ics */
            ics?: string;
            empty?: boolean;
        };
        InvoiceConfigurationDto: {
            displaySubscriptions?: boolean;
            displayServices?: boolean;
            displayOffers?: boolean;
            displayEdrs?: boolean;
            displayProvider?: boolean;
            displayCfAsXML?: boolean;
            displayPricePlans?: boolean;
            displayDetail?: boolean;
            displayChargesPeriods?: boolean;
            displayBillingCycle?: boolean;
            displayFreeTransacInInvoice?: boolean;
            displayOrders?: boolean;
            /** Format: int64 */
            currentInvoiceNb?: number;
            displayWalletOperations?: boolean;
            defaultInvoiceSubcategoryCode?: string;
            defaultGenericArticleCode?: string;
            defaultDiscountArticleCode?: string;
            defaultAdvancedPaymentArticleCode?: string;
            defaultInvoiceMinimumArticleCode?: string;
            displayUserAccountHierarchy?: boolean;
            displayTaxDetails?: boolean;
        };
        PaymentPlanPolicyDto: {
            /** Format: int32 */
            defaultInstallmentCount?: number;
            /** Format: int32 */
            maxPaymentPlanDuration?: number;
            /** Format: int32 */
            defaultFeePerInstallmentPlan?: number;
            /** Format: int32 */
            installmentAmountRounding?: number;
            /** Format: int32 */
            defaultInterestRate?: number;
            minAllowedReceivableAmount?: number;
            maxAllowedReceivableAmount?: number;
            minInstallmentAmount?: number;
            theresHoldForApproval?: number;
            splitEvenly?: boolean;
            allowCustomInstallmentPlan?: boolean;
            addInterestRate?: boolean;
            addInstallmentFee?: boolean;
            defaultBlockPayments?: boolean;
            requireInternalApproval?: boolean;
            /** @enum {string} */
            defaultRecurrenceUnit?: "MONTH" | "DAY";
            /** @enum {string} */
            actionOnRemainingAmount?: "FIRST" | "LAST" | "ADDITIONAL";
            /** @enum {string} */
            clearingPriority?: "NEWEST" | "OLDEST" | "SMALLEST" | "BIGGEST";
            allowedPaymentMethods?: ("CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH")[];
            /** Format: int64 */
            dunningDefaultPauseReason?: number;
            /** @enum {string} */
            defaultStartingDateOfPlan?: "TODAY" | "LAST_DAY_OF_CURRENT_MONTH" | "FIRST_DAY_OF_NEXT_MONTH";
            allowedCreditCategories?: number[];
        };
        ProviderDto: {
            code?: string;
            description?: string;
            currency?: string;
            country?: string;
            language?: string;
            multiCurrency?: boolean;
            multiCountry?: boolean;
            multiLanguage?: boolean;
            userAccount?: string;
            enterprise?: boolean;
            levelDuplication?: boolean;
            /** Format: int32 */
            rounding?: number;
            /** @enum {string} */
            roundingMode?: "NEAREST" | "DOWN" | "UP" | "HALF_EVEN";
            /** Format: int32 */
            invoiceRounding?: number;
            /** @enum {string} */
            invoiceRoundingMode?: "NEAREST" | "DOWN" | "UP" | "HALF_EVEN";
            /** Format: int64 */
            prepaidReservationExpirationDelayinMillisec?: number;
            discountAccountingCode?: string;
            email?: string;
            bankCoordinates?: components["schemas"]["BankCoordinatesDto"];
            paymentPlanPolicy?: components["schemas"]["PaymentPlanPolicyDto"];
            recognizeRevenue?: boolean;
            invoiceConfiguration?: components["schemas"]["InvoiceConfigurationDto"];
            customFields?: components["schemas"]["CustomFieldsDto"];
            cdrDeduplicationKeyEL?: string;
        };
        GetProviderResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            provider?: components["schemas"]["ProviderDto"];
        };
        CreditCategoriesDto: {
            creditCategory?: components["schemas"]["CreditCategoryDto"][];
        };
        CreditCategoryDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
        };
        GetCustomerAccountConfigurationResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paymentMethods?: ("CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH")[];
            creditCategories?: components["schemas"]["CreditCategoriesDto"];
        };
        CustomerBrandDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
        };
        CustomerBrandsDto: {
            customerBrand?: components["schemas"]["CustomerBrandDto"][];
        };
        CustomerCategoriesDto: {
            customerCategory?: components["schemas"]["CustomerCategoryDto"][];
        };
        CustomerCategoryDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            /** @description The exonerated from taxes */
            exoneratedFromTaxes?: boolean;
            /** @description The exoneration tax el */
            exonerationTaxEl?: string;
            /** @description The exoneration reason */
            exonerationReason?: string;
            /** @description The accounting code */
            accountingCode: string;
            /** @description Account tax category code */
            taxCategoryCode?: string;
            /** @description Expression to determine tax category code */
            taxCategoryEl?: string;
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
        };
        GetCustomerConfigurationResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            customerBrands?: components["schemas"]["CustomerBrandsDto"];
            customerCategories?: components["schemas"]["CustomerCategoriesDto"];
            titles?: components["schemas"]["TitlesDto"];
        };
        /** @description The legal entity type */
        TitleDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            /**
             * @description indicate if the title is a  company
             * @default false
             */
            isCompany: boolean;
            /** @description list of the language description */
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
        };
        TitlesDto: {
            title?: components["schemas"]["TitleDto"][];
        };
        GetInvoicingConfigurationResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            calendars?: components["schemas"]["CalendarsDto"];
            taxes?: components["schemas"]["TaxesDto"];
            invoiceCategories?: components["schemas"]["InvoiceCategoriesDto"];
            invoiceSubCategories?: components["schemas"]["InvoiceSubCategoriesDto"];
            billingCycles?: components["schemas"]["BillingCyclesDto"];
            terminationReasons?: components["schemas"]["TerminationReasonsDto"];
        };
        /** @description Tax applied */
        TaxDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            percent?: number;
            accountingCode?: string;
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
            customFields?: components["schemas"]["CustomFieldsDto"];
            composite?: boolean;
            subTaxes?: components["schemas"]["TaxDto"][];
        };
        TaxesDto: {
            tax?: components["schemas"]["TaxDto"][];
        };
        TerminationReasonDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            applyAgreement?: boolean;
            invoiceAgreementImmediately?: boolean;
            applyReimbursment?: boolean;
            applyTerminationCharges?: boolean;
            /** @enum {string} */
            overrideProrata?: "NO_OVERRIDE" | "PRORATA" | "NO_PRORATA";
            reimburseOneshots?: boolean;
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
        };
        TerminationReasonsDto: {
            terminationReason?: components["schemas"]["TerminationReasonDto"][];
        };
        CountriesDto: {
            country?: components["schemas"]["CountryDto"][];
        };
        GetTradingConfigurationResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            countries?: components["schemas"]["CountriesDto"];
            currencies?: components["schemas"]["CurrenciesDto"];
            languages?: components["schemas"]["LanguagesDto"];
        };
        ProvidersDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            providers?: components["schemas"]["ProviderDto"][];
        };
        QueryResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            result?: string;
        };
        RoleDto: {
            /** @description the name of the role */
            name: string;
            /** @description short description of the role */
            description?: string;
            /** @description roles attached to this role */
            roles?: components["schemas"]["RoleDto"][];
            /** @description list of the secured entities */
            securedEntities?: components["schemas"]["SecuredEntityDto"][];
            /** @description uuid set automatically */
            uuid?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
            /** @description replicate in KC */
            replicateInKc?: boolean;
        };
        /** @description list of secured entities associated to the user */
        SecuredEntityDto: {
            /**
             * Format: int64
             * @description The entity id
             */
            entityId: number;
            /** @description The entity code */
            entityCode: string;
            /** @description The entity class (a simple name) */
            entityClass: string;
            /**
             * @description Allowed action to perform on the entity
             * @enum {string}
             */
            permission?: "READ" | "UPDATE" | "DELETE";
            /**
             * @description indicate of the entity is disabled
             * @default false
             */
            disabled: boolean;
        };
        GetRoleResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            roleDto?: components["schemas"]["RoleDto"];
        };
        RolesDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            roles?: components["schemas"]["RoleDto"][];
        };
        ScriptInstanceErrorDto: {
            /** Format: int64 */
            lineNumber?: number;
            /** Format: int64 */
            columnNumber?: number;
            message: string;
        };
        ScriptInstanceReponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            compilationErrors?: components["schemas"]["ScriptInstanceErrorDto"][];
        };
        ScriptInstanceDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            /** @enum {string} */
            type?: "JAVA" | "JAVA_CLASS";
            reuse?: boolean;
            script: string;
            executionRoles?: string[];
            sourcingRoles?: string[];
            scriptInstanceCategoryCode?: string;
            /** @description list of the language description */
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
            /** @description list of the script parameters */
            scriptParameters?: components["schemas"]["ScriptParameterDto"][];
            codeOnly?: boolean;
        };
        /** @description list of the script parameters */
        ScriptParameterDto: {
            /** @description The class name */
            className?: string;
            /** @description The default value */
            defaultValue?: string;
            /** @description Field mandatory */
            mandatory?: boolean;
            /** @description The allowed values */
            allowedValues?: string;
            /** @description The values separator */
            valuesSeparator?: string;
            /** @description Field collection */
            collection?: boolean;
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
        };
        GetScriptInstanceResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            scriptInstance?: components["schemas"]["ScriptInstanceDto"];
        };
        AccessDto: {
            /** @description code of the access */
            code?: string;
            /** @description code of the subscription */
            subscription: string;
            /**
             * Format: date-time
             * @description code of existing
             */
            subscriptionValidityDate?: string;
            /**
             * Format: date-time
             * @description start date of the access
             */
            startDate?: string;
            /**
             * Format: date-time
             * @description end date of the access
             */
            endDate?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
            disabled?: boolean;
            /** Format: date-time */
            subscriptionValidity?: string;
        };
        AccessesDto: {
            access?: components["schemas"]["AccessDto"][];
        };
        AccountOperationDto: {
            /**
             * Format: int64
             * @description The id of account operation
             */
            id?: number;
            /**
             * Format: date-time
             * @description The due date
             */
            dueDate?: string;
            /** @description The type */
            type?: string;
            /**
             * Format: date-time
             * @description he transaction date
             */
            transactionDate?: string;
            /**
             * @description The transaction category
             * @example possible value are : DEBIT, CREDIT
             * @enum {string}
             */
            transactionCategory?: "DEBIT" | "CREDIT";
            /** @description The reference */
            reference?: string;
            /**
             * @deprecated
             * @description The account code
             */
            accountCode?: string;
            /** @description The accounting code */
            accountingCode?: string;
            /**
             * @deprecated
             * @description The account code client side
             */
            accountCodeClientSide?: string;
            /** @description The amount */
            amount?: number;
            /** @description The amount without tax */
            amountWithoutTax?: number;
            /** @description The tax amount */
            taxAmount?: number;
            /** @description The matching amount */
            matchingAmount?: number;
            /** @description The un matching amount */
            unMatchingAmount?: number;
            /**
             * @description The matching status
             * @example possible value are: O, L, P, C, I, R
             * @enum {string}
             */
            matchingStatus?: "O" | "L" | "P" | "C" | "I" | "R";
            /** @description The occ code */
            code?: string;
            /** @description The occ description */
            description?: string;
            /** @description The customer account */
            customerAccount?: string;
            /** @description The excluded from dunning */
            excludedFromDunning?: boolean;
            /**
             * @description The order number
             * @example ORDER_1|ORDER_2|ORDER_3
             */
            orderNumber?: string;
            matchingAmounts?: components["schemas"]["MatchingAmountsDto"];
            otherCreditAndCharge?: components["schemas"]["OtherCreditAndChargeDto"];
            recordedInvoice?: components["schemas"]["RecordedInvoiceDto"];
            rejectedPayment?: components["schemas"]["RejectedPaymentDto"];
            /** @description The bank lot */
            bankLot?: string;
            /** @description The bank reference */
            bankReference?: string;
            /**
             * Format: date-time
             * @description The bank collection date
             */
            bankCollectionDate?: string;
            /**
             * Format: date-time
             * @description The deposit date
             */
            depositDate?: string;
            /** @description The payment method */
            paymentMethod?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
            /** @description The payment info */
            paymentInfo?: string;
            /** @description bank code */
            paymentInfo1?: string;
            /** @description code guichet */
            paymentInfo2?: string;
            /** @description Num compte */
            paymentInfo3?: string;
            /** @description RIB */
            paymentInfo4?: string;
            /** @description bankName */
            paymentInfo5?: string;
            /** @description bic */
            paymentInfo6?: string;
            /** @description The billing account name */
            billingAccountName?: string;
            /**
             * Format: date-time
             * @description A collection date
             */
            collectionDate?: string;
            /** @description The journal code */
            journalCode?: string;
            /**
             * @description Account operation status
             * @default POSTED
             * @example possible value are : POSTED, REJECTED, EXPORTED
             * @enum {string}
             */
            status: "POSTED" | "REJECTED" | "EXPORTED" | "EXPORT_FAILED";
            /**
             * @description Account operation rejection reason
             * @example possible value are : REJECTED, FORCED, CLOSED_PERIOD
             * @enum {string}
             */
            reason?: "REJECTED" | "FORCED" | "CLOSED_PERIOD";
            /** @description Accounting export file */
            accountingExportFile?: string;
            /**
             * Format: date-time
             * @description Accounting date
             */
            accountingDate?: string;
        };
        /** @description The list ao paid */
        AccountOperationsDto: {
            accountOperation?: components["schemas"]["AccountOperationDto"][];
        };
        /** @description additional detail */
        AdditionalDetailsDto: {
            /** @description name of the company */
            companyName?: string;
            /** @description position */
            position?: string;
            /** @description instant messenger */
            instantMessengers?: string;
        };
        AddressDto: {
            /** @description First address */
            address1?: string;
            /** @description Second address */
            address2?: string;
            /** @description Third address */
            address3?: string;
            /** @description forth address */
            address4?: string;
            /** @description fifth address */
            address5?: string;
            /** @description The zip code */
            zipCode?: string;
            /** @description The city */
            city?: string;
            /** @description The country */
            country?: string;
            /** @description The state */
            state?: string;
        };
        /** @description A list of entities (CustomerCategory, Offer, Product, Article). */
        ApplicableEntityDto: {
            /** @description code of the entity applicable */
            code?: string;
            /** @description name of the class applicable */
            entityClass?: string;
        };
        AttributeInstanceDto: {
            attributeCode?: string;
            /** Format: int64 */
            parentAttributeValueId?: number;
            assignedAttributeValueIds?: number[];
            stringValue?: string;
            /** Format: date-time */
            dateValue?: string;
            /** Format: double */
            doubleValue?: number;
            customFieldDto?: components["schemas"]["CustomFieldsDto"];
            booleanValue?: boolean;
        };
        BillingAccountDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            /** @description The external ref 1 */
            externalRef1?: string;
            /** @description The external ref 2 */
            externalRef2?: string;
            name?: components["schemas"]["NameDto"];
            address?: components["schemas"]["AddressDto"];
            /** @description The job title */
            jobTitle?: string;
            businessAccountModel?: components["schemas"]["BusinessEntityDto"];
            customFields?: components["schemas"]["CustomFieldsDto"];
            loaded?: boolean;
            /** @description The vat no */
            vatNo?: string;
            /** @description The registration no */
            registrationNo?: string;
            contactInformation?: components["schemas"]["ContactInformationDto"];
            /** @description Expression to determine minimum amount value */
            minimumAmountEl?: string;
            /** @description Expression to determine rated transaction description to reach minimum amount value */
            minimumLabelEl?: string;
            /** @description The billing account code to be used when calculating the min amount billable for Customer and CA */
            minimumTargetAccount?: string;
            /** @description Expression to determine minimum amount value - for Spark */
            minimumAmountElSpark?: string;
            /** @description Expression to determine rated transaction description to reach minimum amount value - for Spark */
            minimumLabelElSpark?: string;
            /** @description Corresponding to minimum one shot charge template code */
            minimumChargeTemplate?: string;
            /** @description indicate if this is a company */
            isCompany?: boolean;
            legalEntityType?: components["schemas"]["TitleDto"];
            /** @description The customer account */
            customerAccount: string;
            /** @description The billing cycle */
            billingCycle: string;
            /** @description The country */
            country: string;
            /** @description The trading currency */
            tradingCurrency?: string;
            /** @description The language */
            language: string;
            /**
             * Format: date-time
             * @description The next invoice date
             */
            nextInvoiceDate?: string;
            /**
             * Format: date-time
             * @description The subscription date
             */
            subscriptionDate?: string;
            /**
             * Format: date-time
             * @description The termination date
             */
            terminationDate?: string;
            /** @description The electronic billing */
            electronicBilling?: boolean;
            /**
             * @description The status of billing account
             * @example possible value are : ACTIVE, CANCELED, TERMINATED, CLOSED
             * @enum {string}
             */
            status?: "ACTIVE" | "CANCELED" | "TERMINATED" | "CLOSED";
            /**
             * Format: date-time
             * @description The status date, it set automatically when the status was changed
             */
            statusDate?: string;
            /** @description The termination reason */
            terminationReason?: string;
            /** @description The email */
            email?: string;
            /** @description list of the invoice */
            invoices?: components["schemas"]["InvoiceDto"][];
            /** @description The invoicing threshold */
            invoicingThreshold?: number;
            /** @description The phone */
            phone?: string;
            /** @description Minimum Invoice SubCategory */
            minimumInvoiceSubCategory?: string;
            /**
             * @description Field was deprecated in 4.6 version. Use 'paymentMethods' field on CustomerAccount entity instead
             * @enum {string}
             */
            paymentMethodType?: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
            bankCoordinates?: components["schemas"]["BankCoordinatesDto"];
            /** @description Field was deprecated in 4.6 version. Use custom fields instead */
            paymentTerms?: string;
            userAccounts?: components["schemas"]["UserAccountsDto"];
            /** @description List of discount plans. Use in instantiating a discount plan instance */
            discountPlansForInstantiation?: components["schemas"]["DiscountPlanDto"][];
            /** @description List of discount plans to be disassociated in a BillingAccount */
            discountPlansForTermination?: string[];
            /**
             * @description Use to return the active discount plans for this entity
             * @example discountPlanInstance : []
             */
            discountPlanInstances?: components["schemas"]["DiscountPlanInstanceDto"][];
            /** @description Mailing type */
            mailingType?: string;
            /** @description Email Template code */
            emailTemplate?: string;
            /**
             * @description list of emails separated by comma
             * @example example1@example.com,example2@example.com
             */
            ccedEmails?: string;
            /** @description Account tax category code - overrides the value from a customer category */
            taxCategoryCode?: string;
            /**
             * @description The option on how to check the threshold
             * @example possible value are: BEFORE_DISCOUNT, AFTER_DISCOUNT, POSITIVE_RT, POSITIVE_IL
             * @enum {string}
             */
            checkThreshold?: "BEFORE_DISCOUNT" | "AFTER_DISCOUNT" | "POSITIVE_RT" | "POSITIVE_IL";
            /** @description List of GDPR related to billing account */
            infoGdpr?: components["schemas"]["GDPRInfoDto"][];
            paymentMethod?: components["schemas"]["PaymentMethodDto"];
            /** @description check the threshold per entity/invoice for BA */
            thresholdPerEntity?: boolean;
            /** @description The primary contact */
            primaryContact?: string;
            /** @description list of the code of tags */
            tagCodes?: string[];
        };
        BillingAccountsDto: {
            billingAccount?: components["schemas"]["BillingAccountDto"][];
        };
        BusinessEntityDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
        };
        /** @description The category invoice aggregates */
        CategoryInvoiceAgregateDto: {
            /** @description The category invoice code */
            categoryInvoiceCode: string;
            /** @description The description */
            description?: string;
            /** @description The user account code */
            userAccountCode?: string;
            /**
             * Format: int32
             * @description The item number
             */
            itemNumber?: number;
            /** @description The amount without tax */
            amountWithoutTax?: number;
            /** @description The amount tax */
            amountTax?: number;
            /** @description The amount with tax */
            amountWithTax?: number;
            /** @description List of Sub category invoice aggregates */
            listSubCategoryInvoiceAgregateDto: components["schemas"]["SubCategoryInvoiceAgregateDto"][];
            /** @description List of Discount aggregates */
            discountAggregates?: components["schemas"]["DiscountInvoiceAggregateDto"][];
        };
        /** @description The contact information */
        ContactInformationDto: {
            /** @description The email */
            email?: string;
            /** @description The phone */
            phone?: string;
            /** @description The mobile */
            mobile?: string;
            /** @description The fax */
            fax?: string;
            address?: components["schemas"]["AddressDto"];
        };
        CustomerAccountDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            /** @description The external ref 1 */
            externalRef1?: string;
            /** @description The external ref 2 */
            externalRef2?: string;
            name?: components["schemas"]["NameDto"];
            address?: components["schemas"]["AddressDto"];
            /** @description The job title */
            jobTitle?: string;
            businessAccountModel?: components["schemas"]["BusinessEntityDto"];
            customFields?: components["schemas"]["CustomFieldsDto"];
            loaded?: boolean;
            /** @description The vat no */
            vatNo?: string;
            /** @description The registration no */
            registrationNo?: string;
            contactInformation?: components["schemas"]["ContactInformationDto"];
            /** @description Expression to determine minimum amount value */
            minimumAmountEl?: string;
            /** @description Expression to determine rated transaction description to reach minimum amount value */
            minimumLabelEl?: string;
            /** @description The billing account code to be used when calculating the min amount billable for Customer and CA */
            minimumTargetAccount?: string;
            /** @description Expression to determine minimum amount value - for Spark */
            minimumAmountElSpark?: string;
            /** @description Expression to determine rated transaction description to reach minimum amount value - for Spark */
            minimumLabelElSpark?: string;
            /** @description Corresponding to minimum one shot charge template code */
            minimumChargeTemplate?: string;
            /** @description indicate if this is a company */
            isCompany?: boolean;
            legalEntityType?: components["schemas"]["TitleDto"];
            customer: string;
            currency: string;
            language: string;
            /** @enum {string} */
            status?: "ACTIVE" | "CLOSE";
            creditCategory?: string;
            /** Format: date-time */
            dateStatus?: string;
            /** Format: date-time */
            dateDunningLevel?: string;
            /** @enum {string} */
            dunningLevel?: "R0" | "R1" | "R2" | "R3" | "R4" | "R5" | "R6";
            mandateIdentification?: string;
            /** Format: date-time */
            mandateDate?: string;
            balance?: number;
            totalBalance?: number;
            totalBalanceExigible?: number;
            totalInvoiceBalance?: number;
            accountBalance?: number;
            creditBalance?: number;
            /** Format: date-time */
            terminationDate?: string;
            dueDateDelayEL?: string;
            paymentMethods?: components["schemas"]["PaymentMethodDto"][];
            excludedFromPayment?: boolean;
            /** @enum {string} */
            paymentMethod?: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
            billingAccounts?: components["schemas"]["BillingAccountsDto"];
            accountOperations?: components["schemas"]["AccountOperationDto"][];
            invoicingThreshold?: number;
            /** @enum {string} */
            checkThreshold?: "BEFORE_DISCOUNT" | "AFTER_DISCOUNT" | "POSITIVE_RT" | "POSITIVE_IL";
            thresholdPerEntity?: boolean;
            infoGdpr?: components["schemas"]["GDPRInfoDto"][];
            generalClientAccountCode?: string;
        };
        /** @description Use for GET / LIST only */
        CustomerAccountsDto: {
            customerAccount?: components["schemas"]["CustomerAccountDto"][];
        };
        CustomerDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            /** @description The external ref 1 */
            externalRef1?: string;
            /** @description The external ref 2 */
            externalRef2?: string;
            name?: components["schemas"]["NameDto"];
            address?: components["schemas"]["AddressDto"];
            /** @description The job title */
            jobTitle?: string;
            businessAccountModel?: components["schemas"]["BusinessEntityDto"];
            customFields?: components["schemas"]["CustomFieldsDto"];
            loaded?: boolean;
            /** @description The vat no */
            vatNo?: string;
            /** @description The registration no */
            registrationNo?: string;
            contactInformation?: components["schemas"]["ContactInformationDto"];
            /** @description Expression to determine minimum amount value */
            minimumAmountEl?: string;
            /** @description Expression to determine rated transaction description to reach minimum amount value */
            minimumLabelEl?: string;
            /** @description The billing account code to be used when calculating the min amount billable for Customer and CA */
            minimumTargetAccount?: string;
            /** @description Expression to determine minimum amount value - for Spark */
            minimumAmountElSpark?: string;
            /** @description Expression to determine rated transaction description to reach minimum amount value - for Spark */
            minimumLabelElSpark?: string;
            /** @description Corresponding to minimum one shot charge template code */
            minimumChargeTemplate?: string;
            /** @description indicate if this is a company */
            isCompany?: boolean;
            legalEntityType?: components["schemas"]["TitleDto"];
            /** @description The customer category */
            customerCategory: string;
            /** @description The customer brand */
            customerBrand?: string;
            /** @description the code of seller */
            seller?: string;
            /** @description The mandate identification */
            mandateIdentification?: string;
            /**
             * Format: date-time
             * @description The mandate date
             */
            mandateDate?: string;
            customerAccounts?: components["schemas"]["CustomerAccountsDto"];
            additionalDetails?: components["schemas"]["AdditionalDetailsDto"];
            /** @description Invoicing threshold - do not invoice for a lesser amount */
            invoicingThreshold?: number;
            /**
             * @description The option on how to check the threshold
             * @example possible value are :BEFORE_DISCOUNT, AFTER_DISCOUNT, POSITIVE_RT, POSITIVE_IL
             * @enum {string}
             */
            checkThreshold?: "BEFORE_DISCOUNT" | "AFTER_DISCOUNT" | "POSITIVE_RT" | "POSITIVE_IL";
            /** @description check the threshold per entity/invoice */
            thresholdPerEntity?: boolean;
            /** Format: date-time */
            anonymizationDate?: string;
            /** @description information GDPR */
            infoGdpr?: components["schemas"]["GDPRInfoDto"][];
            /** @description the code of customer parent */
            parentCustomerCode?: string;
            /** @description children Customers */
            childrenCustomersCodes?: string[];
        };
        CustomersDto: {
            customer?: components["schemas"]["CustomerDto"][];
            /** Format: int64 */
            totalNumberOfRecords?: number;
        };
        /** @description List of Discount aggregates */
        DiscountInvoiceAggregateDto: {
            /**
             * Format: int32
             * @description The item number
             */
            itemNumber?: number;
            /** @description The accounting code */
            accountingCode?: string;
            /** @description The description */
            description?: string;
            /**
             * @deprecated
             * @description The quantity. Deprecated in v5.2
             */
            quantity?: number;
            /** @description The amount without tax */
            amountWithoutTax?: number;
            /** @description The amount tax */
            amountTax?: number;
            /** @description The amount with tax */
            amountWithTax?: number;
            /** @description The invoice sub category code */
            invoiceSubCategoryCode: string;
            /** @description The user account code */
            userAccountCode?: string;
            /** @description List of amounts broken down by tax */
            amountsByTax: components["schemas"]["SubcategoryInvoiceAgregateAmountDto"][];
            /** @description List the rated transactions */
            ratedTransactions?: components["schemas"]["RatedTransactionDto"][];
            /** @description The discount plan item code */
            discountPlanItemCode?: string;
            /** @description The discount percent */
            discountPercent?: number;
        };
        /** @description List of discount plans. Use in instantiating a discount plan instance */
        DiscountPlanDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            /**
             * Format: date-time
             * @description Effective start date
             */
            startDate?: string;
            /**
             * Format: date-time
             * @description Effective end date
             */
            endDate?: string;
            /**
             * Format: int32
             * @description Length of effectivity.<br/> If start date is not null and end date is null, we use the defaultDuration from the discount plan.<br />If start date is null, and defaultDuration is not null, defaultDuration is ignored.
             */
            defaultDuration?: number;
            /**
             * @description Unit of duration
             * @example possible value are : MONTH, DAY
             * @enum {string}
             */
            durationUnit?: "MONTH" | "DAY";
            customFields?: components["schemas"]["CustomFieldsDto"];
            /**
             * @description list of discount plan item
             * @example discountPlanItem[]
             */
            discountPlanItems?: components["schemas"]["DiscountPlanItemDto"][];
            /** @description expression language */
            expressionEl?: string;
            /**
             * @description Type of the discount plan. Defines on which entity the discount plan can be applied
             * @example possible value are : QUOTE, OFFER, PRODUCT, INVOICE, INVOICE_LINE, PROMO_CODE
             * @enum {string}
             */
            discountPlanType: "QUOTE" | "OFFER" | "PRODUCT" | "INVOICE" | "INVOICE_LINE" | "PROMO_CODE";
            /**
             * @description Status of the discount plan. The default value is DRAFT
             * @example possible value are : DRAFT, ACTIVE, INACTIVE, IN_USE, EXPIRED
             * @enum {string}
             */
            status?: "ACTIVE" | "INACTIVE" | "DRAFT" | "IN_USE" | "EXPIRED";
            /**
             * Format: date-time
             * @description Datetime of last status update, Automatically filed at creation and status update
             */
            statusDate?: string;
            /**
             * Format: int64
             * @description The initial available quantity for the discount plan, For types QUOTE, INVOICE, INVOICE_LINE, the value is forced to 0
             */
            initialQuantity?: number;
            /**
             * Format: int64
             * @description How many times the discount plan has been used.<br/> If intialQuantity is not 0, then reaching the initialQuantity expires the discount plan.<br />The value is incremented every time the discountPlan is instantiated on any Billing Account, Subscription, or ProductInstance
             */
            usedQuantity?: number;
            /**
             * Format: int64
             * @description How many times the discount can be applied on a given entity (BillingAccount, Subscription, Product Instance).<br />Default value is 0 = infinite.<br/>Useful for one-time discounts.
             */
            applicationLimit?: number;
            /** @description A boolean EL that must evaluate to true to allow the discount plan to be applied<br/>It will have access to the variables.<br />entity: the entity on which we want to apply the discount */
            applicationFilterEL?: string;
            /** @description A list of discounts plans that cannot be active at the same time on an entity instance. */
            incompatibleDiscountPlans?: components["schemas"]["DiscountPlanDto"][];
            /** @description A list of entities (CustomerCategory, Offer, Product, Article). */
            applicableEntities?: components["schemas"]["ApplicableEntityDto"][];
            applicableOnOverriddenPrice?: boolean;
            /**
             * Format: int32
             * @description defines the order in which discount plans are applied
             */
            sequence?: number;
            /** @description determines whether the discount plan is applicable on the gross or discounted amount */
            applicableOnDiscountedPrice?: boolean;
            /** @description If false then discount plan will be ignored if event price comes from a contract */
            applicableOnContractPrice?: boolean;
        };
        /**
         * @description Use to return the active discount plans for this entity
         * @example discountPlanInstance : []
         */
        DiscountPlanInstanceDto: {
            /** @description The discount plan code */
            discountPlan?: string;
            /** @description The billingAccount code */
            billingAccount?: string;
            /** @description The subscription code */
            subscription?: string;
            /**
             * Format: date-time
             * @description Effectivity start date
             */
            startDate?: string;
            /**
             * Format: date-time
             * @description Effectivity end date
             */
            endDate?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
            /**
             * @description Status of this specific discount plan instance
             * @enum {string}
             */
            status?: "ACTIVE" | "APPLIED" | "IN_USE" | "EXPIRED";
            /**
             * Format: date-time
             * @description Datetime of last status change
             */
            statusDate?: string;
            /**
             * Format: int64
             * @description How many times the discount has been used
             */
            applicationCount?: number;
        };
        /**
         * @description list of discount plan item
         * @example discountPlanItem[]
         */
        DiscountPlanItemDto: {
            /** @description The code */
            code: string;
            /** @description Discount plan code */
            discountPlanCode: string;
            /** @description Invoice category code */
            invoiceCategoryCode?: string;
            /** @description Invoice sub category code */
            invoiceSubCategoryCode?: string;
            /**
             * @deprecated
             * @description Accounting code
             */
            accountingCode?: string;
            /** @description Expression to determine if discount applies */
            expressionEl?: string;
            /** @description Is entity disabled. Value is ignored in Update action - use enable/disable API instead */
            disabled?: boolean;
            /**
             * @description Type of discount, whether absolute or percentage
             * @default PERCENTAGE
             * @enum {string}
             */
            discountPlanItemType: "PERCENTAGE" | "FIXED";
            /** @description The absolute or percentage discount amount */
            discountValue: number;
            /** @description The absolute or percentage discount amount EL */
            discountValueEL: string;
            /** @description The target accounting article codes */
            targetAccountingArticleCodes?: string[];
            /** @description Price plan matrix code */
            pricePlanMatrixCode?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
            /**
             * @description <ul><li>If true, then allows to negate the amount of affected invoice lines</li><li>If fase, then amount for the discount line produce by the discount plan item cannot exceed the amount of discounted lines</li></ul>
             * @default false
             */
            allowToNegate: boolean;
            /** @description description of discount plan item */
            description?: string;
            /**
             * Format: int64
             * @description The lower number, the higher the priority is
             */
            priority?: number;
            /** @description accounting article code */
            accountingArticleCode?: string;
            /** @description Apply by article */
            applyByArticle?: boolean;
            /**
             * Format: int32
             * @description defines the order in which discount plans are applied
             */
            sequence?: number;
            /** @description last discount */
            lastDiscount?: boolean;
        };
        /** @description information GDPR */
        GDPRInfoDto: {
            key?: string;
            value?: Record<string, never>;
        };
        InvoiceDto: {
            /**
             * Format: int64
             * @description The invoice id
             */
            invoiceId?: number;
            /** @description The invoice type */
            invoiceType: string;
            /** @description The billing account code */
            billingAccountCode: string;
            /** @description Code of the Seller */
            sellerCode?: string;
            /** @description Code of the subscription */
            subscriptionCode?: string;
            /**
             * Format: int64
             * @description Id of the subscription
             */
            subscriptionId?: number;
            /** @description Order number of the invoice */
            orderNumber?: string;
            /**
             * @description The invoice status
             * @example possible value are : NEW, SUSPECT, REJECTED, DRAFT, CANCELED, VALIDATED
             * @enum {string}
             */
            status?: "NEW" | "SUSPECT" | "REJECTED" | "DRAFT" | "CANCELED" | "VALIDATED";
            /**
             * Format: date-time
             * @description The due date
             */
            dueDate: string;
            /**
             * Format: date-time
             * @description The invoice date
             */
            invoiceDate: string;
            /** @description The category invoice aggregates */
            categoryInvoiceAgregates?: components["schemas"]["CategoryInvoiceAgregateDto"][];
            /** @description The tax aggregates */
            taxAggregates: components["schemas"]["TaxInvoiceAggregateDto"][];
            /** @description The list invoice id to link */
            listInvoiceIdToLink?: number[];
            /** @description The invoice number */
            invoiceNumber?: string;
            /** @description discount applied to this invoice */
            discount?: number;
            /** @description The amount without tax */
            amountWithoutTax?: number;
            /** @description The amount tax */
            amountTax?: number;
            /** @description The amount with tax */
            amountWithTax?: number;
            /**
             * @description The payment method
             * @example possible value are : CHECK, DIRECTDEBIT, WIRETRANSFER, CARD, PAYPAL, STRIPE, CASH
             * @enum {string}
             */
            paymentMethod?: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
            /** @description The xml filename */
            xmlFilename?: string;
            /** @description The xml */
            xml?: string;
            /** @description he pdf filename */
            pdfFilename?: string;
            /** @description content of the pdf */
            pdf?: string[];
            /**
             * @description A request-only parameter. True if invoice should be assigned a number
             * @default true
             */
            autoValidation: boolean;
            /** @description A request-only parameter. True if XML invoice should be generated and returned */
            returnXml?: boolean;
            /** @description A request-only parameter. True if PDF invoice should be generated and returned */
            returnPdf?: boolean;
            /** @description A request-only parameter. True if PDF should be delivered by email. Defaults to True */
            sendByEmail?: boolean;
            /** @description A request-only parameter. True if currently due balance should be returned */
            includeBalance?: boolean;
            recordedInvoiceDto?: components["schemas"]["RecordedInvoiceDto"];
            /** @description The net to pay */
            netToPay?: number;
            /**
             * @description The invoice mode
             * @example possible value are: AGGREGATED, DETAILLED
             * @enum {string}
             */
            invoiceMode: "AGGREGATED" | "DETAILLED";
            customFields?: components["schemas"]["CustomFieldsDto"];
            /** @description The total due is a snapshot at invoice generation time of the due balance (not exigible) before invoice calculation+invoice amount. Due balance is a 'future' dueBalance (the due balance at the invoice due date) */
            dueBalance?: number;
            /** @description A flag to generate a draft invoice */
            isDraft?: boolean;
            /** @description Before sending the invoice, check if not already sent */
            checkAlreadySent?: boolean;
            /** @description Override Email defined in the billing entity */
            overrideEmail?: string;
            /**
             * @description True if the invoice was sent by email or delibered by some other electronic means, false otherwise
             * @default false
             */
            sentByEmail: boolean;
            paymentScheduleInstancesDto?: components["schemas"]["PaymentScheduleInstancesDto"];
            /**
             * Format: date-time
             * @description associated dunning creation date
             */
            dunningEntryDate?: string;
            /**
             * Format: date-time
             * @description associated dunning last update date
             */
            dunningLastModification?: string;
            /** @description associated dunning current status */
            dunningStatus?: string;
            /**
             * @description The invoice real time status
             * @example possible value are: NONE, PENDING, PAID, PPAID, UNPAID, ABANDONED, REFUNDED, DISPUTED
             * @enum {string}
             */
            realTimeStatus?: "NONE" | "PENDING" | "PENDING_PLAN" | "PAID" | "PPAID" | "UNPAID" | "ABANDONED" | "REFUNDED" | "DISPUTED";
            /** @description List of existing RTs to include, identified by id This option is allowed only if invoiceMode=='DETAILLED' */
            ratedTransactionsToLink?: number[];
            /** @description List of payment incidents */
            paymentIncidents?: string[];
            /**
             * Format: date-time
             * @description Date of send payment
             */
            sendPaymentDate?: string;
            /**
             * Format: date-time
             * @description Invoice payment collection date
             */
            initialCollectionDate?: string;
            /** @description Sum off writeOff accountOperations amounts */
            writeOffAmount?: number;
            /**
             * Format: date-time
             * @description last payment Date
             */
            paymentDate?: string;
            /**
             * Format: date-time
             * @description Invoice status change date
             */
            statusDate?: string;
            /**
             * Format: date-time
             * @description Date when the XML has been produced on a validated invoice
             */
            xmlDate?: string;
            /**
             * Format: date-time
             * @description Date when the PDf has been produced on a validated invoice
             */
            pdfDate?: string;
            /**
             * Format: date-time
             * @description Date when the invoice has been sent for a validated invoice
             */
            emailSentDate?: string;
            /**
             * @description payment status
             * @example possible value are: NONE, PENDING, PAID, PPAID, UNPAID, ABANDONED, REFUNDED, DISPUTED
             * @enum {string}
             */
            paymentStatus?: "NONE" | "PENDING" | "PENDING_PLAN" | "PAID" | "PPAID" | "UNPAID" | "ABANDONED" | "REFUNDED" | "DISPUTED";
            /**
             * Format: date-time
             * @description Payment status change date
             */
            paymentStatusDate?: string;
            /**
             * Format: date-time
             * @description Beginning of the billed period (based on billing cycle period whenever possible or min(invoiceLine.valueDate))
             */
            startDate?: string;
            /**
             * Format: date-time
             * @description End of the billed period (based on billing cycle period whenever possible or applied lastTransactionDate or max(invoiceLine.valueDate))
             */
            endDate?: string;
            /** @description Total raw amount from invoice lines. <ul><li>Does not include discount</li><li>With or without tax depending on provider setting (isEnterprise)</li></ul> */
            rawAmount: number;
            /** @description Discount rate to apply (in %).<p>Initialize with discount rate from linked invoice discount plan</p> */
            discountRate?: number;
            /** @description Total discount amount with or without tax depending on provider settings.<p>Can be inconsistent with discountRate.</p><p>discountAmount has precedence over discountRate</p> */
            discountAmount: number;
            /** @description Discount plan code */
            discountPlanCode?: string;
            /** @description The exchange rate that converted amounts of the invoice. */
            lastAppliedRate?: number;
            /**
             * Format: date-time
             * @description The date of exchange rate applied to amounts of the invoice.
             */
            lastAppliedRateDate?: string;
            ratedTransactionsTolink?: number[];
            alreadyAppliedMinimum?: boolean;
            draft?: boolean;
            alreadyAddedDiscount?: boolean;
        };
        /** @description List of the matching amount */
        MatchingAmountDto: {
            /** @description The matching code */
            matchingCode?: string;
            /** @description The matching amount */
            matchingAmount?: number;
            matchingCodes?: components["schemas"]["MatchingCodesDto"];
        };
        /** @description The matching amounts */
        MatchingAmountsDto: {
            /** @description List of the matching amount */
            matchingAmount?: components["schemas"]["MatchingAmountDto"][];
        };
        /** @description List of the matching code */
        MatchingCodeDto: {
            /** @description The code of matching code */
            code?: string;
            /**
             * @description The matching type
             * @example possible value are: A, M, A_TIP, A_DERICT_DEBIT
             * @enum {string}
             */
            matchingType?: "A" | "M" | "A_TIP" | "A_DERICT_DEBIT";
            /**
             * Format: date-time
             * @description The matching date
             */
            matchingDate?: string;
            /** @description The matching amount credit */
            matchingAmountCredit?: number;
            /** @description The matching amount debit */
            matchingAmountDebit?: number;
        };
        /** @description The matching codes */
        MatchingCodesDto: {
            /** @description List of the matching code */
            matchingCode?: components["schemas"]["MatchingCodeDto"][];
        };
        /** @description The name */
        NameDto: {
            /** @description The title */
            title?: string;
            /** @description The first name */
            firstName?: string;
            /** @description The last name */
            lastName: string;
        };
        OrderAttributeDto: {
            attributeCode?: string;
            /** Format: int64 */
            parentAttributeValueId?: number;
            assignedAttributeValueIds?: number[];
            /** @description The string value */
            stringValue?: string;
            /**
             * Format: date-time
             * @description The date value
             */
            dateValue?: string;
            /**
             * Format: double
             * @description The double value
             */
            doubleValue?: number;
            customFieldDto?: components["schemas"]["CustomFieldsDto"];
            /** @description The boolean value */
            booleanValue?: boolean;
            /**
             * Format: int64
             * @description The commercial order id
             */
            commercialOrderId?: number;
            /** @description The order attribute code */
            orderAttributeCode?: string;
            /**
             * @description The order attribute type
             * @enum {string}
             */
            attributeType?: "INFO" | "LIST_TEXT" | "LIST_MULTIPLE_TEXT" | "LIST_NUMERIC" | "LIST_MULTIPLE_NUMERIC" | "TEXT" | "NUMERIC" | "INTEGER" | "DATE" | "CALENDAR" | "EMAIL" | "PHONE" | "TOTAL" | "COUNT" | "EXPRESSION_LANGUAGE" | "BOOLEAN";
            /**
             * Format: int64
             * @description The order attribute id
             */
            orderAttributeId?: number;
            /** @description The order lot code */
            orderLotCode?: string;
            /**
             * Format: int64
             * @description The order product id
             */
            orderProductId?: number;
            /**
             * Format: int64
             * @description The order offer id
             */
            orderOfferId?: number;
            /** @description The access point */
            accessPoint?: string;
        };
        /** @description The other credit and charge */
        OtherCreditAndChargeDto: {
            /**
             * Format: int64
             * @description The id of account operation
             */
            id?: number;
            /**
             * Format: date-time
             * @description The due date
             */
            dueDate?: string;
            /** @description The type */
            type?: string;
            /**
             * Format: date-time
             * @description he transaction date
             */
            transactionDate?: string;
            /**
             * @description The transaction category
             * @example possible value are : DEBIT, CREDIT
             * @enum {string}
             */
            transactionCategory?: "DEBIT" | "CREDIT";
            /** @description The reference */
            reference?: string;
            /**
             * @deprecated
             * @description The account code
             */
            accountCode?: string;
            /** @description The accounting code */
            accountingCode?: string;
            /**
             * @deprecated
             * @description The account code client side
             */
            accountCodeClientSide?: string;
            /** @description The amount */
            amount?: number;
            /** @description The amount without tax */
            amountWithoutTax?: number;
            /** @description The tax amount */
            taxAmount?: number;
            /** @description The matching amount */
            matchingAmount?: number;
            /** @description The un matching amount */
            unMatchingAmount?: number;
            /**
             * @description The matching status
             * @example possible value are: O, L, P, C, I, R
             * @enum {string}
             */
            matchingStatus?: "O" | "L" | "P" | "C" | "I" | "R";
            /** @description The occ code */
            code?: string;
            /** @description The occ description */
            description?: string;
            /** @description The customer account */
            customerAccount?: string;
            /** @description The excluded from dunning */
            excludedFromDunning?: boolean;
            /**
             * @description The order number
             * @example ORDER_1|ORDER_2|ORDER_3
             */
            orderNumber?: string;
            matchingAmounts?: components["schemas"]["MatchingAmountsDto"];
            otherCreditAndCharge?: components["schemas"]["OtherCreditAndChargeDto"];
            recordedInvoice?: components["schemas"]["RecordedInvoiceDto"];
            rejectedPayment?: components["schemas"]["RejectedPaymentDto"];
            /** @description The bank lot */
            bankLot?: string;
            /** @description The bank reference */
            bankReference?: string;
            /**
             * Format: date-time
             * @description The bank collection date
             */
            bankCollectionDate?: string;
            /**
             * Format: date-time
             * @description The deposit date
             */
            depositDate?: string;
            /** @description The payment method */
            paymentMethod?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
            /** @description The payment info */
            paymentInfo?: string;
            /** @description bank code */
            paymentInfo1?: string;
            /** @description code guichet */
            paymentInfo2?: string;
            /** @description Num compte */
            paymentInfo3?: string;
            /** @description RIB */
            paymentInfo4?: string;
            /** @description bankName */
            paymentInfo5?: string;
            /** @description bic */
            paymentInfo6?: string;
            /** @description The billing account name */
            billingAccountName?: string;
            /** @description list of the payment history */
            paymentHistories?: components["schemas"]["PaymentHistoryDto"][];
            /**
             * Format: date-time
             * @description A collection date
             */
            collectionDate?: string;
            /** @description The journal code */
            journalCode?: string;
            /**
             * @description Account operation status
             * @default POSTED
             * @example possible value are : POSTED, REJECTED, EXPORTED
             * @enum {string}
             */
            status: "POSTED" | "REJECTED" | "EXPORTED" | "EXPORT_FAILED";
            /**
             * @description Account operation rejection reason
             * @example possible value are : REJECTED, FORCED, CLOSED_PERIOD
             * @enum {string}
             */
            reason?: "REJECTED" | "FORCED" | "CLOSED_PERIOD";
            /** @description Accounting export file */
            accountingExportFile?: string;
            /**
             * Format: date-time
             * @description Accounting date
             */
            accountingDate?: string;
            /** Format: date-time */
            operationDate?: string;
        };
        /** @description list of the payment history */
        PaymentHistoryDto: {
            /** @description The customer Account Code */
            customerAccountCode?: string;
            /** @description The seller Code */
            sellerCode?: string;
            /** @description The customer Code */
            customerCode?: string;
            /** @description The customer Account Name */
            customerAccountName?: string;
            /**
             * Format: date-time
             * @description The operation date
             */
            operationDate?: string;
            /**
             * Format: date-time
             * @description The updated status date
             */
            updatedStatusDate?: string;
            /**
             * Format: date-time
             * @description The last Update Date
             */
            lastUpdateDate?: string;
            /**
             * Format: int64
             * @description The amount in cts
             */
            amountCts?: number;
            /**
             * @description The synchrone status
             * @example possible value are : ACCEPTED, PENDING, REJECTED, ERROR, NOT_PROCESSED
             * @enum {string}
             */
            syncStatus?: "ACCEPTED" | "PENDING" | "REJECTED" | "ERROR" | "NOT_PROCESSED";
            /**
             * @description The asynchrone status
             * @example possible value are : ACCEPTED, PENDING, REJECTED, ERROR, NOT_PROCESSED
             * @enum {string}
             */
            asyncStatus?: "ACCEPTED" | "PENDING" | "REJECTED" | "ERROR" | "NOT_PROCESSED";
            /**
             * @description The status
             * @example possible value are : ACCEPTED, PENDING, REJECTED, ERROR, NOT_PROCESSED
             * @enum {string}
             */
            status?: "ACCEPTED" | "PENDING" | "REJECTED" | "ERROR" | "NOT_PROCESSED";
            /** @description he external payment id */
            externalPaymentId?: string;
            /** @description The error code */
            errorCode?: string;
            /** @description The error message */
            errorMessage?: string;
            /**
             * @description The error type, rejected or error
             * @example possible value are :  ERROR, REJECT
             * @enum {string}
             */
            errorType?: "ERROR" | "REJECT";
            /** @description The payment gateway */
            paymentGatewayCode?: string;
            /**
             * @description The payment method
             * @example possible value are : CHECK, DIRECTDEBIT, WIRETRANSFER, CARD, PAYPAL, STRIPE, CASH
             * @enum {string}
             */
            paymentMethodType?: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
            /** @description The payment method name: card number or mandat */
            paymentMethodName?: string;
            /**
             * @description The operation category, credit for payment or debit for refund
             * @example possible valye are : DEBIT, CREDIT
             * @enum {string}
             */
            operationCategory?: "DEBIT" | "CREDIT";
            payment?: components["schemas"]["AccountOperationDto"];
            refund?: components["schemas"]["AccountOperationDto"];
            listAoPaid?: components["schemas"]["AccountOperationsDto"];
        };
        PaymentMethodDto: {
            /**
             * @description type of the payment method
             * @example possible value are: CHECK, DIRECTDEBIT, WIRETRANSFER, CARD, PAYPAL, STRIPE, CASH
             * @enum {string}
             */
            paymentMethodType: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
            /**
             * Format: int64
             * @description id of the entity
             */
            id?: number;
            /** @description Indicate if the payment method is disabled */
            disabled?: boolean;
            /** @description Alias */
            alias?: string;
            /**
             * @description Is it a preferred payment method
             * @default false
             */
            preferred: boolean;
            /** @description Customer account code */
            customerAccountCode?: string;
            /** @description first Additional info */
            info1?: string;
            /** @description second Additional info */
            info2?: string;
            /** @description third Additional info */
            info3?: string;
            /** @description fourth Additional info */
            info4?: string;
            /** @description fifth Additional info */
            info5?: string;
            bankCoordinates?: components["schemas"]["BankCoordinatesDto"];
            /** @description Mandate identification for SEPA */
            mandateIdentification?: string;
            /**
             * Format: date-time
             * @description Mandate date for SEPA
             */
            mandateDate?: string;
            /**
             * @description Card type
             * @example possible value are : VISA, MASTERCARD, AMERICAN_EXPRESS, CB
             * @enum {string}
             */
            cardType?: "VISA" | "MASTERCARD" | "AMERICAN_EXPRESS" | "CB";
            /** @description Cardholder: first and last name */
            owner?: string;
            /**
             * Format: int32
             * @description Card expiration: month
             */
            monthExpiration?: number;
            /**
             * Format: int32
             * @description Card expiration: year
             */
            yearExpiration?: number;
            /** @description Token ID in a payment gateway */
            tokenId?: string;
            /** @description Card number: full number , with first 12 digits hiding in read operation */
            cardNumber?: string;
            /** @description Issue number */
            issueNumber?: string;
            /** @description Id of the user */
            userId?: string;
            /** @description Email */
            email?: string;
            /** @description The code of reference document */
            referenceDocumentCode?: string;
            customerCode?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
        };
        /** @description The payment schedule instance balance */
        PaymentScheduleInstanceBalanceDto: {
            /**
             * Format: int32
             * @description The number schedule paid
             */
            nbSchedulePaid?: number;
            /**
             * Format: int32
             * @description The number schedule incoming
             */
            nbScheduleIncoming?: number;
            /** @description The sum amount paid */
            sumAmountPaid?: number;
            /** @description The sum amount incoming */
            sumAmountIncoming?: number;
        };
        /** @description list of payment schedule instance */
        PaymentScheduleInstanceDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            /**
             * Format: date-time
             * @description The end date
             */
            endDate?: string;
            /**
             * Format: date-time
             * @description The start date
             */
            startDate?: string;
            /** @description The amount */
            amount?: number;
            /** @description The calendar code */
            calendarCode?: string;
            /**
             * @description The status of the payment schedule instance
             * @example possible value are: IN_PROGRESS, OBSOLETE, DONE, CANCELLED, TERMINATED
             * @enum {string}
             */
            status?: "IN_PROGRESS" | "OBSOLETE" | "DONE" | "CANCELLED" | "TERMINATED";
            /**
             * Format: date-time
             * @description The status date
             */
            statusDate?: string;
            /** @description The payment schedule template code */
            paymentScheduleTemplateCode?: string;
            /**
             * Format: int32
             * @description The payment day in month
             */
            paymentDayInMonth?: number;
            /** @description The service instance template code */
            serviceInstanceTemplateCode?: string;
            /**
             * Format: int64
             * @description The service instance id
             */
            serviceInstanceId?: number;
            /** @description The subscription code */
            subscriptionCode?: string;
            paymentScheduleInstanceBalanceDto?: components["schemas"]["PaymentScheduleInstanceBalanceDto"];
            /**
             * @description List of the payment schedule instance item
             * @example item: []
             */
            items?: components["schemas"]["PaymentScheduleInstanceItemDto"][];
            customFields?: components["schemas"]["CustomFieldsDto"];
        };
        /**
         * @description List of the payment schedule instance item
         * @example item: []
         */
        PaymentScheduleInstanceItemDto: {
            /**
             * Format: int64
             * @description The id of the payment schedule instance item
             */
            id?: number;
            /**
             * Format: date-time
             * @description The due date
             */
            dueDate?: string;
            /**
             * Format: date-time
             * @description The request payment date
             */
            requestPaymentDate: string;
            recordedInvoice?: components["schemas"]["RecordedInvoiceDto"];
            last?: boolean;
            paid?: boolean;
            amount: number;
        };
        /** @description list of related payment schedule instances */
        PaymentScheduleInstancesDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            /** @description list of payment schedule instance */
            instances?: components["schemas"]["PaymentScheduleInstanceDto"][];
        };
        ProductDto: {
            code?: string;
            description?: string;
            /** Format: date-time */
            chargeDate?: string;
            quantity?: number;
            amountWithoutTax?: number;
            amountWithTax?: number;
            criteria1?: string;
            criteria2?: string;
            criteria3?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
        };
        ProductInstanceDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            /** Format: date-time */
            applicationDate?: string;
            quantity?: number;
            orderNumber?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
        };
        ProductToInstantiateDto: {
            productCode?: string;
            quantity: number;
            /** Format: date-time */
            deliveryDate?: string;
            attributeInstances?: components["schemas"]["OrderAttributeDto"][];
            customFields?: components["schemas"]["CustomFieldsDto"];
        };
        ProductsDto: {
            products?: components["schemas"]["ProductDto"][];
        };
        /** @description List the rated transactions */
        RatedTransactionDto: {
            /**
             * Format: date-time
             * @description The usage date
             */
            usageDate: string;
            /** @description The unit amount without tax */
            unitAmountWithoutTax?: number;
            /** @description The unit amount with tax */
            unitAmountWithTax?: number;
            /** @description The unit amount tax */
            unitAmountTax?: number;
            /** @description The quantity */
            quantity?: number;
            /** @description The quantity */
            inputQuantity?: number;
            /** @description The raw amount without tax */
            rawAmountWithoutTax?: number;
            /** @description The raw amount with tax */
            rawAmountWithTax?: number;
            /** @description The amount without tax */
            amountWithoutTax: number;
            /** @description The amount with tax */
            amountWithTax: number;
            /** @description The amount tax */
            amountTax: number;
            /** @description The code */
            code: string;
            /**
             * @description The status
             * @example possible value are: OPEN, BILLED, REJECTED, RERATED, CANCELED
             * @enum {string}
             */
            status?: "OPEN" | "BILLED" | "REJECTED" | "RERATED" | "CANCELED" | "PROCESSED";
            /** @description The description */
            description?: string;
            /** @description The unity description */
            unityDescription?: string;
            /** @description The price plan code */
            priceplanCode?: string;
            /**
             * @description indicate if we don't want to trigger invoicing
             * @default false
             */
            doNotTriggerInvoicing: boolean;
            /**
             * Format: date-time
             * @description The start date
             */
            startDate?: string;
            /**
             * Format: date-time
             * @description The end date
             */
            endDate?: string;
            /** @description used to set more onformations in case of "DETAILLED" invoice */
            parameter1?: string;
            /** @description used to set more onformations in case of "DETAILLED" invoice */
            parameter2?: string;
            /** @description used to set more onformations in case of "DETAILLED" invoice */
            parameter3?: string;
            /** @description The user account code */
            userAccountCode?: string;
            /** @description Tax applied - code */
            taxCode?: string;
            /** @description Tax percent */
            taxPercent?: number;
            /** @description Invoice sub category code */
            invoiceSubCategoryCode?: string;
            /** @description Seller code */
            sellerCode?: string;
            /** @description BillingAccount code */
            billingAccountCode?: string;
            /** @description Charge tax class code */
            taxClassCode?: string;
            /** @description The input unit of measure */
            inputUnitOfMeasure?: string;
            /** @description The rating unit of measure */
            ratingUnitOfMeasure?: string;
            /**
             * Format: int32
             * @description Sorting index
             */
            sortIndex?: number;
        };
        /** @description The recorded invoice dto */
        RecordedInvoiceDto: {
            /**
             * Format: int64
             * @description The id of account operation
             */
            id?: number;
            /**
             * Format: date-time
             * @description The due date
             */
            dueDate?: string;
            /** @description The type */
            type?: string;
            /**
             * Format: date-time
             * @description he transaction date
             */
            transactionDate?: string;
            /**
             * @description The transaction category
             * @example possible value are : DEBIT, CREDIT
             * @enum {string}
             */
            transactionCategory?: "DEBIT" | "CREDIT";
            /** @description The reference */
            reference?: string;
            /**
             * @deprecated
             * @description The account code
             */
            accountCode?: string;
            /** @description The accounting code */
            accountingCode?: string;
            /**
             * @deprecated
             * @description The account code client side
             */
            accountCodeClientSide?: string;
            /** @description The amount */
            amount?: number;
            /** @description The amount without tax */
            amountWithoutTax?: number;
            /** @description The tax amount */
            taxAmount?: number;
            /** @description The matching amount */
            matchingAmount?: number;
            /** @description The un matching amount */
            unMatchingAmount?: number;
            /**
             * @description The matching status
             * @example possible value are: O, L, P, C, I, R
             * @enum {string}
             */
            matchingStatus?: "O" | "L" | "P" | "C" | "I" | "R";
            /** @description The occ code */
            code?: string;
            /** @description The occ description */
            description?: string;
            /** @description The customer account */
            customerAccount?: string;
            /** @description The excluded from dunning */
            excludedFromDunning?: boolean;
            /**
             * @description The order number
             * @example ORDER_1|ORDER_2|ORDER_3
             */
            orderNumber?: string;
            matchingAmounts?: components["schemas"]["MatchingAmountsDto"];
            otherCreditAndCharge?: components["schemas"]["OtherCreditAndChargeDto"];
            recordedInvoice?: components["schemas"]["RecordedInvoiceDto"];
            rejectedPayment?: components["schemas"]["RejectedPaymentDto"];
            /** @description The bank lot */
            bankLot?: string;
            /** @description The bank reference */
            bankReference?: string;
            /**
             * Format: date-time
             * @description The bank collection date
             */
            bankCollectionDate?: string;
            /**
             * Format: date-time
             * @description The deposit date
             */
            depositDate?: string;
            /** @description The payment method */
            paymentMethod?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
            /** @description The payment info */
            paymentInfo?: string;
            /** @description bank code */
            paymentInfo1?: string;
            /** @description code guichet */
            paymentInfo2?: string;
            /** @description Num compte */
            paymentInfo3?: string;
            /** @description RIB */
            paymentInfo4?: string;
            /** @description bankName */
            paymentInfo5?: string;
            /** @description bic */
            paymentInfo6?: string;
            /** @description The billing account name */
            billingAccountName?: string;
            /** @description list of the payment history */
            paymentHistories?: components["schemas"]["PaymentHistoryDto"][];
            /**
             * Format: date-time
             * @description A collection date
             */
            collectionDate?: string;
            /** @description The journal code */
            journalCode?: string;
            /**
             * @description Account operation status
             * @default POSTED
             * @example possible value are : POSTED, REJECTED, EXPORTED
             * @enum {string}
             */
            status: "POSTED" | "REJECTED" | "EXPORTED" | "EXPORT_FAILED";
            /**
             * @description Account operation rejection reason
             * @example possible value are : REJECTED, FORCED, CLOSED_PERIOD
             * @enum {string}
             */
            reason?: "REJECTED" | "FORCED" | "CLOSED_PERIOD";
            /** @description Accounting export file */
            accountingExportFile?: string;
            /**
             * Format: date-time
             * @description Accounting date
             */
            accountingDate?: string;
            /**
             * Format: date-time
             * @description The production date
             */
            productionDate?: string;
            /**
             * Format: date-time
             * @description The invoice date
             */
            invoiceDate?: string;
            /** @description The net to pay */
            netToPay?: number;
        };
        /** @description The rejected paymen */
        RejectedPaymentDto: {
            /**
             * Format: int64
             * @description The id of account operation
             */
            id?: number;
            /**
             * Format: date-time
             * @description The due date
             */
            dueDate?: string;
            /** @description The type */
            type?: string;
            /**
             * Format: date-time
             * @description he transaction date
             */
            transactionDate?: string;
            /**
             * @description The transaction category
             * @example possible value are : DEBIT, CREDIT
             * @enum {string}
             */
            transactionCategory?: "DEBIT" | "CREDIT";
            /** @description The reference */
            reference?: string;
            /**
             * @deprecated
             * @description The account code
             */
            accountCode?: string;
            /** @description The accounting code */
            accountingCode?: string;
            /**
             * @deprecated
             * @description The account code client side
             */
            accountCodeClientSide?: string;
            /** @description The amount */
            amount?: number;
            /** @description The amount without tax */
            amountWithoutTax?: number;
            /** @description The tax amount */
            taxAmount?: number;
            /** @description The matching amount */
            matchingAmount?: number;
            /** @description The un matching amount */
            unMatchingAmount?: number;
            /**
             * @description The matching status
             * @example possible value are: O, L, P, C, I, R
             * @enum {string}
             */
            matchingStatus?: "O" | "L" | "P" | "C" | "I" | "R";
            /** @description The occ code */
            code?: string;
            /** @description The occ description */
            description?: string;
            /** @description The customer account */
            customerAccount?: string;
            /** @description The excluded from dunning */
            excludedFromDunning?: boolean;
            /**
             * @description The order number
             * @example ORDER_1|ORDER_2|ORDER_3
             */
            orderNumber?: string;
            matchingAmounts?: components["schemas"]["MatchingAmountsDto"];
            otherCreditAndCharge?: components["schemas"]["OtherCreditAndChargeDto"];
            recordedInvoice?: components["schemas"]["RecordedInvoiceDto"];
            rejectedPayment?: components["schemas"]["RejectedPaymentDto"];
            /** @description The bank lot */
            bankLot?: string;
            /** @description The bank reference */
            bankReference?: string;
            /**
             * Format: date-time
             * @description The bank collection date
             */
            bankCollectionDate?: string;
            /**
             * Format: date-time
             * @description The deposit date
             */
            depositDate?: string;
            /** @description The payment method */
            paymentMethod?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
            /** @description The payment info */
            paymentInfo?: string;
            /** @description bank code */
            paymentInfo1?: string;
            /** @description code guichet */
            paymentInfo2?: string;
            /** @description Num compte */
            paymentInfo3?: string;
            /** @description RIB */
            paymentInfo4?: string;
            /** @description bankName */
            paymentInfo5?: string;
            /** @description bic */
            paymentInfo6?: string;
            /** @description The billing account name */
            billingAccountName?: string;
            /** @description list of the payment history */
            paymentHistories?: components["schemas"]["PaymentHistoryDto"][];
            /**
             * Format: date-time
             * @description A collection date
             */
            collectionDate?: string;
            /** @description The journal code */
            journalCode?: string;
            /**
             * @description Account operation status
             * @default POSTED
             * @example possible value are : POSTED, REJECTED, EXPORTED
             * @enum {string}
             */
            status: "POSTED" | "REJECTED" | "EXPORTED" | "EXPORT_FAILED";
            /**
             * @description Account operation rejection reason
             * @example possible value are : REJECTED, FORCED, CLOSED_PERIOD
             * @enum {string}
             */
            reason?: "REJECTED" | "FORCED" | "CLOSED_PERIOD";
            /** @description Accounting export file */
            accountingExportFile?: string;
            /**
             * Format: date-time
             * @description Accounting date
             */
            accountingDate?: string;
            /**
             * @description The rejected type
             * @example possible value are: A, M
             * @enum {string}
             */
            rejectedType?: "A" | "M";
            /**
             * Format: date-time
             * @description The rejected date
             */
            rejectedDate?: string;
            /** @description The rejected description */
            rejectedDescription?: string;
            rejectedCode?: string;
        };
        SellerDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            currencyCode?: string;
            countryCode?: string;
            languageCode?: string;
            parentSeller?: string;
            customers?: components["schemas"]["CustomersDto"];
            customFields?: components["schemas"]["CustomFieldsDto"];
            invoiceTypeSequences?: {
                [key: string]: components["schemas"]["SequenceDto"];
            };
            businessAccountModel?: components["schemas"]["BusinessEntityDto"];
            contactInformation?: components["schemas"]["ContactInformationDto"];
            address?: components["schemas"]["AddressDto"];
            vatNo?: string;
            registrationNo?: string;
            legalText?: string;
            legalType?: string;
        };
        ServiceInstanceDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE" | "CANCELED" | "TERMINATED" | "SUSPENDED" | "CLOSED" | "PENDING";
            /** Format: date-time */
            statusDate?: string;
            /** Format: date-time */
            subscriptionDate?: string;
            /** Format: date-time */
            reactivationDate?: string;
            /** Format: date-time */
            terminationDate?: string;
            /** @enum {string} */
            priceVersionDateSetting?: "QUOTE" | "DELIVERY" | "RENEWAL" | "EVENT";
            /** Format: date-time */
            priceVersionDate?: string;
            quantity?: number;
            terminationReason?: string;
            /** Format: date-time */
            endAgreementDate?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
            attributeInstances?: components["schemas"]["AttributeInstanceDto"][];
            orderNumber?: string;
            /** Format: date-time */
            rateUntilDate?: string;
            amountPS?: number;
            calendarPSCode?: string;
            /** Format: int32 */
            paymentDayInMonthPS?: number;
            minimumAmountEl?: string;
            minimumLabelEl?: string;
            autoEndOfEngagement?: boolean;
            minimumChargeTemplate?: string;
            /** Format: date-time */
            subscribedTillDate?: string;
            serviceRenewal?: components["schemas"]["SubscriptionRenewalDto"];
            /** Format: date-time */
            deliveryDate?: string;
        };
        ServiceInstancesDto: {
            serviceInstance?: components["schemas"]["ServiceInstanceDto"][];
        };
        /** @description List of Sub category invoice aggregates */
        SubCategoryInvoiceAgregateDto: {
            /**
             * Format: int32
             * @description The item number
             */
            itemNumber?: number;
            /** @description The accounting code */
            accountingCode?: string;
            /** @description The description */
            description?: string;
            /**
             * @deprecated
             * @description The quantity. Deprecated in v5.2
             */
            quantity?: number;
            /** @description The amount without tax */
            amountWithoutTax?: number;
            /** @description The amount tax */
            amountTax?: number;
            /** @description The amount with tax */
            amountWithTax?: number;
            /** @description The invoice sub category code */
            invoiceSubCategoryCode: string;
            /** @description The user account code */
            userAccountCode?: string;
            /** @description List of amounts broken down by tax */
            amountsByTax: components["schemas"]["SubcategoryInvoiceAgregateAmountDto"][];
            /** @description List the rated transactions */
            ratedTransactions?: components["schemas"]["RatedTransactionDto"][];
        };
        /** @description List of amounts broken down by tax */
        SubcategoryInvoiceAgregateAmountDto: {
            /** @description Amount without tax */
            amountWithoutTax?: number;
            /** @description Amount with tax */
            amountWithTax?: number;
            /** @description Tax amount */
            amountTax?: number;
            tax?: components["schemas"]["TaxDto"];
        };
        SubscriptionDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            /** Format: int32 */
            versionNumber: number;
            /** Format: int64 */
            nextVersion?: number;
            /** Format: int64 */
            previousVersion?: number;
            userAccount: string;
            offerTemplate: string;
            /** Format: date-time */
            subscriptionDate: string;
            /** Format: date-time */
            terminationDate?: string;
            /** Format: date-time */
            endAgreementDate?: string;
            /** @enum {string} */
            status?: "CREATED" | "ACTIVE" | "CANCELED" | "RESILIATED" | "CLOSED" | "SUSPENDED" | "PENDING";
            /** Format: date-time */
            statusDate?: string;
            /** Format: date-time */
            validityDate?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
            accesses?: components["schemas"]["AccessesDto"];
            services?: components["schemas"]["ServiceInstancesDto"];
            products?: components["schemas"]["ProductsDto"];
            productInstances?: components["schemas"]["ProductInstanceDto"][];
            productsToInstantiate?: components["schemas"]["ProductToInstantiateDto"][];
            terminationReason?: string;
            orderNumber?: string;
            minimumAmountEl?: string;
            minimumLabelEl?: string;
            minimumInvoiceSubCategory?: string;
            minimumChargeTemplate?: string;
            /** Format: date-time */
            subscribedTillDate?: string;
            renewed?: boolean;
            /** Format: date-time */
            renewalNotifiedDate?: string;
            renewalRule?: components["schemas"]["SubscriptionRenewalDto"];
            billingCycle: string;
            /** @description Seller code */
            seller: string;
            autoEndOfEngagement?: boolean;
            ratingGroup?: string;
            electronicBilling?: boolean;
            email?: string;
            mailingType?: string;
            emailTemplate?: string;
            ccedEmails?: string;
            discountPlansForInstantiation?: components["schemas"]["DiscountPlanDto"][];
            discountPlansForTermination?: string[];
            discountPlanInstances?: components["schemas"]["DiscountPlanInstanceDto"][];
            paymentMethod?: components["schemas"]["PaymentMethodDto"];
            customerService?: string;
            /** @description The sales person name */
            salesPersonName?: string;
            discountPlanInstancesToRemove?: string[];
            /** @description code of existing contract */
            contractCode?: string;
        };
        SubscriptionRenewalDto: {
            /**
             * @description intial term type
             * @example RECURRING, CALENDAR, FIXED
             * @enum {string}
             */
            initialTermType?: "RECURRING" | "CALENDAR" | "FIXED";
            /**
             * @description renewal term type
             * @example possible value are : RECURRING, CALENDAR
             * @enum {string}
             */
            renewalTermType?: "RECURRING" | "CALENDAR";
            /**
             * Format: int32
             * @description The initial period for which the subscription will be active
             */
            initialyActiveFor?: number;
            /**
             * @description The initial period for which the subscription will be active
             * @example possible value are : MONTH, DAY
             * @enum {string}
             */
            initialyActiveForUnit?: "MONTH" | "DAY";
            calendarInitialyActiveFor?: components["schemas"]["CalendarDto"];
            /** @description Should subscription be renewed automatically */
            autoRenew?: boolean;
            /**
             * Format: int32
             * @description Number of days before the end of term to trigger notification event
             */
            daysNotifyRenewal?: number;
            /**
             * @description Whether the Subscription should be suspended or terminated if not renewed
             * @example possible value are : SUSPEND, TERMINATE
             * @enum {string}
             */
            endOfTermAction?: "SUSPEND" | "TERMINATE";
            /** @description terminating subscription if endOfTermAction is to terminate */
            terminationReasonCode?: string;
            /**
             * Format: int32
             * @description The period to renew subscription for
             */
            renewFor?: number;
            calendarRenewFor?: components["schemas"]["CalendarDto"];
            /**
             * @description he period to renew subscription for
             * @example possible value are : MONTH, DAY
             * @enum {string}
             */
            renewForUnit?: "MONTH" | "DAY";
            /** @description Whether end of agreement date should be matched to the active till date */
            extendAgreementPeriodToSubscribedTillDate?: boolean;
        };
        SubscriptionsDto: {
            subscription?: components["schemas"]["SubscriptionDto"][];
        };
        /** @description The tax aggregates */
        TaxInvoiceAggregateDto: {
            /** @description The description */
            description?: string;
            /**
             * Format: int32
             * @description The item number
             */
            itemNumber?: number;
            /** @description The amount without tax */
            amountWithoutTax?: number;
            /** @description The amount tax */
            amountTax?: number;
            /** @description The amount with tax */
            amountWithTax?: number;
            /** @description The taxes code */
            taxCode?: string;
            /** @description The tax percent applied */
            taxPercent?: number;
            /** @description The accounting code */
            accountingCode?: string;
        };
        UserAccountDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            /** @description The external ref 1 */
            externalRef1?: string;
            /** @description The external ref 2 */
            externalRef2?: string;
            name?: components["schemas"]["NameDto"];
            address?: components["schemas"]["AddressDto"];
            /** @description The job title */
            jobTitle?: string;
            businessAccountModel?: components["schemas"]["BusinessEntityDto"];
            customFields?: components["schemas"]["CustomFieldsDto"];
            loaded?: boolean;
            /** @description The vat no */
            vatNo?: string;
            /** @description The registration no */
            registrationNo?: string;
            contactInformation?: components["schemas"]["ContactInformationDto"];
            /** @description Expression to determine minimum amount value */
            minimumAmountEl?: string;
            /** @description Expression to determine rated transaction description to reach minimum amount value */
            minimumLabelEl?: string;
            /** @description The billing account code to be used when calculating the min amount billable for Customer and CA */
            minimumTargetAccount?: string;
            /** @description Expression to determine minimum amount value - for Spark */
            minimumAmountElSpark?: string;
            /** @description Expression to determine rated transaction description to reach minimum amount value - for Spark */
            minimumLabelElSpark?: string;
            /** @description Corresponding to minimum one shot charge template code */
            minimumChargeTemplate?: string;
            /** @description indicate if this is a company */
            isCompany?: boolean;
            legalEntityType?: components["schemas"]["TitleDto"];
            parentUserAccountCode?: string;
            userAccountCodes?: string[];
            billingAccount: string;
            billingAccountDescription?: string;
            customerAccount?: string;
            customerAccountDescription?: string;
            customer?: string;
            customerDescription?: string;
            /** Format: date-time */
            subscriptionDate?: string;
            /** Format: date-time */
            terminationDate?: string;
            /** @enum {string} */
            status?: "ACTIVE" | "CANCELED" | "TERMINATED" | "CLOSED";
            /** Format: date-time */
            statusDate?: string;
            terminationReason?: string;
            isConsumer?: boolean;
            infoGdpr?: components["schemas"]["GDPRInfoDto"][];
            subscriptions?: components["schemas"]["SubscriptionsDto"];
            parentUserAccount?: components["schemas"]["UserAccountDto"];
        };
        /** @description Use for GET / LIST only */
        UserAccountsDto: {
            userAccount?: components["schemas"]["UserAccountDto"][];
        };
        GetSellerResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            seller?: components["schemas"]["SellerDto"];
        };
        SellerResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            sellers?: components["schemas"]["SellersDto"];
        };
        SellersDto: {
            seller?: components["schemas"]["SellerDto"][];
        };
        SellerCodesResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            sellerCodes?: string[];
        };
        GetTaxResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            tax?: components["schemas"]["TaxDto"];
        };
        GetTaxesResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            taxesDto?: components["schemas"]["TaxesDto"];
        };
        GetTerminationReasonResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            terminationReason?: components["schemas"]["TerminationReasonDto"][];
        };
        ChargeAggregateDto: {
            description?: string;
            quantity?: string;
            amount?: string;
        };
        UsageChargeAggregateResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            listChargeAggregate?: components["schemas"]["ChargeAggregateDto"][];
        };
        CatUsageDto: {
            code?: string;
            description?: string;
            listSubCatUsage?: components["schemas"]["SubCatUsageDto"][];
        };
        SubCatUsageDto: {
            code?: string;
            description?: string;
            listUsage?: components["schemas"]["UsageDto"][];
        };
        UsageDto: {
            /** Format: date-time */
            dateEvent?: string;
            code?: string;
            description?: string;
            unityDescription?: string;
            unitAmountWithoutTax?: number;
            quantity?: number;
            amountWithoutTax?: number;
            parameter1?: string;
            parameter2?: string;
            parameter3?: string;
            parameterExtra?: string;
            offerCode?: string;
            priceplanCode?: string;
        };
        UsageResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            listCatUsage?: components["schemas"]["CatUsageDto"][];
        };
        UserDto: {
            /** @description the username of the user */
            username: string;
            /** @description Used when creating keycloak user */
            password?: string;
            /** @description email of the user */
            email: string;
            /** @description first name */
            firstName?: string;
            /** @description last name */
            lastName?: string;
            /** @description list of role associated to user */
            roles?: string[];
            /** @description list of secured entities associated to the user */
            securedEntities?: components["schemas"]["SecuredEntityDto"][];
            /** @description the user level */
            userLevel?: string;
            /**
             * Format: date-time
             * @description date time creation of the user
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @description the last login date
             */
            lastLoginDate?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
            attributes?: {
                [key: string]: string;
            };
        };
        GetUserResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            user?: components["schemas"]["UserDto"];
        };
        CurrentUserDto: {
            /** @description The username */
            username: string;
            /** @description The email */
            email: string;
            /** @description The full name */
            fullName?: string;
            /**
             * @description List of the roles
             * @example role: [ { KEY_1 : [{ROLE_1:VALUE_1}] }]
             */
            rolesByApplication?: {
                [key: string]: string[];
            };
        };
        GetCurrentUserResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            user?: components["schemas"]["CurrentUserDto"];
        };
        UsersDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            users?: components["schemas"]["UserDto"][];
        };
        GetAccessResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            access?: components["schemas"]["AccessDto"];
        };
        AccessesResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            accesses?: components["schemas"]["AccessesDto"];
        };
        AccountHierarchyDto: {
            /** @description email */
            email: string;
            customerId?: string;
            /** @description code of the customer */
            customerCode?: string;
            /** @description code of the seller */
            sellerCode?: string;
            /** @description code of the customer brand */
            customerBrandCode?: string;
            /** @description code of the customer category */
            customerCategoryCode?: string;
            /** @description code of the currency */
            currencyCode?: string;
            /** @description code of the customer country */
            countryCode?: string;
            /** @description code of the language */
            languageCode?: string;
            /** @description code of the title */
            titleCode?: string;
            /** @description first name of the account user */
            firstName?: string;
            /** @description last name of the account user */
            lastName?: string;
            /**
             * Format: date-time
             * @description date of the birthday
             */
            birthDate?: string;
            /** @description phone number */
            phoneNumber?: string;
            /** @description code of the billing cycle */
            billingCycleCode?: string;
            /** @description the first adresse, to be used for account */
            address1?: string;
            /** @description the second adresse, to be used for account */
            address2?: string;
            /** @description the third adresse, to be used for account */
            address3?: string;
            /** @description zip code */
            zipCode?: string;
            state?: string;
            /** @description city of the user account */
            city?: string;
            usePrefix?: boolean;
            invoicingThreshold?: number;
            /** @description Account tax category code - overrides the value from a customer category */
            taxCategoryCode?: string;
            /** @description List of discount plans */
            discountPlansForInstantiation?: components["schemas"]["DiscountPlanDto"][];
            /** @description List of discount plans to be disassociated in a billing account */
            discountPlansForTermination?: string[];
            customFields?: components["schemas"]["CustomFieldsDto"];
            /** Format: int32 */
            limit?: number;
            sortField?: string;
            /** Format: int32 */
            index?: number;
            /** @description The payment methods */
            paymentMethods?: components["schemas"]["PaymentMethodDto"][];
            /** Format: int32 */
            paymentMethod?: number;
            /** @description Job title. Account Entity */
            jobTitle?: string;
            /** @description Registration number */
            registrationNo?: string;
            /**
             * @description The option on how to check the threshold
             * @example possible value are : BEFORE_DISCOUNT, AFTER_DISCOUNT, POSITIVE_RT, POSITIVE_IL
             * @enum {string}
             */
            checkThreshold?: "BEFORE_DISCOUNT" | "AFTER_DISCOUNT" | "POSITIVE_RT" | "POSITIVE_IL";
            /**
             * @description The option on how to check the threshold for customer Account
             * @example possible value are : BEFORE_DISCOUNT, AFTER_DISCOUNT, POSITIVE_RT, POSITIVE_IL
             * @enum {string}
             */
            customerAccountCheckThreshold?: "BEFORE_DISCOUNT" | "AFTER_DISCOUNT" | "POSITIVE_RT" | "POSITIVE_IL";
            /**
             * @description The option on how to check the threshold for customer
             * @example possible value are : BEFORE_DISCOUNT, AFTER_DISCOUNT, POSITIVE_RT, POSITIVE_IL
             * @enum {string}
             */
            customerCheckThreshold?: "BEFORE_DISCOUNT" | "AFTER_DISCOUNT" | "POSITIVE_RT" | "POSITIVE_IL";
            vatNo?: string;
            /** @description The mailing Type */
            mailingType?: string;
            /** @description Email template */
            emailTemplate?: string;
            /** @description cc Emails */
            ccedEmails?: string;
            minimumAmountEl?: components["schemas"]["MinimumAmountElDto"];
            /** @description The invoicing threshold for the customer */
            customerInvoicingThreshold?: number;
            /** @description The invoicing threshold for the customer account */
            customerAccountInvoicingThreshold?: number;
            /** @description check the threshold per entity/invoice for BA */
            thresholdPerEntity?: boolean;
            customerAccountThresholdPerEntity?: boolean;
            customerThresholdPerEntity?: boolean;
            /** @description General client account code */
            generalClientAccountCode?: string;
            parentCustomer?: components["schemas"]["CustomerDto"];
        };
        MinimumAmountElDto: {
            /** @description Expression to determine minimum amount value for Customer */
            customerMinimumAmountEl?: string;
            /** @description Expression to determine rated transaction description to reach minimum amount value for Customer */
            customerMinimumLabelEl?: string;
            /** @description The billable Entity for customer */
            customerMinimumTargetAccount?: string;
            /** @description Expression to determine minimum amount value for CA */
            customerAccountMinimumAmountEl?: string;
            /** @description Expression to determine rated transaction description to reach minimum amount value for CA */
            customerAccountMinimumLabelEl?: string;
            /** @description The billable Entity for CA */
            customerAccountMinimumTargetAccount?: string;
            /** @description Expression to determine minimum amount value for BA */
            billingAccountMinimumAmountEl?: string;
            /** @description Expression to determine rated transaction description to reach minimum amount value for BA */
            billingAccountMinimumLabelEl?: string;
            /** @description Expression to determine minimum amount value for UA */
            userAccountMinimumAmountEl?: string;
            /** @description Expression to determine rated transaction description to reach minimum amount value for UA */
            userAccountMinimumLabelEl?: string;
            /** @description Corresponding to minimum one shot charge template for the customer */
            customerMinimumChargeTemplate?: string;
            /** @description Corresponding to minimum one shot charge template for the customer account */
            customerAccountMinimumChargeTemplate?: string;
            /** @description Corresponding to minimum one shot charge template for the billing account */
            billingAccountMinimumChargeTemplate?: string;
            /** @description Corresponding to minimum one shot charge template for the billing account */
            userAccountMinimumChargeTemplate?: string;
        };
        CRMAccountHierarchyDto: {
            crmAccountType?: string;
            crmParentCode?: string;
            code?: string;
            description?: string;
            externalRef1?: string;
            externalRef2?: string;
            name?: components["schemas"]["NameDto"];
            address?: components["schemas"]["AddressDto"];
            contactInformation?: components["schemas"]["ContactInformationDto"];
            jobTitle?: string;
            language?: string;
            terminationReason?: string;
            /** Format: date-time */
            subscriptionDate?: string;
            /** Format: date-time */
            terminationDate?: string;
            customerCategory?: string;
            customerBrand?: string;
            registrationNo?: string;
            vatNo?: string;
            seller?: string;
            mandateIdentification?: string;
            /** Format: date-time */
            mandateDate?: string;
            currency?: string;
            /** @enum {string} */
            caStatus?: "ACTIVE" | "CLOSE";
            creditCategory?: string;
            /** Format: date-time */
            dateStatus?: string;
            /** Format: date-time */
            dateDunningLevel?: string;
            /** @enum {string} */
            dunningLevel?: "R0" | "R1" | "R2" | "R3" | "R4" | "R5" | "R6";
            paymentMethods?: components["schemas"]["PaymentMethodDto"][];
            /** @enum {string} */
            paymentMethod?: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
            bankCoordinates?: components["schemas"]["BankCoordinatesDto"];
            paymentTerms?: string;
            billingCycle?: string;
            country?: string;
            /** Format: date-time */
            nextInvoiceDate?: string;
            electronicBilling?: boolean;
            /** @enum {string} */
            baStatus?: "ACTIVE" | "CANCELED" | "TERMINATED" | "CLOSED";
            email?: string;
            invoicingThreshold?: number;
            /** @enum {string} */
            uaStatus?: "ACTIVE" | "CANCELED" | "TERMINATED" | "CLOSED";
            cfToAdd?: components["schemas"]["CustomFieldDto"];
            cfMapToAdd?: components["schemas"]["CustomFieldDto"];
            customFields?: components["schemas"]["CustomFieldsDto"];
            discountPlansForInstantiation?: components["schemas"]["DiscountPlanDto"][];
            discountPlansForTermination?: string[];
            mailingType?: string;
            emailTemplate?: string;
            ccedEmails?: string;
            minimumAmountEl?: components["schemas"]["MinimumAmountElDto"];
            customerInvoicingThreshold?: number;
            customerAccountInvoicingThreshold?: number;
            /** @enum {string} */
            checkThreshold?: "BEFORE_DISCOUNT" | "AFTER_DISCOUNT" | "POSITIVE_RT" | "POSITIVE_IL";
            /** @enum {string} */
            customerAccountCheckThreshold?: "BEFORE_DISCOUNT" | "AFTER_DISCOUNT" | "POSITIVE_RT" | "POSITIVE_IL";
            /** @enum {string} */
            customerCheckThreshold?: "BEFORE_DISCOUNT" | "AFTER_DISCOUNT" | "POSITIVE_RT" | "POSITIVE_IL";
            taxCategoryCode?: string;
            legalEntityType?: components["schemas"]["TitleDto"];
            parentCustomerCode?: string;
            thresholdPerEntity?: boolean;
            customerAccountThresholdPerEntity?: boolean;
            customerThresholdPerEntity?: boolean;
            company?: boolean;
        };
        CustomerHierarchyDto: {
            sellers: components["schemas"]["SellersDto"];
        };
        CustomerListResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            customers?: components["schemas"]["CustomersDto"];
        };
        GetAccountHierarchyResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            customers?: components["schemas"]["CustomersDto"];
        };
        FindAccountHierachyRequestDto: {
            /** Format: int32 */
            level?: number;
            name?: components["schemas"]["NameDto"];
            address?: components["schemas"]["AddressDto"];
        };
        CounterInstanceDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
        };
        CountersInstancesDto: {
            counterInstance?: components["schemas"]["CounterInstanceDto"][];
        };
        GetCountersInstancesResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            countersInstances?: components["schemas"]["CountersInstancesDto"];
        };
        GetBillingAccountResponseDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            /** @description The external ref 1 */
            externalRef1?: string;
            /** @description The external ref 2 */
            externalRef2?: string;
            name?: components["schemas"]["NameDto"];
            address?: components["schemas"]["AddressDto"];
            /** @description The job title */
            jobTitle?: string;
            businessAccountModel?: components["schemas"]["BusinessEntityDto"];
            customFields?: components["schemas"]["CustomFieldsDto"];
            loaded?: boolean;
            /** @description The vat no */
            vatNo?: string;
            /** @description The registration no */
            registrationNo?: string;
            contactInformation?: components["schemas"]["ContactInformationDto"];
            /** @description Expression to determine minimum amount value */
            minimumAmountEl?: string;
            /** @description Expression to determine rated transaction description to reach minimum amount value */
            minimumLabelEl?: string;
            /** @description The billing account code to be used when calculating the min amount billable for Customer and CA */
            minimumTargetAccount?: string;
            /** @description Expression to determine minimum amount value - for Spark */
            minimumAmountElSpark?: string;
            /** @description Expression to determine rated transaction description to reach minimum amount value - for Spark */
            minimumLabelElSpark?: string;
            /** @description Corresponding to minimum one shot charge template code */
            minimumChargeTemplate?: string;
            /** @description indicate if this is a company */
            isCompany?: boolean;
            legalEntityType?: components["schemas"]["TitleDto"];
            /** @description The customer account */
            customerAccount: string;
            /** @description The billing cycle */
            billingCycle: string;
            /** @description The country */
            country: string;
            /** @description The trading currency */
            tradingCurrency?: string;
            /** @description The language */
            language: string;
            /**
             * Format: date-time
             * @description The next invoice date
             */
            nextInvoiceDate?: string;
            /**
             * Format: date-time
             * @description The subscription date
             */
            subscriptionDate?: string;
            /**
             * Format: date-time
             * @description The termination date
             */
            terminationDate?: string;
            /** @description The electronic billing */
            electronicBilling?: boolean;
            /**
             * @description The status of billing account
             * @example possible value are : ACTIVE, CANCELED, TERMINATED, CLOSED
             * @enum {string}
             */
            status?: "ACTIVE" | "CANCELED" | "TERMINATED" | "CLOSED";
            /**
             * Format: date-time
             * @description The status date, it set automatically when the status was changed
             */
            statusDate?: string;
            /** @description The termination reason */
            terminationReason?: string;
            /** @description The email */
            email?: string;
            /** @description list of the invoice */
            invoices?: components["schemas"]["InvoiceDto"][];
            /** @description The invoicing threshold */
            invoicingThreshold?: number;
            /** @description The phone */
            phone?: string;
            /** @description Minimum Invoice SubCategory */
            minimumInvoiceSubCategory?: string;
            /**
             * @description Field was deprecated in 4.6 version. Use 'paymentMethods' field on CustomerAccount entity instead
             * @enum {string}
             */
            paymentMethodType?: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
            bankCoordinates?: components["schemas"]["BankCoordinatesDto"];
            /** @description Field was deprecated in 4.6 version. Use custom fields instead */
            paymentTerms?: string;
            userAccounts?: components["schemas"]["UserAccountsDto"];
            /** @description List of discount plans. Use in instantiating a discount plan instance */
            discountPlansForInstantiation?: components["schemas"]["DiscountPlanDto"][];
            /** @description List of discount plans to be disassociated in a BillingAccount */
            discountPlansForTermination?: string[];
            /**
             * @description Use to return the active discount plans for this entity
             * @example discountPlanInstance : []
             */
            discountPlanInstances?: components["schemas"]["DiscountPlanInstanceDto"][];
            /** @description Mailing type */
            mailingType?: string;
            /** @description Email Template code */
            emailTemplate?: string;
            /**
             * @description list of emails separated by comma
             * @example example1@example.com,example2@example.com
             */
            ccedEmails?: string;
            /** @description Account tax category code - overrides the value from a customer category */
            taxCategoryCode?: string;
            /**
             * @description The option on how to check the threshold
             * @example possible value are: BEFORE_DISCOUNT, AFTER_DISCOUNT, POSITIVE_RT, POSITIVE_IL
             * @enum {string}
             */
            checkThreshold?: "BEFORE_DISCOUNT" | "AFTER_DISCOUNT" | "POSITIVE_RT" | "POSITIVE_IL";
            /** @description List of GDPR related to billing account */
            infoGdpr?: components["schemas"]["GDPRInfoDto"][];
            paymentMethod?: components["schemas"]["PaymentMethodDto"];
            /** @description check the threshold per entity/invoice for BA */
            thresholdPerEntity?: boolean;
            /** @description The primary contact */
            primaryContact?: string;
            billingAccount?: components["schemas"]["BillingAccountDto"];
            tags?: components["schemas"]["TagDto"][];
            actionStatus?: components["schemas"]["ActionStatus"];
        };
        TagDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            /** @description code of the seller */
            sellerCode?: string;
            /** @description name of the tag */
            name: string;
            /** @description code of the type of the tag */
            tagTypeCode: string;
            /** @description code of the tag parent */
            parentTagCode?: string;
            /** @description filter expression language */
            filterEl?: string;
        };
        BillingAccountsResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            billingAccounts?: components["schemas"]["BillingAccountsDto"];
        };
        BaseEntityDto: Record<string, never>;
        BusinessAccountModelDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            /** @enum {string} */
            license?: "APACHE" | "BSD3_N" | "BSD3_R" | "BSD2_S" | "FREE_BSD" | "GPL" | "AGPL" | "LGPL" | "MIT" | "MOZ" | "CDDL" | "EPL" | "OPEN" | "COM";
            logoPicture?: string;
            logoPictureFile?: string[];
            script?: components["schemas"]["ScriptInstanceDto"];
            moduleItems?: components["schemas"]["BaseEntityDto"][];
            /** @enum {string} */
            hierarchyType?: "S" | "S_C" | "C" | "S_CA" | "C_CA" | "CA" | "S_BA" | "C_BA" | "CA_BA" | "BA" | "S_UA" | "C_UA" | "CA_UA" | "BA_UA" | "UA";
            codeOnly?: boolean;
            transient?: boolean;
        };
        BusinessAccountModelResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            businessAccountModel?: components["schemas"]["BusinessAccountModelDto"];
        };
        ParentEntitiesDto: {
            parent?: components["schemas"]["ParentEntityDto"][];
        };
        ParentEntityDto: {
            code?: string;
            description?: string;
        };
        ParentListResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            parents?: components["schemas"]["ParentEntitiesDto"];
        };
        CRMAccountTypeSearchDto: {
            searchTerm?: string;
            accountTypeCode?: string;
            /** Format: int32 */
            limit?: number;
            /** Format: int32 */
            offset?: number;
            /** @enum {string} */
            order?: "ASCENDING" | "DESCENDING";
            sortField?: string;
        };
        MeveoModuleDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            /** @enum {string} */
            license?: "APACHE" | "BSD3_N" | "BSD3_R" | "BSD2_S" | "FREE_BSD" | "GPL" | "AGPL" | "LGPL" | "MIT" | "MOZ" | "CDDL" | "EPL" | "OPEN" | "COM";
            logoPicture?: string;
            logoPictureFile?: string[];
            script?: components["schemas"]["ScriptInstanceDto"];
            moduleItems?: components["schemas"]["BaseEntityDto"][];
            codeOnly?: boolean;
            transient?: boolean;
        };
        MeveoModuleDtosResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            modules?: components["schemas"]["MeveoModuleDto"][];
        };
        GetCustomerAccountResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            customerAccount?: components["schemas"]["CustomerAccountDto"];
        };
        CustomerAccountsResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            customerAccounts?: components["schemas"]["CustomerAccountsDto"];
        };
        TransferCustomerAccountDto: {
            fromCustomerAccountCode: string;
            toCustomerAccountCode: string;
            amount?: number;
        };
        CustomerSequenceDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            genericSequence?: components["schemas"]["GenericSequenceDto"];
            /** @description Code of the seller */
            seller: string;
        };
        GenericSequenceDto: {
            /** @description Prefix of sequence */
            prefix?: string;
            /**
             * Format: int64
             * @description Size of the sequence. Maximum allowable for RUM is 35
             */
            sequenceSize?: number;
            /**
             * Format: int64
             * @description Current value of the sequence
             */
            currentSequenceNb?: number;
        };
        GetCustomerResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            customer?: components["schemas"]["CustomerDto"];
        };
        GetCustomerCategoryResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            customerCategory?: components["schemas"]["CustomerCategoryDto"];
        };
        GenericSequenceValueResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            sequence?: components["schemas"]["GenericSequenceDto"];
            value?: string;
            seller?: string;
            paymentGateway?: string;
        };
        CustomersResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            customers?: components["schemas"]["CustomersDto"];
        };
        ProviderContactDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            firstName?: string;
            lastName?: string;
            email?: string;
            phone?: string;
            mobile?: string;
            fax?: string;
            genericMail?: string;
            addressDto?: components["schemas"]["AddressDto"];
        };
        ProviderContactResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            providerContact?: components["schemas"]["ProviderContactDto"];
        };
        ProviderContactsResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            providerContacts?: components["schemas"]["ProviderContactDto"][];
        };
        TitleResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            titleDto?: components["schemas"]["TitleDto"];
        };
        TitlesResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            titles?: components["schemas"]["TitlesDto"];
        };
        ApplyProductRequestDto: {
            product: string;
            userAccount?: string;
            subscription?: string;
            /** Format: date-time */
            subscriptionValidityDate?: string;
            /** Format: date-time */
            operationDate: string;
            quantity?: number;
            description?: string;
            amountWithoutTax?: number;
            amountWithTax?: number;
            criteria1?: string;
            criteria2?: string;
            criteria3?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
            seller?: string;
        };
        GetUserAccountResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            userAccount?: components["schemas"]["UserAccountDto"];
        };
        UserAccountsResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            userAccounts?: components["schemas"]["UserAccountsDto"];
        };
        FileFormatDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            fileNamePattern?: string;
            fileNameUniqueness?: boolean;
            fileTypes?: string[];
            configurationTemplate?: string;
            recordName?: string;
            inputDirectory?: string;
            outputDirectory?: string;
            rejectDirectory?: string;
            archiveDirectory?: string;
            jobCode?: string;
        };
        FileFormatResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            dto?: components["schemas"]["FileFormatDto"];
        };
        FileFormatListResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            dtos?: components["schemas"]["FileFormatDto"][];
        };
        FileDto: {
            name?: string;
            /** Format: date-time */
            lastModified?: string;
            directory?: boolean;
        };
        GetFilesResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            files?: components["schemas"]["FileDto"][];
        };
        FileRequestDto: {
            filepath: string;
            content: string;
        };
        AccountingCodeDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            parentAccountingCode?: string;
            /** @enum {string} */
            chartOfAccountTypeEnum?: "ASSETS" | "LIABILITIES" | "EQUITY" | "REVENUE" | "EXPENSE";
            /** @enum {string} */
            chartOfAccountViewTypeEnum?: "VIEW" | "REGULAR";
            reportingAccount?: string;
            notes?: string;
            migrated?: boolean;
        };
        AccountingCodeGetResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            accountingCode?: components["schemas"]["AccountingCodeDto"];
        };
        AccountingCodeListResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            accountingCodes?: components["schemas"]["AccountingCodeDto"][];
        };
        InvoicingPlanItemDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            billingPlanCode?: string;
            /** Format: int32 */
            advancement?: number;
            rateToBill?: number;
            customFields?: components["schemas"]["CustomFieldsDto"];
        };
        InvoicingPlanItemResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            invoicingPlanItemDto?: components["schemas"]["InvoicingPlanItemDto"];
        };
        InvoicingPlanItemsDto: {
            invoicingPlanItem?: components["schemas"]["InvoicingPlanItemDto"][];
        };
        InvoicingPlanItemsResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            invoicingPlanItems?: components["schemas"]["InvoicingPlanItemsDto"];
        };
        InvoicingPlanDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
        };
        InvoicingPlanResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            invoicingPlanDto?: components["schemas"]["InvoicingPlanDto"];
        };
        InvoicingPlansDto: {
            invoicingPlan?: components["schemas"]["InvoicingPlanDto"][];
        };
        InvoicingPlansResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            invoicingPlans?: components["schemas"]["InvoicingPlansDto"];
        };
        CancelBillingRunRequestDto: {
            /** Format: int64 */
            billingRunId: number;
        };
        InvoiceValidationDto: {
            invoices?: number[];
            deleteCanceledInvoices?: boolean;
        };
        CreateBillingRunDto: {
            /** Format: int64 */
            id?: number;
            billingCycleCode?: string;
            /** @enum {string} */
            billingRunTypeEnum?: "AUTOMATIC" | "MANUAL" | "FULL_AUTOMATIC";
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string;
            /** Format: date-time */
            invoiceDate?: string;
            /** Format: date-time */
            lastTransactionDate?: string;
            /** @enum {string} */
            referenceDate?: "TODAY" | "NEXT_INVOICE_DATE" | "LAST_TRANSACTION_DATE" | "END_DATE";
            customFields?: components["schemas"]["CustomFieldsDto"];
            /** Format: date-time */
            collectionDate?: string;
            computeDatesAtValidation?: boolean;
            skipValidationScript?: boolean;
            /** @enum {string} */
            rejectAutoAction?: "CANCEL" | "MOVE" | "MANUAL_ACTION" | "AUTOMATIC_VALIDATION";
            /** @enum {string} */
            suspectAutoAction?: "CANCEL" | "MOVE" | "MANUAL_ACTION" | "AUTOMATIC_VALIDATION";
            generateAO?: boolean;
            descriptionsTranslated?: components["schemas"]["LanguageDescriptionDto"][];
        };
        GetBillingAccountListInRunResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            billingAccountsDto?: components["schemas"]["BillingAccountsDto"];
        };
        BillingRunDto: {
            /** Format: date-time */
            processDate?: string;
            /** @enum {string} */
            status?: "NEW" | "PREINVOICED" | "PREVALIDATED" | "CANCELED" | "INVOICES_GENERATED" | "POSTINVOICED" | "POSTVALIDATED" | "VALIDATED" | "CANCELLING" | "REJECTED" | "CREATING_INVOICE_LINES" | "INVOICE_LINES_CREATED" | "INVOICES_CREATED" | "MINIMUM_ADDED" | "THRESHOLD_CHECKED" | "DISCOUNT_ADDED" | "TAX_COMPUTED" | "DRAFT_INVOICES";
            /** Format: date-time */
            statusDate?: string;
            billingCycle?: components["schemas"]["BillingCycleDto"];
            /** Format: int32 */
            billingAccountNumber?: number;
            /** Format: int32 */
            billableBillingAcountNumber?: number;
            /** Format: int32 */
            producibleInvoiceNumber?: number;
            producibleAmountWithoutTax?: number;
            producibleAmountTax?: number;
            producibleAmountWithTax?: number;
            prAmountWithoutTax?: number;
            prAmountWithTax?: number;
            prAmountTax?: number;
            /** @enum {string} */
            processType?: "AUTOMATIC" | "MANUAL" | "FULL_AUTOMATIC";
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string;
            /** Format: date-time */
            invoiceDate?: string;
            /** Format: date-time */
            lastTransactionDate?: string;
            /** @enum {string} */
            referenceDate?: "TODAY" | "NEXT_INVOICE_DATE" | "LAST_TRANSACTION_DATE" | "END_DATE";
            rejectionReason?: string;
            currencyCode?: string;
            countryCode?: string;
            languageCode?: string;
            selectedBillingAccounts?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
            /** Format: date-time */
            collectionDate?: string;
            computeDatesAtValidation?: boolean;
            generateAO?: boolean;
            skipValidationScript?: boolean;
            /** @enum {string} */
            rejectAutoAction?: "CANCEL" | "MOVE" | "MANUAL_ACTION" | "AUTOMATIC_VALIDATION";
            /** @enum {string} */
            suspectAutoAction?: "CANCEL" | "MOVE" | "MANUAL_ACTION" | "AUTOMATIC_VALIDATION";
            /** Format: int32 */
            invoiceNumber?: number;
        };
        GetBillingRunInfoResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            billingRunDto?: components["schemas"]["BillingRunDto"];
        };
        GetPostInvoicingReportsResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            postInvoicingReportsDTO?: components["schemas"]["PostInvoicingReportsDTO"];
        };
        PostInvoicingReportsDTO: {
            /** Format: int32 */
            invoicesNumber?: number;
            /** Format: int32 */
            positiveInvoicesNumber?: number;
            /** Format: int32 */
            negativeInvoicesNumber?: number;
            globalAmount?: number;
            positiveInvoicesAmountHT?: number;
            positiveInvoicesTaxAmount?: number;
            positiveInvoicesAmount?: number;
            negativeInvoicesAmountHT?: number;
            negativeInvoicesTaxAmount?: number;
            negativeInvoicesAmount?: number;
            /** Format: int32 */
            emptyInvoicesNumber?: number;
            /** Format: int32 */
            electronicInvoicesNumber?: number;
            /** Format: int32 */
            checkInvoicesNumber?: number;
            /** Format: int32 */
            directDebitInvoicesNumber?: number;
            /** Format: int32 */
            tipInvoicesNumber?: number;
            /** Format: int32 */
            wiretransferInvoicesNumber?: number;
            /** Format: int32 */
            creditDebitCardInvoicesNumber?: number;
            /** Format: int32 */
            npmInvoicesNumber?: number;
            checkAmuontHT?: number;
            directDebitAmuontHT?: number;
            tipAmuontHT?: number;
            wiretransferAmuontHT?: number;
            creditDebitCardAmountHT?: number;
            npmAmountHT?: number;
            checkAmuont?: number;
            directDebitAmuont?: number;
            tipAmuont?: number;
            wiretransferAmuont?: number;
            creditDebitCardAmount?: number;
            npmAmount?: number;
        };
        GetPreInvoicingReportsResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            preInvoicingReportsDTO?: components["schemas"]["PreInvoicingReportsDTO"];
        };
        PreInvoicingReportsDTO: {
            billingCycleCode?: string;
            /** Format: int32 */
            billingAccountNumber?: number;
            /** Format: int32 */
            billableBillingAccountNumber?: number;
            /** Format: date-time */
            lastTransactionDate?: string;
            /** Format: date-time */
            invoiceDate?: string;
            amoutWitountTax?: number;
            /** Format: int32 */
            checkBANumber?: number;
            /** Format: int32 */
            directDebitBANumber?: number;
            /** Format: int32 */
            tipBANumber?: number;
            /** Format: int32 */
            wiretransferBANumber?: number;
            /** Format: int32 */
            creditDebitCardBANumber?: number;
            /** Format: int32 */
            checkBillableBANumber?: number;
            /** Format: int32 */
            directDebitBillableBANumber?: number;
            /** Format: int32 */
            tipBillableBANumber?: number;
            /** Format: int32 */
            wiretransferBillableBANumber?: number;
            /** Format: int32 */
            creditDebitCardBillableBANumber?: number;
            checkBillableBAAmountHT?: number;
            directDebitBillableBAAmountHT?: number;
            tipBillableBAAmountHT?: number;
            wiretransferBillableBAAmountHT?: number;
            creditDebitCardBillableBAAmountHT?: number;
            taxesAmount?: number;
            subCategoriesAmountHT?: number;
        };
        InvalidateInvoiceDocumentsDto: {
            invalidateXMLInvoices?: boolean;
            invalidatePDFInvoices?: boolean;
        };
        ValidateBillingRunRequestDto: {
            /** Format: int64 */
            billingRunId: number;
        };
        PrepaidReservationDto: {
            /** Format: int64 */
            reservationId?: number;
            consumedQuantity?: number;
        };
        CdrError: {
            errorCode?: string;
            errorMessage?: string;
            cdr?: string;
        };
        ChargeCDRResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            amountWithoutTax?: number;
            amountTax?: number;
            amountWithTax?: number;
            /** Format: int32 */
            walletOperationCount?: number;
            edrIds?: number[];
            reservationIds?: number[];
            walletOperations?: components["schemas"]["WalletOperationDto"][];
            counterPeriods?: components["schemas"]["CounterPeriodDto"][];
            error?: components["schemas"]["CdrError"];
        };
        CounterPeriodDto: {
            /** Format: int64 */
            id?: number;
            code?: string;
            /** @enum {string} */
            counterType?: "USAGE" | "NOTIFICATION" | "USAGE_AMOUNT";
            level?: number;
            periodStartDate?: string;
            periodEndDate?: string;
            value?: number;
            accumulator?: boolean;
            accumulatedValues?: {
                [key: string]: number;
            };
            /** @enum {string} */
            accumulatorType?: "MULTI_VALUE" | "SINGLE_VALUE";
        };
        WalletOperationDto: {
            /** Format: int64 */
            id?: number;
            code?: string;
            description?: string;
            userAccount?: string;
            subscription?: string;
            walletTemplate?: string;
            seller?: string;
            chargeInstance?: string;
            /** Format: int64 */
            chargeInstanceId?: number;
            currency?: string;
            /** @enum {string} */
            type?: "CREDIT" | "DEBIT";
            /** @enum {string} */
            status?: "OPEN" | "TREATED" | "CANCELED" | "RESERVED" | "F_TO_RERATE" | "TO_RERATE" | "RERATED" | "SCHEDULED" | "REJECTED";
            ratingUnitDescription?: string;
            pricePlanCode?: string;
            taxCode?: string;
            taxPercent?: number;
            unitAmountWithoutTax?: number;
            unitAmountWithTax?: number;
            unitAmountTax?: number;
            quantity?: number;
            amountWithoutTax?: number;
            amountWithTax?: number;
            amountTax?: number;
            parameter1?: string;
            parameter2?: string;
            parameter3?: string;
            parameterExtra?: string;
            orderNumber?: string;
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string;
            /** Format: date-time */
            operationDate?: string;
            /** Format: date-time */
            subscriptionDate?: string;
            offerCode?: string;
            rawAmountWithoutTax?: number;
            rawAmountWithTax?: number;
            ratedTransaction?: components["schemas"]["WoRatedTransactionDto"];
            /** Format: int64 */
            walletId?: number;
            customFields?: components["schemas"]["CustomFieldsDto"];
            taxClassCode?: string;
            /** Format: int32 */
            sortIndex?: number;
        };
        WoRatedTransactionDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            /** @enum {string} */
            status?: "OPEN" | "BILLED" | "REJECTED" | "RERATED" | "CANCELED" | "PROCESSED";
        };
        CdrDto: {
            /** Format: date-time */
            eventDate?: string;
            quantity?: number;
            parameter1?: string;
            parameter2?: string;
            parameter3?: string;
            parameter4?: string;
            parameter5?: string;
            parameter6?: string;
            parameter7?: string;
            parameter8?: string;
            parameter9?: string;
            /** Format: date-time */
            dateParam1?: string;
            /** Format: date-time */
            dateParam2?: string;
            /** Format: date-time */
            dateParam3?: string;
            /** Format: date-time */
            dateParam4?: string;
            /** Format: date-time */
            dateParam5?: string;
            decimalParam1?: number;
            decimalParam2?: number;
            decimalParam3?: number;
            decimalParam4?: number;
            decimalParam5?: number;
            accessCode?: string;
            /** Format: int64 */
            headerEDRId?: number;
            extraParam?: string;
            rejectReason?: string;
        };
        CdrListDto: {
            cdr?: string[];
            ipAddress?: string;
        };
        ProcessCDRResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            listProcessCdrDto?: components["schemas"]["ProcessCdrDto"][];
        };
        ProcessCdrDto: {
            /** Format: int64 */
            cdrId?: number;
            /** @enum {string} */
            status?: "OPEN" | "PROCESSED" | "CLOSED" | "DISCARDED" | "ERROR" | "TO_REPROCESS";
            rejectReason?: string;
            /** Format: int64 */
            edrId?: number;
        };
        CdrReservationResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            /** Format: double */
            availableQuantity?: number;
            /** Format: int64 */
            reservationId?: number;
        };
        RatedTransactionListResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            ratedTransactions?: components["schemas"]["RatedTransactionDto"][];
        };
        ActivateSubscriptionRequestDto: {
            subscriptionCode: string;
        };
        SubscriptionForCustomerResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            subscriptionEndDate?: string;
        };
        SubscriptionForCustomerRequestDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            subscriptionCode?: string;
            /** Format: date-time */
            subscriptionValidityDate?: string;
            subscriptionClientId?: string;
        };
        ActivateServicesRequestDto: {
            subscription: string;
            /** Format: date-time */
            subscriptionValidityDate?: string;
            servicesToActivateDto?: components["schemas"]["ServicesToActivateDto"];
        };
        ChargeInstanceOverrideDto: {
            chargeInstanceCode?: string;
            amountWithoutTax?: number;
            amountWithTax?: number;
            description?: string;
        };
        ChargeInstanceOverridesDto: {
            chargeInstanceOverride?: components["schemas"]["ChargeInstanceOverrideDto"][];
        };
        ServiceToActivateDto: {
            /** Format: int64 */
            id?: number;
            code?: string;
            overrideCode?: string;
            description?: string;
            quantity?: number;
            /** Format: date-time */
            subscriptionDate?: string;
            chargeInstanceOverrides?: components["schemas"]["ChargeInstanceOverridesDto"];
            customFields?: components["schemas"]["CustomFieldsDto"];
            /** Format: date-time */
            rateUntilDate?: string;
            amountPS?: number;
            calendarPSCode?: string;
            /** Format: int32 */
            paymentDayInMonthPS?: number;
            minimumAmountEl?: string;
            minimumLabelEl?: string;
            minimumInvoiceSubCategory?: string;
            minimumChargeTemplate?: string;
            /** Format: date-time */
            subscribedTillDate?: string;
            serviceRenewal?: components["schemas"]["SubscriptionRenewalDto"];
        };
        ServicesToActivateDto: {
            service: components["schemas"]["ServiceToActivateDto"][];
        };
        ApplyOneShotChargeInstanceRequestDto: {
            oneShotCharge: string;
            subscription: string;
            productCode?: string;
            /** Format: date-time */
            subscriptionValidityDate?: string;
            wallet?: string;
            createWallet?: boolean;
            generateRTs?: boolean;
            /** Format: date-time */
            operationDate: string;
            quantity?: number;
            description?: string;
            amountWithoutTax?: number;
            amountWithTax?: number;
            criteria1?: string;
            criteria2?: string;
            criteria3?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
        };
        ServiceInstanceToDelete: {
            /** @description List of Service instance to delete */
            ids: number[];
        };
        SubscriptionsListDto: {
            /** Format: int32 */
            listSize?: number;
            subscription?: components["schemas"]["SubscriptionDto"][];
        };
        SubscriptionsListResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            subscriptions?: components["schemas"]["SubscriptionsListDto"];
        };
        DueDateDelayDto: {
            /** @enum {string} */
            delayOrigin?: "ORDER" | "CA" | "BC";
            /** Format: int32 */
            computedDelay?: number;
            delayEL?: string;
        };
        GetDueDateDelayResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            dueDateDelay?: components["schemas"]["DueDateDelayDto"];
        };
        GetServiceInstanceResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            serviceInstance?: components["schemas"]["ServiceInstanceDto"];
        };
        GetSubscriptionResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            subscription?: components["schemas"]["SubscriptionDto"];
        };
        GetOneShotChargesResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            oneshotCharges?: components["schemas"]["OneShotChargeTemplateDto"][];
            oneshotChargeInstances?: components["schemas"]["OneShotChargeInstanceDto"][];
        };
        OneShotChargeInstanceDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            /** Format: date-time */
            operationDate?: string;
            /** Format: date-time */
            terminationDate?: string;
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE" | "CANCELED" | "TERMINATED" | "SUSPENDED" | "CLOSED" | "PENDING";
            quantity?: number;
            amountWithoutTax?: number;
            amountWithTax?: number;
            customFields?: components["schemas"]["CustomFieldsDto"];
        };
        OneShotChargeTemplateDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            /** @description The invoice sub category */
            invoiceSubCategory?: string;
            /** @description The amount can be editable */
            amountEditable?: boolean;
            /** @description list of the language description */
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
            inputUnitDescription?: string;
            ratingUnitDescription?: string;
            unitMultiplicator?: number;
            /** @description code of unit  measure */
            inputUnitOfMeasureCode?: string;
            /** @description code of rating unit of measure */
            ratingUnitOfMeasureCode?: string;
            /** @description input unit expression language */
            inputUnitEL?: string;
            /** @description output unit expression language */
            outputUnitEL?: string;
            /**
             * Format: int32
             * @description EDR and WO quantity field value precision
             */
            unitNbDecimal?: number;
            /**
             * @description EDR and WO quantity field value rounding
             * @example possible value are : NEAREST, DOWN, UP
             * @enum {string}
             */
            roundingModeDtoEnum?: "NEAREST" | "DOWN" | "UP" | "HALF_EVEN";
            /** @description The revenue recognition rule code */
            revenueRecognitionRuleCode?: string;
            /** @description The filter expression */
            filterExpression?: string;
            /** @description code of tax class */
            taxClassCode?: string;
            /** @description Expression to determine tax class */
            taxClassEl?: string;
            /** @description Code of a rating script */
            ratingScriptCode?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
            triggeredEdrs?: components["schemas"]["TriggeredEdrTemplatesDto"];
            /** @description Enable/disable removing WO rated to 0 */
            dropZeroWo?: boolean;
            /** @description Sorting index EL */
            sortIndexEl?: string;
            /**
             * @description ChargeTemplate status
             * @enum {string}
             */
            status?: "DRAFT" | "ACTIVE" | "ARCHIVED";
            linkedAttributes?: string[];
            /** @description Internal Note */
            internalNote?: string;
            /** @description Code of quantity attribute */
            quantityAttribute?: string;
            /** @description Applies the contract during rating script execution. */
            applyContractOverRatingScript?: boolean;
            /**
             * @description The one shot charge template type
             * @example possible value are : SUBSCRIPTION, TERMINATION, OTHER
             * @enum {string}
             */
            oneShotChargeTemplateType: "oneShotChargeTemplateTypeEnum.subscription" | "oneShotChargeTemplateTypeEnum.termination" | "oneShotChargeTemplateTypeEnum.other";
            /** @description The immediate invoicing */
            immediateInvoicing?: boolean;
        };
        /** @description list triggered EDR */
        TriggeredEdrTemplateDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            subscriptionEl?: string;
            meveoInstanceCode?: string;
            conditionEl?: string;
            quantityEl: string;
            param1El?: string;
            param2El?: string;
            param3El?: string;
            param4El?: string;
            opencellInstanceEL?: string;
            triggeredEdrScript?: string;
        };
        /** @description The triggered edrs */
        TriggeredEdrTemplatesDto: {
            /** @description list triggered EDR */
            triggeredEdr?: components["schemas"]["TriggeredEdrTemplateDto"][];
        };
        Access: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            disabled: boolean;
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string;
            accessUserId?: string;
            subscription?: components["schemas"]["Subscription"];
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cacheKey?: string;
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            active?: boolean;
            transient?: boolean;
        };
        AccountEntity: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            externalRef1?: string;
            externalRef2?: string;
            name?: components["schemas"]["Name"];
            address?: components["schemas"]["Address"];
            defaultLevel?: boolean;
            providerContact?: string;
            primaryContact?: components["schemas"]["ProviderContact"];
            businessAccountModel?: components["schemas"]["BusinessAccountModel"];
            jobTitle?: string;
            contactInformation?: components["schemas"]["ContactInformation"];
            vatNo?: string;
            registrationNo?: string;
            minimumAmountEl?: string;
            minimumLabelEl?: string;
            minimumChargeTemplate?: components["schemas"]["OneShotChargeTemplate"];
            minimumArticle?: components["schemas"]["AccountingArticle"];
            isCompany?: boolean;
            legalEntityType?: components["schemas"]["Title"];
            accountType?: string;
            contactInformationNullSafe?: components["schemas"]["ContactInformation"];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        AccountOperation: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            /** Format: date-time */
            dueDate?: string;
            type?: string;
            /** Format: date-time */
            transactionDate?: string;
            /** @enum {string} */
            transactionCategory?: "DEBIT" | "CREDIT";
            /** @enum {string} */
            operationAction?: "TO_REFUND" | "NONE";
            reference?: string;
            accountingCode?: components["schemas"]["AccountingCode"];
            accountingEntries?: components["schemas"]["AccountingEntry"][];
            accountCodeClientSide?: string;
            amount?: number;
            amountWithoutTax?: number;
            taxAmount?: number;
            matchingAmount?: number;
            unMatchingAmount?: number;
            customerAccount?: components["schemas"]["CustomerAccount"];
            /** @enum {string} */
            matchingStatus?: "O" | "L" | "P" | "C" | "I" | "R";
            matchingAmounts?: components["schemas"]["MatchingAmount"][];
            orderNumber?: string;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            bankLot?: string;
            bankReference?: string;
            /** Format: date-time */
            depositDate?: string;
            /** Format: date-time */
            bankCollectionDate?: string;
            /** @enum {string} */
            paymentMethod?: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
            invoices?: components["schemas"]["Invoice"][];
            paymentInfo?: string;
            paymentInfo1?: string;
            paymentInfo2?: string;
            paymentInfo3?: string;
            paymentInfo4?: string;
            paymentInfo5?: string;
            paymentInfo6?: string;
            billingAccountName?: string;
            ddRequestItem?: components["schemas"]["DDRequestItem"];
            rejectedPayment?: components["schemas"]["RejectedPayment"];
            seller?: components["schemas"]["Seller"];
            subscription?: components["schemas"]["Subscription"];
            paymentHistories?: components["schemas"]["PaymentHistory"][];
            /** Format: date-time */
            collectionDate?: string;
            /** Format: date-time */
            accountingDate?: string;
            journal?: components["schemas"]["Journal"];
            /** @enum {string} */
            status?: "POSTED" | "REJECTED" | "EXPORTED" | "EXPORT_FAILED";
            /** @enum {string} */
            reason?: "REJECTED" | "FORCED" | "CLOSED_PERIOD";
            /** @enum {string} */
            paymentAction?: "PENDING_PAYMENT";
            /** Format: int32 */
            paymentDeferralCount?: number;
            accountingExportFile?: string;
            accountingSchemeEntries?: components["schemas"]["JournalEntry"][];
            /** Format: int64 */
            operationNumber?: number;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        AccountingArticle: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            disabled: boolean;
            taxClass?: components["schemas"]["TaxClass"];
            invoiceSubCategory?: components["schemas"]["InvoiceSubCategory"];
            articleFamily?: components["schemas"]["ArticleFamily"];
            accountingCode?: components["schemas"]["AccountingCode"];
            invoiceType?: components["schemas"]["InvoiceType"];
            invoiceTypeEl?: string;
            analyticCode1?: string;
            analyticCode2?: string;
            analyticCode3?: string;
            unitPrice?: number;
            descriptionI18n?: {
                [key: string]: string;
            };
            accountingCodeEl?: string;
            columnCriteriaEL?: string;
            accountingCodeMappings?: components["schemas"]["AccountingCodeMapping"][];
            ignoreAggregation?: boolean;
            descriptionI18nNotNull?: {
                [key: string]: string;
            };
            active?: boolean;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        AccountingCode: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            disabled: boolean;
            parentAccountingCode?: components["schemas"]["AccountingCode"];
            /** @enum {string} */
            chartOfAccountTypeEnum: "ASSETS" | "LIABILITIES" | "EQUITY" | "REVENUE" | "EXPENSE";
            reportingAccount?: string;
            /** @enum {string} */
            chartOfAccountViewTypeEnum: "VIEW" | "REGULAR";
            notes?: string;
            migrated?: boolean;
            active?: boolean;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        AccountingCodeMapping: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            accountingCode?: components["schemas"]["AccountingCode"];
            accountingArticle?: components["schemas"]["AccountingArticle"];
            billingCountry?: components["schemas"]["TradingCountry"];
            billingCurrency?: components["schemas"]["TradingCurrency"];
            sellerCountry?: components["schemas"]["TradingCountry"];
            seller?: components["schemas"]["Seller"];
            criteriaElValue?: string;
            transient?: boolean;
        };
        AccountingEntry: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            accountOperations?: components["schemas"]["AccountOperation"][];
            originEntry?: components["schemas"]["AccountingEntry"];
            tax?: components["schemas"]["Tax"];
            invoiceCategory?: components["schemas"]["InvoiceCategory"];
            accountingCode?: components["schemas"]["AccountingCode"];
            amount?: number;
            /** Format: date-time */
            eventDate?: string;
            eventType?: string;
            /** Format: date-time */
            exportDate?: string;
            extraParam1?: string;
            extraParam2?: string;
            extraParam3?: string;
            isWritten?: boolean;
            transient?: boolean;
        };
        AccountingScheme: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            longDescription?: string;
            longDescriptionI18n?: {
                [key: string]: string;
            };
            scriptInstance?: components["schemas"]["ScriptInstance"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        ActionDunning: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            /** Format: date-time */
            creationDate?: string;
            /** @enum {string} */
            typeAction?: "FILE" | "LETTER" | "EMAIL" | "CHARGE";
            /** @enum {string} */
            status?: "A" | "T" | "E";
            /** Format: date-time */
            statusDate?: string;
            customerAccount?: components["schemas"]["CustomerAccount"];
            recordedInvoice?: components["schemas"]["RecordedInvoice"];
            dunningLOT?: components["schemas"]["DunningLOT"];
            /** @enum {string} */
            fromLevel?: "R0" | "R1" | "R2" | "R3" | "R4" | "R5" | "R6";
            /** @enum {string} */
            toLevel?: "R0" | "R1" | "R2" | "R3" | "R4" | "R5" | "R6";
            actionPlanItem?: components["schemas"]["WFAction"];
            amountDue?: number;
            transient?: boolean;
        };
        AdditionalDetails: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            companyName?: string;
            position?: string;
            instantMessengers?: string;
            transient?: boolean;
        };
        Address: {
            address1?: string;
            address2?: string;
            address3?: string;
            address4?: string;
            address5?: string;
            zipCode?: string;
            city?: string;
            country?: components["schemas"]["Country"];
            state?: string;
            countryBundle?: string;
        };
        AddressBook: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            contacts?: components["schemas"]["Contact"][];
            customer?: components["schemas"]["Customer"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        AddressBookContact: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            addressBook?: components["schemas"]["AddressBook"];
            contact?: components["schemas"]["Contact"];
            position?: string;
            mainContact?: boolean;
            transient?: boolean;
        };
        Amounts: {
            amountWithoutTax?: number;
            amountWithTax?: number;
            amountTax?: number;
            tax?: components["schemas"]["Tax"];
        };
        ApplicableEntity: {
            code: string;
            entityClass?: string;
        };
        ArticleFamily: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            accountingCode?: components["schemas"]["AccountingCode"];
            articleFamily?: components["schemas"]["ArticleFamily"];
            descriptionI18n?: {
                [key: string]: string;
            };
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        ArticleMapping: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            mappingScript?: components["schemas"]["ScriptInstance"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        ArticleMappingLine: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            articleMapping?: components["schemas"]["ArticleMapping"];
            accountingArticle?: components["schemas"]["AccountingArticle"];
            /** @enum {string} */
            attributeOperator: "AND" | "OR";
            attributesMapping?: components["schemas"]["AttributeMapping"][];
            offerTemplate?: components["schemas"]["OfferTemplate"];
            product?: components["schemas"]["Product"];
            chargeTemplate?: components["schemas"]["ChargeTemplate"];
            parameter1?: string;
            parameter2?: string;
            parameter3?: string;
            mappingKeyEL?: string;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        Attribute: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            disabled: boolean;
            parentAttribute?: components["schemas"]["Attribute"];
            elValue?: string;
            /** Format: int32 */
            priority?: number;
            allowedValues?: string[];
            chargeTemplates?: components["schemas"]["ChargeTemplate"][];
            /** @enum {string} */
            attributeType?: "INFO" | "LIST_TEXT" | "LIST_MULTIPLE_TEXT" | "LIST_NUMERIC" | "LIST_MULTIPLE_NUMERIC" | "TEXT" | "NUMERIC" | "INTEGER" | "DATE" | "CALENDAR" | "EMAIL" | "PHONE" | "TOTAL" | "COUNT" | "EXPRESSION_LANGUAGE" | "BOOLEAN";
            medias?: components["schemas"]["Media"][];
            tags?: components["schemas"]["Tag"][];
            commercialRules?: components["schemas"]["CommercialRuleHeader"][];
            assignedAttributes?: components["schemas"]["Attribute"][];
            /** Format: int32 */
            unitNbDecimal?: number;
            groupedAttributes?: components["schemas"]["GroupedAttributes"][];
            productVersionAttributes?: components["schemas"]["ProductVersionAttribute"][];
            offerTemplateAttribute?: components["schemas"]["OfferTemplateAttribute"][];
            /** @enum {string} */
            attributeCategory?: "REGULAR" | "BUSINESS";
            active?: boolean;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        AttributeInstance: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            attribute?: components["schemas"]["Attribute"];
            parentAttributeValue?: components["schemas"]["AttributeInstance"];
            assignedAttributeValue?: components["schemas"]["AttributeInstance"][];
            stringValue?: string;
            /** Format: date-time */
            dateValue?: string;
            /** Format: double */
            doubleValue?: number;
            booleanValue?: boolean;
            serviceInstance?: components["schemas"]["ServiceInstance"];
            subscription?: components["schemas"]["Subscription"];
            value?: Record<string, never>;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            transient?: boolean;
        };
        AttributeMapping: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            articleMappingLine?: components["schemas"]["ArticleMappingLine"];
            attribute?: components["schemas"]["Attribute"];
            attributeValue?: string;
            /** @enum {string} */
            operator: "GREATER_THAN" | "LESS_THAN" | "EQUAL" | "GREATER_THAN_OR_EQUAL" | "LESS_THAN_OR_EQUAL" | "NOT_EQUAL" | "EXISTS" | "CONTAINS" | "NOT_CONTAINS";
            transient?: boolean;
        };
        Auditable: {
            /** Format: date-time */
            created?: string;
            /** Format: date-time */
            updated?: string;
            creator?: string;
            updater?: string;
            lastUser?: string;
            /** Format: date-time */
            lastModified?: string;
        };
        AuditableFieldHistory: {
            fieldName?: string;
            previousState?: Record<string, never>;
            currentState?: Record<string, never>;
            /** @enum {string} */
            auditType?: "STATUS" | "RENEWAL" | "OTHER";
            historable?: boolean;
            notfiable?: boolean;
            historized?: boolean;
            notified?: boolean;
        };
        AutomatedPayment: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            /** Format: date-time */
            dueDate?: string;
            type?: string;
            /** Format: date-time */
            transactionDate?: string;
            /** @enum {string} */
            transactionCategory?: "DEBIT" | "CREDIT";
            /** @enum {string} */
            operationAction?: "TO_REFUND" | "NONE";
            reference?: string;
            accountingCode?: components["schemas"]["AccountingCode"];
            accountingEntries?: components["schemas"]["AccountingEntry"][];
            accountCodeClientSide?: string;
            amount?: number;
            amountWithoutTax?: number;
            taxAmount?: number;
            matchingAmount?: number;
            unMatchingAmount?: number;
            customerAccount?: components["schemas"]["CustomerAccount"];
            /** @enum {string} */
            matchingStatus?: "O" | "L" | "P" | "C" | "I" | "R";
            orderNumber?: string;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            bankLot?: string;
            bankReference?: string;
            /** Format: date-time */
            depositDate?: string;
            /** Format: date-time */
            bankCollectionDate?: string;
            /** @enum {string} */
            paymentMethod?: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
            invoices?: components["schemas"]["Invoice"][];
            paymentInfo?: string;
            paymentInfo1?: string;
            paymentInfo2?: string;
            paymentInfo3?: string;
            paymentInfo4?: string;
            paymentInfo5?: string;
            paymentInfo6?: string;
            billingAccountName?: string;
            ddRequestItem?: components["schemas"]["DDRequestItem"];
            rejectedPayment?: components["schemas"]["RejectedPayment"];
            seller?: components["schemas"]["Seller"];
            subscription?: components["schemas"]["Subscription"];
            paymentHistories?: components["schemas"]["PaymentHistory"][];
            /** Format: date-time */
            collectionDate?: string;
            /** Format: date-time */
            accountingDate?: string;
            journal?: components["schemas"]["Journal"];
            /** @enum {string} */
            status?: "POSTED" | "REJECTED" | "EXPORTED" | "EXPORT_FAILED";
            /** @enum {string} */
            reason?: "REJECTED" | "FORCED" | "CLOSED_PERIOD";
            /** @enum {string} */
            paymentAction?: "PENDING_PAYMENT";
            /** Format: int32 */
            paymentDeferralCount?: number;
            accountingExportFile?: string;
            accountingSchemeEntries?: components["schemas"]["JournalEntry"][];
            /** Format: int64 */
            operationNumber?: number;
            dunningDocument?: components["schemas"]["DunningDocument"];
            paymentOrder?: string;
            fees?: number;
            comment?: string;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        AutomatedRefund: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            /** Format: date-time */
            dueDate?: string;
            type?: string;
            /** Format: date-time */
            transactionDate?: string;
            /** @enum {string} */
            transactionCategory?: "DEBIT" | "CREDIT";
            /** @enum {string} */
            operationAction?: "TO_REFUND" | "NONE";
            reference?: string;
            accountingCode?: components["schemas"]["AccountingCode"];
            accountingEntries?: components["schemas"]["AccountingEntry"][];
            accountCodeClientSide?: string;
            amount?: number;
            amountWithoutTax?: number;
            taxAmount?: number;
            matchingAmount?: number;
            unMatchingAmount?: number;
            customerAccount?: components["schemas"]["CustomerAccount"];
            /** @enum {string} */
            matchingStatus?: "O" | "L" | "P" | "C" | "I" | "R";
            orderNumber?: string;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            bankLot?: string;
            bankReference?: string;
            /** Format: date-time */
            depositDate?: string;
            /** Format: date-time */
            bankCollectionDate?: string;
            /** @enum {string} */
            paymentMethod?: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
            invoices?: components["schemas"]["Invoice"][];
            paymentInfo?: string;
            paymentInfo1?: string;
            paymentInfo2?: string;
            paymentInfo3?: string;
            paymentInfo4?: string;
            paymentInfo5?: string;
            paymentInfo6?: string;
            billingAccountName?: string;
            ddRequestItem?: components["schemas"]["DDRequestItem"];
            rejectedPayment?: components["schemas"]["RejectedPayment"];
            seller?: components["schemas"]["Seller"];
            subscription?: components["schemas"]["Subscription"];
            paymentHistories?: components["schemas"]["PaymentHistory"][];
            /** Format: date-time */
            collectionDate?: string;
            /** Format: date-time */
            accountingDate?: string;
            journal?: components["schemas"]["Journal"];
            /** @enum {string} */
            status?: "POSTED" | "REJECTED" | "EXPORTED" | "EXPORT_FAILED";
            /** @enum {string} */
            reason?: "REJECTED" | "FORCED" | "CLOSED_PERIOD";
            /** @enum {string} */
            paymentAction?: "PENDING_PAYMENT";
            /** Format: int32 */
            paymentDeferralCount?: number;
            accountingExportFile?: string;
            accountingSchemeEntries?: components["schemas"]["JournalEntry"][];
            /** Format: int64 */
            operationNumber?: number;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        BankCoordinates: {
            bankCode?: string;
            branchCode?: string;
            accountNumber?: string;
            key?: string;
            iban?: string;
            bic?: string;
            accountOwner?: string;
            bankName?: string;
            bankId?: string;
            issuerNumber?: string;
            issuerName?: string;
            ics?: string;
        };
        BillingAccount: {
            id?: string;
            href?: string;
            name?: string;
        };
        BillingCycle: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            billingTemplateNameEL?: string;
            calendar?: components["schemas"]["Calendar"];
            lastTransactionDateDelayEL?: string;
            lastTransactionDateEL?: string;
            invoiceDateProductionDelayEL?: string;
            invoiceDateDelayEL?: string;
            invoicingThreshold?: number;
            invoiceType?: components["schemas"]["InvoiceType"];
            dueDateDelayEL?: string;
            invoiceTypeEl?: string;
            /** @enum {string} */
            type?: "BILLINGACCOUNT" | "SUBSCRIPTION" | "ORDER";
            scriptInstance?: components["schemas"]["ScriptInstance"];
            /** @enum {string} */
            referenceDate?: "TODAY" | "NEXT_INVOICE_DATE" | "LAST_TRANSACTION_DATE" | "END_DATE";
            /** @enum {string} */
            checkThreshold?: "BEFORE_DISCOUNT" | "AFTER_DISCOUNT" | "POSITIVE_RT" | "POSITIVE_IL";
            thresholdPerEntity?: boolean;
            descriptionI18n?: {
                [key: string]: string;
            };
            splitPerPaymentMethod?: boolean;
            collectionDateDelayEl?: string;
            computeDatesAtValidation?: boolean;
            billingRunValidationScript?: components["schemas"]["ScriptInstance"];
            filters?: {
                [key: string]: Record<string, never>;
            };
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        BillingRule: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            disabled: boolean;
            contract?: components["schemas"]["Contract"];
            /** Format: int32 */
            priority?: number;
            criteriaEL?: string;
            invoicedBACodeEL?: string;
            active?: boolean;
            transient?: boolean;
        };
        BillingRun: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            /** Format: date-time */
            processDate?: string;
            /** @enum {string} */
            status?: "NEW" | "PREINVOICED" | "PREVALIDATED" | "CANCELED" | "INVOICES_GENERATED" | "POSTINVOICED" | "POSTVALIDATED" | "VALIDATED" | "CANCELLING" | "REJECTED" | "CREATING_INVOICE_LINES" | "INVOICE_LINES_CREATED" | "INVOICES_CREATED" | "MINIMUM_ADDED" | "THRESHOLD_CHECKED" | "DISCOUNT_ADDED" | "TAX_COMPUTED" | "DRAFT_INVOICES";
            /** Format: date-time */
            statusDate?: string;
            billingCycle?: components["schemas"]["BillingCycle"];
            /** Format: int32 */
            billingAccountNumber?: number;
            /** Format: int32 */
            billableBillingAcountNumber?: number;
            /** Format: int32 */
            producibleInvoiceNumber?: number;
            producibleAmountWithoutTax?: number;
            producibleAmountTax?: number;
            producibleAmountWithTax?: number;
            prAmountWithoutTax?: number;
            prAmountWithTax?: number;
            prAmountTax?: number;
            invoices?: components["schemas"]["Invoice"][];
            billingRunLists?: components["schemas"]["BillingRunList"][];
            billableBillingAccounts?: components["schemas"]["BillingAccount"][];
            /** @enum {string} */
            processType?: "AUTOMATIC" | "MANUAL" | "FULL_AUTOMATIC";
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string;
            /** Format: date-time */
            invoiceDate?: string;
            /** Format: date-time */
            lastTransactionDate?: string;
            rejectionReason?: string;
            currency?: components["schemas"]["Currency"];
            country?: components["schemas"]["Country"];
            language?: components["schemas"]["Language"];
            selectedBillingAccounts?: string;
            preInvoicingReports?: components["schemas"]["PreInvoicingReportsDTO"];
            postInvoicingReports?: components["schemas"]["PostInvoicingReportsDTO"];
            rejectedBillingAccounts?: components["schemas"]["RejectedBillingAccount"][];
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            uuid: string;
            /** @enum {string} */
            referenceDate?: "TODAY" | "NEXT_INVOICE_DATE" | "LAST_TRANSACTION_DATE" | "END_DATE";
            skipValidationScript?: boolean;
            /** Format: date-time */
            collectionDate?: string;
            computeDatesAtValidation?: boolean;
            nextBillingRun?: components["schemas"]["BillingRun"];
            minimumApplied?: boolean;
            thresholdChecked?: boolean;
            discountApplied?: boolean;
            /** @enum {string} */
            rejectAutoAction?: "CANCEL" | "MOVE" | "MANUAL_ACTION" | "AUTOMATIC_VALIDATION";
            /** @enum {string} */
            suspectAutoAction?: "CANCEL" | "MOVE" | "MANUAL_ACTION" | "AUTOMATIC_VALIDATION";
            filters?: {
                [key: string]: Record<string, never>;
            };
            exceptionalRTIds?: number[];
            exceptionalILIds?: number[];
            invoiceType?: components["schemas"]["InvoiceType"];
            /** @enum {string} */
            runType?: "CYCLE" | "EXCEPTIONAL";
            /** Format: int64 */
            xmlJobExecutionResultId?: number;
            /** Format: int64 */
            pdfJobExecutionResultId?: number;
            descriptionI18n?: {
                [key: string]: string;
            };
            isQuarantine?: boolean;
            originBillingRun?: components["schemas"]["BillingRun"];
            jobExecutions?: components["schemas"]["JobExecutionResultImpl"][];
            generateAO?: boolean;
            exceptionalBR?: boolean;
            /** Format: int32 */
            invoiceNumber?: number;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            descriptionOrCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            transient?: boolean;
        };
        BillingRunList: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            invoice?: boolean;
            billingRun?: components["schemas"]["BillingRun"];
            billingAccount?: components["schemas"]["BillingAccount"];
            ratedAmountWithoutTax?: number;
            ratedAmountWithTax?: number;
            ratedAmount2WithoutTax?: number;
            ratedAmountTax?: number;
            transient?: boolean;
        };
        BusinessAccountModel: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            disabled: boolean;
            moduleItems?: components["schemas"]["MeveoModuleItem"][];
            /** @enum {string} */
            license: "APACHE" | "BSD3_N" | "BSD3_R" | "BSD2_S" | "FREE_BSD" | "GPL" | "AGPL" | "LGPL" | "MIT" | "MOZ" | "CDDL" | "EPL" | "OPEN" | "COM";
            logoPicture?: string;
            installed?: boolean;
            moduleSource?: string;
            script?: components["schemas"]["ScriptInstance"];
            /** @enum {string} */
            hierarchyType: "S" | "S_C" | "C" | "S_CA" | "C_CA" | "CA" | "S_BA" | "C_BA" | "CA_BA" | "BA" | "S_UA" | "C_UA" | "CA_UA" | "BA_UA" | "UA";
            downloaded?: boolean;
            active?: boolean;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        BusinessEntity: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        BusinessOfferModel: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            disabled: boolean;
            moduleItems?: components["schemas"]["MeveoModuleItem"][];
            /** @enum {string} */
            license: "APACHE" | "BSD3_N" | "BSD3_R" | "BSD2_S" | "FREE_BSD" | "GPL" | "AGPL" | "LGPL" | "MIT" | "MOZ" | "CDDL" | "EPL" | "OPEN" | "COM";
            logoPicture?: string;
            installed?: boolean;
            moduleSource?: string;
            script?: components["schemas"]["ScriptInstance"];
            offerTemplate?: components["schemas"]["OfferTemplate"];
            descriptionI18n?: {
                [key: string]: string;
            };
            downloaded?: boolean;
            active?: boolean;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        BusinessProductModel: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            disabled: boolean;
            moduleItems?: components["schemas"]["MeveoModuleItem"][];
            /** @enum {string} */
            license: "APACHE" | "BSD3_N" | "BSD3_R" | "BSD2_S" | "FREE_BSD" | "GPL" | "AGPL" | "LGPL" | "MIT" | "MOZ" | "CDDL" | "EPL" | "OPEN" | "COM";
            logoPicture?: string;
            installed?: boolean;
            moduleSource?: string;
            script?: components["schemas"]["ScriptInstance"];
            productTemplate?: components["schemas"]["ProductTemplate"];
            descriptionI18n?: {
                [key: string]: string;
            };
            downloaded?: boolean;
            active?: boolean;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        BusinessServiceModel: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            disabled: boolean;
            moduleItems?: components["schemas"]["MeveoModuleItem"][];
            /** @enum {string} */
            license: "APACHE" | "BSD3_N" | "BSD3_R" | "BSD2_S" | "FREE_BSD" | "GPL" | "AGPL" | "LGPL" | "MIT" | "MOZ" | "CDDL" | "EPL" | "OPEN" | "COM";
            logoPicture?: string;
            installed?: boolean;
            moduleSource?: string;
            script?: components["schemas"]["ScriptInstance"];
            serviceTemplate?: components["schemas"]["ServiceTemplate"];
            duplicateService?: boolean;
            duplicatePricePlan?: boolean;
            descriptionI18n?: {
                [key: string]: string;
            };
            downloaded?: boolean;
            active?: boolean;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        Calendar: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            calendarType?: string;
            initDateEL?: string;
            descriptionI18n?: {
                [key: string]: string;
            };
            /** Format: date-time */
            initDate?: string;
            calendarTypeWSubtypes?: string;
            initializationRequired?: boolean;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        Campaign: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            /** Format: date-time */
            scheduleDate?: string;
            /** Format: date-time */
            startDate?: string;
            /** Format: int32 */
            processingThreadId?: number;
            /** Format: date-time */
            endDate?: string;
            /** @enum {string} */
            priority?: "SLOW" | "NORMAL" | "URGENT";
            /** @enum {string} */
            media?: "POSTAL_MAIL" | "EMAIL" | "SMS" | "IM" | "FAX" | "VOICE" | "WEBSERVICE" | "QUEUE" | "FTP_FILE" | "CFT_FILE" | "DATABASE" | "DUNNING_MEDIA";
            subMedia?: string;
            useAnyMedia?: boolean;
            /** @enum {string} */
            status?: "SCHEDULED" | "RUNNING" | "PAUSED" | "CANCELED" | "TERMINATED";
            messages?: components["schemas"]["Message"][];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        /** @description The list of the caregory invoice agregates */
        CategoryInvoiceAgregate: {
            discountAggregates?: components["schemas"]["DiscountInvoiceAggregate"][];
            categoryInvoiceCode?: string;
            listSubCategoryInvoiceAgregate?: components["schemas"]["SubCategoryInvoiceAgregate"][];
            /** Format: int32 */
            itemNumber?: number;
            userAccountCode?: string;
            amountTax?: number;
            amountWithTax?: number;
            amountWithoutTax?: number;
            description?: string;
            links?: {
                title?: string;
                uriBuilder?: Record<string, never>;
                rel?: string;
                rels?: string[];
                params?: {
                    [key: string]: string;
                };
                /** Format: uri */
                uri?: string;
                type?: string;
            }[];
            code?: string;
            /** Format: int64 */
            id?: number;
        };
        Channel: {
            id?: string;
            href?: string;
            name?: string;
        };
        ChargeInstance: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            chargeType?: string;
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE" | "CANCELED" | "TERMINATED" | "SUSPENDED" | "CLOSED" | "PENDING";
            /** Format: date-time */
            statusDate?: string;
            /** Format: date-time */
            terminationDate?: string;
            /** Format: date-time */
            reactivationDate?: string;
            chargeTemplate?: components["schemas"]["ChargeTemplate"];
            invoicingCalendar?: components["schemas"]["Calendar"];
            /** Format: date-time */
            chargeDate?: string;
            amountWithoutTax?: number;
            amountWithTax?: number;
            criteria1?: string;
            criteria2?: string;
            criteria3?: string;
            walletOperations?: components["schemas"]["WalletOperation"][];
            seller?: components["schemas"]["Seller"];
            userAccount?: components["schemas"]["UserAccount"];
            subscription?: components["schemas"]["Subscription"];
            currency?: components["schemas"]["TradingCurrency"];
            country?: components["schemas"]["TradingCountry"];
            walletInstances?: components["schemas"]["WalletInstance"][];
            serviceInstance?: components["schemas"]["ServiceInstance"];
            prepaidWalletInstances?: components["schemas"]["WalletInstance"][];
            prepaid?: boolean;
            orderNumber?: string;
            accumulatorCounterInstances?: components["schemas"]["CounterInstance"][];
            applyDiscountsOnOverridenPrice?: boolean;
            overchargedUnitAmountWithoutTax?: number;
            taxClassResolved?: components["schemas"]["TaxClass"];
            /** @enum {string} */
            chargeMainType?: "RECURRING" | "ONESHOT" | "USAGE" | "PRODUCT";
            walletOperationsSorted?: components["schemas"]["WalletOperation"][];
            counter?: components["schemas"]["CounterInstance"];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        ChargeTemplate: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            disabled: boolean;
            /** @enum {string} */
            type?: "CREDIT" | "DEBIT";
            chargeType?: string;
            amountEditable?: boolean;
            invoiceSubCategory?: components["schemas"]["InvoiceSubCategory"];
            edrTemplates?: components["schemas"]["TriggeredEDRTemplate"][];
            inputUnitDescription?: string;
            ratingUnitDescription?: string;
            inputUnitOfMeasure?: components["schemas"]["UnitOfMeasure"];
            ratingUnitOfMeasure?: components["schemas"]["UnitOfMeasure"];
            inputUnitEL?: string;
            outputUnitEL?: string;
            unitMultiplicator?: number;
            /** Format: int32 */
            unitNbDecimal?: number;
            /** @enum {string} */
            roundingMode?: "NEAREST" | "DOWN" | "UP" | "HALF_EVEN";
            revenueRecognitionRule?: components["schemas"]["RevenueRecognitionRule"];
            descriptionI18n?: {
                [key: string]: string;
            };
            filterExpression?: string;
            taxClass?: components["schemas"]["TaxClass"];
            taxClassEl?: string;
            ratingScript?: components["schemas"]["ScriptInstance"];
            dropZeroWo?: boolean;
            sortIndexEl?: string;
            attributes?: components["schemas"]["Attribute"][];
            roundingValuesComputed?: boolean;
            /** Format: int32 */
            roundingUnityNbDecimal?: number;
            /** Format: int32 */
            roundingEdrNbDecimal?: number;
            /** @enum {string} */
            status?: "DRAFT" | "ACTIVE" | "ARCHIVED";
            internalNote?: string;
            quantityAttribute?: components["schemas"]["Attribute"];
            applyContractOverRatingScript?: boolean;
            /** @enum {string} */
            chargeMainType?: "RECURRING" | "ONESHOT" | "USAGE" | "PRODUCT";
            descriptionI18nNullSafe?: {
                [key: string]: string;
            };
            active?: boolean;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        CheckPaymentMethod: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            disabled: boolean;
            alias?: string;
            preferred?: boolean;
            customerAccount?: components["schemas"]["CustomerAccount"];
            /** @enum {string} */
            paymentType?: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
            userId?: string;
            info1?: string;
            info2?: string;
            info3?: string;
            info4?: string;
            info5?: string;
            tokenId?: string;
            token3DsId?: string;
            referenceDocument?: components["schemas"]["Document"];
            action?: string;
            expired?: boolean;
            active?: boolean;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            transient?: boolean;
        };
        CommercialOrder: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            /** Format: int32 */
            orderProgressTmp?: number;
            seller: components["schemas"]["Seller"];
            orderNumber?: string;
            label?: string;
            billingAccount: components["schemas"]["BillingAccount"];
            quote?: components["schemas"]["CpqQuote"];
            contract?: components["schemas"]["Contract"];
            orderType?: components["schemas"]["OrderType"];
            invoicingPlan?: components["schemas"]["InvoicingPlan"];
            status: string;
            /** Format: date-time */
            statusDate: string;
            /** Format: int32 */
            orderProgress: number;
            /** Format: int32 */
            rateInvoiced: number;
            /** Format: date-time */
            progressDate: string;
            /** Format: date-time */
            orderDate: string;
            /** Format: date-time */
            deliveryDate?: string;
            /** Format: date-time */
            customerServiceBegin?: string;
            /** Format: int32 */
            customerServiceDuration?: number;
            externalReference?: string;
            salesPersonName?: string;
            orderParent?: components["schemas"]["Order"];
            invoices?: components["schemas"]["Invoice"][];
            orderInvoiceType: components["schemas"]["InvoiceType"];
            userAccount?: components["schemas"]["UserAccount"];
            access?: components["schemas"]["Access"];
            offers?: components["schemas"]["OrderOffer"][];
            orderLots?: components["schemas"]["OrderLot"][];
            orderPrices?: components["schemas"]["OrderPrice"][];
            oneShotTotalAmount?: number;
            quoteVersion?: components["schemas"]["QuoteVersion"];
            discountPlan?: components["schemas"]["DiscountPlan"];
            billingCycle?: components["schemas"]["BillingCycle"];
            billingRun?: components["schemas"]["BillingRun"];
            totalInvoicingAmountWithoutTax?: number;
            totalInvoicingAmountWithTax?: number;
            totalInvoicingAmountTax?: number;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            transient?: boolean;
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
        };
        CommercialRuleHeader: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            /** @enum {string} */
            ruleType: "PRE_REQUISITE" | "INCOMPATIBILITY" | "REPLACEMENT";
            targetOfferTemplate?: components["schemas"]["OfferTemplate"];
            targetProduct?: components["schemas"]["Product"];
            targetProductVersion?: components["schemas"]["ProductVersion"];
            targetGroupedAttributes?: components["schemas"]["GroupedAttributes"];
            targetAttribute?: components["schemas"]["Attribute"];
            targetAttributeValue?: string;
            targetTag?: components["schemas"]["Tag"];
            ruleEl?: string;
            commercialRuleItems?: components["schemas"]["CommercialRuleItem"][];
            disabled: boolean;
            /** @enum {string} */
            scopeType?: "QUOTE" | "QUOTE_OFFER";
            targetOfferAttribute?: boolean;
            targetOfferTemplateCode?: string;
            targetProductCode?: string;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        CommercialRuleItem: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            commercialRuleHeader?: components["schemas"]["CommercialRuleHeader"];
            /** @enum {string} */
            operator: "AND" | "OR";
            ruleItemEl?: string;
            commercialRuleLines?: components["schemas"]["CommercialRuleLine"][];
            transient?: boolean;
        };
        CommercialRuleLine: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            commercialRuleItem?: components["schemas"]["CommercialRuleItem"];
            sourceOfferTemplate?: components["schemas"]["OfferTemplate"];
            sourceProduct?: components["schemas"]["Product"];
            sourceProductVersion?: components["schemas"]["ProductVersion"];
            sourceAttribute?: components["schemas"]["Attribute"];
            sourceGroupedAttributes?: components["schemas"]["GroupedAttributes"];
            sourceTag?: components["schemas"]["Tag"];
            sourceAttributeValue?: string;
            sourceGroupedAttributeValue?: string;
            /** @enum {string} */
            operator?: "GREATER_THAN" | "LESS_THAN" | "EQUAL" | "GREATER_THAN_OR_EQUAL" | "LESS_THAN_OR_EQUAL" | "NOT_EQUAL" | "EXISTS" | "CONTAINS" | "NOT_CONTAINS";
            sourceOfferAttribute?: boolean;
            sourceOfferTemplateCode?: string;
            sourceProductCode?: string;
            transient?: boolean;
        };
        CommunicationPolicy: {
            /** Format: int64 */
            delayMinBetween2messages?: number;
            /** Format: int64 */
            nbMaxMessagePerDay?: number;
            /** Format: int64 */
            nbMaxMessagePerWeek?: number;
            /** Format: int64 */
            nbMaxMessagePerMonth?: number;
        };
        Contact: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            externalRef1?: string;
            externalRef2?: string;
            name?: components["schemas"]["Name"];
            address?: components["schemas"]["Address"];
            primaryContact?: components["schemas"]["ProviderContact"];
            jobTitle?: string;
            contactInformation?: components["schemas"]["ContactInformation"];
            vatNo?: string;
            registrationNo?: string;
            isCompany?: boolean;
            legalEntityType?: components["schemas"]["Title"];
            assistantName?: string;
            assistantPhone?: string;
            position?: string;
            company?: string;
            websiteUrl?: string;
            importedFrom?: string;
            importedBy?: string;
            socialIdentifier?: string;
            agreedToUA?: boolean;
            contactPolicy?: components["schemas"]["CommunicationPolicy"];
            messages?: components["schemas"]["Message"][];
            addressBook?: components["schemas"]["AddressBook"];
            tags?: string[];
            reference?: string;
            comment?: string;
            addressBookContacts?: components["schemas"]["AddressBookContact"][];
            contactCategories?: components["schemas"]["ContactCategory"][];
            enterprise?: boolean;
            prospect?: boolean;
            vip?: boolean;
            contactInformationNullSafe?: components["schemas"]["ContactInformation"];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        ContactCategory: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        ContactInformation: {
            email?: string;
            phone?: string;
            mobile?: string;
            fax?: string;
        };
        Contract: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            disabled: boolean;
            seller?: components["schemas"]["Seller"];
            billingAccount?: components["schemas"]["BillingAccount"];
            customerAccount?: components["schemas"]["CustomerAccount"];
            customer?: components["schemas"]["Customer"];
            status: string;
            /** Format: date-time */
            statusDate: string;
            /** Format: date-time */
            contractDate?: string;
            /** Format: date-time */
            beginDate: string;
            /** Format: date-time */
            endDate: string;
            renewal?: boolean;
            /** Format: int32 */
            contractDuration?: number;
            contractItems?: components["schemas"]["ContractItem"][];
            billingRules?: components["schemas"]["BillingRule"][];
            applicationEl?: string;
            active?: boolean;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        ContractItem: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            disabled: boolean;
            contract?: components["schemas"]["Contract"];
            offerTemplate?: components["schemas"]["OfferTemplate"];
            product?: components["schemas"]["Product"];
            pricePlan?: components["schemas"]["PricePlanMatrix"];
            chargeTemplate?: components["schemas"]["ChargeTemplate"];
            serviceTemplate?: components["schemas"]["ServiceTemplate"];
            /** Format: double */
            rate?: number;
            amountWithoutTax?: number;
            /** @enum {string} */
            contractRateType?: "PERCENTAGE" | "FIXED";
            separateDiscount?: boolean;
            applicationEl?: string;
            applicableOnOverriddenPrice?: boolean;
            targetAccountingArticles?: components["schemas"]["AccountingArticle"][];
            active?: boolean;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        CounterInstance: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            counterTemplate?: components["schemas"]["CounterTemplate"];
            customer?: components["schemas"]["Customer"];
            customerAccount?: components["schemas"]["CustomerAccount"];
            userAccount?: components["schemas"]["UserAccount"];
            billingAccount?: components["schemas"]["BillingAccount"];
            subscription?: components["schemas"]["Subscription"];
            serviceInstance?: components["schemas"]["ServiceInstance"];
            counterPeriods?: components["schemas"]["CounterPeriod"][];
            usageChargeInstances?: components["schemas"]["UsageChargeInstance"][];
            chargeInstances?: components["schemas"]["ChargeInstance"][];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        CounterPeriod: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            counterInstance?: components["schemas"]["CounterInstance"];
            /** @enum {string} */
            counterType?: "USAGE" | "NOTIFICATION" | "USAGE_AMOUNT";
            /** Format: date-time */
            periodStartDate?: string;
            /** Format: date-time */
            periodEndDate?: string;
            level?: number;
            value?: number;
            notificationLevels?: string;
            accumulator?: boolean;
            accumulatedValues?: {
                [key: string]: number;
            };
            /** @enum {string} */
            accumulatorType?: "MULTI_VALUE" | "SINGLE_VALUE";
            notificationLevelsAsMap?: {
                [key: string]: number;
            };
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        CounterTemplate: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            disabled: boolean;
            /** @enum {string} */
            counterType: "USAGE" | "NOTIFICATION" | "USAGE_AMOUNT";
            calendarCodeEl?: string;
            calendar?: components["schemas"]["Calendar"];
            ceiling?: number;
            unityDescription?: string;
            /** @enum {string} */
            counterLevel: "SI" | "SU" | "UA" | "BA" | "CA" | "CUST";
            ceilingExpressionEl?: string;
            notificationLevels?: string;
            accumulator?: boolean;
            /** @enum {string} */
            accumulatorType?: "MULTI_VALUE" | "SINGLE_VALUE";
            filterEl?: string;
            keyEl?: string;
            valueEl?: string;
            active?: boolean;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        Country: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            countryCode?: string;
            description?: string;
            currency?: components["schemas"]["Currency"];
            language?: components["schemas"]["Language"];
            descriptionI18n?: {
                [key: string]: string;
            };
            code?: string;
            descriptionI18nNullSafe?: {
                [key: string]: string;
            };
            transient?: boolean;
        };
        CpqQuote: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            seller?: components["schemas"]["Seller"];
            applicantAccount: components["schemas"]["BillingAccount"];
            status: string;
            previousStatus: string;
            /** Format: date-time */
            statusDate?: string;
            /** Format: date-time */
            sendDate?: string;
            /** Format: date-time */
            quoteDate?: string;
            /** Format: date-time */
            deliveryDate?: string;
            /** Format: int32 */
            quoteLotDuration?: number;
            opportunityRef?: string;
            customerRef?: string;
            customerName?: string;
            contactName?: string;
            registerNumber?: string;
            salesPersonName?: string;
            billableAccount: components["schemas"]["BillingAccount"];
            validity?: components["schemas"]["DatePeriod"];
            quoteNumber?: string;
            orderInvoiceType: components["schemas"]["InvoiceType"];
            userAccount?: components["schemas"]["UserAccount"];
            totalInvoicingAmountWithoutTax?: number;
            totalInvoicingAmountWithTax?: number;
            totalInvoicingAmountTax?: number;
            minInvoiceLines?: components["schemas"]["InvoiceLine"][];
            billingRun?: components["schemas"]["BillingRun"];
            /** Format: date-time */
            validationDate?: string;
            billingCycle?: components["schemas"]["BillingCycle"];
            transient?: boolean;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
        };
        CreditCategory: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            descriptionI18n?: {
                [key: string]: string;
            };
            provider?: components["schemas"]["Provider"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        Currency: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            currencyCode?: string;
            descriptionEn?: string;
            symbol?: string;
            systemCurrency?: boolean;
            descriptionI18n?: {
                [key: string]: string;
            };
            description?: string;
            transient?: boolean;
        };
        CustomFieldValue: {
            /** Format: date-time */
            from?: string;
            /** Format: date-time */
            to?: string;
            strictMatch?: boolean;
            /** Format: date-time */
            fromMatch?: string;
            /** Format: date-time */
            toMatch?: string;
            valid?: boolean;
            empty?: boolean;
            /** Format: int32 */
            priority?: number;
            valueEmptyForGui?: boolean;
            newPeriod?: boolean;
            valueEmpty?: boolean;
            allEntities?: components["schemas"]["EntityReferenceWrapper"][];
            excessiveInSize?: boolean;
            listValue?: Record<string, never>[];
            mapValue?: {
                [key: string]: Record<string, never>;
            };
            getkeyValueMap?: {
                [key: string]: Record<string, never>;
            };
            value?: Record<string, never>;
            string?: string;
            /** Format: date-time */
            date?: string;
            /** Format: int64 */
            long?: number;
            /** Format: double */
            double?: number;
            boolean?: boolean;
            entity?: components["schemas"]["EntityReferenceWrapper"];
            url?: components["schemas"]["UrlReferenceWrapper"];
            listString?: string[];
            listDate?: string[];
            listLong?: number[];
            listDouble?: number[];
            listBoolean?: boolean[];
            listEntity?: components["schemas"]["EntityReferenceWrapper"][];
            mapString?: {
                [key: string]: string;
            };
            mapDate?: {
                [key: string]: string;
            };
            mapLong?: {
                [key: string]: number;
            };
            mapDouble?: {
                [key: string]: number;
            };
            mapBoolean?: {
                [key: string]: boolean;
            };
            mapEntity?: {
                [key: string]: components["schemas"]["EntityReferenceWrapper"];
            };
            source?: string;
            customTableCode?: string;
            dataFilter?: string;
            fields?: string;
            mapCfValues?: {
                [key: string]: string;
            };
        };
        CustomFieldValues: {
            valuesByCode?: {
                [key: string]: components["schemas"]["CustomFieldValue"][];
            };
            encrypted?: boolean;
            newVersionedCFValuePeriods?: {
                [key: string]: components["schemas"]["DatePeriod"][];
            };
            values?: {
                [key: string]: Record<string, never>;
            };
        };
        Customer: {
            id?: string;
            href?: string;
            name?: string;
        };
        CustomerAccount: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            externalRef1?: string;
            externalRef2?: string;
            name?: components["schemas"]["Name"];
            address?: components["schemas"]["Address"];
            defaultLevel?: boolean;
            providerContact?: string;
            primaryContact?: components["schemas"]["ProviderContact"];
            businessAccountModel?: components["schemas"]["BusinessAccountModel"];
            jobTitle?: string;
            contactInformation?: components["schemas"]["ContactInformation"];
            vatNo?: string;
            registrationNo?: string;
            minimumAmountEl?: string;
            minimumLabelEl?: string;
            minimumChargeTemplate?: components["schemas"]["OneShotChargeTemplate"];
            minimumArticle?: components["schemas"]["AccountingArticle"];
            isCompany?: boolean;
            legalEntityType?: components["schemas"]["Title"];
            addressbook?: components["schemas"]["AddressBook"];
            tradingCurrency?: components["schemas"]["TradingCurrency"];
            /** @enum {string} */
            status?: "ACTIVE" | "CLOSE";
            creditCategory?: components["schemas"]["CreditCategory"];
            billingAccounts?: components["schemas"]["BillingAccount"][];
            accountOperations?: components["schemas"]["AccountOperation"][];
            dunningDocuments?: components["schemas"]["DunningDocument"][];
            actionDunnings?: components["schemas"]["ActionDunning"][];
            /** Format: date-time */
            dateStatus?: string;
            /** Format: date-time */
            dateDunningLevel?: string;
            customer?: components["schemas"]["Customer"];
            /** @enum {string} */
            dunningLevel?: "R0" | "R1" | "R2" | "R3" | "R4" | "R5" | "R6";
            password?: string;
            dueDateDelayEL?: string;
            tradingLanguage?: components["schemas"]["TradingLanguage"];
            paymentMethods?: components["schemas"]["PaymentMethod"][];
            excludedFromPayment?: boolean;
            auditedMethodPayments?: {
                [key: string]: components["schemas"]["PaymentMethod"][];
            };
            counters?: {
                [key: string]: components["schemas"]["CounterInstance"];
            };
            minimumTargetAccount?: components["schemas"]["BillingAccount"];
            invoicingThreshold?: number;
            /** @enum {string} */
            checkThreshold?: "BEFORE_DISCOUNT" | "AFTER_DISCOUNT" | "POSITIVE_RT" | "POSITIVE_IL";
            thresholdPerEntity?: boolean;
            contracts?: components["schemas"]["Contract"][];
            dueBalance?: string;
            generalClientAccount?: components["schemas"]["AccountingCode"];
            paymentPlans?: components["schemas"]["PaymentPlan"][];
            /** @enum {string} */
            preferredPaymentMethodType?: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
            paypalPaymentMethods?: components["schemas"]["PaypalPaymentMethod"][];
            wirePaymentMethods?: components["schemas"]["WirePaymentMethod"][];
            checkPaymentMethods?: components["schemas"]["CheckPaymentMethod"][];
            stripePaymentMethods?: components["schemas"]["StripePaymentMethod"][];
            noMoreValidCard?: boolean;
            ddpaymentMethods?: components["schemas"]["DDPaymentMethod"][];
            preferredPaymentMethod?: components["schemas"]["PaymentMethod"];
            seller?: components["schemas"]["Seller"];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            parentEntity?: components["schemas"]["BusinessEntity"];
            accountType?: string;
            contactInformationNullSafe?: components["schemas"]["ContactInformation"];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        CustomerBrand: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        CustomerCategory: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            exoneratedFromTaxes?: boolean;
            exonerationTaxEl?: string;
            exonerationReason?: string;
            accountingCode?: components["schemas"]["AccountingCode"];
            taxCategory: components["schemas"]["TaxCategory"];
            taxCategoryEl?: string;
            descriptionI18n?: {
                [key: string]: string;
            };
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        CustomerSequence: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            genericSequence?: components["schemas"]["GenericSequence"];
            seller?: components["schemas"]["Seller"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        DDPaymentMethod: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            disabled: boolean;
            alias?: string;
            preferred?: boolean;
            customerAccount?: components["schemas"]["CustomerAccount"];
            /** @enum {string} */
            paymentType?: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
            userId?: string;
            info1?: string;
            info2?: string;
            info3?: string;
            info4?: string;
            info5?: string;
            tokenId?: string;
            token3DsId?: string;
            referenceDocument?: components["schemas"]["Document"];
            action?: string;
            bankCoordinates?: components["schemas"]["BankCoordinates"];
            mandateIdentification?: string;
            /** Format: date-time */
            mandateDate?: string;
            expired?: boolean;
            active?: boolean;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            transient?: boolean;
        };
        DDRequestBuilder: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            disabled: boolean;
            /** @enum {string} */
            type: "CUSTOM" | "NATIF";
            scriptInstance?: components["schemas"]["ScriptInstance"];
            implementationClassName?: string;
            /** Format: int64 */
            nbOperationPerFile?: number;
            /** Format: int64 */
            maxSizeFile?: number;
            /** @enum {string} */
            paymentLevel: "AO" | "CA";
            active?: boolean;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        DDRequestItem: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            amount?: number;
            paymentInfo?: string;
            paymentInfo1?: string;
            paymentInfo2?: string;
            paymentInfo3?: string;
            paymentInfo4?: string;
            paymentInfo5?: string;
            paymentInfo6?: string;
            /** Format: date-time */
            dueDate?: string;
            billingAccountName?: string;
            reference?: string;
            ddRequestLOT?: components["schemas"]["DDRequestLOT"];
            accountOperations?: components["schemas"]["AccountOperation"][];
            errorMsg?: string;
            automatedPayment?: components["schemas"]["AutomatedPayment"];
            automatedRefund?: components["schemas"]["AutomatedRefund"];
            rejectedFileName?: string;
            transient?: boolean;
        };
        DDRequestLOT: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            fileName?: string;
            returnFileName?: string;
            /** Format: date-time */
            sendDate?: string;
            /** Format: int32 */
            nbItemsOk?: number;
            paymentCreated?: boolean;
            totalAmount?: number;
            ddrequestItems?: components["schemas"]["DDRequestItem"][];
            returnStatusCode?: string;
            rejectedCause?: string;
            /** Format: int32 */
            nbItemsKo?: number;
            ddRequestBuilder?: components["schemas"]["DDRequestBuilder"];
            /** @enum {string} */
            paymentOrRefundEnum?: "PAYMENT" | "REFUND";
            seller?: components["schemas"]["Seller"];
            transient?: boolean;
        };
        DatePeriod: {
            /** Format: date-time */
            from?: string;
            /** Format: date-time */
            to?: string;
            strictMatch?: boolean;
            /** Format: date-time */
            fromMatch?: string;
            /** Format: date-time */
            toMatch?: string;
            valid?: boolean;
            empty?: boolean;
        };
        DigitalResource: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            disabled: boolean;
            uri?: string;
            mimeType?: string;
            productOfferings?: components["schemas"]["ProductOffering"][];
            active?: boolean;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        DiscountPlan: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            disabled: boolean;
            /** Format: int32 */
            minDuration?: number;
            /** Format: int32 */
            maxDuration?: number;
            discountPlanItems?: components["schemas"]["DiscountPlanItem"][];
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string;
            /** Format: int32 */
            defaultDuration?: number;
            /** @enum {string} */
            durationUnit?: "MONTH" | "DAY";
            /** @enum {string} */
            discountPlanType?: "QUOTE" | "OFFER" | "PRODUCT" | "INVOICE" | "INVOICE_LINE" | "PROMO_CODE";
            /** @enum {string} */
            status: "ACTIVE" | "INACTIVE" | "DRAFT" | "IN_USE" | "EXPIRED";
            /** Format: date-time */
            statusDate?: string;
            /** Format: int64 */
            initialQuantity?: number;
            /** Format: int64 */
            readonly usedQuantity?: number;
            /** Format: int64 */
            applicationLimit?: number;
            applicationFilterEL?: string;
            discountPlanaApplicableEntities?: components["schemas"]["ApplicableEntity"][];
            incompatibleDiscountPlans?: components["schemas"]["DiscountPlan"][];
            applicableOnOverriddenPrice?: boolean;
            applicableOnDiscountedPrice?: boolean;
            /** Format: int32 */
            sequence?: number;
            expressionEl?: string;
            applicableOnContractPrice?: boolean;
            valid?: boolean;
            active?: boolean;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        DiscountPlanInstance: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            discountPlan?: components["schemas"]["DiscountPlan"];
            billingAccount?: components["schemas"]["BillingAccount"];
            subscription?: components["schemas"]["Subscription"];
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            /** @enum {string} */
            readonly status?: "ACTIVE" | "APPLIED" | "IN_USE" | "EXPIRED";
            /** Format: date-time */
            readonly statusDate?: string;
            /** Format: int64 */
            readonly applicationCount?: number;
            serviceInstance?: components["schemas"]["ServiceInstance"];
            discountPlanInstanceStatus?: components["schemas"]["DiscountPlan"];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            valid?: boolean;
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            transient?: boolean;
        };
        DiscountPlanItem: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            disabled: boolean;
            code: string;
            discountPlan: components["schemas"]["DiscountPlan"];
            invoiceCategory?: components["schemas"]["InvoiceCategory"];
            invoiceSubCategory?: components["schemas"]["InvoiceSubCategory"];
            expressionEl?: string;
            discountValue?: number;
            discountValueEL?: string;
            /** @enum {string} */
            discountPlanItemType?: "PERCENTAGE" | "FIXED";
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            /** Format: int64 */
            priority?: number;
            accountingArticle?: components["schemas"]["AccountingArticle"];
            targetAccountingArticle?: components["schemas"]["AccountingArticle"][];
            pricePlanMatrix?: components["schemas"]["PricePlanMatrix"];
            allowToNegate: boolean;
            applyByArticle?: boolean;
            /** Format: int32 */
            sequence?: number;
            lastDiscount?: boolean;
            /** Format: int32 */
            finalSequence?: number;
            description?: string;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            active?: boolean;
            transient?: boolean;
        };
        Document: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            descriptionI18n?: {
                [key: string]: string;
            };
            fileType: components["schemas"]["FileType"];
            /** Format: date-time */
            creationDate: string;
            fileName: string;
            tags?: string[];
            linkedAccountEntity?: components["schemas"]["AccountEntity"];
            category?: components["schemas"]["DocumentCategory"];
            /** @enum {string} */
            documentStatus: "ACTIVE" | "INACTIVE" | "REJECTED";
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        DocumentCategory: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            relativePath?: string;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        DunningAction: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            /** @enum {string} */
            actionType?: "SEND_NOTIFICATION" | "RETRY_PAYMENT" | "WRITE_OFF_INVOICE" | "ISSUE_A_CREDIT_NOTE" | "SCRIPT";
            /** @enum {string} */
            actionMode?: "MANUAL" | "AUTOMATIC";
            /** @enum {string} */
            actionChannel?: "LETTER" | "EMAIL" | "CERTIFIED_LETTER" | "CALL";
            relatedLevels?: components["schemas"]["DunningLevel"][];
            scriptInstance?: components["schemas"]["ScriptInstance"];
            actionNotificationTemplate?: components["schemas"]["EmailTemplate"];
            attachOverdueInvoices?: boolean;
            attachDueInvoices?: boolean;
            assignedTo?: components["schemas"]["DunningAgent"];
            activeAction?: boolean;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        DunningActionInstance: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            /** @enum {string} */
            actionType?: "SEND_NOTIFICATION" | "RETRY_PAYMENT" | "WRITE_OFF_INVOICE" | "ISSUE_A_CREDIT_NOTE" | "SCRIPT";
            /** @enum {string} */
            actionMode?: "MANUAL" | "AUTOMATIC";
            actionOwner?: components["schemas"]["DunningAgent"];
            actionRestult?: string;
            /** @enum {string} */
            actionStatus: "TO_BE_DONE" | "DONE";
            collectionPlan?: components["schemas"]["DunningCollectionPlan"];
            dunningLevelInstance?: components["schemas"]["DunningLevelInstance"];
            dunningAction?: components["schemas"]["DunningAction"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        DunningAgent: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            external?: boolean;
            collectionAgency?: string;
            agentFirstNameItem?: string;
            agentLastNameItem?: string;
            agentEmailItem?: string;
            dunningSettings?: components["schemas"]["DunningSettings"];
            transient?: boolean;
        };
        DunningCollectionPlan: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            collectionPlanNumber: string;
            relatedPolicy?: components["schemas"]["DunningPolicy"];
            initialCollectionPlan?: components["schemas"]["DunningCollectionPlan"];
            billingAccount?: components["schemas"]["BillingAccount"];
            relatedInvoice?: components["schemas"]["Invoice"];
            pauseReason?: components["schemas"]["DunningPauseReason"];
            stopReason?: components["schemas"]["DunningStopReason"];
            /** Format: int32 */
            currentDunningLevelSequence?: number;
            /** Format: date-time */
            startDate?: string;
            /** Format: int32 */
            daysOpen?: number;
            /** Format: date-time */
            closeDate?: string;
            status?: components["schemas"]["DunningCollectionPlanStatus"];
            /** Format: date-time */
            pausedUntilDate?: string;
            balance?: number;
            retryPaymentOnResumeDate?: boolean;
            dunningLevelInstances?: components["schemas"]["DunningLevelInstance"][];
            nextAction?: string;
            /** Format: date-time */
            nextActionDate?: string;
            lastAction?: string;
            /** Format: date-time */
            lastActionDate?: string;
            /** Format: int32 */
            totalDunningLevels?: number;
            /** Format: int32 */
            pauseDuration?: number;
            transient?: boolean;
        };
        DunningCollectionPlanStatus: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            /** @enum {string} */
            status: "ACTIVE" | "SUCCESS" | "FAILED" | "PAUSED" | "STOPPED";
            description: string;
            colorCode?: string;
            dunningSettings: components["schemas"]["DunningSettings"];
            transient?: boolean;
        };
        DunningDocument: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            customerAccount?: components["schemas"]["CustomerAccount"];
            subscription?: components["schemas"]["Subscription"];
            dueInvoices?: components["schemas"]["RecordedInvoice"][];
            payments?: components["schemas"]["Payment"][];
            /** @enum {string} */
            status?: "OPEN" | "CLOSED";
            paidAmount?: number;
            amountWithTax?: number;
            amountWithoutTax?: number;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        DunningHistory: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            type?: string;
            /** Format: date-time */
            executionDate?: string;
            /** Format: int32 */
            linesRead?: number;
            /** Format: int32 */
            linesInserted?: number;
            /** Format: int32 */
            linesRejected?: number;
            dunningLots?: components["schemas"]["DunningLOT"][];
            transient?: boolean;
        };
        DunningLOT: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            fileName?: string;
            /** @enum {string} */
            actionType?: "FILE" | "LETTER" | "EMAIL" | "CHARGE";
            dunningHistory?: components["schemas"]["DunningHistory"];
            actions?: components["schemas"]["ActionDunning"][];
            transient?: boolean;
        };
        DunningLevel: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            /** Format: int32 */
            daysOverdue: number;
            minBalance?: number;
            minBalanceCurrency?: components["schemas"]["Currency"];
            /** @enum {string} */
            chargeType?: "FLAT_AMOUNT" | "PERCENTAGE";
            chargeValue?: number;
            chargeCurrency?: components["schemas"]["Currency"];
            dunningActions?: components["schemas"]["DunningAction"][];
            relatedPolicies?: components["schemas"]["DunningPolicyLevel"][];
            reminder?: boolean;
            endOfDunningLevel?: boolean;
            softDecline?: boolean;
            active?: boolean;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        DunningLevelInstance: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            /** Format: int32 */
            sequence: number;
            /** Format: int32 */
            daysOverdue: number;
            collectionPlan?: components["schemas"]["DunningCollectionPlan"];
            collectionPlanStatus?: components["schemas"]["DunningCollectionPlanStatus"];
            actions?: components["schemas"]["DunningActionInstance"][];
            /** @enum {string} */
            levelStatus: "TO_BE_DONE" | "IN_PROGRESS" | "DONE";
            dunningLevel: components["schemas"]["DunningLevel"];
            transient?: boolean;
        };
        DunningPauseReason: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            pauseReason: string;
            description?: string;
            dunningSettings: components["schemas"]["DunningSettings"];
            transient?: boolean;
        };
        DunningPaymentRetry: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            /** @enum {string} */
            paymentMethod: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
            psp?: string;
            /** Format: int32 */
            numPayRetries: number;
            /** @enum {string} */
            payRetryFrequencyUnit: "DAY" | "MONTH";
            /** Format: int32 */
            payRetryFrequency: number;
            dunningSettings: components["schemas"]["DunningSettings"];
            transient?: boolean;
        };
        DunningPolicy: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            disabled: boolean;
            policyName: string;
            policyDescription: string;
            /** Format: int32 */
            interestForDelaySequence?: number;
            /** Format: double */
            minBalanceTrigger: number;
            minBalanceTriggerCurrency?: components["schemas"]["Currency"];
            /** @enum {string} */
            determineLevelBy?: "DAYS_OVERDUE" | "DAYS_OVERDUE_OR_BALANCE_THRESHOLD";
            includeDueInvoicesInThreshold?: boolean;
            /** Format: int32 */
            totalDunningLevels?: number;
            includePayReminder?: boolean;
            attachInvoicesToEmails?: boolean;
            /** Format: int32 */
            policyPriority?: number;
            isDefaultPolicy?: boolean;
            isActivePolicy?: boolean;
            dunningLevels?: components["schemas"]["DunningPolicyLevel"][];
            dunningPolicyRules?: components["schemas"]["DunningPolicyRule"][];
            active?: boolean;
            transient?: boolean;
        };
        DunningPolicyLevel: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            /** Format: int32 */
            sequence: number;
            dunningLevel?: components["schemas"]["DunningLevel"];
            dunningPolicy?: components["schemas"]["DunningPolicy"];
            collectionPlanStatus?: components["schemas"]["DunningCollectionPlanStatus"];
            transient?: boolean;
        };
        DunningPolicyRule: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            ruleJoint?: string;
            dunningPolicy?: components["schemas"]["DunningPolicy"];
            dunningPolicyRuleLines?: components["schemas"]["DunningPolicyRuleLine"][];
            transient?: boolean;
        };
        DunningPolicyRuleLine: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            policyConditionOperator: string;
            policyConditionTarget: string;
            policyConditionTargetValue: string;
            ruleLineJoint?: string;
            dunningPolicyRule?: components["schemas"]["DunningPolicyRule"];
            transient?: boolean;
        };
        DunningSettings: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            /** @enum {string} */
            dunningMode?: "CUSTOMER_LEVEL" | "INVOICE_LEVEL";
            /** Format: int32 */
            maxDunningLevels?: number;
            /** Format: int32 */
            maxDaysOutstanding?: number;
            allowInterestForDelay?: boolean;
            interestForDelayRate?: number;
            allowDunningCharges?: boolean;
            applyDunningChargeFxExchangeRate?: boolean;
            accountingArticle?: components["schemas"]["AccountingArticle"];
            dunningAgents?: components["schemas"]["DunningAgent"][];
            dunningCollectionPlanStatuses?: components["schemas"]["DunningCollectionPlanStatus"][];
            dunningPauseReasons?: components["schemas"]["DunningPauseReason"][];
            dunningPaymentRetries?: components["schemas"]["DunningPaymentRetry"][];
            dunningStopReasons?: components["schemas"]["DunningStopReason"][];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        DunningStopReason: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            stopReason: string;
            description?: string;
            dunningSettings: components["schemas"]["DunningSettings"];
            transient?: boolean;
        };
        EDR: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            subscription: components["schemas"]["Subscription"];
            originBatch?: string;
            originRecord?: string;
            /** Format: date-time */
            eventDate?: string;
            quantity?: number;
            parameter1?: string;
            parameter2?: string;
            parameter3?: string;
            parameter4?: string;
            parameter5?: string;
            parameter6?: string;
            parameter7?: string;
            parameter8?: string;
            parameter9?: string;
            /** Format: date-time */
            dateParam1?: string;
            /** Format: date-time */
            dateParam2?: string;
            /** Format: date-time */
            dateParam3?: string;
            /** Format: date-time */
            dateParam4?: string;
            /** Format: date-time */
            dateParam5?: string;
            decimalParam1?: number;
            decimalParam2?: number;
            decimalParam3?: number;
            decimalParam4?: number;
            decimalParam5?: number;
            /** Format: date-time */
            created?: string;
            /** Format: date-time */
            updated?: string;
            accessCode?: string;
            headerEDR?: components["schemas"]["EDR"];
            extraParameter?: string;
            /** @enum {string} */
            status?: "OPEN" | "RATED" | "REJECTED" | "MEDIATING" | "AGGREGATED" | "DUPLICATED" | "CANCELLED";
            rejectReason?: string;
            /** Format: int32 */
            timesTried?: number;
            eventKey?: string;
            /** Format: int32 */
            eventVersion?: number;
            walletOperation?: components["schemas"]["WalletOperation"];
            quantityLeftToRate?: number;
            /** Format: date-time */
            statusDate?: string;
            transient?: boolean;
        };
        EmailTemplate: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            /** @enum {string} */
            media?: "POSTAL_MAIL" | "EMAIL" | "SMS" | "IM" | "FAX" | "VOICE" | "WEBSERVICE" | "QUEUE" | "FTP_FILE" | "CFT_FILE" | "DATABASE" | "DUNNING_MEDIA";
            tagStartDelimiter?: string;
            tagEndDelimiter?: string;
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string;
            /** @enum {string} */
            type?: "DUNNING" | "INVOICE" | "OTHER";
            textContent?: string;
            translatedTextContent?: {
                [key: string]: string;
            };
            subject?: string;
            htmlContent?: string;
            translatedHtmlContent?: {
                [key: string]: string;
            };
            translatedSubject?: {
                [key: string]: string;
            };
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        EntityReferenceWrapper: {
            classname?: string;
            classnameCode?: string;
            code?: string;
            /** Format: int64 */
            id?: number;
            referenceDescription?: string;
            referenceCode?: string;
            empty?: boolean;
        };
        ExchangeRate: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            disabled: boolean;
            tradingCurrency?: components["schemas"]["TradingCurrency"];
            exchangeRate?: number;
            /** Format: date-time */
            fromDate?: string;
            currentRate?: boolean;
            active?: boolean;
            transient?: boolean;
        };
        FileType: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        GdprConfiguration: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            /** Format: int32 */
            inactiveSubscriptionLife?: number;
            /** Format: int32 */
            inactiveOrderLife?: number;
            /** Format: int32 */
            invoiceLife?: number;
            /** Format: int32 */
            accountingLife?: number;
            /** Format: int32 */
            customerProspectLife?: number;
            /** Format: int32 */
            mailingLife?: number;
            /** Format: int32 */
            aoCheckUnpaidLife?: number;
            deleteSubscription?: boolean;
            deleteOrder?: boolean;
            deleteInvoice?: boolean;
            deleteAccounting?: boolean;
            deleteCustomerProspect?: boolean;
            deleteMailingLife?: boolean;
            deleteAoCheckUnpaidLife?: boolean;
            transient?: boolean;
        };
        GeneralLedger: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            otherTransactions?: components["schemas"]["OtherTransaction"][];
            seller?: components["schemas"]["Seller"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        GenericSequence: {
            prefix?: string;
            /** Format: int64 */
            sequenceSize?: number;
            /** Format: int64 */
            currentSequenceNb?: number;
        };
        GroupedAttributes: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            disabled: boolean;
            mandatory: boolean;
            display: boolean;
            /** Format: int32 */
            sequence?: number;
            commercialRules?: components["schemas"]["CommercialRuleHeader"][];
            attributes?: components["schemas"]["Attribute"][];
            active?: boolean;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        ICustomFieldEntity: {
            uuid?: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
        };
        IInvoiceable: {
            prepaid?: boolean;
            taxOverriden?: boolean;
            taxRecalculated?: boolean;
            /** Format: int64 */
            sellerId?: number;
            /** Format: int64 */
            subscriptionId?: number;
            /** Format: int64 */
            taxId?: number;
            /** Format: int64 */
            taxClassId?: number;
            /** Format: int64 */
            billingAccountId?: number;
            /** Format: int64 */
            invoiceSubCategoryId?: number;
            taxPercent?: number;
            orderNumber?: string;
            tax?: components["schemas"]["Tax"];
            unitAmountTax?: number;
            amountTax?: number;
            amountWithTax?: number;
            unitAmountWithoutTax?: number;
            unitAmountWithTax?: number;
            amountWithoutTax?: number;
            /** Format: int64 */
            walletId?: number;
            /** Format: int64 */
            userAccountId?: number;
            /** Format: int64 */
            id?: number;
        };
        InstantiateServicesRequestDto: {
            subscription: string;
            /** Format: date-time */
            subscriptionValidityDate?: string;
            servicesToInstantiate?: components["schemas"]["ServicesToInstantiateDto"];
        };
        InterBankTitle: {
            codeCreancier?: string;
            codeEtablissementCreancier?: string;
            codeCentre?: string;
            nne?: string;
            adresseTSA?: components["schemas"]["Address"];
        };
        Invoice: {
            /** @description discount amount without tax */
            discountAmountWithoutTax?: number;
            /**
             * Format: date-time
             * @description The product date
             */
            productDate?: string;
            adjustedInvoice?: components["schemas"]["Resource"];
            /** @description The external ref */
            externalRef?: string;
            /**
             * Format: date-time
             * @description The xml date
             */
            xmlDate?: string;
            /**
             * Format: date-time
             * @description The pdf date
             */
            pdfDate?: string;
            /**
             * Format: date-time
             * @description The date of email sent
             */
            emailSentDate?: string;
            /** @description The raw amount */
            rawAmount?: number;
            /** @description The previous invoice number */
            previousInvoiceNumber?: string;
            /**
             * Format: date-time
             * @description The date of the payment status
             */
            paymentStatusDate?: string;
            /** @description Amount without tax before discount */
            amountWithoutTaxBeforeDiscount?: number;
            /** @description The temporary invoice number */
            temporaryInvoiceNumber?: string;
            /** @description The list of the invoice lines */
            invoiceLines?: components["schemas"]["InvoiceLine"][];
            commercialOrder?: components["schemas"]["Resource"];
            cpqQuote?: components["schemas"]["Resource"];
            /** @description The invoice type code */
            invoiceTypeCode?: string;
            /** @description The list of the caregory invoice agregates */
            categoryInvoiceAgregates?: components["schemas"]["CategoryInvoiceAgregate"][];
            /** @description The list of linked invoices */
            listLinkedInvoices?: number[];
            /** @description The list of the invoice lines to link */
            invoiceLinesTolink?: number[];
            /**
             * Format: int64
             * @description The invoice adjustment current seller
             */
            invoiceAdjustmentCurrentSellerNb?: number;
            /**
             * Format: int64
             * @description The invoice adjustment current provider
             */
            invoiceAdjustmentCurrentProviderNb?: number;
            /** @description The due balance */
            dueBalance?: number;
            /** @description The discount if any */
            discount?: number;
            /** @description The rejected reason */
            rejectReason?: string;
            /**
             * @description The payment method type
             * @example possible value are: CHECK, DIRECTDEBIT, WIRETRANSFER, CARD, PAYPAL, STRIPE, CASH
             * @enum {string}
             */
            paymentMethodType?: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
            /**
             * Format: date-time
             * @description The Due date
             */
            dueDate?: string;
            paymentMethod?: components["schemas"]["Resource"];
            tradingCountry?: components["schemas"]["Resource"];
            /**
             * Format: date-time
             * @description The date of the status
             */
            statusDate?: string;
            /** @description The seller code */
            sellerCode?: string;
            /**
             * Format: date-time
             * @description The start date
             */
            startDate?: string;
            /**
             * Format: date-time
             * @description The end date
             */
            endDate?: string;
            /** @description The billing account code */
            billingAccountCode?: string;
            /** @description The amount tax */
            amountTax?: number;
            /** @description The amount with tax */
            amountWithTax?: number;
            /** @description The amount without tax */
            amountWithoutTax?: number;
            /**
             * @description The payement status
             * @example possible value are : <ul><li>NONE : invoice has no payment status, no AO created.</li><li>PENDING : AO created, due date is still in the future</li><li>PAID : invoice has no payment status, no AO created.</li><li>PPAID : invoice has no payment status, no AO created</li><li>UNPAID : invoice has no payment status, no AO created.</li><li>ABANDONED : invoice has no payment status, no AO created.</li><li>REFUNDED : invoice has no payment status, no AO created.</li><li>DISPUTED : invoice has no payment status, no AO created.</li>
             * @enum {string}
             */
            paymentStatus?: "NONE" | "PENDING" | "PENDING_PLAN" | "PAID" | "PPAID" | "UNPAID" | "ABANDONED" | "REFUNDED" | "DISPUTED";
            /** @description The iban */
            iban?: string;
            /** @description The alias */
            alias?: string;
            subscription?: components["schemas"]["Resource"];
            tradingLanguage?: components["schemas"]["Resource"];
            quote?: components["schemas"]["Resource"];
            billingRun?: components["schemas"]["Resource"];
            /** @description The xml file name for generated invoice xml */
            xmlFilename?: string;
            /** @description The pdf file name for generated invoice PDF */
            pdfFilename?: string;
            /** @description The amount of the invoice */
            amount?: number;
            customFields?: components["schemas"]["CustomFieldsDto"];
            tradingCurrency?: components["schemas"]["Resource"];
            /**
             * Format: date-time
             * @description The invoice date
             */
            invoiceDate?: string;
            /** @description The discount rate */
            discountRate?: number;
            recordedInvoice?: components["schemas"]["Resource"];
            /** @description The net to pay */
            netToPay?: number;
            /** @description The invoice number */
            invoiceNumber?: string;
            /**
             * Format: date-time
             * @description The initial collection date
             */
            initialCollectionDate?: string;
            discountPlan?: components["schemas"]["Resource"];
            /** @description The discount amount */
            discountAmount?: number;
            cfValues?: components["schemas"]["Resource"];
            cfAccumulatedValues?: components["schemas"]["Resource"];
            order?: components["schemas"]["Resource"];
            /** @description The description of the invoice */
            description?: string;
            /**
             * @description The status of the invoice.
             * @example possible value are : <ul><li> NEW : invoice entity has been created but incomplete </li><li>SUSPECT : invoice has been marked as suspect by automatic controls (this status doesn?t block automatic generation)</li><li>REJECTED : invoice has been rejected by automatic controls (this status block automatic generation)</li><li>DRAFT : invoice is complete but not validated. It can be edited.</li><li>CANCELED : invoice has been canceled (all related rated transactions are released. This is a final status)</li><li>VALIDATED : invoice is validated and cannot be edited anymore (this a final status)</li></ul>
             * @enum {string}
             */
            status?: "NEW" | "SUSPECT" | "REJECTED" | "DRAFT" | "CANCELED" | "VALIDATED";
            /** @description The comment for the invoice */
            comment?: string;
            links?: {
                title?: string;
                uriBuilder?: Record<string, never>;
                rel?: string;
                rels?: string[];
                params?: {
                    [key: string]: string;
                };
                /** Format: uri */
                uri?: string;
                type?: string;
            }[];
            code?: string;
            /** Format: int64 */
            id?: number;
            /** @description Indicate if the invoice is already applied minumun */
            alreadyAppliedMinimum?: boolean;
            /** @description Indicate if the invoice is already sent */
            alreadySent?: boolean;
            /** @description Indicate if the invoice doesnt send */
            dontSend?: boolean;
            /** @description Indicate if the invoice is detailed */
            detailedInvoice?: boolean;
            /** @description Indicate if the invoice is discount already added */
            alreadyAddedDiscount?: boolean;
            /** @description Indicate if the invoice is draft */
            draft?: boolean;
            /** @description Indicate if the invoice is a prepaid */
            prepaid?: boolean;
        };
        InvoiceAgregate: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            billingAccount?: components["schemas"]["BillingAccount"];
            invoice?: components["schemas"]["Invoice"];
            billingRun?: components["schemas"]["BillingRun"];
            /** Format: int32 */
            itemNumber?: number;
            description?: string;
            amount?: number;
            amountWithoutTax?: number;
            amountTax?: number;
            amountWithTax?: number;
            tradingCurrency?: components["schemas"]["TradingCurrency"];
            tradingCountry?: components["schemas"]["TradingCountry"];
            tradingLanguage?: components["schemas"]["TradingLanguage"];
            prDescription?: string;
            descriminatorValue?: string;
            transient?: boolean;
        };
        InvoiceCategory: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            invoiceSubCategories?: components["schemas"]["InvoiceSubCategory"][];
            /** Format: int32 */
            sortIndex?: number;
            descriptionI18n?: {
                [key: string]: string;
            };
            occTemplate?: components["schemas"]["OCCTemplate"];
            occTemplateNegative?: components["schemas"]["OCCTemplate"];
            descriptionI18nNullSafe?: {
                [key: string]: string;
            };
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        InvoiceConfiguration: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            displaySubscriptions?: boolean;
            displayServices?: boolean;
            displayOffers?: boolean;
            displayPricePlans?: boolean;
            displayEdrs?: boolean;
            displayProvider?: boolean;
            displayDetail?: boolean;
            displayCfAsXML?: boolean;
            displayBillingCycle?: boolean;
            displayOrders?: boolean;
            displayTaxDetails?: boolean;
            /** Format: int64 */
            currentInvoiceNb?: number;
            defaultInvoiceSubCategory?: components["schemas"]["InvoiceSubCategory"];
            defaultGenericAccountingArticle?: components["schemas"]["AccountingArticle"];
            defaultDiscountAccountingArticle?: components["schemas"]["AccountingArticle"];
            defaultAdvancedPaymentAccountingArticle?: components["schemas"]["AccountingArticle"];
            defaultInvoiceMinimumAccountingArticle?: components["schemas"]["AccountingArticle"];
            displayWalletOperations?: boolean;
            displayUserAccountHierarchy?: boolean;
            transient?: boolean;
        };
        /** @description The list of invoice lines */
        InvoiceLine: {
            /**
             * Format: int64
             * @description The id of billing run
             */
            billingRunId?: number;
            /** @description The code of accounting article */
            accountingArticleCode: string;
            /** @description The code of service instance */
            serviceInstanceCode?: string;
            /** @description The code of service template */
            serviceTemplateCode?: string;
            /**
             * Format: int64
             * @description The id of product version
             */
            productVersionId?: number;
            /**
             * Format: int64
             * @description The id of offer service template
             */
            offerServiceTemplateId?: number;
            /** @description The Tax Accounting Code */
            taxAccountingCode?: string;
            /** @description The access point */
            accessPoint?: string;
            /** @description The raw amount */
            rawAmount?: number;
            /** @description The orderLot code */
            orderLotCode?: string;
            /**
             * Format: int64
             * @description The id of the commercial order
             */
            commercialOrderId?: number;
            /** @description the tax recalculated */
            taxRecalculated?: boolean;
            /** @description The code of discount plan */
            discountPlanCode?: string;
            /**
             * Format: int64
             * @description The id of the invoice
             */
            invoiceId?: number;
            /** @description The Tax Mode */
            taxMode?: string;
            /** @description The prestation */
            prestation?: string;
            /** @description The code of tax */
            taxCode?: string;
            /**
             * Format: date-time
             * @description The start date
             */
            startDate?: string;
            /**
             * Format: date-time
             * @description The end date
             */
            endDate?: string;
            /** @description The code of billing account */
            billingAccountCode?: string;
            /** @description The order number */
            orderNumber?: string;
            /** @description The quantity */
            quantity?: number;
            /** @description The amount tax */
            amountTax?: number;
            /** @description The amount with tax */
            amountWithTax?: number;
            /** @description The amount without tax */
            amountWithoutTax?: number;
            /** @description The code of offer template */
            offerTemplateCode?: string;
            /** @description The code of subscription */
            subscriptionCode?: string;
            /** @description The unit price */
            unitPrice?: number;
            /** @description The order reference */
            orderRef?: string;
            /** @description The tax rate */
            taxRate?: number;
            customFields?: components["schemas"]["CustomFieldsDto"];
            /** @description The discount rate */
            discountRate?: number;
            /** @description The discount amount */
            discountAmount?: number;
            /**
             * Format: date-time
             * @description The date value
             */
            valueDate?: string;
            /** @description The code of product */
            productCode?: string;
            /** @description The label for invoice line */
            label?: string;
            /** @description The description */
            description?: string;
            /**
             * @description the status
             * @example possible value are: OPEN, BILLED, REJECTED, RERATED, CANCELED
             * @enum {string}
             */
            status?: "OPEN" | "BILLED" | "REJECTED" | "RERATED" | "CANCELED";
            links?: {
                title?: string;
                uriBuilder?: Record<string, never>;
                rel?: string;
                rels?: string[];
                params?: {
                    [key: string]: string;
                };
                /** Format: uri */
                uri?: string;
                type?: string;
            }[];
            code?: string;
            /** Format: int64 */
            id?: number;
        };
        InvoiceSequence: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            /** @enum {string} */
            sequenceType?: "RUM" | "CUSTOMER_NO" | "SEQUENCE" | "NUMERIC" | "ALPHA_UP" | "UUID" | "REGEXP";
            /** Format: int32 */
            sequenceSize?: number;
            /** Format: int64 */
            currentNumber?: number;
            sequencePattern?: string;
            invoiceTypes?: components["schemas"]["InvoiceType"][];
            invoiceTypeSellerSequences?: components["schemas"]["InvoiceTypeSellerSequence"][];
            /** Format: int64 */
            previousInvoiceNb?: number;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        InvoiceSubCategory: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            discount?: number;
            invoiceCategory?: components["schemas"]["InvoiceCategory"];
            descriptionI18n?: {
                [key: string]: string;
            };
            accountingCode?: components["schemas"]["AccountingCode"];
            occTemplate?: components["schemas"]["OCCTemplate"];
            occTemplateNegative?: components["schemas"]["OCCTemplate"];
            /** Format: int32 */
            sortIndex?: number;
            descriptionI18nNullSafe?: {
                [key: string]: string;
            };
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        InvoiceType: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            occTemplate?: components["schemas"]["OCCTemplate"];
            occTemplateNegative?: components["schemas"]["OCCTemplate"];
            customInvoiceXmlScriptInstance?: components["schemas"]["ScriptInstance"];
            appliesTo?: components["schemas"]["InvoiceType"][];
            invoiceSequence?: components["schemas"]["InvoiceSequence"];
            prefixEL?: string;
            sellerSequence?: components["schemas"]["InvoiceTypeSellerSequence"][];
            matchingAuto?: boolean;
            invoiceAccountable?: boolean;
            useSelfSequence?: boolean;
            pdfFilenameEL?: string;
            xmlFilenameEL?: string;
            billingTemplateNameEL?: string;
            taxScript?: components["schemas"]["ScriptInstance"];
            occTemplateCodeEl?: string;
            occTemplateNegativeCodeEl?: string;
            emailTemplate?: components["schemas"]["EmailTemplate"];
            /** @enum {string} */
            mailingType?: "MANUAL" | "AUTO" | "BATCH";
            excludeFromAgedTrialBalance?: boolean;
            invoiceValidationScript?: components["schemas"]["ScriptInstance"];
            invoiceValidationRules?: components["schemas"]["InvoiceValidationRule"][];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        InvoiceTypeSellerSequence: {
            id?: Record<string, never>;
            invoiceType: components["schemas"]["InvoiceType"];
            seller: components["schemas"]["Seller"];
            invoiceSequence?: components["schemas"]["InvoiceSequence"];
            prefixEL?: string;
            transient?: boolean;
        };
        InvoiceValidationRule: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            invoiceType: components["schemas"]["InvoiceType"];
            /** Format: int32 */
            priority: number;
            /** Format: date-time */
            validFrom?: string;
            /** Format: date-time */
            validTo?: string;
            /** @enum {string} */
            type: "SCRIPT" | "EXPRESSION_LANGUAGE";
            /** @enum {string} */
            failStatus?: "REJECTED" | "SUSPECT" | "VALID";
            validationScript?: components["schemas"]["ScriptInstance"];
            validationEL?: string;
            ruleValues?: {
                [key: string]: string;
            };
            toReorder?: boolean;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        InvoicingPlan: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            disabled: boolean;
            invoicingPlanItems?: components["schemas"]["InvoicingPlanItem"][];
            active?: boolean;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        InvoicingPlanItem: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            disabled: boolean;
            billingPlan: components["schemas"]["InvoicingPlan"];
            /** Format: int32 */
            advancement: number;
            rateToBill: number;
            active?: boolean;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        JobCategoryEnum: {
            label?: string;
            name?: string;
            /** Format: int32 */
            id?: number;
        };
        JobExecutionResultImpl: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            jobInstance?: components["schemas"]["JobInstance"];
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string;
            /** Format: int64 */
            nbItemsToProcess?: number;
            /** Format: int64 */
            nbItemsCorrectlyProcessed?: number;
            /** Format: int64 */
            nbItemsProcessedWithWarning?: number;
            /** Format: int64 */
            nbItemsProcessedWithError?: number;
            /** @enum {string} */
            status?: "RUNNING" | "COMPLETED" | "COMPLETED_MORE" | "CANCELLED" | "FAILED";
            /** @enum {string} */
            jobLauncherEnum?: "TIMER" | "GUI" | "INCOMPLETE" | "TRIGGER" | "API";
            warnings?: string[];
            errors?: string[];
            report?: string;
            moreToProcess?: boolean;
            /** Format: int64 */
            nbItemsProcessed?: number;
            transient?: boolean;
        };
        JobInstance: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            disabled: boolean;
            jobTemplate: string;
            parametres?: string;
            jobCategoryEnum?: components["schemas"]["JobCategoryEnum"];
            executionResults?: components["schemas"]["JobExecutionResultImpl"][];
            timerEntity?: components["schemas"]["TimerEntity"];
            queryScheduler?: components["schemas"]["QueryScheduler"];
            followingJob?: components["schemas"]["JobInstance"];
            runOnNodes?: string;
            limitToSingleNode: boolean;
            excludeInvoicesWithoutAmount?: boolean;
            verboseReport?: boolean;
            stopOnError?: boolean;
            /** @enum {string} */
            jobSpeed?: "SLOW" | "NORMAL" | "FAST" | "VERY_FAST";
            providerCode?: string;
            runTimeValues?: {
                [key: string]: Record<string, never>;
            };
            runTimeParametres?: string;
            active?: boolean;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        Journal: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            occTemplates?: components["schemas"]["OCCTemplate"][];
            accountOperations?: components["schemas"]["AccountOperation"][];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        JournalEntry: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            accountOperation?: components["schemas"]["AccountOperation"];
            accountingCode?: components["schemas"]["AccountingCode"];
            seller?: components["schemas"]["Seller"];
            customerAccount?: components["schemas"]["CustomerAccount"];
            /** @enum {string} */
            direction?: "DEBIT" | "CREDIT";
            amount?: number;
            tax?: components["schemas"]["Tax"];
            analyticCode1?: string;
            analyticCode2?: string;
            analyticCode3?: string;
            /** Format: int64 */
            operationNumber?: number;
            sellerCode?: string;
            clientUniqueId?: string;
            currency?: string;
            supportingDocumentRef?: components["schemas"]["Invoice"];
            supportingDocumentType?: string;
            tradingCurrency?: string;
            tradingAmount?: number;
            auxiliaryAccountCode?: string;
            auxiliaryAccountLabel?: string;
            journalCode?: string;
            /** @enum {string} */
            category?: "ASSETS" | "LIABILITIES" | "EQUITY" | "REVENUE" | "EXPENSE";
            account?: string;
            label?: string;
            customerCode?: string;
            customerName?: string;
            sellerName?: string;
            reference?: string;
            documentType?: string;
            matchingCode?: string;
            transient?: boolean;
        };
        Language: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            languageCode?: string;
            descriptionEn?: string;
            descriptionI18n?: {
                [key: string]: string;
            };
            description?: string;
            transient?: boolean;
        };
        LinkedInvoice: {
            /** Format: int64 */
            id?: number;
            linkedInvoiceValue?: components["schemas"]["Invoice"];
            amount?: number;
            /** @enum {string} */
            type?: "ADJUSTMENT" | "ADVANCEMENT_PAYMENT";
            invoice?: components["schemas"]["Invoice"];
            transient?: boolean;
        };
        MatchingAmount: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            matchingCode?: components["schemas"]["MatchingCode"];
            accountOperation?: components["schemas"]["AccountOperation"];
            matchingAmount?: number;
            transient?: boolean;
        };
        MatchingCode: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code?: string;
            /** @enum {string} */
            matchingType?: "A" | "M" | "A_TIP" | "A_DERICT_DEBIT";
            /** Format: date-time */
            matchingDate?: string;
            matchingAmounts?: components["schemas"]["MatchingAmount"][];
            matchingAmountCredit?: number;
            matchingAmountDebit?: number;
            transient?: boolean;
        };
        Media: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            mediaName: string;
            label: string;
            main: boolean;
            /** @enum {string} */
            mediaType: "IMAGE" | "VIDEO" | "PDF";
            mediaPath?: string;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        Message: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            templateCode?: string;
            parameters?: components["schemas"]["MessageVariableValue"][];
            campaign?: components["schemas"]["Campaign"];
            contact?: components["schemas"]["Contact"];
            /** @enum {string} */
            media?: "POSTAL_MAIL" | "EMAIL" | "SMS" | "IM" | "FAX" | "VOICE" | "WEBSERVICE" | "QUEUE" | "FTP_FILE" | "CFT_FILE" | "DATABASE" | "DUNNING_MEDIA";
            subMedia?: string;
            /** @enum {string} */
            priority?: "SLOW" | "NORMAL" | "URGENT";
            /** @enum {string} */
            status?: "WAITING" | "PROCESSING" | "TREATED" | "REJECTED" | "CANCELED";
            rejectionReason?: string;
            transient?: boolean;
        };
        MessageVariableValue: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            message?: components["schemas"]["Message"];
            value?: string;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        MeveoInstance: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            user?: components["schemas"]["User"];
            customer?: components["schemas"]["Customer"];
            productName?: string;
            productVersion?: string;
            owner?: string;
            md5?: string;
            /** @enum {string} */
            status?: "UNKNOWN" | "PARENT" | "CHILD" | "PARTNER";
            /** Format: date-time */
            creationDate?: string;
            /** Format: date-time */
            updateDate?: string;
            keyEntreprise?: string;
            macAddress?: string;
            machineVendor?: string;
            installationMode?: string;
            nbCores?: string;
            memory?: string;
            hdSize?: string;
            osName?: string;
            osVersion?: string;
            osArch?: string;
            javaVmVersion?: string;
            javaVmName?: string;
            javaVendor?: string;
            javaVersion?: string;
            asVendor?: string;
            asVersion?: string;
            url: string;
            authUsername?: string;
            authPasswordDB?: string;
            authPassword?: string;
            authPasswordKS?: string;
            clientId?: string;
            clientSecret?: string;
            /** @enum {string} */
            authenticationType?: "BASIC_AUTHENTICATION" | "OAUTH2";
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        MeveoModule: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            disabled: boolean;
            /** @enum {string} */
            license: "APACHE" | "BSD3_N" | "BSD3_R" | "BSD2_S" | "FREE_BSD" | "GPL" | "AGPL" | "LGPL" | "MIT" | "MOZ" | "CDDL" | "EPL" | "OPEN" | "COM";
            logoPicture?: string;
            installed?: boolean;
            moduleSource?: string;
            script?: components["schemas"]["ScriptInstance"];
            downloaded?: boolean;
            active?: boolean;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        MeveoModuleItem: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            meveoModule?: components["schemas"]["MeveoModule"];
            appliesTo?: string;
            itemClass: string;
            itemCode: string;
            validity?: components["schemas"]["DatePeriod"];
            itemEntity?: components["schemas"]["BusinessEntity"];
            itemClassSimpleName?: string;
            transient?: boolean;
        };
        Name: {
            title?: components["schemas"]["Title"];
            firstName?: string;
            lastName?: string;
            fullName?: string;
        };
        OCCTemplate: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            accountingCode?: components["schemas"]["AccountingCode"];
            accountCodeClientSide?: string;
            /** @enum {string} */
            occCategory?: "DEBIT" | "CREDIT";
            journal?: components["schemas"]["Journal"];
            accountingScheme?: components["schemas"]["AccountingScheme"];
            contraAccountingCode?: components["schemas"]["AccountingCode"];
            contraAccountingCode2?: components["schemas"]["AccountingCode"];
            manualCreationEnabled?: boolean;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        OfferComponent: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            offerTemplate: components["schemas"]["OfferTemplate"];
            product?: components["schemas"]["Product"];
            /** Format: int32 */
            quantityMin?: number;
            /** Format: int32 */
            quantityMax?: number;
            /** Format: int32 */
            quantityDefault?: number;
            tagsList?: components["schemas"]["Tag"][];
            mandatory?: boolean;
            /** Format: int32 */
            sequence?: number;
            display?: boolean;
            productSet?: string;
            transient?: boolean;
        };
        OfferProductTemplate: {
            id?: Record<string, never>;
            offerTemplate?: components["schemas"]["OfferTemplate"];
            productTemplate?: components["schemas"]["ProductTemplate"];
            mandatory?: boolean;
            transient?: boolean;
        };
        OfferServiceTemplate: {
            /** Format: int64 */
            id?: number;
            offerTemplate: components["schemas"]["OfferTemplate"];
            serviceTemplate: components["schemas"]["ServiceTemplate"];
            mandatory?: boolean;
            incompatibleServices?: components["schemas"]["ServiceTemplate"][];
            validity?: components["schemas"]["DatePeriod"];
            transient?: boolean;
        };
        OfferTemplate: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            disabled: boolean;
            name?: string;
            offerTemplateCategories?: components["schemas"]["OfferTemplateCategory"][];
            validity?: components["schemas"]["DatePeriod"];
            imagePath?: string;
            attachments?: components["schemas"]["DigitalResource"][];
            /** @enum {string} */
            lifeCycleStatus?: "IN_STUDY" | "IN_DESIGN" | "IN_TEST" | "ACTIVE" | "LAUNCHED" | "RETIRED" | "OBSOLETE" | "REJECTED";
            businessAccountModels?: components["schemas"]["BusinessAccountModel"][];
            channels?: components["schemas"]["Channel"][];
            descriptionI18n?: {
                [key: string]: string;
            };
            longDescription?: string;
            longDescriptionI18n?: {
                [key: string]: string;
            };
            globalRatingScriptInstance?: components["schemas"]["ScriptInstance"];
            sellers?: components["schemas"]["Seller"][];
            customerCategories?: components["schemas"]["CustomerCategory"][];
            businessOfferModel?: components["schemas"]["BusinessOfferModel"];
            offerServiceTemplates?: components["schemas"]["OfferServiceTemplate"][];
            offerProductTemplates?: components["schemas"]["OfferProductTemplate"][];
            offerComponents?: components["schemas"]["OfferComponent"][];
            minimumAmountEl?: string;
            minimumLabelEl?: string;
            allowedDiscountPlans?: components["schemas"]["DiscountPlan"][];
            minimumInvoiceSubCategory?: components["schemas"]["InvoiceSubCategory"];
            minimumChargeTemplate?: components["schemas"]["OneShotChargeTemplate"];
            document?: components["schemas"]["Document"];
            subscriptionRenewal?: components["schemas"]["SubscriptionRenewal"];
            prefix?: string;
            productTemplates?: components["schemas"]["ProductTemplate"][];
            transientCode?: string;
            autoEndOfEngagement?: boolean;
            tags?: components["schemas"]["Tag"][];
            medias?: components["schemas"]["Media"][];
            commercialRules?: components["schemas"]["CommercialRuleHeader"][];
            /** Format: date-time */
            statusDate?: string;
            isOfferChangeRestricted?: boolean;
            allowedOffersChange?: components["schemas"]["OfferTemplate"][];
            minimumArticle?: components["schemas"]["AccountingArticle"];
            isModel?: boolean;
            offerModel?: components["schemas"]["OfferTemplate"];
            generateQuoteEdrPerProduct?: boolean;
            offerAttributes?: components["schemas"]["OfferTemplateAttribute"][];
            nameOrCode?: string;
            longDescriptionI18nNullSafe?: {
                [key: string]: string;
            };
            descriptionI18nNullSafe?: {
                [key: string]: string;
            };
            active?: boolean;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        OfferTemplateAttribute: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            /** Format: int32 */
            sequence?: number;
            attribute: components["schemas"]["Attribute"];
            mandatoryWithEl?: string;
            mandatory: boolean;
            display: boolean;
            readOnly?: boolean;
            defaultValue?: string;
            /** @enum {string} */
            validationType?: "REGEX" | "EL";
            validationPattern?: string;
            validationLabel?: string;
            offerTemplate: components["schemas"]["OfferTemplate"];
            transient?: boolean;
        };
        OfferTemplateCategory: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            disabled: boolean;
            name: string;
            offerTemplateCategory?: components["schemas"]["OfferTemplateCategory"];
            children?: components["schemas"]["OfferTemplateCategory"][];
            productOffering?: components["schemas"]["ProductOffering"][];
            /** Format: int32 */
            orderLevel?: number;
            imagePath?: string;
            parentCategoryCode?: string;
            descriptionI18n?: {
                [key: string]: string;
            };
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            descriptionOrCode?: string;
            assignedToProductOffering?: boolean;
            active?: boolean;
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        OneShotChargeTemplate: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            disabled: boolean;
            productCharges?: components["schemas"]["ProductChargeTemplateMapping"][];
            /** @enum {string} */
            type?: "CREDIT" | "DEBIT";
            chargeType?: string;
            amountEditable?: boolean;
            invoiceSubCategory?: components["schemas"]["InvoiceSubCategory"];
            edrTemplates?: components["schemas"]["TriggeredEDRTemplate"][];
            inputUnitDescription?: string;
            ratingUnitDescription?: string;
            inputUnitOfMeasure?: components["schemas"]["UnitOfMeasure"];
            ratingUnitOfMeasure?: components["schemas"]["UnitOfMeasure"];
            inputUnitEL?: string;
            outputUnitEL?: string;
            unitMultiplicator?: number;
            /** Format: int32 */
            unitNbDecimal?: number;
            /** @enum {string} */
            roundingMode?: "NEAREST" | "DOWN" | "UP" | "HALF_EVEN";
            revenueRecognitionRule?: components["schemas"]["RevenueRecognitionRule"];
            descriptionI18n?: {
                [key: string]: string;
            };
            filterExpression?: string;
            taxClass?: components["schemas"]["TaxClass"];
            taxClassEl?: string;
            ratingScript?: components["schemas"]["ScriptInstance"];
            dropZeroWo?: boolean;
            sortIndexEl?: string;
            attributes?: components["schemas"]["Attribute"][];
            roundingValuesComputed?: boolean;
            /** Format: int32 */
            roundingUnityNbDecimal?: number;
            /** Format: int32 */
            roundingEdrNbDecimal?: number;
            /** @enum {string} */
            status?: "DRAFT" | "ACTIVE" | "ARCHIVED";
            internalNote?: string;
            quantityAttribute?: components["schemas"]["Attribute"];
            applyContractOverRatingScript?: boolean;
            /** @enum {string} */
            oneShotChargeTemplateType?: "oneShotChargeTemplateTypeEnum.subscription" | "oneShotChargeTemplateTypeEnum.termination" | "oneShotChargeTemplateTypeEnum.other";
            immediateInvoicing?: boolean;
            /** @enum {string} */
            chargeMainType?: "RECURRING" | "ONESHOT" | "USAGE" | "PRODUCT";
            descriptionI18nNullSafe?: {
                [key: string]: string;
            };
            active?: boolean;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        Order: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            externalId?: string;
            orderNumber?: string;
            deliveryInstructions?: string;
            /** Format: date-time */
            orderDate: string;
            /** Format: date-time */
            requestedStartDate?: string;
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            requestedCompletionDate?: string;
            /** Format: date-time */
            expectedCompletionDate?: string;
            /** Format: date-time */
            completionDate?: string;
            /** Format: int32 */
            priority?: number;
            category?: string;
            /** @enum {string} */
            status: "IN_CREATION" | "ACKNOWLEDGED" | "IN_PROGRESS" | "CANCELLED" | "COMPLETED" | "REJECTED" | "PENDING" | "HELD" | "FAILED" | "WAITING" | "DEFERRED" | "PARTIAL";
            statusMessage?: string;
            orderItems?: components["schemas"]["OrderItem"][];
            routedToUserGroup?: string;
            receivedFromApp?: string;
            invoices?: components["schemas"]["Invoice"][];
            dueDateDelayEL?: string;
            paymentMethod?: components["schemas"]["PaymentMethod"];
            quote?: components["schemas"]["Quote"];
            billingCycle?: components["schemas"]["BillingCycle"];
            billingRun?: components["schemas"]["BillingRun"];
            emailTemplate?: components["schemas"]["EmailTemplate"];
            /** @enum {string} */
            mailingType?: "MANUAL" | "AUTO" | "BATCH";
            ccedEmails?: string;
            email?: string;
            electronicBilling?: boolean;
            totalInvoicingAmountWithoutTax?: number;
            totalInvoicingAmountWithTax?: number;
            totalInvoicingAmountTax?: number;
            minInvoiceLines?: components["schemas"]["InvoiceLine"][];
            shippingAddress?: components["schemas"]["Address"];
            userAccounts?: components["schemas"]["UserAccount"][];
            transient?: boolean;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
        };
        OrderArticleLine: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            order: components["schemas"]["CommercialOrder"];
            orderCustomerService?: components["schemas"]["OrderLot"];
            accountingArticle: components["schemas"]["AccountingArticle"];
            quantity: number;
            quantityService: number;
            orderProduct?: components["schemas"]["OrderProduct"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        OrderAttribute: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            attribute?: components["schemas"]["Attribute"];
            parentAttributeValue?: components["schemas"]["OrderAttribute"];
            assignedAttributeValue?: components["schemas"]["OrderAttribute"][];
            stringValue?: string;
            /** Format: date-time */
            dateValue?: string;
            /** Format: double */
            doubleValue?: number;
            booleanValue?: boolean;
            commercialOrder?: components["schemas"]["CommercialOrder"];
            orderLot?: components["schemas"]["OrderLot"];
            orderProduct?: components["schemas"]["OrderProduct"];
            accessPoint?: string;
            orderOffer?: components["schemas"]["OrderOffer"];
            value?: Record<string, never>;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            transient?: boolean;
        };
        OrderHistory: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            orderItem?: components["schemas"]["OrderItem"];
            serviceInstance?: components["schemas"]["ServiceInstance"];
            orderNumber?: string;
            /** @enum {string} */
            action?: "ADD" | "MODIFY" | "DELETE";
            /** Format: date-time */
            eventDate?: string;
            transient?: boolean;
        };
        OrderInfo: {
            order?: components["schemas"]["CommercialOrder"];
            productVersion?: components["schemas"]["ProductVersion"];
        };
        OrderItem: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            order: components["schemas"]["Order"];
            itemId: string;
            /** @enum {string} */
            action: "ADD" | "MODIFY" | "DELETE";
            userAccount?: components["schemas"]["UserAccount"];
            orderItemProductOfferings?: components["schemas"]["OrderItemProductOffering"][];
            source?: string;
            /** @enum {string} */
            status: "IN_CREATION" | "ACKNOWLEDGED" | "IN_PROGRESS" | "CANCELLED" | "COMPLETED" | "REJECTED" | "PENDING" | "HELD" | "FAILED" | "WAITING" | "DEFERRED" | "PARTIAL";
            productInstances?: components["schemas"]["ProductInstance"][];
            subscription?: components["schemas"]["Subscription"];
            shippingAddress?: components["schemas"]["Address"];
            orderHistories?: components["schemas"]["OrderHistory"][];
            orderItemDto?: Record<string, never>;
            mainOffering?: components["schemas"]["ProductOffering"];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        OrderItemProductOffering: {
            id?: Record<string, never>;
            orderItem: components["schemas"]["OrderItem"];
            productOffering: components["schemas"]["ProductOffering"];
            /** Format: int32 */
            itemOrder: number;
            transient?: boolean;
        };
        OrderLot: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            order: components["schemas"]["CommercialOrder"];
            name?: string;
            quoteLot?: components["schemas"]["QuoteLot"];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        OrderOffer: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            order: components["schemas"]["CommercialOrder"];
            offerTemplate: components["schemas"]["OfferTemplate"];
            products?: components["schemas"]["OrderProduct"][];
            orderAttributes?: components["schemas"]["OrderAttribute"][];
            discountPlan?: components["schemas"]["DiscountPlan"];
            quoteOffer?: components["schemas"]["QuoteOffer"];
            /** Format: date-time */
            deliveryDate?: string;
            userAccount?: components["schemas"]["UserAccount"];
            /** @enum {string} */
            orderLineType?: "CREATE" | "AMEND" | "TERMINATE";
            subscription?: components["schemas"]["Subscription"];
            /** Format: date-time */
            terminationDate?: string;
            terminationReason?: components["schemas"]["SubscriptionTerminationReason"];
            contract?: components["schemas"]["Contract"];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        OrderPrice: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            orderArticleLine?: components["schemas"]["OrderArticleLine"];
            order: components["schemas"]["CommercialOrder"];
            /** @enum {string} */
            priceLevelEnum?: "ORDER" | "PRODUCT" | "QUOTE" | "OFFER";
            /** @enum {string} */
            priceTypeEnum?: "RECURRING" | "ONE_SHOT_SUBSCRIPTION" | "ONE_SHOT_TERMINATION" | "ONE_SHOT_OTHER" | "USAGE" | "FIXED_DISCOUNT";
            amountWithTax?: number;
            unitPriceWithoutTax?: number;
            amountWithoutTax?: number;
            amountWithoutTaxWithDiscount?: number;
            taxAmount?: number;
            taxRate?: number;
            priceOverCharged?: boolean;
            currencyCode?: string;
            /** Format: int64 */
            recurrenceDuration?: number;
            recurrencePeriodicity?: string;
            chargeTemplate?: components["schemas"]["ChargeTemplate"];
            orderOffer?: components["schemas"]["OrderOffer"];
            quantity?: number;
            discountedOrderPrice?: components["schemas"]["OrderPrice"];
            discountPlan?: components["schemas"]["DiscountPlan"];
            discountValue?: number;
            /** @enum {string} */
            discountPlanType?: "PERCENTAGE" | "FIXED";
            discountPlanItem?: components["schemas"]["DiscountPlanItem"];
            applyDiscountsOnOverridenPrice?: boolean;
            discountedAmount?: number;
            tax?: components["schemas"]["Tax"];
            /** Format: int32 */
            sequence?: number;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        OrderProduct: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            order: components["schemas"]["CommercialOrder"];
            orderServiceCommercial?: components["schemas"]["OrderLot"];
            orderOffer?: components["schemas"]["OrderOffer"];
            productVersion?: components["schemas"]["ProductVersion"];
            quantity: number;
            orderAttributes?: components["schemas"]["OrderAttribute"][];
            discountPlan?: components["schemas"]["DiscountPlan"];
            quoteProduct?: components["schemas"]["QuoteProduct"];
            /** Format: date-time */
            deliveryDate?: string;
            /** @enum {string} */
            productActionType?: "CREATE" | "ACTIVATE" | "SUSPEND" | "TERMINATE" | "MODIFY";
            /** Format: date-time */
            terminationDate?: string;
            terminationReason?: components["schemas"]["SubscriptionTerminationReason"];
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE" | "CANCELED" | "TERMINATED" | "SUSPENDED" | "CLOSED" | "PENDING";
            serviceInstance?: components["schemas"]["ServiceInstance"];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            transient?: boolean;
        };
        OrderType: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        OtherTransaction: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            /** Format: date-time */
            dueDate?: string;
            /** Format: date-time */
            transactionDate?: string;
            /** @enum {string} */
            transactionCategory?: "DEBIT" | "CREDIT";
            type?: string;
            reference?: string;
            accountingCode?: components["schemas"]["AccountingCode"];
            amount?: number;
            amountWithoutTax?: number;
            taxAmount?: number;
            matchingAmount?: number;
            unMatchingAmount?: number;
            generalLedger?: components["schemas"]["GeneralLedger"];
            /** @enum {string} */
            matchingStatus?: "O" | "L" | "P" | "C" | "I" | "R";
            occCode?: string;
            occDescription?: string;
            orderNumber?: string;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            bankLot?: string;
            bankReference?: string;
            /** Format: date-time */
            depositDate?: string;
            /** Format: date-time */
            bankCollectionDate?: string;
            /** @enum {string} */
            paymentMethod?: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
            code?: string;
            description?: string;
            paymentInfo?: string;
            paymentInfo1?: string;
            paymentInfo2?: string;
            paymentInfo3?: string;
            paymentInfo4?: string;
            paymentInfo5?: string;
            paymentInfo6?: string;
            paymentInfo7?: string;
            billingAccountName?: string;
            paymentVentilation?: components["schemas"]["PaymentVentilation"];
            paymentVentilations?: components["schemas"]["PaymentVentilation"][];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            transient?: boolean;
        };
        Payment: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            /** Format: date-time */
            dueDate?: string;
            type?: string;
            /** Format: date-time */
            transactionDate?: string;
            /** @enum {string} */
            transactionCategory?: "DEBIT" | "CREDIT";
            /** @enum {string} */
            operationAction?: "TO_REFUND" | "NONE";
            reference?: string;
            accountingCode?: components["schemas"]["AccountingCode"];
            accountingEntries?: components["schemas"]["AccountingEntry"][];
            accountCodeClientSide?: string;
            amount?: number;
            amountWithoutTax?: number;
            taxAmount?: number;
            matchingAmount?: number;
            unMatchingAmount?: number;
            customerAccount?: components["schemas"]["CustomerAccount"];
            /** @enum {string} */
            matchingStatus?: "O" | "L" | "P" | "C" | "I" | "R";
            orderNumber?: string;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            bankLot?: string;
            bankReference?: string;
            /** Format: date-time */
            depositDate?: string;
            /** Format: date-time */
            bankCollectionDate?: string;
            /** @enum {string} */
            paymentMethod?: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
            invoices?: components["schemas"]["Invoice"][];
            paymentInfo?: string;
            paymentInfo1?: string;
            paymentInfo2?: string;
            paymentInfo3?: string;
            paymentInfo4?: string;
            paymentInfo5?: string;
            paymentInfo6?: string;
            billingAccountName?: string;
            ddRequestItem?: components["schemas"]["DDRequestItem"];
            rejectedPayment?: components["schemas"]["RejectedPayment"];
            seller?: components["schemas"]["Seller"];
            subscription?: components["schemas"]["Subscription"];
            /** Format: date-time */
            collectionDate?: string;
            /** Format: date-time */
            accountingDate?: string;
            journal?: components["schemas"]["Journal"];
            /** @enum {string} */
            status?: "POSTED" | "REJECTED" | "EXPORTED" | "EXPORT_FAILED";
            /** @enum {string} */
            reason?: "REJECTED" | "FORCED" | "CLOSED_PERIOD";
            /** @enum {string} */
            paymentAction?: "PENDING_PAYMENT";
            /** Format: int32 */
            paymentDeferralCount?: number;
            accountingExportFile?: string;
            accountingSchemeEntries?: components["schemas"]["JournalEntry"][];
            /** Format: int64 */
            operationNumber?: number;
            dunningDocument?: components["schemas"]["DunningDocument"];
            paymentOrder?: string;
            fees?: number;
            comment?: string;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        PaymentGateway: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            disabled: boolean;
            /** @enum {string} */
            type: "CUSTOM" | "NATIF";
            /** @enum {string} */
            paymentMethodType?: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
            scriptInstance?: components["schemas"]["ScriptInstance"];
            implementationClassName?: string;
            applicationEL?: string;
            country?: components["schemas"]["Country"];
            tradingCurrency?: components["schemas"]["TradingCurrency"];
            /** @enum {string} */
            cardType?: "VISA" | "MASTERCARD" | "AMERICAN_EXPRESS" | "CB";
            /** Format: int32 */
            nbTries?: number;
            /** @enum {string} */
            replayCause?: "ERROR" | "REJECT";
            errorsToReplay?: string;
            marchandId?: string;
            secretKeyDB?: string;
            secretKey?: string;
            secretKeyKS?: string;
            apiKey?: string;
            webhooksKeyId?: string;
            webhooksSecretKey?: string;
            profile?: string;
            rumSequence?: components["schemas"]["PaymentGatewayRumSequence"];
            bankCoordinates?: components["schemas"]["BankCoordinates"];
            seller?: components["schemas"]["Seller"];
            active?: boolean;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        PaymentGatewayRumSequence: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            genericSequence?: components["schemas"]["GenericSequence"];
            paymentGateway: components["schemas"]["PaymentGateway"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        PaymentHistory: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            customerAccountCode: string;
            customerAccountName?: string;
            sellerCode?: string;
            customerCode?: string;
            /** Format: date-time */
            operationDate: string;
            /** Format: date-time */
            lastUpdateDate?: string;
            /** Format: int64 */
            amountCts: number;
            /** @enum {string} */
            syncStatus: "ACCEPTED" | "PENDING" | "REJECTED" | "ERROR" | "NOT_PROCESSED";
            /** @enum {string} */
            asyncStatus?: "ACCEPTED" | "PENDING" | "REJECTED" | "ERROR" | "NOT_PROCESSED";
            /** @enum {string} */
            status?: "ACCEPTED" | "PENDING" | "REJECTED" | "ERROR" | "NOT_PROCESSED";
            externalPaymentId?: string;
            errorCode?: string;
            errorMessage?: string;
            /** @enum {string} */
            errorType?: "ERROR" | "REJECT";
            paymentGatewayCode?: string;
            /** @enum {string} */
            paymentMethodType?: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
            paymentMethodName?: string;
            /** @enum {string} */
            operationCategory: "DEBIT" | "CREDIT";
            payment?: components["schemas"]["Payment"];
            refund?: components["schemas"]["Refund"];
            listAoPaid?: components["schemas"]["AccountOperation"][];
            transient?: boolean;
        };
        PaymentMethod: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            disabled: boolean;
            alias?: string;
            preferred?: boolean;
            customerAccount?: components["schemas"]["CustomerAccount"];
            /** @enum {string} */
            paymentType?: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
            userId?: string;
            info1?: string;
            info2?: string;
            info3?: string;
            info4?: string;
            info5?: string;
            tokenId?: string;
            token3DsId?: string;
            referenceDocument?: components["schemas"]["Document"];
            action?: string;
            expired?: boolean;
            active?: boolean;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            transient?: boolean;
        };
        PaymentPlan: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            amountToRecover?: number;
            amountPerInstallment?: number;
            remainingAmount?: number;
            /** @enum {string} */
            actionOnRemainingAmount?: "FIRST" | "LAST" | "ADDITIONAL";
            /** Format: int32 */
            numberOfInstallments?: number;
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string;
            /** @enum {string} */
            recurringUnit?: "MONTH" | "DAY";
            /** @enum {string} */
            status?: "DRAFT" | "ACTIVE" | "COMPLETED";
            createdAos?: components["schemas"]["AccountOperation"][];
            targetedAos?: components["schemas"]["AccountOperation"][];
            customerAccount?: components["schemas"]["CustomerAccount"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        PaymentPlanPolicy: {
            minAllowedReceivableAmount?: number;
            maxAllowedReceivableAmount?: number;
            minInstallmentAmount?: number;
            theresHoldForApproval?: number;
            /** Format: int32 */
            maxPaymentPlanDuration?: number;
            /** Format: int32 */
            defaultInstallmentCount?: number;
            /** Format: int32 */
            defaultFeePerInstallmentPlan?: number;
            /** Format: int32 */
            installmentAmountRounding?: number;
            splitEvenly?: boolean;
            allowCustomInstallmentPlan?: boolean;
            addInterestRate?: boolean;
            addInstallmentFee?: boolean;
            defaultBlockPayments?: boolean;
            requireInternalApproval?: boolean;
            /** Format: int32 */
            defaultInterestRate: number;
            /** @enum {string} */
            defaultRecurrenceUnit?: "MONTH" | "DAY";
            /** @enum {string} */
            actionOnRemainingAmount?: "FIRST" | "LAST" | "ADDITIONAL";
            /** @enum {string} */
            clearingPriority?: "NEWEST" | "OLDEST" | "SMALLEST" | "BIGGEST";
            /** @enum {string} */
            defaultStartingDateOfPlan?: "TODAY" | "LAST_DAY_OF_CURRENT_MONTH" | "FIRST_DAY_OF_NEXT_MONTH";
            allowedPaymentMethods?: ("CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH")[];
            dunningDefaultPauseReason?: components["schemas"]["DunningPauseReason"];
            allowedCreditCategories?: components["schemas"]["CreditCategory"][];
        };
        PaymentScheduleInstance: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            disabled: boolean;
            /** @enum {string} */
            status: "IN_PROGRESS" | "OBSOLETE" | "DONE" | "CANCELLED" | "TERMINATED";
            /** Format: date-time */
            statusDate: string;
            paymentScheduleTemplate: components["schemas"]["PaymentScheduleTemplate"];
            /** Format: date-time */
            startDate: string;
            /** Format: date-time */
            endDate: string;
            serviceInstance: components["schemas"]["ServiceInstance"];
            amount: number;
            calendar: components["schemas"]["Calendar"];
            /** Format: int32 */
            paymentDayInMonth: number;
            paymentScheduleInstanceItems?: components["schemas"]["PaymentScheduleInstanceItem"][];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            active?: boolean;
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        PaymentScheduleInstanceItem: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            disabled: boolean;
            paymentScheduleInstance: components["schemas"]["PaymentScheduleInstance"];
            /** Format: date-time */
            dueDate: string;
            /** Format: date-time */
            requestPaymentDate: string;
            recordedInvoice?: components["schemas"]["RecordedInvoice"];
            invoice?: components["schemas"]["Invoice"];
            last: boolean;
            amount?: number;
            paid?: boolean;
            active?: boolean;
            transient?: boolean;
        };
        PaymentScheduleTemplate: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            disabled: boolean;
            paymentLabel: string;
            /** Format: int32 */
            paymentDayInMonth: number;
            amount: number;
            calendar: components["schemas"]["Calendar"];
            serviceTemplate: components["schemas"]["ServiceTemplate"];
            advancePaymentInvoiceType: components["schemas"]["InvoiceType"];
            generateAdvancePaymentInvoice: boolean;
            advancePaymentInvoiceSubCategory: components["schemas"]["InvoiceSubCategory"];
            doPayment: boolean;
            paymentScheduleInstances?: components["schemas"]["PaymentScheduleInstance"][];
            applyAgreement?: boolean;
            scriptInstance?: components["schemas"]["ScriptInstance"];
            amountEl?: string;
            filterEl?: string;
            taxClass?: components["schemas"]["TaxClass"];
            paymentDayInMonthEl?: string;
            useBankingCalendar?: boolean;
            active?: boolean;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        PaymentVentilation: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            originalOT?: components["schemas"]["OtherTransaction"];
            accountOperation?: components["schemas"]["AccountOperation"];
            newOT?: components["schemas"]["OtherTransaction"];
            customerAccount?: components["schemas"]["CustomerAccount"];
            ventilationAmount?: number;
            /** Format: date-time */
            ventilationDate?: string;
            /** @enum {string} */
            ventilationActionStatus?: "V" | "U";
            transient?: boolean;
        };
        PaypalPaymentMethod: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            disabled: boolean;
            alias?: string;
            preferred?: boolean;
            customerAccount?: components["schemas"]["CustomerAccount"];
            /** @enum {string} */
            paymentType?: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
            userId?: string;
            info1?: string;
            info2?: string;
            info3?: string;
            info4?: string;
            info5?: string;
            tokenId?: string;
            token3DsId?: string;
            referenceDocument?: components["schemas"]["Document"];
            action?: string;
            expired?: boolean;
            active?: boolean;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            transient?: boolean;
        };
        PricePlanMatrix: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            disabled: boolean;
            eventCode: string;
            offerTemplate?: components["schemas"]["OfferTemplate"];
            versions?: components["schemas"]["PricePlanMatrixVersion"][];
            /** Format: date-time */
            startSubscriptionDate?: string;
            /** Format: date-time */
            endSubscriptionDate?: string;
            /** Format: date-time */
            startRatingDate?: string;
            /** Format: date-time */
            endRatingDate?: string;
            minQuantity?: number;
            maxQuantity?: number;
            /** Format: int64 */
            minSubscriptionAgeInMonth?: number;
            /** Format: int64 */
            maxSubscriptionAgeInMonth?: number;
            criteria1Value?: string;
            criteria2Value?: string;
            criteria3Value?: string;
            criteriaEL?: string;
            amountWithoutTax?: number;
            amountWithTax?: number;
            amountWithoutTaxEL?: string;
            amountWithTaxEL?: string;
            tradingCurrency?: components["schemas"]["TradingCurrency"];
            tradingCountry?: components["schemas"]["TradingCountry"];
            /** Format: int32 */
            priority?: number;
            seller?: components["schemas"]["Seller"];
            validityCalendar?: components["schemas"]["Calendar"];
            /** Format: int64 */
            sequence?: number;
            scriptInstance?: components["schemas"]["ScriptInstance"];
            descriptionI18n?: {
                [key: string]: string;
            };
            woDescriptionEL?: string;
            totalAmountEL?: string;
            minimumAmountEL?: string;
            invoiceSubCategoryEL?: string;
            /** Format: date-time */
            validityFrom?: string;
            /** Format: date-time */
            validityDate?: string;
            parameter1El?: string;
            parameter2El?: string;
            parameter3El?: string;
            chargeTemplate?: components["schemas"]["ChargeTemplate"];
            contractItems?: components["schemas"]["ContractItem"][];
            discountPlanItems?: components["schemas"]["DiscountPlanItem"][];
            descriptionI18nNullSafe?: {
                [key: string]: string;
            };
            active?: boolean;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        PricePlanMatrixColumn: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            pricePlanMatrixVersion: components["schemas"]["PricePlanMatrixVersion"];
            /** Format: int32 */
            position: number;
            /** @enum {string} */
            type: "String" | "Long" | "Double" | "Range_Date" | "Range_Numeric" | "Boolean";
            elValue?: string;
            offerTemplate?: components["schemas"]["OfferTemplate"];
            product?: components["schemas"]["Product"];
            attribute?: components["schemas"]["Attribute"];
            pricePlanMatrixValues?: components["schemas"]["PricePlanMatrixValue"][];
            range?: boolean;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        PricePlanMatrixLine: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            pricePlanMatrixVersion?: components["schemas"]["PricePlanMatrixVersion"];
            description?: string;
            valueEL?: string;
            priceWithoutTax?: number;
            value?: number;
            pricePlanMatrixValues?: components["schemas"]["PricePlanMatrixValue"][];
            /** Format: int32 */
            priority: number;
            defaultLine?: boolean;
            transient?: boolean;
        };
        PricePlanMatrixValue: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            pricePlanMatrixColumn: components["schemas"]["PricePlanMatrixColumn"];
            pricePlanMatrixLine: components["schemas"]["PricePlanMatrixLine"];
            /** Format: int64 */
            longValue?: number;
            /** Format: double */
            doubleValue?: number;
            stringValue?: string;
            /** Format: date-time */
            dateValue?: string;
            /** Format: date-time */
            fromDateValue?: string;
            /** Format: date-time */
            toDateValue?: string;
            /** Format: double */
            fromDoubleValue?: number;
            /** Format: double */
            toDoubleValue?: number;
            booleanValue?: boolean;
            transient?: boolean;
        };
        PricePlanMatrixVersion: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            /** @enum {string} */
            status: "DRAFT" | "PUBLISHED" | "CLOSED";
            pricePlanMatrix: components["schemas"]["PricePlanMatrix"];
            /** Format: int32 */
            currentVersion?: number;
            label?: string;
            /** Format: date-time */
            statusDate: string;
            validity?: components["schemas"]["DatePeriod"];
            price?: number;
            amountWithoutTax?: number;
            amountWithTax?: number;
            priceEL?: string;
            lines?: components["schemas"]["PricePlanMatrixLine"][];
            columns?: components["schemas"]["PricePlanMatrixColumn"][];
            /** Format: int32 */
            priority?: number;
            /** @enum {string} */
            priceVersionType: "FIXED" | "PERCENTAGE";
            statusChangeLog?: string;
            matrix?: boolean;
            transient?: boolean;
        };
        Product: {
            id?: string;
            href?: string;
            place?: components["schemas"]["Place"];
            productCharacteristic?: components["schemas"]["ProductCharacteristic"][];
            relatedParty?: components["schemas"]["RelatedParty"][];
            productRelationship?: components["schemas"]["ProductRelationship"][];
        };
        ProductChargeInstance: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            chargeType?: string;
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE" | "CANCELED" | "TERMINATED" | "SUSPENDED" | "CLOSED" | "PENDING";
            /** Format: date-time */
            statusDate?: string;
            /** Format: date-time */
            terminationDate?: string;
            /** Format: date-time */
            reactivationDate?: string;
            chargeTemplate?: components["schemas"]["ChargeTemplate"];
            invoicingCalendar?: components["schemas"]["Calendar"];
            /** Format: date-time */
            chargeDate?: string;
            amountWithoutTax?: number;
            amountWithTax?: number;
            criteria1?: string;
            criteria2?: string;
            criteria3?: string;
            walletOperations?: components["schemas"]["WalletOperation"][];
            seller?: components["schemas"]["Seller"];
            userAccount?: components["schemas"]["UserAccount"];
            subscription?: components["schemas"]["Subscription"];
            currency?: components["schemas"]["TradingCurrency"];
            country?: components["schemas"]["TradingCountry"];
            walletInstances?: components["schemas"]["WalletInstance"][];
            serviceInstance?: components["schemas"]["ServiceInstance"];
            prepaidWalletInstances?: components["schemas"]["WalletInstance"][];
            prepaid?: boolean;
            orderNumber?: string;
            accumulatorCounterInstances?: components["schemas"]["CounterInstance"][];
            applyDiscountsOnOverridenPrice?: boolean;
            overchargedUnitAmountWithoutTax?: number;
            taxClassResolved?: components["schemas"]["TaxClass"];
            productChargeTemplate?: components["schemas"]["ProductChargeTemplate"];
            productInstance?: components["schemas"]["ProductInstance"];
            quantity?: number;
            /** @enum {string} */
            chargeMainType?: "RECURRING" | "ONESHOT" | "USAGE" | "PRODUCT";
            walletOperationsSorted?: components["schemas"]["WalletOperation"][];
            counter?: components["schemas"]["CounterInstance"];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        ProductChargeTemplate: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            disabled: boolean;
            /** @enum {string} */
            type?: "CREDIT" | "DEBIT";
            chargeType?: string;
            amountEditable?: boolean;
            invoiceSubCategory?: components["schemas"]["InvoiceSubCategory"];
            inputUnitDescription?: string;
            ratingUnitDescription?: string;
            inputUnitOfMeasure?: components["schemas"]["UnitOfMeasure"];
            ratingUnitOfMeasure?: components["schemas"]["UnitOfMeasure"];
            inputUnitEL?: string;
            outputUnitEL?: string;
            unitMultiplicator?: number;
            /** Format: int32 */
            unitNbDecimal?: number;
            /** @enum {string} */
            roundingMode?: "NEAREST" | "DOWN" | "UP" | "HALF_EVEN";
            revenueRecognitionRule?: components["schemas"]["RevenueRecognitionRule"];
            descriptionI18n?: {
                [key: string]: string;
            };
            filterExpression?: string;
            taxClass?: components["schemas"]["TaxClass"];
            taxClassEl?: string;
            ratingScript?: components["schemas"]["ScriptInstance"];
            dropZeroWo?: boolean;
            sortIndexEl?: string;
            roundingValuesComputed?: boolean;
            /** Format: int32 */
            roundingUnityNbDecimal?: number;
            /** Format: int32 */
            roundingEdrNbDecimal?: number;
            /** @enum {string} */
            status?: "DRAFT" | "ACTIVE" | "ARCHIVED";
            internalNote?: string;
            quantityAttribute?: components["schemas"]["Attribute"];
            applyContractOverRatingScript?: boolean;
            productTemplates?: components["schemas"]["ProductTemplate"][];
            /** @enum {string} */
            chargeMainType?: "RECURRING" | "ONESHOT" | "USAGE" | "PRODUCT";
            descriptionI18nNullSafe?: {
                [key: string]: string;
            };
            active?: boolean;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        ProductChargeTemplateMapping: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            product?: components["schemas"]["Product"];
            chargeTemplate?: components["schemas"]["ChargeTemplate"];
            counterTemplate?: components["schemas"]["CounterTemplate"];
            walletTemplates?: components["schemas"]["WalletTemplate"][];
            accumulatorCounterTemplates?: components["schemas"]["CounterTemplate"][];
            transient?: boolean;
        };
        ProductInstance: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            userAccount?: components["schemas"]["UserAccount"];
            subscription?: components["schemas"]["Subscription"];
            productTemplate?: components["schemas"]["ProductTemplate"];
            /** Format: date-time */
            applicationDate?: string;
            productChargeInstances?: components["schemas"]["ProductChargeInstance"][];
            quantity?: number;
            orderNumber?: string;
            seller?: components["schemas"]["Seller"];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        ProductLine: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            seller?: components["schemas"]["Seller"];
            longDescription?: string;
            parentLine?: components["schemas"]["ProductLine"];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        ProductOffering: {
            id?: string;
            version?: string;
            href?: string;
            name?: string;
            description?: string;
            /** Format: date-time */
            lastUpdate?: string;
            /** @enum {string} */
            lifecycleStatus?: "In Study" | "In Design" | "In Test" | "Active" | "Launched" | "Retired" | "Obsolete" | "Rejected";
            validFor?: components["schemas"]["TimeRange"];
            isBundle?: boolean;
            category?: components["schemas"]["CatalogReference"][];
            channel?: components["schemas"]["Channel"][];
            place?: components["schemas"]["Place"][];
            bundledProductOffering?: components["schemas"]["BundledProductReference"][];
            serviceLevelAgreement?: components["schemas"]["ServiceLevelAgreement"];
            productSpecification?: components["schemas"]["CatalogReference"];
            serviceCandidate?: components["schemas"]["CatalogReference"];
            resourceCandidate?: components["schemas"]["CatalogReference"];
            productOfferingTerm?: components["schemas"]["ProductOfferingTerm"][];
            productOfferingPrice?: components["schemas"]["ProductOfferingPrice"][];
        };
        ProductTemplate: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            disabled: boolean;
            name?: string;
            offerTemplateCategories?: components["schemas"]["OfferTemplateCategory"][];
            validity?: components["schemas"]["DatePeriod"];
            imagePath?: string;
            attachments?: components["schemas"]["DigitalResource"][];
            /** @enum {string} */
            lifeCycleStatus?: "IN_STUDY" | "IN_DESIGN" | "IN_TEST" | "ACTIVE" | "LAUNCHED" | "RETIRED" | "OBSOLETE" | "REJECTED";
            businessAccountModels?: components["schemas"]["BusinessAccountModel"][];
            channels?: components["schemas"]["Channel"][];
            descriptionI18n?: {
                [key: string]: string;
            };
            longDescription?: string;
            longDescriptionI18n?: {
                [key: string]: string;
            };
            globalRatingScriptInstance?: components["schemas"]["ScriptInstance"];
            sellers?: components["schemas"]["Seller"][];
            customerCategories?: components["schemas"]["CustomerCategory"][];
            productChargeTemplates?: components["schemas"]["ProductChargeTemplate"][];
            businessProductModel?: components["schemas"]["BusinessProductModel"];
            invoicingCalendar?: components["schemas"]["Calendar"];
            walletTemplates?: components["schemas"]["WalletTemplate"][];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            nameOrCode?: string;
            longDescriptionI18nNullSafe?: {
                [key: string]: string;
            };
            descriptionI18nNullSafe?: {
                [key: string]: string;
            };
            active?: boolean;
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        ProductVersion: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            product: components["schemas"]["Product"];
            /** Format: int32 */
            currentVersion?: number;
            /** @enum {string} */
            status: "DRAFT" | "PUBLISHED" | "CLOSED";
            /** Format: date-time */
            statusDate: string;
            shortDescription: string;
            longDescription?: string;
            validity?: components["schemas"]["DatePeriod"];
            tags?: components["schemas"]["Tag"][];
            attributes?: components["schemas"]["ProductVersionAttribute"][];
            groupedAttributes?: components["schemas"]["GroupedAttributes"][];
            transient?: boolean;
        };
        ProductVersionAttribute: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            /** Format: int32 */
            sequence?: number;
            attribute: components["schemas"]["Attribute"];
            mandatoryWithEl?: string;
            mandatory: boolean;
            display: boolean;
            readOnly?: boolean;
            defaultValue?: string;
            /** @enum {string} */
            validationType?: "REGEX" | "EL";
            validationPattern?: string;
            validationLabel?: string;
            productVersion: components["schemas"]["ProductVersion"];
            transient?: boolean;
        };
        Provider: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            disabled: boolean;
            currency?: components["schemas"]["Currency"];
            country?: components["schemas"]["Country"];
            language?: components["schemas"]["Language"];
            multicountryFlag?: boolean;
            multicurrencyFlag?: boolean;
            multilanguageFlag?: boolean;
            customer?: components["schemas"]["Customer"];
            customerAccount?: components["schemas"]["CustomerAccount"];
            billingAccount?: components["schemas"]["BillingAccount"];
            userAccount?: components["schemas"]["UserAccount"];
            paymentMethods?: ("CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH")[];
            /** Format: int32 */
            rounding: number;
            /** @enum {string} */
            roundingMode: "NEAREST" | "DOWN" | "UP" | "HALF_EVEN";
            /** Format: int32 */
            invoiceRounding: number;
            /** Format: int32 */
            maximumDelay?: number;
            currentMatchingCode?: string;
            /** Format: int32 */
            maximumDeferralPerInvoice?: number;
            /** @enum {string} */
            invoiceRoundingMode: "NEAREST" | "DOWN" | "UP" | "HALF_EVEN";
            bankCoordinates?: components["schemas"]["BankCoordinates"];
            paymentPlanPolicy?: components["schemas"]["PaymentPlanPolicy"];
            entreprise?: boolean;
            automaticInvoicing?: boolean;
            interBankTitle?: components["schemas"]["InterBankTitle"];
            amountValidation?: boolean;
            levelDuplication?: boolean;
            email?: string;
            displayFreeTransacInInvoice?: boolean;
            uuid: string;
            discountAccountingCode?: string;
            /** Format: int64 */
            prepaidReservationExpirationDelayinMillisec?: number;
            invoiceConfiguration?: components["schemas"]["InvoiceConfiguration"];
            recognizeRevenue?: boolean;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            gdprConfiguration?: components["schemas"]["GdprConfiguration"];
            paymentDeferral?: boolean;
            paymentPlan?: boolean;
            rumSequence?: components["schemas"]["GenericSequence"];
            customerNoSequence?: components["schemas"]["GenericSequence"];
            cdrDeduplicationKeyEL?: string;
            functionalCurrencyFlag?: boolean;
            activateCascadingDiscounts?: boolean;
            portalMessage?: string;
            invoiceConfigurationOrDefault?: components["schemas"]["InvoiceConfiguration"];
            currentProvider?: boolean;
            gdprConfigurationNullSafe?: components["schemas"]["GdprConfiguration"];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            active?: boolean;
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            transient?: boolean;
        };
        ProviderContact: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            firstName?: string;
            lastName?: string;
            email?: string;
            phone?: string;
            mobile?: string;
            fax?: string;
            genericMail?: string;
            address?: components["schemas"]["Address"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        QueryScheduler: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            fileFormat?: string;
            usersToNotify?: components["schemas"]["User"][];
            emailsToNotify?: string[];
            queryTimer?: components["schemas"]["QueryTimer"];
            reportQuery?: components["schemas"]["ReportQuery"];
            jobInstance?: components["schemas"]["JobInstance"];
            isQueryScheduler?: boolean;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        QueryTimer: {
            year?: string;
            month?: string;
            everyMonth: boolean;
            dayOfMonth?: string;
            everyDayOfMonth: boolean;
            dayOfWeek?: string;
            everyDayOfWeek: boolean;
            hour?: string;
            everyHour: boolean;
            minute?: string;
            everyMinute: boolean;
            second?: string;
            everySecond: boolean;
        };
        Quote: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            externalId?: string;
            quoteVersion?: string;
            notificationContact?: string;
            /** Format: date-time */
            quoteDate: string;
            validity?: components["schemas"]["DatePeriod"];
            /** Format: date-time */
            requestedCompletionDate?: string;
            /** Format: date-time */
            fulfillmentStartDate?: string;
            /** Format: date-time */
            completionDate?: string;
            category?: string;
            /** @enum {string} */
            status: "IN_PROGRESS" | "PENDING" | "CANCELLED" | "APPROVED" | "ACCEPTED" | "REJECTED";
            statusMessage?: string;
            quoteItems?: components["schemas"]["QuoteItem"][];
            routedToUserGroup?: string;
            receivedFromApp?: string;
            userAccount?: components["schemas"]["UserAccount"];
            invoices?: components["schemas"]["Invoice"][];
            order?: components["schemas"]["Order"];
            generatePdf?: boolean;
            virtual?: boolean;
            userAccounts?: components["schemas"]["UserAccount"][];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        QuoteArticleLine: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            quoteProduct?: components["schemas"]["QuoteProduct"];
            billableAccount: components["schemas"]["BillingAccount"];
            quoteLot?: components["schemas"]["QuoteLot"];
            accountingArticle: components["schemas"]["AccountingArticle"];
            quantity?: number;
            serviceQuantity?: number;
            quotePrices?: components["schemas"]["QuotePrice"][];
            quoteVersion?: components["schemas"]["QuoteVersion"];
            transient?: boolean;
        };
        QuoteAttribute: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            attribute?: components["schemas"]["Attribute"];
            parentAttributeValue?: components["schemas"]["QuoteAttribute"];
            assignedAttributeValue?: components["schemas"]["QuoteAttribute"][];
            stringValue?: string;
            /** Format: date-time */
            dateValue?: string;
            /** Format: double */
            doubleValue?: number;
            booleanValue?: boolean;
            quoteProduct?: components["schemas"]["QuoteProduct"];
            quoteOffer?: components["schemas"]["QuoteOffer"];
            value?: Record<string, never>;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            transient?: boolean;
        };
        QuoteItem: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            quote: components["schemas"]["Quote"];
            itemId: string;
            quoteItemProductOfferings?: components["schemas"]["QuoteItemProductOffering"][];
            source?: string;
            /** @enum {string} */
            status: "IN_PROGRESS" | "PENDING" | "CANCELLED" | "APPROVED" | "ACCEPTED" | "REJECTED";
            userAccount: components["schemas"]["UserAccount"];
            quoteItemDto?: Record<string, never>;
            mainOffering?: components["schemas"]["ProductOffering"];
            transient?: boolean;
        };
        QuoteItemProductOffering: {
            id?: Record<string, never>;
            quoteItem: components["schemas"]["QuoteItem"];
            productOffering: components["schemas"]["ProductOffering"];
            /** Format: int32 */
            itemOrder: number;
            transient?: boolean;
        };
        QuoteLot: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            name?: string;
            /** Format: int32 */
            duration?: number;
            /** Format: date-time */
            executionDate?: string;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        QuoteOffer: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            offerTemplate: components["schemas"]["OfferTemplate"];
            billableAccount?: components["schemas"]["BillingAccount"];
            quoteVersion: components["schemas"]["QuoteVersion"];
            quoteLot?: components["schemas"]["QuoteLot"];
            quoteProduct?: components["schemas"]["QuoteProduct"][];
            quoteAttributes?: components["schemas"]["QuoteAttribute"][];
            /** Format: int32 */
            position?: number;
            discountPlan?: components["schemas"]["DiscountPlan"];
            /** Format: int32 */
            sequence?: number;
            quotePrices?: components["schemas"]["QuotePrice"][];
            /** Format: date-time */
            deliveryDate?: string;
            userAccount?: components["schemas"]["UserAccount"];
            /** @enum {string} */
            quoteLineType?: "CREATE" | "AMEND" | "TERMINATE";
            subscription?: components["schemas"]["Subscription"];
            contract?: components["schemas"]["Contract"];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        QuotePrice: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            quoteArticleLine?: components["schemas"]["QuoteArticleLine"];
            quoteVersion: components["schemas"]["QuoteVersion"];
            /** @enum {string} */
            priceLevelEnum?: "ORDER" | "PRODUCT" | "QUOTE" | "OFFER";
            /** @enum {string} */
            priceTypeEnum?: "RECURRING" | "ONE_SHOT_SUBSCRIPTION" | "ONE_SHOT_TERMINATION" | "ONE_SHOT_OTHER" | "USAGE" | "FIXED_DISCOUNT";
            amountWithTax?: number;
            unitPriceWithoutTax?: number;
            amountWithoutTax?: number;
            amountWithoutTaxWithoutDiscount?: number;
            taxAmount?: number;
            taxRate?: number;
            priceOverCharged?: boolean;
            currencyCode?: string;
            /** Format: int64 */
            recurrenceDuration?: number;
            recurrencePeriodicity?: string;
            chargeTemplate?: components["schemas"]["ChargeTemplate"];
            quoteOffer?: components["schemas"]["QuoteOffer"];
            quantity?: number;
            discountedQuotePrice?: components["schemas"]["QuotePrice"];
            uuid?: string;
            discountPlan?: components["schemas"]["DiscountPlan"];
            discountValue?: number;
            /** @enum {string} */
            discountPlanType?: "PERCENTAGE" | "FIXED";
            discountPlanItem?: components["schemas"]["DiscountPlanItem"];
            applyDiscountsOnOverridenPrice?: boolean;
            overchargedUnitAmountWithoutTax?: number;
            discountedAmount?: number;
            /** Format: int32 */
            sequence?: number;
            pricePlanMatrixVersion?: components["schemas"]["PricePlanMatrixVersion"];
            pricePlanMatrixLine?: components["schemas"]["PricePlanMatrixLine"];
            contractItem?: components["schemas"]["ContractItem"];
            tax?: components["schemas"]["Tax"];
            transient?: boolean;
        };
        QuoteProduct: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            quote?: components["schemas"]["CpqQuote"];
            quoteVersion?: components["schemas"]["QuoteVersion"];
            productVersion: components["schemas"]["ProductVersion"];
            quantity: number;
            quoteOffer?: components["schemas"]["QuoteOffer"];
            quoteAttributes?: components["schemas"]["QuoteAttribute"][];
            quoteArticleLines?: components["schemas"]["QuoteArticleLine"][];
            discountPlan?: components["schemas"]["DiscountPlan"];
            /** Format: date-time */
            deliveryDate?: string;
            /** @enum {string} */
            productActionType?: "CREATE" | "ACTIVATE" | "SUSPEND" | "TERMINATE" | "MODIFY";
            /** Format: date-time */
            terminationDate?: string;
            terminationReason?: components["schemas"]["SubscriptionTerminationReason"];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            transient?: boolean;
        };
        QuoteVersion: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            quote: components["schemas"]["CpqQuote"];
            /** Format: int32 */
            quoteVersion?: number;
            /** @enum {string} */
            status?: "DRAFT" | "PUBLISHED" | "CLOSED";
            /** Format: date-time */
            statusDate?: string;
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string;
            invoicingPlan?: components["schemas"]["InvoicingPlan"];
            shortDescription?: string;
            quoteOffers?: components["schemas"]["QuoteOffer"][];
            quoteArticleLines?: components["schemas"]["QuoteArticleLine"][];
            discountPlan?: components["schemas"]["DiscountPlan"];
            xmlFilename?: string;
            pdfFilename?: string;
            contract?: components["schemas"]["Contract"];
            comment?: string;
            medias?: components["schemas"]["Media"][];
            quotePrices?: components["schemas"]["QuotePrice"][];
            referenceDescription?: string;
            referenceCode?: string;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            transient?: boolean;
        };
        RatedTransaction: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            /** Format: date-time */
            created?: string;
            wallet?: components["schemas"]["WalletInstance"];
            billingAccount: components["schemas"]["BillingAccount"];
            originBillingAccount?: components["schemas"]["BillingAccount"];
            userAccount?: components["schemas"]["UserAccount"];
            seller: components["schemas"]["Seller"];
            /** Format: date-time */
            usageDate?: string;
            invoiceSubCategory?: components["schemas"]["InvoiceSubCategory"];
            code?: string;
            rejectReason?: string;
            description?: string;
            unityDescription?: string;
            ratingUnitDescription?: string;
            unitAmountWithoutTax?: number;
            unitAmountWithTax?: number;
            unitAmountTax?: number;
            quantity?: number;
            amountWithoutTax?: number;
            amountWithTax?: number;
            amountTax?: number;
            doNotTriggerInvoicing?: boolean;
            parameter1?: string;
            parameter2?: string;
            parameter3?: string;
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string;
            parameterExtra?: string;
            orderNumber?: string;
            priceplan?: components["schemas"]["PricePlanMatrix"];
            edr?: components["schemas"]["EDR"];
            adjustedRatedTx?: components["schemas"]["RatedTransaction"];
            subscription?: components["schemas"]["Subscription"];
            chargeInstance?: components["schemas"]["ChargeInstance"];
            tax: components["schemas"]["Tax"];
            taxPercent: number;
            offerTemplate?: components["schemas"]["OfferTemplate"];
            serviceInstance?: components["schemas"]["ServiceInstance"];
            billingRun?: components["schemas"]["BillingRun"];
            invoice?: components["schemas"]["Invoice"];
            invoiceAgregateF?: components["schemas"]["SubCategoryInvoiceAgregate"];
            /** @enum {string} */
            status: "OPEN" | "BILLED" | "REJECTED" | "RERATED" | "CANCELED" | "PROCESSED";
            /** Format: date-time */
            updated?: string;
            inputQuantity?: number;
            rawAmountWithoutTax?: number;
            rawAmountWithTax?: number;
            taxClass?: components["schemas"]["TaxClass"];
            taxRecalculated?: boolean;
            inputUnitOfMeasure?: components["schemas"]["UnitOfMeasure"];
            ratingUnitOfMeasure?: components["schemas"]["UnitOfMeasure"];
            /** Format: int32 */
            sortIndex?: number;
            /** @enum {string} */
            type?: "REGULAR" | "MINIMUM" | "AGGREGATED" | "MANUAL";
            accountingCode?: components["schemas"]["AccountingCode"];
            /** Format: date-time */
            invoicingDate?: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            uuid: string;
            accountingArticle?: components["schemas"]["AccountingArticle"];
            infoOrder?: components["schemas"]["OrderInfo"];
            invoiceLine?: components["schemas"]["InvoiceLine"];
            discountPlan?: components["schemas"]["DiscountPlan"];
            /** Format: int64 */
            discountedRatedTransaction?: number;
            discountValue?: number;
            /** @enum {string} */
            discountPlanType?: "PERCENTAGE" | "FIXED";
            discountPlanItem?: components["schemas"]["DiscountPlanItem"];
            rulesContract?: components["schemas"]["Contract"];
            /** Format: int32 */
            sequence?: number;
            orderInfo?: components["schemas"]["OrderInfo"];
            prepaid?: boolean;
            taxOverriden?: boolean;
            /** Format: int64 */
            sellerId?: number;
            /** Format: int64 */
            subscriptionId?: number;
            /** Format: int64 */
            taxId?: number;
            /** Format: int64 */
            taxClassId?: number;
            /** Format: int64 */
            billingAccountId?: number;
            /** Format: int64 */
            invoiceSubCategoryId?: number;
            /** Format: int64 */
            walletId?: number;
            /** Format: int64 */
            userAccountId?: number;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            transient?: boolean;
        };
        RecordedInvoice: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            /** Format: date-time */
            dueDate?: string;
            type?: string;
            /** Format: date-time */
            transactionDate?: string;
            /** @enum {string} */
            transactionCategory?: "DEBIT" | "CREDIT";
            /** @enum {string} */
            operationAction?: "TO_REFUND" | "NONE";
            reference?: string;
            accountingCode?: components["schemas"]["AccountingCode"];
            accountingEntries?: components["schemas"]["AccountingEntry"][];
            accountCodeClientSide?: string;
            amount?: number;
            amountWithoutTax?: number;
            taxAmount?: number;
            matchingAmount?: number;
            unMatchingAmount?: number;
            customerAccount?: components["schemas"]["CustomerAccount"];
            /** @enum {string} */
            matchingStatus?: "O" | "L" | "P" | "C" | "I" | "R";
            matchingAmounts?: components["schemas"]["MatchingAmount"][];
            orderNumber?: string;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            bankLot?: string;
            bankReference?: string;
            /** Format: date-time */
            depositDate?: string;
            /** Format: date-time */
            bankCollectionDate?: string;
            /** @enum {string} */
            paymentMethod?: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
            invoices?: components["schemas"]["Invoice"][];
            paymentInfo?: string;
            paymentInfo1?: string;
            paymentInfo2?: string;
            paymentInfo3?: string;
            paymentInfo4?: string;
            paymentInfo5?: string;
            paymentInfo6?: string;
            billingAccountName?: string;
            ddRequestItem?: components["schemas"]["DDRequestItem"];
            rejectedPayment?: components["schemas"]["RejectedPayment"];
            seller?: components["schemas"]["Seller"];
            subscription?: components["schemas"]["Subscription"];
            paymentHistories?: components["schemas"]["PaymentHistory"][];
            /** Format: date-time */
            collectionDate?: string;
            /** Format: date-time */
            accountingDate?: string;
            journal?: components["schemas"]["Journal"];
            /** @enum {string} */
            status?: "POSTED" | "REJECTED" | "EXPORTED" | "EXPORT_FAILED";
            /** @enum {string} */
            reason?: "REJECTED" | "FORCED" | "CLOSED_PERIOD";
            /** @enum {string} */
            paymentAction?: "PENDING_PAYMENT";
            /** Format: int32 */
            paymentDeferralCount?: number;
            accountingExportFile?: string;
            accountingSchemeEntries?: components["schemas"]["JournalEntry"][];
            /** Format: int64 */
            operationNumber?: number;
            /** Format: date-time */
            productionDate?: string;
            /** Format: date-time */
            invoiceDate?: string;
            netToPay?: number;
            recordedInvoiceCatAgregates?: components["schemas"]["RecordedInvoiceCatAgregate"][];
            paymentScheduleInstanceItem?: components["schemas"]["PaymentScheduleInstanceItem"];
            dunningDocument?: components["schemas"]["DunningDocument"];
            invoice?: components["schemas"]["Invoice"];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        RecordedInvoiceCatAgregate: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            /** Format: date-time */
            dueDate?: string;
            type?: string;
            /** Format: date-time */
            transactionDate?: string;
            /** @enum {string} */
            transactionCategory?: "DEBIT" | "CREDIT";
            /** @enum {string} */
            operationAction?: "TO_REFUND" | "NONE";
            reference?: string;
            accountingCode?: components["schemas"]["AccountingCode"];
            accountingEntries?: components["schemas"]["AccountingEntry"][];
            accountCodeClientSide?: string;
            amount?: number;
            amountWithoutTax?: number;
            taxAmount?: number;
            matchingAmount?: number;
            unMatchingAmount?: number;
            customerAccount?: components["schemas"]["CustomerAccount"];
            /** @enum {string} */
            matchingStatus?: "O" | "L" | "P" | "C" | "I" | "R";
            orderNumber?: string;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            bankLot?: string;
            bankReference?: string;
            /** Format: date-time */
            depositDate?: string;
            /** Format: date-time */
            bankCollectionDate?: string;
            /** @enum {string} */
            paymentMethod?: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
            invoices?: components["schemas"]["Invoice"][];
            paymentInfo?: string;
            paymentInfo1?: string;
            paymentInfo2?: string;
            paymentInfo3?: string;
            paymentInfo4?: string;
            paymentInfo5?: string;
            paymentInfo6?: string;
            billingAccountName?: string;
            ddRequestItem?: components["schemas"]["DDRequestItem"];
            rejectedPayment?: components["schemas"]["RejectedPayment"];
            seller?: components["schemas"]["Seller"];
            subscription?: components["schemas"]["Subscription"];
            /** Format: date-time */
            collectionDate?: string;
            /** Format: date-time */
            accountingDate?: string;
            journal?: components["schemas"]["Journal"];
            /** @enum {string} */
            status?: "POSTED" | "REJECTED" | "EXPORTED" | "EXPORT_FAILED";
            /** @enum {string} */
            reason?: "REJECTED" | "FORCED" | "CLOSED_PERIOD";
            /** @enum {string} */
            paymentAction?: "PENDING_PAYMENT";
            /** Format: int32 */
            paymentDeferralCount?: number;
            accountingExportFile?: string;
            accountingSchemeEntries?: components["schemas"]["JournalEntry"][];
            /** Format: int64 */
            operationNumber?: number;
            /** Format: date-time */
            productionDate?: string;
            /** Format: date-time */
            invoiceDate?: string;
            netToPay?: number;
            paymentScheduleInstanceItem?: components["schemas"]["PaymentScheduleInstanceItem"];
            dunningDocument?: components["schemas"]["DunningDocument"];
            invoice?: components["schemas"]["Invoice"];
            recordedInvoice?: components["schemas"]["RecordedInvoice"];
            categoryInvoiceAgregate?: components["schemas"]["CategoryInvoiceAgregate"];
            subCategoryInvoiceAgregate?: components["schemas"]["SubCategoryInvoiceAgregate"];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        RecurringChargeInstance: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            chargeType?: string;
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE" | "CANCELED" | "TERMINATED" | "SUSPENDED" | "CLOSED" | "PENDING";
            /** Format: date-time */
            statusDate?: string;
            /** Format: date-time */
            terminationDate?: string;
            /** Format: date-time */
            reactivationDate?: string;
            chargeTemplate?: components["schemas"]["ChargeTemplate"];
            invoicingCalendar?: components["schemas"]["Calendar"];
            /** Format: date-time */
            chargeDate?: string;
            amountWithoutTax?: number;
            amountWithTax?: number;
            criteria1?: string;
            criteria2?: string;
            criteria3?: string;
            walletOperations?: components["schemas"]["WalletOperation"][];
            seller?: components["schemas"]["Seller"];
            userAccount?: components["schemas"]["UserAccount"];
            subscription?: components["schemas"]["Subscription"];
            currency?: components["schemas"]["TradingCurrency"];
            country?: components["schemas"]["TradingCountry"];
            walletInstances?: components["schemas"]["WalletInstance"][];
            serviceInstance?: components["schemas"]["ServiceInstance"];
            prepaidWalletInstances?: components["schemas"]["WalletInstance"][];
            prepaid?: boolean;
            orderNumber?: string;
            accumulatorCounterInstances?: components["schemas"]["CounterInstance"][];
            applyDiscountsOnOverridenPrice?: boolean;
            overchargedUnitAmountWithoutTax?: number;
            taxClassResolved?: components["schemas"]["TaxClass"];
            recurringChargeTemplate?: components["schemas"]["RecurringChargeTemplate"];
            /** Format: date-time */
            subscriptionDate?: string;
            /** Format: date-time */
            nextChargeDate?: string;
            /** Format: date-time */
            chargedToDate?: string;
            counter?: components["schemas"]["CounterInstance"];
            quantity: number;
            calendar?: components["schemas"]["Calendar"];
            applyInAdvance?: boolean;
            /** Format: date-time */
            chargeToDateOnTermination?: string;
            anticipateEndOfSubscription?: boolean;
            /** @enum {string} */
            chargeMainType?: "RECURRING" | "ONESHOT" | "USAGE" | "PRODUCT";
            walletOperationsSorted?: components["schemas"]["WalletOperation"][];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        RecurringChargeTemplate: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            disabled: boolean;
            productCharges?: components["schemas"]["ProductChargeTemplateMapping"][];
            /** @enum {string} */
            type?: "CREDIT" | "DEBIT";
            chargeType?: string;
            amountEditable?: boolean;
            invoiceSubCategory?: components["schemas"]["InvoiceSubCategory"];
            edrTemplates?: components["schemas"]["TriggeredEDRTemplate"][];
            inputUnitDescription?: string;
            ratingUnitDescription?: string;
            inputUnitOfMeasure?: components["schemas"]["UnitOfMeasure"];
            ratingUnitOfMeasure?: components["schemas"]["UnitOfMeasure"];
            inputUnitEL?: string;
            outputUnitEL?: string;
            unitMultiplicator?: number;
            /** Format: int32 */
            unitNbDecimal?: number;
            /** @enum {string} */
            roundingMode?: "NEAREST" | "DOWN" | "UP" | "HALF_EVEN";
            revenueRecognitionRule?: components["schemas"]["RevenueRecognitionRule"];
            descriptionI18n?: {
                [key: string]: string;
            };
            filterExpression?: string;
            taxClass?: components["schemas"]["TaxClass"];
            taxClassEl?: string;
            ratingScript?: components["schemas"]["ScriptInstance"];
            dropZeroWo?: boolean;
            sortIndexEl?: string;
            attributes?: components["schemas"]["Attribute"][];
            roundingValuesComputed?: boolean;
            /** Format: int32 */
            roundingUnityNbDecimal?: number;
            /** Format: int32 */
            roundingEdrNbDecimal?: number;
            /** @enum {string} */
            status?: "DRAFT" | "ACTIVE" | "ARCHIVED";
            internalNote?: string;
            quantityAttribute?: components["schemas"]["Attribute"];
            applyContractOverRatingScript?: boolean;
            /** @enum {string} */
            recurrenceType?: "CALENDAR" | "PERIOD";
            calendar?: components["schemas"]["Calendar"];
            /** Format: int32 */
            durationTermInMonth?: number;
            subscriptionProrata?: boolean;
            terminationProrata?: boolean;
            prorataOnPriceChange: boolean;
            applyInAdvance?: boolean;
            /** @enum {string} */
            shareLevel?: "PROVIDER" | "SELLER" | "CUSTOMER" | "CUSTOMER_ACCOUNT" | "BILLING_ACCOUNT" | "USER_ACCOUNT";
            subscriptionProrataEl?: string;
            terminationProrataEl?: string;
            applyInAdvanceEl?: string;
            durationTermInMonthEl?: string;
            calendarCodeEl?: string;
            applyTerminatedChargeToDateEL?: string;
            attributeDuration?: components["schemas"]["Attribute"];
            attributeCalendar?: components["schemas"]["Attribute"];
            anticipateEndOfSubscription?: boolean;
            /** @enum {string} */
            chargeMainType?: "RECURRING" | "ONESHOT" | "USAGE" | "PRODUCT";
            descriptionI18nNullSafe?: {
                [key: string]: string;
            };
            active?: boolean;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        Refund: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            /** Format: date-time */
            dueDate?: string;
            type?: string;
            /** Format: date-time */
            transactionDate?: string;
            /** @enum {string} */
            transactionCategory?: "DEBIT" | "CREDIT";
            /** @enum {string} */
            operationAction?: "TO_REFUND" | "NONE";
            reference?: string;
            accountingCode?: components["schemas"]["AccountingCode"];
            accountingEntries?: components["schemas"]["AccountingEntry"][];
            accountCodeClientSide?: string;
            amount?: number;
            amountWithoutTax?: number;
            taxAmount?: number;
            matchingAmount?: number;
            unMatchingAmount?: number;
            customerAccount?: components["schemas"]["CustomerAccount"];
            /** @enum {string} */
            matchingStatus?: "O" | "L" | "P" | "C" | "I" | "R";
            orderNumber?: string;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            bankLot?: string;
            bankReference?: string;
            /** Format: date-time */
            depositDate?: string;
            /** Format: date-time */
            bankCollectionDate?: string;
            /** @enum {string} */
            paymentMethod?: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
            invoices?: components["schemas"]["Invoice"][];
            paymentInfo?: string;
            paymentInfo1?: string;
            paymentInfo2?: string;
            paymentInfo3?: string;
            paymentInfo4?: string;
            paymentInfo5?: string;
            paymentInfo6?: string;
            billingAccountName?: string;
            ddRequestItem?: components["schemas"]["DDRequestItem"];
            rejectedPayment?: components["schemas"]["RejectedPayment"];
            seller?: components["schemas"]["Seller"];
            subscription?: components["schemas"]["Subscription"];
            /** Format: date-time */
            collectionDate?: string;
            /** Format: date-time */
            accountingDate?: string;
            journal?: components["schemas"]["Journal"];
            /** @enum {string} */
            status?: "POSTED" | "REJECTED" | "EXPORTED" | "EXPORT_FAILED";
            /** @enum {string} */
            reason?: "REJECTED" | "FORCED" | "CLOSED_PERIOD";
            /** @enum {string} */
            paymentAction?: "PENDING_PAYMENT";
            /** Format: int32 */
            paymentDeferralCount?: number;
            accountingExportFile?: string;
            accountingSchemeEntries?: components["schemas"]["JournalEntry"][];
            /** Format: int64 */
            operationNumber?: number;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        RejectedBillingAccount: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            billingAccount?: components["schemas"]["BillingAccount"];
            billingRun?: components["schemas"]["BillingRun"];
            rejectCause?: string;
            transient?: boolean;
        };
        RejectedPayment: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            /** Format: date-time */
            dueDate?: string;
            type?: string;
            /** Format: date-time */
            transactionDate?: string;
            /** @enum {string} */
            transactionCategory?: "DEBIT" | "CREDIT";
            /** @enum {string} */
            operationAction?: "TO_REFUND" | "NONE";
            reference?: string;
            accountingCode?: components["schemas"]["AccountingCode"];
            accountingEntries?: components["schemas"]["AccountingEntry"][];
            accountCodeClientSide?: string;
            amount?: number;
            amountWithoutTax?: number;
            taxAmount?: number;
            matchingAmount?: number;
            unMatchingAmount?: number;
            customerAccount?: components["schemas"]["CustomerAccount"];
            /** @enum {string} */
            matchingStatus?: "O" | "L" | "P" | "C" | "I" | "R";
            orderNumber?: string;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            bankLot?: string;
            bankReference?: string;
            /** Format: date-time */
            depositDate?: string;
            /** Format: date-time */
            bankCollectionDate?: string;
            /** @enum {string} */
            paymentMethod?: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
            invoices?: components["schemas"]["Invoice"][];
            paymentInfo?: string;
            paymentInfo1?: string;
            paymentInfo2?: string;
            paymentInfo3?: string;
            paymentInfo4?: string;
            paymentInfo5?: string;
            paymentInfo6?: string;
            billingAccountName?: string;
            ddRequestItem?: components["schemas"]["DDRequestItem"];
            rejectedPayment?: components["schemas"]["RejectedPayment"];
            seller?: components["schemas"]["Seller"];
            subscription?: components["schemas"]["Subscription"];
            paymentHistories?: components["schemas"]["PaymentHistory"][];
            /** Format: date-time */
            collectionDate?: string;
            /** Format: date-time */
            accountingDate?: string;
            journal?: components["schemas"]["Journal"];
            /** @enum {string} */
            status?: "POSTED" | "REJECTED" | "EXPORTED" | "EXPORT_FAILED";
            /** @enum {string} */
            reason?: "REJECTED" | "FORCED" | "CLOSED_PERIOD";
            /** @enum {string} */
            paymentAction?: "PENDING_PAYMENT";
            /** Format: int32 */
            paymentDeferralCount?: number;
            accountingExportFile?: string;
            accountingSchemeEntries?: components["schemas"]["JournalEntry"][];
            /** Format: int64 */
            operationNumber?: number;
            /** @enum {string} */
            rejectedType?: "A" | "M";
            /** Format: date-time */
            rejectedDate?: string;
            rejectedDescription?: string;
            rejectedCode?: string;
            listAaccountOperationSupposedPaid?: components["schemas"]["AccountOperation"][];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        ReportQuery: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            targetEntity?: string;
            /** @enum {string} */
            visibility?: "PUBLIC" | "PRIVATE" | "PROTECTED";
            fields?: string[];
            filters?: {
                [key: string]: Record<string, never>;
            };
            generatedQuery?: string;
            sortBy?: string;
            /** @enum {string} */
            sortOrder?: "DESCENDING" | "ASCENDING";
            queryParameters?: {
                [key: string]: Record<string, never>;
            };
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        RevenueRecognitionRule: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            disabled: boolean;
            script?: components["schemas"]["ScriptInstance"];
            /** Format: int32 */
            startDelay?: number;
            /** @enum {string} */
            startUnit?: "revenueRecognitionDelayUnitEnum.MONTH" | "revenueRecognitionDelayUnitEnum.DAY";
            /** @enum {string} */
            startEvent?: "revenueRecognitionEvent.SUBSCRIPTION_START" | "revenueRecognitionEvent.SUBSCRIPTION_STOP" | "revenueRecognitionEvent.INVOICE_DATE" | "revenueRecognitionEvent.INVOICE_DUE_DATE" | "revenueRecognitionEvent.SERVICE_PERIOD_START" | "revenueRecognitionEvent.SERVICE_PERIOD_STOP";
            /** Format: int32 */
            stopDelay?: number;
            /** @enum {string} */
            stopUnit?: "revenueRecognitionDelayUnitEnum.MONTH" | "revenueRecognitionDelayUnitEnum.DAY";
            /** @enum {string} */
            stopEvent?: "revenueRecognitionEvent.SUBSCRIPTION_START" | "revenueRecognitionEvent.SUBSCRIPTION_STOP" | "revenueRecognitionEvent.INVOICE_DATE" | "revenueRecognitionEvent.INVOICE_DUE_DATE" | "revenueRecognitionEvent.SERVICE_PERIOD_START" | "revenueRecognitionEvent.SERVICE_PERIOD_STOP";
            active?: boolean;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        Role: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            name: string;
            description?: string;
            clientRole?: boolean;
            parentRole?: components["schemas"]["Role"];
            roles?: components["schemas"]["Role"][];
            replicateInKc?: boolean;
            descriptionOrName?: string;
            referenceDescription?: string;
            referenceCode?: string;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            transient?: boolean;
        };
        ScriptInstance: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            disabled: boolean;
            script?: string;
            /** @enum {string} */
            sourceTypeEnum?: "JAVA" | "JAVA_CLASS";
            scriptErrors?: components["schemas"]["ScriptInstanceError"][];
            error: boolean;
            reuse: boolean;
            scriptInstanceCategory?: components["schemas"]["ScriptInstanceCategory"];
            executionRoles?: string[];
            sourcingRoles?: string[];
            descriptionI18n?: {
                [key: string]: string;
            };
            scriptParameters?: components["schemas"]["ScriptParameter"][];
            active?: boolean;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        ScriptInstanceCategory: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            descriptionI18n?: {
                [key: string]: string;
            };
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        ScriptInstanceError: {
            message?: string;
            /** Format: int64 */
            lineNumber?: number;
            /** Format: int64 */
            columnNumber?: number;
            sourceFile?: string;
        };
        ScriptParameter: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            code?: string;
            scriptInstance: components["schemas"]["ScriptInstance"];
            descriptionI18n?: {
                [key: string]: string;
            };
            className: string;
            defaultValue?: string;
            mandatory?: boolean;
            allowedValues?: string;
            valuesSeparator?: string;
            collection?: boolean;
            transient?: boolean;
        };
        Seller: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            externalRef1?: string;
            externalRef2?: string;
            name?: components["schemas"]["Name"];
            address?: components["schemas"]["Address"];
            defaultLevel?: boolean;
            providerContact?: string;
            primaryContact?: components["schemas"]["ProviderContact"];
            businessAccountModel?: components["schemas"]["BusinessAccountModel"];
            jobTitle?: string;
            contactInformation?: components["schemas"]["ContactInformation"];
            vatNo?: string;
            registrationNo?: string;
            minimumAmountEl?: string;
            minimumLabelEl?: string;
            minimumChargeTemplate?: components["schemas"]["OneShotChargeTemplate"];
            minimumArticle?: components["schemas"]["AccountingArticle"];
            isCompany?: boolean;
            legalEntityType?: components["schemas"]["Title"];
            tradingCurrency?: components["schemas"]["TradingCurrency"];
            tradingCountry?: components["schemas"]["TradingCountry"];
            tradingLanguage?: components["schemas"]["TradingLanguage"];
            legalText?: string;
            legalType?: string;
            seller?: components["schemas"]["Seller"];
            invoiceTypeSequence?: components["schemas"]["InvoiceTypeSellerSequence"][];
            customerSequences?: components["schemas"]["CustomerSequence"][];
            paymentGateways?: components["schemas"]["PaymentGateway"][];
            generalLedger?: components["schemas"]["GeneralLedger"];
            contracts?: components["schemas"]["Contract"][];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            parentEntity?: components["schemas"]["BusinessEntity"];
            accountType?: string;
            contactInformationNullSafe?: components["schemas"]["ContactInformation"];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        ServiceCharge: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            disabled: boolean;
            serviceRecurringCharges?: components["schemas"]["ServiceChargeTemplateRecurring"][];
            serviceSubscriptionCharges?: components["schemas"]["ServiceChargeTemplateSubscription"][];
            serviceTerminationCharges?: components["schemas"]["ServiceChargeTemplateTermination"][];
            serviceUsageCharges?: components["schemas"]["ServiceChargeTemplateUsage"][];
            active?: boolean;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        ServiceChargeTemplateRecurring: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            serviceTemplate?: components["schemas"]["ServiceTemplate"];
            chargeTemplate?: components["schemas"]["RecurringChargeTemplate"];
            counterTemplate?: components["schemas"]["CounterTemplate"];
            walletTemplates?: components["schemas"]["WalletTemplate"][];
            accumulatorCounterTemplates?: components["schemas"]["CounterTemplate"][];
            transient?: boolean;
        };
        ServiceChargeTemplateSubscription: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            serviceTemplate?: components["schemas"]["ServiceTemplate"];
            chargeTemplate?: components["schemas"]["OneShotChargeTemplate"];
            counterTemplate?: components["schemas"]["CounterTemplate"];
            walletTemplates?: components["schemas"]["WalletTemplate"][];
            accumulatorCounterTemplates?: components["schemas"]["CounterTemplate"][];
            transient?: boolean;
        };
        ServiceChargeTemplateTermination: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            serviceTemplate?: components["schemas"]["ServiceTemplate"];
            chargeTemplate?: components["schemas"]["OneShotChargeTemplate"];
            counterTemplate?: components["schemas"]["CounterTemplate"];
            walletTemplates?: components["schemas"]["WalletTemplate"][];
            accumulatorCounterTemplates?: components["schemas"]["CounterTemplate"][];
            transient?: boolean;
        };
        ServiceChargeTemplateUsage: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            serviceTemplate?: components["schemas"]["ServiceTemplate"];
            chargeTemplate?: components["schemas"]["UsageChargeTemplate"];
            counterTemplate?: components["schemas"]["CounterTemplate"];
            walletTemplates?: components["schemas"]["WalletTemplate"][];
            accumulatorCounterTemplates?: components["schemas"]["CounterTemplate"][];
            transient?: boolean;
        };
        ServiceInstance: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            subscription?: components["schemas"]["Subscription"];
            serviceTemplate?: components["schemas"]["ServiceTemplate"];
            productVersion?: components["schemas"]["ProductVersion"];
            quoteProduct?: components["schemas"]["QuoteProduct"];
            invoicingCalendar?: components["schemas"]["Calendar"];
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE" | "CANCELED" | "TERMINATED" | "SUSPENDED" | "CLOSED" | "PENDING";
            /** Format: date-time */
            statusDate?: string;
            /** Format: date-time */
            subscriptionDate?: string;
            /** Format: date-time */
            terminationDate?: string;
            /** Format: date-time */
            endAgreementDate?: string;
            /** Format: date-time */
            reactivationDate?: string;
            autoEndOfEngagement?: boolean;
            /** @enum {string} */
            priceVersionDateSetting?: "QUOTE" | "DELIVERY" | "RENEWAL" | "EVENT";
            /** Format: date-time */
            priceVersionDate?: string;
            chargeInstances?: components["schemas"]["ChargeInstance"][];
            ratedTransactions?: components["schemas"]["RatedTransaction"][];
            subscriptionTerminationReason?: components["schemas"]["SubscriptionTerminationReason"];
            quantity?: number;
            previousQuantity?: number;
            orderNumber?: string;
            /** Format: date-time */
            rateUntilDate?: string;
            minimumAmountEl?: string;
            minimumLabelEl?: string;
            minimumInvoiceSubCategory?: components["schemas"]["InvoiceSubCategory"];
            minimumChargeTemplate?: components["schemas"]["OneShotChargeTemplate"];
            orderHistories?: components["schemas"]["OrderHistory"][];
            serviceRenewal?: components["schemas"]["SubscriptionRenewal"];
            amountPS?: number;
            calendarPS?: components["schemas"]["Calendar"];
            psInstances?: components["schemas"]["PaymentScheduleInstance"][];
            /** Format: int32 */
            paymentDayInMonthPS?: number;
            /** Format: date-time */
            subscribedTillDate?: string;
            renewed?: boolean;
            /** Format: date-time */
            notifyOfRenewalDate?: string;
            /** Format: date-time */
            renewalNotifiedDate?: string;
            counters?: {
                [key: string]: components["schemas"]["CounterInstance"];
            };
            initialServiceRenewal?: string;
            attributeInstances?: components["schemas"]["AttributeInstance"][];
            minimumArticle?: components["schemas"]["AccountingArticle"];
            /** Format: date-time */
            deliveryDate?: string;
            /** Format: int64 */
            orderItemId?: number;
            /** @enum {string} */
            orderItemAction?: "ADD" | "MODIFY" | "DELETE";
            recurringChargeInstances?: components["schemas"]["RecurringChargeInstance"][];
            subscriptionChargeInstances?: components["schemas"]["SubscriptionChargeInstance"][];
            terminationChargeInstances?: components["schemas"]["TerminationChargeInstance"][];
            usageChargeInstances?: components["schemas"]["UsageChargeInstance"][];
            discountPlanInstances?: components["schemas"]["DiscountPlanInstance"][];
            /** Format: date-time */
            activationDate?: string;
            quantityChanged?: boolean;
            descriptionAndStatus?: string;
            subscriptionExpired?: boolean;
            fireRenewalNotice?: boolean;
            seller?: components["schemas"]["Seller"];
            serviceCharge?: components["schemas"]["ServiceCharge"];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            allDiscountPlanInstances?: components["schemas"]["DiscountPlanInstance"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        ServiceTemplate: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            disabled: boolean;
            serviceSubscriptionCharges?: components["schemas"]["ServiceChargeTemplateSubscription"][];
            serviceTerminationCharges?: components["schemas"]["ServiceChargeTemplateTermination"][];
            serviceUsageCharges?: components["schemas"]["ServiceChargeTemplateUsage"][];
            invoicingCalendar?: components["schemas"]["Calendar"];
            businessServiceModel?: components["schemas"]["BusinessServiceModel"];
            longDescription?: string;
            imagePath?: string;
            minimumAmountEl?: string;
            minimumLabelEl?: string;
            minimumInvoiceSubCategory?: components["schemas"]["InvoiceSubCategory"];
            minimumChargeTemplate?: components["schemas"]["OneShotChargeTemplate"];
            serviceRenewal?: components["schemas"]["SubscriptionRenewal"];
            selected?: boolean;
            autoEndOfEngagement?: boolean;
            instantiatedFromBSM?: boolean;
            descriptionOverride?: string;
            descriptionI18n?: {
                [key: string]: string;
            };
            tags?: components["schemas"]["Tag"][];
            attributes?: components["schemas"]["Attribute"][];
            active?: boolean;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        ServiceToInstantiateDto: {
            code?: string;
            overrideCode?: string;
            description?: string;
            quantity: number;
            /** Format: date-time */
            subscriptionDate?: string;
            chargeInstanceOverrides?: components["schemas"]["ChargeInstanceOverridesDto"];
            customFields?: components["schemas"]["CustomFieldsDto"];
            attributeInstanceDtoList?: components["schemas"]["AttributeInstanceDto"][];
            /** Format: date-time */
            rateUntilDate?: string;
            amountPS?: number;
            calendarPSCode?: string;
            serviceCharge?: components["schemas"]["ServiceCharge"];
        };
        ServicesToInstantiateDto: {
            service: components["schemas"]["ServiceToInstantiateDto"][];
        };
        StripePaymentMethod: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            disabled: boolean;
            alias?: string;
            preferred?: boolean;
            customerAccount?: components["schemas"]["CustomerAccount"];
            /** @enum {string} */
            paymentType?: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
            userId?: string;
            info1?: string;
            info2?: string;
            info3?: string;
            info4?: string;
            info5?: string;
            tokenId?: string;
            token3DsId?: string;
            referenceDocument?: components["schemas"]["Document"];
            action?: string;
            expired?: boolean;
            active?: boolean;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            transient?: boolean;
        };
        SubCategoryInvoiceAgregate: {
            /** @description The list of invoice lines */
            invoiceLines?: components["schemas"]["InvoiceLine"][];
            /** @description The code of invoice sub category */
            invoiceSubCategoryCode?: string;
            /** @description List of amounts by tax */
            amountsByTax?: components["schemas"]["SubcategoryInvoiceAgregateAmount"][];
            /**
             * Format: int32
             * @description The item number
             */
            itemNumber?: number;
            /** @description The code of accounting */
            accountingCode?: string;
            /** @description The code of user account */
            userAccountCode?: string;
            /** @description The quantity */
            quantity?: number;
            /** @description The amount tax */
            amountTax?: number;
            /** @description The amount with tax */
            amountWithTax?: number;
            /** @description The amount without tax */
            amountWithoutTax?: number;
            /** @description The description */
            description?: string;
            links?: {
                title?: string;
                uriBuilder?: Record<string, never>;
                rel?: string;
                rels?: string[];
                params?: {
                    [key: string]: string;
                };
                /** Format: uri */
                uri?: string;
                type?: string;
            }[];
            code?: string;
            /** Format: int64 */
            id?: number;
        };
        /** @description List of amounts by tax */
        SubcategoryInvoiceAgregateAmount: {
            /** @description The amount tax */
            amountTax?: number;
            /** @description The amount with tax */
            amountWithTax?: number;
            /** @description The amount without tax */
            amountWithoutTax?: number;
            tax?: components["schemas"]["Tax"];
            links?: {
                title?: string;
                uriBuilder?: Record<string, never>;
                rel?: string;
                rels?: string[];
                params?: {
                    [key: string]: string;
                };
                /** Format: uri */
                uri?: string;
                type?: string;
            }[];
            code?: string;
            /** Format: int64 */
            id?: number;
        };
        Subscription: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            /** Format: int32 */
            versionNumber?: number;
            nextVersion?: components["schemas"]["Subscription"];
            previousVersion?: components["schemas"]["Subscription"];
            offer?: components["schemas"]["OfferTemplate"];
            /** @enum {string} */
            status?: "CREATED" | "ACTIVE" | "CANCELED" | "RESILIATED" | "CLOSED" | "SUSPENDED" | "PENDING";
            /** Format: date-time */
            statusDate?: string;
            /** Format: date-time */
            subscriptionDate?: string;
            /** Format: date-time */
            terminationDate?: string;
            /** Format: date-time */
            subscribedTillDate?: string;
            serviceInstances?: components["schemas"]["ServiceInstance"][];
            productInstances?: components["schemas"]["ProductInstance"][];
            accessPoints?: components["schemas"]["Access"][];
            edrs?: components["schemas"]["EDR"][];
            userAccount: components["schemas"]["UserAccount"];
            accountOperations?: components["schemas"]["AccountOperation"][];
            /** Format: date-time */
            endAgreementDate?: string;
            subscriptionTerminationReason?: components["schemas"]["SubscriptionTerminationReason"];
            defaultLevel?: boolean;
            autoEndOfEngagement?: boolean;
            subscriptionRenewal?: components["schemas"]["SubscriptionRenewal"];
            renewed?: boolean;
            /** Format: date-time */
            notifyOfRenewalDate?: string;
            /** Format: date-time */
            renewalNotifiedDate?: string;
            minimumAmountEl?: string;
            minimumLabelEl?: string;
            minimumInvoiceSubCategory?: components["schemas"]["InvoiceSubCategory"];
            minimumChargeTemplate?: components["schemas"]["OneShotChargeTemplate"];
            billingCycle?: components["schemas"]["BillingCycle"];
            billingRun?: components["schemas"]["BillingRun"];
            seller?: components["schemas"]["Seller"];
            ratingGroup?: string;
            discountPlanInstances?: components["schemas"]["DiscountPlanInstance"][];
            discountPlan?: components["schemas"]["DiscountPlan"];
            emailTemplate?: components["schemas"]["EmailTemplate"];
            /** @enum {string} */
            mailingType?: "MANUAL" | "AUTO" | "BATCH";
            ccedEmails?: string;
            email?: string;
            electronicBilling?: boolean;
            salesPersonName?: string;
            counters?: {
                [key: string]: components["schemas"]["CounterInstance"];
            };
            contract?: components["schemas"]["Contract"];
            totalInvoicingAmountWithoutTax?: number;
            totalInvoicingAmountWithTax?: number;
            totalInvoicingAmountTax?: number;
            initialSubscriptionRenewal?: string;
            paymentMethod?: components["schemas"]["PaymentMethod"];
            order?: components["schemas"]["CommercialOrder"];
            prestation?: string;
            validity?: components["schemas"]["DatePeriod"];
            minimumArticle?: components["schemas"]["AccountingArticle"];
            minInvoiceLines?: components["schemas"]["InvoiceLine"][];
            orderOffer?: components["schemas"]["OrderOffer"];
            attributeInstances?: components["schemas"]["AttributeInstance"][];
            anyServiceActive?: boolean;
            /** Format: date-time */
            renewalDate?: string;
            /** Format: int32 */
            subscriptionMonthsAge?: number;
            /** Format: int32 */
            subscriptionDaysAge?: number;
            orderNumber?: string;
            subscriptionExpired?: boolean;
            fireRenewalNotice?: boolean;
            /** Format: date-time */
            toValidity?: string;
            /** Format: date-time */
            fromValidity?: string;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            allDiscountPlanInstances?: components["schemas"]["DiscountPlanInstance"][];
            active?: boolean;
            transient?: boolean;
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
        };
        SubscriptionChargeInstance: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            chargeType?: string;
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE" | "CANCELED" | "TERMINATED" | "SUSPENDED" | "CLOSED" | "PENDING";
            /** Format: date-time */
            statusDate?: string;
            /** Format: date-time */
            terminationDate?: string;
            /** Format: date-time */
            reactivationDate?: string;
            chargeTemplate?: components["schemas"]["ChargeTemplate"];
            invoicingCalendar?: components["schemas"]["Calendar"];
            /** Format: date-time */
            chargeDate?: string;
            amountWithoutTax?: number;
            amountWithTax?: number;
            criteria1?: string;
            criteria2?: string;
            criteria3?: string;
            walletOperations?: components["schemas"]["WalletOperation"][];
            seller?: components["schemas"]["Seller"];
            userAccount?: components["schemas"]["UserAccount"];
            subscription?: components["schemas"]["Subscription"];
            currency?: components["schemas"]["TradingCurrency"];
            country?: components["schemas"]["TradingCountry"];
            walletInstances?: components["schemas"]["WalletInstance"][];
            serviceInstance?: components["schemas"]["ServiceInstance"];
            prepaidWalletInstances?: components["schemas"]["WalletInstance"][];
            prepaid?: boolean;
            orderNumber?: string;
            accumulatorCounterInstances?: components["schemas"]["CounterInstance"][];
            applyDiscountsOnOverridenPrice?: boolean;
            overchargedUnitAmountWithoutTax?: number;
            taxClassResolved?: components["schemas"]["TaxClass"];
            quantity: number;
            counter?: components["schemas"]["CounterInstance"];
            /** @enum {string} */
            chargeMainType?: "RECURRING" | "ONESHOT" | "USAGE" | "PRODUCT";
            walletOperationsSorted?: components["schemas"]["WalletOperation"][];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        SubscriptionRenewal: {
            autoRenew?: boolean;
            /** Format: date-time */
            autoRenewDate?: string;
            /** Format: int32 */
            daysNotifyRenewal?: number;
            /** @enum {string} */
            endOfTermAction?: "SUSPEND" | "TERMINATE";
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            applyAgreement?: boolean;
            invoiceAgreementImmediately?: boolean;
            applyReimbursment?: boolean;
            applyTerminationCharges?: boolean;
            /** @enum {string} */
            overrideProrata?: "NO_OVERRIDE" | "PRORATA" | "NO_PRORATA";
            reimburseOneshots?: boolean;
            descriptionI18n?: {
                [key: string]: string;
            };
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
            /** @enum {string} */
            initialyActiveForUnit?: "MONTH" | "DAY";
            /** Format: int32 */
            initialyActiveFor?: number;
            calendarInitialyActiveFor?: components["schemas"]["Calendar"];
            extendAgreementPeriodToSubscribedTillDate?: boolean;
            /** @enum {string} */
            renewForUnit?: "MONTH" | "DAY";
            /** Format: int32 */
            renewFor?: number;
            calendarRenewFor?: components["schemas"]["Calendar"];
            /** @enum {string} */
            initialTermType?: "RECURRING" | "CALENDAR" | "FIXED";
            /** @enum {string} */
            renewalTermType?: "RECURRING" | "CALENDAR";
        };
        SubscriptionTerminationReason: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            applyAgreement?: boolean;
            invoiceAgreementImmediately?: boolean;
            applyReimbursment?: boolean;
            applyTerminationCharges?: boolean;
            /** @enum {string} */
            overrideProrata?: "NO_OVERRIDE" | "PRORATA" | "NO_PRORATA";
            reimburseOneshots?: boolean;
            descriptionI18n?: {
                [key: string]: string;
            };
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        Tag: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            seller?: components["schemas"]["Seller"];
            name: string;
            tagType: components["schemas"]["TagType"];
            parentTag?: components["schemas"]["Tag"];
            filterEl?: string;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        TagType: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            seller?: components["schemas"]["Seller"];
            tags?: components["schemas"]["Tag"][];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        /** @description The tax attachaed to sub category invoice agregate amount */
        Tax: {
            composite?: boolean;
            accountingCode?: string;
            percent?: number;
            links?: {
                title?: string;
                uriBuilder?: Record<string, never>;
                rel?: string;
                rels?: string[];
                params?: {
                    [key: string]: string;
                };
                /** Format: uri */
                uri?: string;
                type?: string;
            }[];
            code?: string;
            /** Format: int64 */
            id?: number;
        };
        TaxCategory: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            descriptionI18n?: {
                [key: string]: string;
            };
            descriptionI18nNullSafe?: {
                [key: string]: string;
            };
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        TaxClass: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            descriptionI18n?: {
                [key: string]: string;
            };
            descriptionI18nNullSafe?: {
                [key: string]: string;
            };
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        TerminationChargeInstance: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            chargeType?: string;
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE" | "CANCELED" | "TERMINATED" | "SUSPENDED" | "CLOSED" | "PENDING";
            /** Format: date-time */
            statusDate?: string;
            /** Format: date-time */
            terminationDate?: string;
            /** Format: date-time */
            reactivationDate?: string;
            chargeTemplate?: components["schemas"]["ChargeTemplate"];
            invoicingCalendar?: components["schemas"]["Calendar"];
            /** Format: date-time */
            chargeDate?: string;
            amountWithoutTax?: number;
            amountWithTax?: number;
            criteria1?: string;
            criteria2?: string;
            criteria3?: string;
            walletOperations?: components["schemas"]["WalletOperation"][];
            seller?: components["schemas"]["Seller"];
            userAccount?: components["schemas"]["UserAccount"];
            subscription?: components["schemas"]["Subscription"];
            currency?: components["schemas"]["TradingCurrency"];
            country?: components["schemas"]["TradingCountry"];
            walletInstances?: components["schemas"]["WalletInstance"][];
            serviceInstance?: components["schemas"]["ServiceInstance"];
            prepaidWalletInstances?: components["schemas"]["WalletInstance"][];
            prepaid?: boolean;
            orderNumber?: string;
            accumulatorCounterInstances?: components["schemas"]["CounterInstance"][];
            applyDiscountsOnOverridenPrice?: boolean;
            overchargedUnitAmountWithoutTax?: number;
            taxClassResolved?: components["schemas"]["TaxClass"];
            quantity: number;
            counter?: components["schemas"]["CounterInstance"];
            /** @enum {string} */
            chargeMainType?: "RECURRING" | "ONESHOT" | "USAGE" | "PRODUCT";
            walletOperationsSorted?: components["schemas"]["WalletOperation"][];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        TimerEntity: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            disabled: boolean;
            year: string;
            month: string;
            dayOfMonth: string;
            dayOfWeek: string;
            hour: string;
            minute: string;
            second: string;
            /** Format: date-time */
            start?: string;
            /** Format: date-time */
            end?: string;
            jobInstances?: components["schemas"]["JobInstance"][];
            timerSchedule?: string;
            active?: boolean;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        Title: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            isCompany?: boolean;
            descriptionI18n?: {
                [key: string]: string;
            };
            descriptionI18nNullSafe?: {
                [key: string]: string;
            };
            descriptionNotNull?: string;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        TradingCountry: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            disabled: boolean;
            country?: components["schemas"]["Country"];
            countryCode?: string;
            active?: boolean;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        TradingCurrency: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            disabled: boolean;
            currency?: components["schemas"]["Currency"];
            prDescription?: string;
            prCurrencyToThis?: number;
            currencyCode?: string;
            symbol?: string;
            /** Format: int32 */
            decimalPlaces?: number;
            currentRate?: number;
            /** Format: date-time */
            currentRateFromDate?: string;
            currentRateUpdater?: string;
            exchangeRates?: components["schemas"]["ExchangeRate"][];
            active?: boolean;
            transient?: boolean;
        };
        TradingLanguage: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            disabled: boolean;
            language?: components["schemas"]["Language"];
            prDescription?: string;
            languageCode?: string;
            active?: boolean;
            transient?: boolean;
        };
        TriggeredEDRTemplate: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            subscriptionEl?: string;
            meveoInstance?: components["schemas"]["MeveoInstance"];
            conditionEl?: string;
            quantityEl?: string;
            param1El?: string;
            param2El?: string;
            param3El?: string;
            param4El?: string;
            opencellInstanceEL?: string;
            triggeredEdrScript?: components["schemas"]["ScriptInstance"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        UnitOfMeasure: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            symbol?: string;
            descriptionI18n?: {
                [key: string]: string;
            };
            /** Format: int64 */
            multiplicator?: number;
            parentUnitOfMeasure?: components["schemas"]["UnitOfMeasure"];
            descriptionI18nNullSafe?: {
                [key: string]: string;
            };
            baseUnit?: boolean;
            descriptionNotNull?: string;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        UrlReferenceWrapper: {
            url?: string;
            regexp?: string;
            label?: string;
            /** Format: int32 */
            length?: number;
            empty?: boolean;
        };
        UsageChargeInstance: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            chargeType?: string;
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE" | "CANCELED" | "TERMINATED" | "SUSPENDED" | "CLOSED" | "PENDING";
            /** Format: date-time */
            statusDate?: string;
            /** Format: date-time */
            terminationDate?: string;
            /** Format: date-time */
            reactivationDate?: string;
            chargeTemplate?: components["schemas"]["ChargeTemplate"];
            invoicingCalendar?: components["schemas"]["Calendar"];
            /** Format: date-time */
            chargeDate?: string;
            amountWithoutTax?: number;
            amountWithTax?: number;
            criteria1?: string;
            criteria2?: string;
            criteria3?: string;
            walletOperations?: components["schemas"]["WalletOperation"][];
            seller?: components["schemas"]["Seller"];
            userAccount?: components["schemas"]["UserAccount"];
            subscription?: components["schemas"]["Subscription"];
            currency?: components["schemas"]["TradingCurrency"];
            country?: components["schemas"]["TradingCountry"];
            walletInstances?: components["schemas"]["WalletInstance"][];
            serviceInstance?: components["schemas"]["ServiceInstance"];
            prepaidWalletInstances?: components["schemas"]["WalletInstance"][];
            prepaid?: boolean;
            orderNumber?: string;
            accumulatorCounterInstances?: components["schemas"]["CounterInstance"][];
            applyDiscountsOnOverridenPrice?: boolean;
            overchargedUnitAmountWithoutTax?: number;
            taxClassResolved?: components["schemas"]["TaxClass"];
            counter?: components["schemas"]["CounterInstance"];
            ratingUnitDescription?: string;
            /** Format: int32 */
            priority?: number;
            /** @enum {string} */
            chargeMainType?: "RECURRING" | "ONESHOT" | "USAGE" | "PRODUCT";
            walletOperationsSorted?: components["schemas"]["WalletOperation"][];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        UsageChargeTemplate: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            disabled: boolean;
            /** @enum {string} */
            type?: "CREDIT" | "DEBIT";
            chargeType?: string;
            amountEditable?: boolean;
            invoiceSubCategory?: components["schemas"]["InvoiceSubCategory"];
            edrTemplates?: components["schemas"]["TriggeredEDRTemplate"][];
            inputUnitDescription?: string;
            ratingUnitDescription?: string;
            inputUnitOfMeasure?: components["schemas"]["UnitOfMeasure"];
            ratingUnitOfMeasure?: components["schemas"]["UnitOfMeasure"];
            inputUnitEL?: string;
            outputUnitEL?: string;
            unitMultiplicator?: number;
            /** Format: int32 */
            unitNbDecimal?: number;
            /** @enum {string} */
            roundingMode?: "NEAREST" | "DOWN" | "UP" | "HALF_EVEN";
            revenueRecognitionRule?: components["schemas"]["RevenueRecognitionRule"];
            descriptionI18n?: {
                [key: string]: string;
            };
            filterExpression?: string;
            taxClass?: components["schemas"]["TaxClass"];
            taxClassEl?: string;
            ratingScript?: components["schemas"]["ScriptInstance"];
            dropZeroWo?: boolean;
            sortIndexEl?: string;
            attributes?: components["schemas"]["Attribute"][];
            roundingValuesComputed?: boolean;
            /** Format: int32 */
            roundingUnityNbDecimal?: number;
            /** Format: int32 */
            roundingEdrNbDecimal?: number;
            /** @enum {string} */
            status?: "DRAFT" | "ACTIVE" | "ARCHIVED";
            internalNote?: string;
            quantityAttribute?: components["schemas"]["Attribute"];
            applyContractOverRatingScript?: boolean;
            filterParam1?: string;
            filterParam2?: string;
            filterParam3?: string;
            filterParam4?: string;
            /** Format: int32 */
            priority?: number;
            triggerNextCharge?: boolean;
            triggerNextChargeEL?: string;
            usageQuantityAttribute?: components["schemas"]["Attribute"];
            priorityChanged?: boolean;
            /** @enum {string} */
            chargeMainType?: "RECURRING" | "ONESHOT" | "USAGE" | "PRODUCT";
            descriptionI18nNullSafe?: {
                [key: string]: string;
            };
            active?: boolean;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        User: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            name?: components["schemas"]["Name"];
            userName?: string;
            email?: string;
            password?: string;
            roles?: string[];
            userRoles?: components["schemas"]["Role"][];
            userLevel?: string;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            code?: string;
            description?: string;
            nameOrUsername?: string;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            referenceDescription?: string;
            referenceCode?: string;
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            transient?: boolean;
        };
        UserAccount: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            externalRef1?: string;
            externalRef2?: string;
            name?: components["schemas"]["Name"];
            address?: components["schemas"]["Address"];
            defaultLevel?: boolean;
            providerContact?: string;
            primaryContact?: components["schemas"]["ProviderContact"];
            businessAccountModel?: components["schemas"]["BusinessAccountModel"];
            jobTitle?: string;
            contactInformation?: components["schemas"]["ContactInformation"];
            vatNo?: string;
            registrationNo?: string;
            minimumAmountEl?: string;
            minimumLabelEl?: string;
            minimumChargeTemplate?: components["schemas"]["OneShotChargeTemplate"];
            minimumArticle?: components["schemas"]["AccountingArticle"];
            isCompany?: boolean;
            legalEntityType?: components["schemas"]["Title"];
            /** @enum {string} */
            status?: "ACTIVE" | "CANCELED" | "TERMINATED" | "CLOSED";
            /** Format: date-time */
            statusDate?: string;
            /** Format: date-time */
            subscriptionDate?: string;
            parentUserAccount?: components["schemas"]["UserAccount"];
            userAccounts?: components["schemas"]["UserAccount"][];
            /** Format: date-time */
            terminationDate?: string;
            billingAccount?: components["schemas"]["BillingAccount"];
            subscriptions?: components["schemas"]["Subscription"][];
            wallet?: components["schemas"]["WalletInstance"];
            prepaidWallets?: {
                [key: string]: components["schemas"]["WalletInstance"];
            };
            counters?: {
                [key: string]: components["schemas"]["CounterInstance"];
            };
            terminationReason?: components["schemas"]["SubscriptionTerminationReason"];
            isConsumer?: boolean;
            seller?: components["schemas"]["Seller"];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            parentEntity?: components["schemas"]["BusinessEntity"];
            accountType?: string;
            contactInformationNullSafe?: components["schemas"]["ContactInformation"];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        WFAction: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            uuid: string;
            actionEl: string;
            /** Format: int32 */
            priority?: number;
            conditionEl?: string;
            wfTransition?: components["schemas"]["WFTransition"];
            userGroupCode?: string;
            transient?: boolean;
        };
        WFDecisionRule: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            name: string;
            value: string;
            /** @enum {string} */
            type: "STRING" | "DATE" | "NUMBER" | "RANGE_STRING" | "RANGE_DATE" | "RANGE_NUMBER";
            conditionEl: string;
            model?: boolean;
            wfTransitions?: components["schemas"]["WFTransition"][];
            transient?: boolean;
        };
        WFTransition: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            uuid: string;
            fromStatus?: string;
            toStatus?: string;
            /** Format: int32 */
            priority?: number;
            description: string;
            workflow?: components["schemas"]["Workflow"];
            wfDecisionRules?: components["schemas"]["WFDecisionRule"][];
            wfActions?: components["schemas"]["WFAction"][];
            conditionEl?: string;
            combinedEl?: string;
            transient?: boolean;
        };
        WalletInstance: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            walletTemplate?: components["schemas"]["WalletTemplate"];
            userAccount?: components["schemas"]["UserAccount"];
            /** Format: date-time */
            creditExpiryDate?: string;
            /** Format: date-time */
            nextMatchingDate?: string;
            lowBalanceLevel?: number;
            rejectLevel?: number;
            operations?: components["schemas"]["WalletOperation"][];
            ratedTransactions?: components["schemas"]["RatedTransaction"][];
            prepaid?: boolean;
            /** Format: date-time */
            created?: string;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        WalletOperation: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            code?: string;
            description?: string;
            /** Format: date-time */
            created?: string;
            /** Format: date-time */
            updated?: string;
            wallet?: components["schemas"]["WalletInstance"];
            oldWallet?: components["schemas"]["WalletInstance"];
            /** Format: date-time */
            operationDate?: string;
            /** Format: date-time */
            invoicingDate?: string;
            /** @enum {string} */
            type?: "CREDIT" | "DEBIT";
            chargeInstance?: components["schemas"]["ChargeInstance"];
            currency?: components["schemas"]["Currency"];
            tax: components["schemas"]["Tax"];
            taxPercent: number;
            taxClass?: components["schemas"]["TaxClass"];
            unitAmountWithoutTax?: number;
            unitAmountWithTax?: number;
            unitAmountTax?: number;
            quantity: number;
            amountWithoutTax?: number;
            amountWithTax?: number;
            amountTax?: number;
            counter?: components["schemas"]["CounterInstance"];
            parameter1?: string;
            parameter2?: string;
            parameter3?: string;
            parameterExtra?: string;
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string;
            /** Format: date-time */
            subscriptionDate?: string;
            offerCode?: string;
            seller?: components["schemas"]["Seller"];
            priceplan?: components["schemas"]["PricePlanMatrix"];
            reratedWalletOperation?: components["schemas"]["WalletOperation"];
            refundsWalletOperation?: components["schemas"]["WalletOperation"];
            inputUnitDescription?: string;
            ratingUnitDescription?: string;
            inputUnitOfMeasure?: components["schemas"]["UnitOfMeasure"];
            ratingUnitOfMeasure?: components["schemas"]["UnitOfMeasure"];
            inputQuantity?: number;
            edr?: components["schemas"]["EDR"];
            orderNumber?: string;
            rawAmountWithoutTax?: number;
            rawAmountWithTax?: number;
            invoiceSubCategory?: components["schemas"]["InvoiceSubCategory"];
            subscription?: components["schemas"]["Subscription"];
            serviceInstance?: components["schemas"]["ServiceInstance"];
            billingAccount: components["schemas"]["BillingAccount"];
            userAccount?: components["schemas"]["UserAccount"];
            offerTemplate?: components["schemas"]["OfferTemplate"];
            ratedTransaction?: components["schemas"]["RatedTransaction"];
            /** @enum {string} */
            status?: "OPEN" | "TREATED" | "CANCELED" | "RESERVED" | "F_TO_RERATE" | "TO_RERATE" | "RERATED" | "SCHEDULED" | "REJECTED";
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            uuid: string;
            accountingCode?: components["schemas"]["AccountingCode"];
            fullRatingPeriod?: components["schemas"]["DatePeriod"];
            /** @enum {string} */
            chargeMode?: "ChargeApplicationModeEnum.SUBSCRIPTION" | "ChargeApplicationModeEnum.AGREEMENT" | "ChargeApplicationModeEnum.REIMBURSMENT" | "ChargeApplicationModeEnum.RERATING" | "ChargeApplicationModeEnum.RERATING_REIMBURSEMENT";
            /** Format: int32 */
            sortIndex?: number;
            rejectReason?: string;
            infoOrder?: components["schemas"]["OrderInfo"];
            accountingArticle?: components["schemas"]["AccountingArticle"];
            /** Format: int64 */
            discountedWalletOperation?: number;
            discountPlan?: components["schemas"]["DiscountPlan"];
            discountValue?: number;
            /** @enum {string} */
            discountPlanType?: "PERCENTAGE" | "FIXED";
            discountPlanItem?: components["schemas"]["DiscountPlanItem"];
            discountedAmount?: number;
            /** Format: int32 */
            sequence?: number;
            overrodePrice?: boolean;
            rulesContract?: components["schemas"]["Contract"];
            pricePlanMatrixVersion?: components["schemas"]["PricePlanMatrixVersion"];
            pricePlanMatrixLine?: components["schemas"]["PricePlanMatrixLine"];
            contract?: components["schemas"]["Contract"];
            contractLine?: components["schemas"]["ContractItem"];
            discountedWO?: components["schemas"]["WalletOperation"];
            orderInfo?: components["schemas"]["OrderInfo"];
            applyInAdvance?: boolean;
            unratedClone?: components["schemas"]["WalletOperation"];
            clone?: components["schemas"]["WalletOperation"];
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            transient?: boolean;
        };
        WalletTemplate: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            /** @enum {string} */
            walletType?: "POSTPAID" | "PREPAID";
            consumptionAlertSet?: boolean;
            /** Format: int32 */
            fastRatingLevel?: number;
            lowBalanceLevel?: number;
            rejectLevel?: number;
            lowBalanceLevelEl?: string;
            rejectLevelEl?: string;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        WirePaymentMethod: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            uuid: string;
            cfValues?: components["schemas"]["CustomFieldValues"];
            cfAccumulatedValues?: components["schemas"]["CustomFieldValues"];
            disabled: boolean;
            alias?: string;
            preferred?: boolean;
            customerAccount?: components["schemas"]["CustomerAccount"];
            /** @enum {string} */
            paymentType?: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
            userId?: string;
            info1?: string;
            info2?: string;
            info3?: string;
            info4?: string;
            info5?: string;
            tokenId?: string;
            token3DsId?: string;
            referenceDocument?: components["schemas"]["Document"];
            action?: string;
            expired?: boolean;
            active?: boolean;
            parentCFEntities?: components["schemas"]["ICustomFieldEntity"][];
            cfAccumulatedValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            dirtyCF?: boolean;
            cfvaluesCopy?: components["schemas"]["CustomFieldValues"];
            cfValuesAsValues?: {
                [key: string]: Record<string, never>;
            };
            cfValuesNullSafe?: components["schemas"]["CustomFieldValues"];
            transient?: boolean;
        };
        Workflow: {
            /** Format: int64 */
            id?: number;
            /** Format: int32 */
            version?: number;
            auditable?: components["schemas"]["Auditable"];
            historized?: boolean;
            notified?: boolean;
            auditableFields?: components["schemas"]["AuditableFieldHistory"][];
            code: string;
            description?: string;
            appendGeneratedCode?: boolean;
            disabled: boolean;
            wfType: string;
            transitions?: components["schemas"]["WFTransition"][];
            enableHistory?: boolean;
            active?: boolean;
            parentEntity?: components["schemas"]["BusinessEntity"];
            codeChanged?: boolean;
            descriptionOrCode?: string;
            descriptionAndCode?: string;
            referenceDescription?: string;
            referenceCode?: string;
            transient?: boolean;
        };
        GetListServiceInstanceResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            serviceInstances?: components["schemas"]["ServiceInstanceDto"][];
        };
        SubscriptionPatchDto: {
            offerTemplate?: string;
            newSubscriptionCode?: string;
            terminateOldSubscription: boolean;
            terminationReason?: string;
            /** Format: date-time */
            effectiveDate?: string;
            servicesToInstantiate?: components["schemas"]["ServicesToInstantiateDto"];
            servicesToActivate?: components["schemas"]["ServicesToActivateDto"];
            updateSubscriptionDate?: boolean;
            reengageCustomer?: boolean;
            resetRenewalTerms?: boolean;
            subscriptionCustomFieldsToCopy?: string[];
        };
        RateSubscriptionResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            /** Format: int32 */
            totalRatedCharges?: number;
            ratedChargesResult?: {
                [key: string]: string;
            };
        };
        RateSubscriptionRequestDto: {
            subscriptionCode?: string;
            /** Format: date-time */
            subscriptionValidityDate?: string;
            /** Format: date-time */
            rateUntilDate?: string;
        };
        OperationServicesRequestDto: {
            subscriptionCode: string;
            /** Format: date-time */
            subscriptionValidityDate?: string;
            servicesToUpdate?: components["schemas"]["ServiceToUpdateDto"][];
        };
        ServiceToUpdateDto: {
            /** Format: int64 */
            id?: number;
            code?: string;
            overrideCode?: string;
            description?: string;
            quantity?: number;
            /** Format: date-time */
            actionDate?: string;
            /** Format: date-time */
            endAgreementDate?: string;
            /** Format: date-time */
            terminationDate?: string;
            terminationReason?: string;
            serviceRenewal?: components["schemas"]["SubscriptionRenewalDto"];
            customFields?: components["schemas"]["CustomFieldsDto"];
        };
        OperationSubscriptionRequestDto: {
            subscriptionCode: string;
            /** Format: date-time */
            subscriptionValidityDate?: string;
            /** Format: date-time */
            actionDate?: string;
        };
        OfferRollbackDto: {
            terminationReason: string;
        };
        SubscriptionAndProductsToInstantiateDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            /** Format: int32 */
            versionNumber: number;
            /** Format: int64 */
            nextVersion?: number;
            /** Format: int64 */
            previousVersion?: number;
            userAccount: string;
            offerTemplate: string;
            /** Format: date-time */
            subscriptionDate: string;
            /** Format: date-time */
            terminationDate?: string;
            /** Format: date-time */
            endAgreementDate?: string;
            /** @enum {string} */
            status?: "CREATED" | "ACTIVE" | "CANCELED" | "RESILIATED" | "CLOSED" | "SUSPENDED" | "PENDING";
            /** Format: date-time */
            statusDate?: string;
            /** Format: date-time */
            validityDate?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
            accesses?: components["schemas"]["AccessesDto"];
            productsToInstantiate?: components["schemas"]["ProductToInstantiateDto"][];
            terminationReason?: string;
            orderNumber?: string;
            minimumAmountEl?: string;
            minimumLabelEl?: string;
            minimumInvoiceSubCategory?: string;
            minimumChargeTemplate?: string;
            /** Format: date-time */
            subscribedTillDate?: string;
            renewed?: boolean;
            /** Format: date-time */
            renewalNotifiedDate?: string;
            renewalRule?: components["schemas"]["SubscriptionRenewalDto"];
            billingCycle: string;
            /** @description Seller code */
            seller: string;
            autoEndOfEngagement?: boolean;
            ratingGroup?: string;
            electronicBilling?: boolean;
            email?: string;
            mailingType?: string;
            emailTemplate?: string;
            ccedEmails?: string;
            discountPlansForInstantiation?: components["schemas"]["DiscountPlanDto"][];
            discountPlansForTermination?: string[];
            discountPlanInstances?: components["schemas"]["DiscountPlanInstanceDto"][];
            paymentMethod?: components["schemas"]["PaymentMethodDto"];
            customerService?: string;
            /** @description The sales person name */
            salesPersonName?: string;
            discountPlanInstancesToRemove?: string[];
            /** @description code of existing contract */
            contractCode?: string;
            productToInstantiateDto: components["schemas"]["ProductToInstantiateDto"][];
        };
        SubscriptionAndServicesToActivateRequestDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            /** Format: int32 */
            versionNumber: number;
            /** Format: int64 */
            nextVersion?: number;
            /** Format: int64 */
            previousVersion?: number;
            userAccount: string;
            offerTemplate: string;
            /** Format: date-time */
            subscriptionDate: string;
            /** Format: date-time */
            terminationDate?: string;
            /** Format: date-time */
            endAgreementDate?: string;
            /** @enum {string} */
            status?: "CREATED" | "ACTIVE" | "CANCELED" | "RESILIATED" | "CLOSED" | "SUSPENDED" | "PENDING";
            /** Format: date-time */
            statusDate?: string;
            /** Format: date-time */
            validityDate?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
            accesses?: components["schemas"]["AccessesDto"];
            services?: components["schemas"]["ServiceInstancesDto"];
            products?: components["schemas"]["ProductsDto"];
            productInstances?: components["schemas"]["ProductInstanceDto"][];
            productsToInstantiate?: components["schemas"]["ProductToInstantiateDto"][];
            terminationReason?: string;
            orderNumber?: string;
            minimumAmountEl?: string;
            minimumLabelEl?: string;
            minimumInvoiceSubCategory?: string;
            minimumChargeTemplate?: string;
            /** Format: date-time */
            subscribedTillDate?: string;
            renewed?: boolean;
            /** Format: date-time */
            renewalNotifiedDate?: string;
            renewalRule?: components["schemas"]["SubscriptionRenewalDto"];
            billingCycle: string;
            /** @description Seller code */
            seller: string;
            autoEndOfEngagement?: boolean;
            ratingGroup?: string;
            electronicBilling?: boolean;
            email?: string;
            mailingType?: string;
            emailTemplate?: string;
            ccedEmails?: string;
            discountPlansForInstantiation?: components["schemas"]["DiscountPlanDto"][];
            discountPlansForTermination?: string[];
            discountPlanInstances?: components["schemas"]["DiscountPlanInstanceDto"][];
            paymentMethod?: components["schemas"]["PaymentMethodDto"];
            customerService?: string;
            /** @description The sales person name */
            salesPersonName?: string;
            discountPlanInstancesToRemove?: string[];
            /** @description code of existing contract */
            contractCode?: string;
            servicesToActivateDto?: components["schemas"]["ServicesToActivateDto"];
        };
        TerminateSubscriptionServicesRequestDto: {
            services?: string[];
            serviceIds?: number[];
            subscriptionCode: string;
            /** Format: date-time */
            subscriptionValidityDate?: string;
            terminationReason: string;
            /** Format: date-time */
            terminationDate: string;
            /** @enum {string} */
            action?: "ADD" | "MODIFY" | "DELETE";
        };
        TerminateSubscriptionRequestDto: {
            subscriptionCode: string;
            /** Format: date-time */
            subscriptionValidityDate?: string;
            terminationReason: string;
            /** Format: date-time */
            terminationDate: string;
        };
        UpdateServicesRequestDto: {
            subscriptionCode: string;
            /** Format: date-time */
            subscriptionValidityDate?: string;
            servicesToUpdate?: components["schemas"]["ServiceToUpdateDto"][];
            autoEndOfEngagement?: boolean;
            /** Format: date-time */
            rateUntilDate?: string;
            minimumAmountEl?: string;
            minimumLabelEl?: string;
            attributeInstances?: components["schemas"]["AttributeInstanceDto"][];
        };
        WalletReservationDto: {
            /** Format: int64 */
            reservationId?: number;
            providerCode?: string;
            sellerCode?: string;
            offerCode?: string;
            userAccountCode?: string;
            /** Format: date-time */
            subscriptionDate?: string;
            /** Format: date-time */
            expirationDate?: string;
            /** Format: date-time */
            terminationDate?: string;
            creditLimit?: number;
            param1?: string;
            param2?: string;
            param3?: string;
            amountWithTax?: boolean;
        };
        WalletTemplateDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            /** @enum {string} */
            walletType?: "POSTPAID" | "PREPAID";
            consumptionAlertSet?: boolean;
            /** Format: int32 */
            fastRatingLevel?: number;
            lowBalanceLevel?: number;
            rejectLevel?: number;
            rejectLevelEl?: string;
            lowBalanceLevelEl?: string;
        };
        AmountsDto: {
            amountWithTax?: number;
            amountWithoutTax?: number;
        };
        WalletBalanceResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            amounts?: components["schemas"]["AmountsDto"];
        };
        WalletBalanceDto: {
            sellerCode?: string;
            customerCode?: string;
            customerAccountCode?: string;
            billingAccountCode?: string;
            userAccountCode?: string;
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string;
            walletCode?: string;
            amountWithTax?: boolean;
        };
        FindWalletOperationsResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            walletOperations?: components["schemas"]["WalletOperationDto"][];
        };
        FindWalletOperationsDto: {
            /** @enum {string} */
            status?: "OPEN" | "TREATED" | "CANCELED" | "RESERVED" | "F_TO_RERATE" | "TO_RERATE" | "RERATED" | "SCHEDULED" | "REJECTED";
            walletTemplate?: string;
            userAccount: string;
            /** Format: date-time */
            fromDate?: string;
            /** Format: date-time */
            toDate?: string;
            chargeTemplateCode?: string;
            parameter1?: string;
            parameter2?: string;
            parameter3?: string;
            offerTemplateCode?: string;
            subscriptionCode?: string;
            orderNumber?: string;
        };
        GetWalletTemplateResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            walletTemplate?: components["schemas"]["WalletTemplateDto"];
        };
        BundleProductTemplateDto: {
            productTemplate?: components["schemas"]["ProductTemplateDto"];
            /** Format: int32 */
            quantity?: number;
        };
        BundleTemplateDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            /** Format: date-time */
            validFrom?: string;
            /** Format: date-time */
            validTo?: string;
            /** Format: date-time */
            newValidFrom?: string;
            /** Format: date-time */
            newValidTo?: string;
            name: string;
            offerTemplateCategories?: components["schemas"]["OfferTemplateCategoryDto"][];
            channels?: components["schemas"]["ChannelDto"][];
            attachments?: components["schemas"]["DigitalResourceDto"][];
            modelCode?: string;
            /** @enum {string} */
            lifeCycleStatus: "IN_STUDY" | "IN_DESIGN" | "IN_TEST" | "ACTIVE" | "LAUNCHED" | "RETIRED" | "OBSOLETE" | "REJECTED";
            customFields?: components["schemas"]["CustomFieldsDto"];
            imagePath?: string;
            imageBase64?: string;
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
            longDescription?: string;
            longDescriptionsTranslated?: components["schemas"]["LanguageDescriptionDto"][];
            globalRatingScriptInstance?: string;
            sellers?: string[];
            customerCategories?: components["schemas"]["CustomerCategoryDto"][];
            productChargeTemplates: components["schemas"]["ProductChargeTemplateDto"][];
            businessProductModel?: components["schemas"]["BusinessProductModelDto"];
            walletTemplates?: components["schemas"]["WalletTemplateDto"][];
            bundleProductTemplates: components["schemas"]["BundleProductTemplateDto"][];
            codeOnly?: boolean;
        };
        BusinessProductModelDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            /** @enum {string} */
            license?: "APACHE" | "BSD3_N" | "BSD3_R" | "BSD2_S" | "FREE_BSD" | "GPL" | "AGPL" | "LGPL" | "MIT" | "MOZ" | "CDDL" | "EPL" | "OPEN" | "COM";
            logoPicture?: string;
            logoPictureFile?: string[];
            script?: components["schemas"]["ScriptInstanceDto"];
            moduleItems?: components["schemas"]["BaseEntityDto"][];
            productTemplate: components["schemas"]["ProductTemplateDto"];
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
            codeOnly?: boolean;
            transient?: boolean;
        };
        ChannelDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
        };
        DigitalResourceDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            uri?: string;
            mimeType?: string;
        };
        OfferTemplateCategoryDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            name?: string;
            offerTemplateCategoryCode?: string;
            href?: string;
            /** Format: int32 */
            version?: number;
            /** Format: date-time */
            lastModified?: string;
            active?: boolean;
            /** Format: int64 */
            parentId?: number;
            imagePath?: string;
            imageBase64?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
            languageLabels?: components["schemas"]["LanguageDescriptionDto"][];
        };
        ProductChargeTemplateDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            /** @description The invoice sub category */
            invoiceSubCategory?: string;
            /** @description The amount can be editable */
            amountEditable?: boolean;
            /** @description list of the language description */
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
            inputUnitDescription?: string;
            ratingUnitDescription?: string;
            unitMultiplicator?: number;
            /** @description code of unit  measure */
            inputUnitOfMeasureCode?: string;
            /** @description code of rating unit of measure */
            ratingUnitOfMeasureCode?: string;
            /** @description input unit expression language */
            inputUnitEL?: string;
            /** @description output unit expression language */
            outputUnitEL?: string;
            /**
             * Format: int32
             * @description EDR and WO quantity field value precision
             */
            unitNbDecimal?: number;
            /**
             * @description EDR and WO quantity field value rounding
             * @example possible value are : NEAREST, DOWN, UP
             * @enum {string}
             */
            roundingModeDtoEnum?: "NEAREST" | "DOWN" | "UP" | "HALF_EVEN";
            /** @description The revenue recognition rule code */
            revenueRecognitionRuleCode?: string;
            /** @description The filter expression */
            filterExpression?: string;
            /** @description code of tax class */
            taxClassCode?: string;
            /** @description Expression to determine tax class */
            taxClassEl?: string;
            /** @description Code of a rating script */
            ratingScriptCode?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
            triggeredEdrs?: components["schemas"]["TriggeredEdrTemplatesDto"];
            /** @description Enable/disable removing WO rated to 0 */
            dropZeroWo?: boolean;
            /** @description Sorting index EL */
            sortIndexEl?: string;
            /**
             * @description ChargeTemplate status
             * @enum {string}
             */
            status?: "DRAFT" | "ACTIVE" | "ARCHIVED";
            linkedAttributes?: string[];
            /** @description Internal Note */
            internalNote?: string;
            /** @description Code of quantity attribute */
            quantityAttribute?: string;
            /** @description Applies the contract during rating script execution. */
            applyContractOverRatingScript?: boolean;
        };
        ProductTemplateDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            /** Format: date-time */
            validFrom?: string;
            /** Format: date-time */
            validTo?: string;
            /** Format: date-time */
            newValidFrom?: string;
            /** Format: date-time */
            newValidTo?: string;
            name: string;
            offerTemplateCategories?: components["schemas"]["OfferTemplateCategoryDto"][];
            channels?: components["schemas"]["ChannelDto"][];
            attachments?: components["schemas"]["DigitalResourceDto"][];
            modelCode?: string;
            /** @enum {string} */
            lifeCycleStatus: "IN_STUDY" | "IN_DESIGN" | "IN_TEST" | "ACTIVE" | "LAUNCHED" | "RETIRED" | "OBSOLETE" | "REJECTED";
            customFields?: components["schemas"]["CustomFieldsDto"];
            imagePath?: string;
            imageBase64?: string;
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
            longDescription?: string;
            longDescriptionsTranslated?: components["schemas"]["LanguageDescriptionDto"][];
            globalRatingScriptInstance?: string;
            sellers?: string[];
            customerCategories?: components["schemas"]["CustomerCategoryDto"][];
            productChargeTemplates: components["schemas"]["ProductChargeTemplateDto"][];
            businessProductModel?: components["schemas"]["BusinessProductModelDto"];
            walletTemplates?: components["schemas"]["WalletTemplateDto"][];
            codeOnly?: boolean;
        };
        /** @description list of attributes to display */
        AttributeDTO: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            /**
             * @description Corresponding to minimum one shot charge template code
             * @example possible value are : INFO, LIST_TEXT, LIST_MULTIPLE_TEXT, LIST_NUMERIC, LIST_MULTIPLE_NUMERIC, TEXT, NUMERIC, INTEGER, DATE, CALENDAR, EMAIL, PHONE, TOTAL, COUNT, EXPRESSION_LANGUAGE
             * @enum {string}
             */
            attributeType: "INFO" | "LIST_TEXT" | "LIST_MULTIPLE_TEXT" | "LIST_NUMERIC" | "LIST_MULTIPLE_NUMERIC" | "TEXT" | "NUMERIC" | "INTEGER" | "DATE" | "CALENDAR" | "EMAIL" | "PHONE" | "TOTAL" | "COUNT" | "EXPRESSION_LANGUAGE" | "BOOLEAN";
            /** @description Corresponding to predefined allowed values */
            allowedValues?: string[];
            /**
             * Format: int32
             * @description The lower number, the higher the priority is
             */
            priority?: number;
            /** @description indicate if the attribute is selectable */
            selectable?: boolean;
            /** @description indicate if the attribute is ruled */
            ruled?: boolean;
            /**
             * @description list of charge template code
             * @example chargeTemplateCodes : [CODE_1, CODE_2,..]
             */
            chargeTemplateCodes?: string[];
            /**
             * @description list of commercial rule code
             * @example commercialRuleCodes : [CODE_1, CODE_2,..]
             */
            commercialRuleCodes?: string[];
            /**
             * @description list of media code
             * @example mediaCodes : [CODE_1, CODE_2,..]
             */
            mediaCodes?: string[];
            /**
             * @description list of tag code
             * @example tags : [CODE_1, CODE_2,..]
             */
            tagCodes?: string[];
            /**
             * @description list of assigned attribute code
             * @example assignedAttributeCodes : [CODE_1, CODE_2,..]
             */
            assignedAttributeCodes?: string[];
            /**
             * Format: int32
             * @description number of decimal for attribute if the type of attribute is a NUMBER
             */
            unitNbDecimal?: number;
            customFields?: components["schemas"]["CustomFieldsDto"];
            groupedAttributes?: components["schemas"]["GroupedAttributeDto"][];
            /** @description replaced value */
            assignedValue?: Record<string, never>;
        };
        BusinessOfferModelDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            /** @enum {string} */
            license?: "APACHE" | "BSD3_N" | "BSD3_R" | "BSD2_S" | "FREE_BSD" | "GPL" | "AGPL" | "LGPL" | "MIT" | "MOZ" | "CDDL" | "EPL" | "OPEN" | "COM";
            logoPicture?: string;
            logoPictureFile?: string[];
            script?: components["schemas"]["ScriptInstanceDto"];
            moduleItems?: components["schemas"]["BaseEntityDto"][];
            offerTemplate: components["schemas"]["OfferTemplateDto"];
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
            codeOnly?: boolean;
            transient?: boolean;
        };
        CommercialRuleHeaderDTO: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            /**
             * @description rule type
             * @example possible value are : PRE_REQUISITE, INCOMPATIBILITY, REPLACEMENT
             * @enum {string}
             */
            ruleType?: "PRE_REQUISITE" | "INCOMPATIBILITY" | "REPLACEMENT";
            /** @description rule expression language */
            ruleEl?: string;
            /** @description code offer of template */
            offerCode?: string;
            /** @description code product */
            productCode?: string;
            /**
             * Format: int32
             * @description product version
             */
            productVersion?: number;
            /** @description code of attribute */
            attributeCode?: string;
            /**
             * @description commercial rule scope
             * @enum {string}
             */
            scope?: "QUOTE" | "QUOTE_OFFER";
            /** @description code tag */
            tagCode?: string;
            /** @description code of grouped attribute */
            groupedAttributeCode?: string;
            /** @description target attribute value */
            targetAttributeValue?: string;
            /** @description is commercial rule header is the target, default value is True */
            isTarget?: boolean;
            /** @description is commercial rule disabled, default value is false */
            disabled?: boolean;
            /** @description list of commercial rule item */
            commercialRuleItems?: components["schemas"]["CommercialRuleItemDTO"][];
        };
        /** @description list of commercial rule item */
        CommercialRuleItemDTO: {
            /**
             * @description operator for commercial rule, default value is AND
             * @example AND, OR
             * @enum {string}
             */
            operator?: "AND" | "OR";
            /** @description rule item expression language */
            ruleItemEl?: string;
            /** @description list of commercial rule line */
            commercialRuleLines?: components["schemas"]["CommercialRuleLineDTO"][];
        };
        /** @description list of commercial rule line */
        CommercialRuleLineDTO: {
            /** @description offer code associated to commercial rule line */
            offerCode?: string;
            /** @description product code */
            productCode?: string;
            /**
             * Format: int32
             * @description product version
             */
            productVersion?: number;
            /** @description attribute code */
            attributeCode?: string;
            /** @description grouped attribute code */
            groupedAttributeCode?: string;
            /** @description value of the attribute */
            attributeValue?: string;
            /** @description value of grouped attribute */
            groupedAttributeValue?: string;
            /** @description tag code */
            tagCode?: string;
            /**
             * @description operator for commercial rule line
             * @example possible value are : GREATER_THAN, LESS_THAN, EQUAL, GREATER_THAN_OR_EQUAL, LESS_THAN_OR_EQUAL, NOT_EQUAL, EXISTS
             * @enum {string}
             */
            operator?: "GREATER_THAN" | "LESS_THAN" | "EQUAL" | "GREATER_THAN_OR_EQUAL" | "LESS_THAN_OR_EQUAL" | "NOT_EQUAL" | "EXISTS" | "CONTAINS" | "NOT_CONTAINS";
        };
        CounterTemplatesDto: {
            counterTemplate?: string[];
        };
        DocumentDto: {
            fileName?: string;
            fileType?: string;
            creationDate?: string;
        };
        GroupedAttributeDto: {
            /**
             * Format: int64
             * @description id of the grouped attribute
             */
            id?: number;
            /** @description code of groupped attribute */
            code: string;
            /** @description description of the groupped attribute */
            description?: string;
            /** @description list of attributes to display */
            attributes?: components["schemas"]["AttributeDTO"][];
            /** @description list of code of attribute for adding to a groupped attribute */
            attributeCodes?: string[];
            /** @description indicate if the groupped attribute should display */
            display?: boolean;
            /** @description indicate if the groupped attribute should be disable */
            disabled?: boolean;
            /** @description indicate if the groupped attribute should be mandatory */
            mandatory?: boolean;
            /** @description indicate if the groupped attribute is selectable, the default value is true */
            selectable?: boolean;
            /** @description indicate if the groupped attribute is ruled, the default value is false */
            ruled?: boolean;
            /** @description list of code of commercial rule */
            commercialRuleCodes?: string[];
            customFields?: components["schemas"]["CustomFieldsDto"];
            /** Format: int32 */
            sequence?: number;
        };
        MediaDto: {
            /**
             * Format: int64
             * @description id of media
             */
            id?: number;
            /** @description code of the media */
            code?: string;
            /** @description description */
            description?: string;
            /** @description name of the media */
            mediaName: string;
            /** @description label of the media */
            label: string;
            /** @description indicate that the media is main */
            main: boolean;
            /**
             * @description type of the media
             * @example possible value are : IMAGE, VIDEO
             * @enum {string}
             */
            mediaType: "IMAGE" | "VIDEO" | "PDF";
            /** @description the path of the media */
            mediaPath?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
        };
        OfferProductTemplateDto: {
            productTemplate?: components["schemas"]["ProductTemplateDto"];
            mandatory?: boolean;
        };
        OfferProductsDto: {
            /** @description code of offer template */
            offerTemplateCode: string;
            product?: components["schemas"]["ProductDto"];
            /** @description list of allowed discount plan */
            allowedDiscountPlans?: components["schemas"]["DiscountPlanDto"][];
            /** @description list of commercial rules */
            commercialRules?: components["schemas"]["CommercialRuleHeaderDTO"][];
            /**
             * @description indicate if offer product is selectable
             * @default true
             */
            selectable: boolean;
            /**
             * Format: int32
             * @description sequence
             */
            sequence?: number;
            /**
             * @description indicated if offer product is ruled
             * @default false
             */
            ruled: boolean;
            /**
             * @description indicate of the offer product is mandatory
             * @default false
             */
            mandatory: boolean;
            /**
             * @description indicate if the offer product can be displayed
             * @default true
             */
            display: boolean;
            /**
             * Format: int32
             * @description minimun quantity
             */
            quantityMin?: number;
            /**
             * Format: int32
             * @description maximun quantity
             */
            quantityMax?: number;
            /**
             * Format: int32
             * @description default quantity
             */
            quantityDefault?: number;
            /** @description product set regroup product in the pack */
            productSet?: string;
        };
        OfferServiceTemplateDto: {
            serviceTemplate?: components["schemas"]["ServiceTemplateDto"];
            mandatory?: boolean;
            incompatibleServices?: components["schemas"]["ServiceTemplateDto"][];
        };
        OfferTemplateDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            /** Format: date-time */
            validFrom?: string;
            /** Format: date-time */
            validTo?: string;
            /** Format: date-time */
            newValidFrom?: string;
            /** Format: date-time */
            newValidTo?: string;
            name: string;
            offerTemplateCategories?: components["schemas"]["OfferTemplateCategoryDto"][];
            channels?: components["schemas"]["ChannelDto"][];
            attachments?: components["schemas"]["DigitalResourceDto"][];
            modelCode?: string;
            /** @enum {string} */
            lifeCycleStatus: "IN_STUDY" | "IN_DESIGN" | "IN_TEST" | "ACTIVE" | "LAUNCHED" | "RETIRED" | "OBSOLETE" | "REJECTED";
            customFields?: components["schemas"]["CustomFieldsDto"];
            imagePath?: string;
            imageBase64?: string;
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
            longDescription?: string;
            longDescriptionsTranslated?: components["schemas"]["LanguageDescriptionDto"][];
            globalRatingScriptInstance?: string;
            sellers?: string[];
            customerCategories?: components["schemas"]["CustomerCategoryDto"][];
            /** @description the bom code */
            bomCode?: string;
            offerTemplateCategoryCode?: string;
            /** @description list of the offer service templates */
            offerServiceTemplates?: components["schemas"]["OfferServiceTemplateDto"][];
            offerProductTemplates?: components["schemas"]["OfferProductTemplateDto"][];
            /** @description list of The offer component */
            offerProducts?: components["schemas"]["OfferProductsDto"][];
            /** @description list of The offer product template */
            allowedDiscountPlans?: components["schemas"]["DiscountPlanDto"][];
            /** @description list of attributes */
            offerAttributes?: components["schemas"]["ProductVersionAttributeDTO"][];
            attributes?: components["schemas"]["AttributeDTO"][];
            /** @description list of codes of commercial rules */
            commercialRuleCodes?: string[];
            /** @description list of the codes media */
            mediaCodes?: string[];
            /** @description list of allowed offer change */
            allowedOfferChange?: string[];
            renewalRule?: components["schemas"]["SubscriptionRenewalDto"];
            /** @description Expression to determine minimum amount value */
            minimumAmountEl?: string;
            /** @description Expression to determine labe value */
            minimumLabelEl?: string;
            /** @description Corresponding to minimum invoice subcategory */
            minimumInvoiceSubCategory?: string;
            /** @description indicate end of engagement */
            autoEndOfEngagement?: boolean;
            /** @description Corresponding to minimum one shot charge template code */
            minimumChargeTemplate?: string;
            /** @description list of tag code */
            tagCodes?: string[];
            /**
             * Format: date-time
             * @description last update status datetime
             */
            statusDate?: string;
            /** @description allowing to create,update and delete an offer from a model */
            isModel?: boolean;
            /** @description Offer template code */
            offerModelCode?: string;
            /** @description allow to generate each edr per product */
            generateQuoteEdrPerProduct?: boolean;
            offerChangeRestricted?: boolean;
            documentDto?: components["schemas"]["DocumentDto"];
            codeOnly?: boolean;
        };
        /** @description List product charge template mapping */
        ProductChargeTemplateMappingDto: {
            /** @description The charge code */
            chargeCode?: string;
            /** @description The product code */
            productCode?: string;
            /** @description The counter code */
            counterCode?: string;
            /** @description List of accumulator counter codes */
            accumulatorCounterCodes?: string[];
        };
        /** @description List of the attribute */
        ProductVersionAttributeDTO: {
            /**
             * Format: int64
             * @description attribute id
             */
            id?: number;
            /** @description Code of attribute */
            code?: string;
            /** @description description */
            description?: string;
            /** @description description */
            disabled?: boolean;
            /**
             * @description Corresponding to minimum one shot charge template code
             * @example possible value are : INFO, LIST_TEXT, LIST_MULTIPLE_TEXT, LIST_NUMERIC, LIST_MULTIPLE_NUMERIC, TEXT, NUMERIC, INTEGER, DATE, CALENDAR, EMAIL, PHONE, TOTAL, COUNT, EXPRESSION_LANGUAGE
             * @enum {string}
             */
            attributeType?: "INFO" | "LIST_TEXT" | "LIST_MULTIPLE_TEXT" | "LIST_NUMERIC" | "LIST_MULTIPLE_NUMERIC" | "TEXT" | "NUMERIC" | "INTEGER" | "DATE" | "CALENDAR" | "EMAIL" | "PHONE" | "TOTAL" | "COUNT" | "EXPRESSION_LANGUAGE" | "BOOLEAN";
            /** @description Corresponding to predefined allowed values */
            allowedValues?: string[];
            /** @description diplay the attribute */
            display?: boolean;
            /** @description indicate if the attribute is mandatory */
            mandatory: boolean;
            /** @description indicate if the attribute is selectable */
            selectable?: boolean;
            /** @description indicate if the attribute is ruled */
            ruled?: boolean;
            /**
             * Format: int32
             * @description number of decimal for attribute if the type of attribute is a NUMBER
             */
            unitNbDecimal?: number;
            /** @description indicate if the attribute is read only */
            readOnly?: boolean;
            /** @description Code of attribute */
            attributeCode: string;
            /**
             * Format: int32
             * @description attribute order in the GUI
             */
            sequence?: number;
            /** @description Indicate if the attribute has a mandatory EL */
            mandatoryWithEl?: string;
            /** @description default value for attribute */
            defaultValue?: string;
            /**
             * @description Validation type
             * @example Possible value are: EL, REGEX
             * @enum {string}
             */
            validationType?: "REGEX" | "EL";
            /** @description Validation pattern */
            validationPattern?: string;
            /** @description Validation label */
            validationLabel?: string;
            /**
             * @description list of commercial rule code
             * @example commercialRuleCodes : [CODE_1, CODE_2,..]
             */
            commercialRuleCodes?: string[];
            /** @description replaced value */
            assignedValue?: Record<string, never>;
            /**
             * @description list of charge template code
             * @example chargeTemplateCodes : [CODE_1, CODE_2,..]
             */
            chargeTemplateCodes?: string[];
            /**
             * Format: int32
             * @description The lower number, the higher the priority is
             */
            priority?: number;
            /**
             * @description list of media code
             * @example mediaCodes : [CODE_1, CODE_2,..]
             */
            mediaCodes?: string[];
            /**
             * @description list of tag code
             * @example tags : [CODE_1, CODE_2,..]
             */
            tagCodes?: string[];
            /**
             * @description list of assigned attribute code
             * @example assignedAttributeCodes : [CODE_1, CODE_2,..]
             */
            assignedAttributeCodes?: string[];
            customFields?: components["schemas"]["CustomFieldsDto"];
            /** @description grouped attributes */
            groupedAttributes?: components["schemas"]["GroupedAttributeDto"][];
        };
        /** @description Current product version for product */
        ProductVersionDto: {
            /** @description The short description of the product version */
            shortDescription: string;
            /** @description The product code */
            productCode: string;
            /**
             * Format: int32
             * @description The current version of the product
             */
            currentVersion: number;
            /**
             * @description The status of the product version
             * @enum {string}
             */
            status?: "DRAFT" | "PUBLISHED" | "CLOSED";
            /**
             * Format: date-time
             * @description The statusDate : is set automatically when the status was changed
             */
            statusDate?: string;
            /** @description The long description */
            longDescription?: string;
            validity?: components["schemas"]["DatePeriod"];
            /** @description List of the attribute */
            productAttributes?: components["schemas"]["ProductVersionAttributeDTO"][];
            /** @description List of the grouped attribute codes */
            groupedAttributeCodes?: string[];
            /** @description List of tag codes */
            tagCodes?: string[];
        };
        ServiceChargeTemplateRecurringDto: {
            code?: string;
            wallets?: components["schemas"]["WalletsDto"];
            counterTemplate?: string;
            accumulatorCounterTemplates?: components["schemas"]["CounterTemplatesDto"];
        };
        ServiceChargeTemplateRecurringsDto: {
            serviceChargeTemplateRecurring?: components["schemas"]["ServiceChargeTemplateRecurringDto"][];
        };
        ServiceChargeTemplateSubscriptionDto: {
            code?: string;
            wallets?: components["schemas"]["WalletsDto"];
            counterTemplate?: string;
            accumulatorCounterTemplates?: components["schemas"]["CounterTemplatesDto"];
        };
        ServiceChargeTemplateSubscriptionsDto: {
            serviceChargeTemplateSubscription?: components["schemas"]["ServiceChargeTemplateSubscriptionDto"][];
        };
        ServiceChargeTemplateTerminationDto: {
            code?: string;
            wallets?: components["schemas"]["WalletsDto"];
            counterTemplate?: string;
            accumulatorCounterTemplates?: components["schemas"]["CounterTemplatesDto"];
        };
        ServiceChargeTemplateTerminationsDto: {
            serviceChargeTemplateTermination?: components["schemas"]["ServiceChargeTemplateTerminationDto"][];
        };
        ServiceChargeTemplateUsagesDto: {
            serviceChargeTemplateUsage?: components["schemas"]["ServiceUsageChargeTemplateDto"][];
        };
        ServiceTemplateDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            longDescription?: string;
            invoicingCalendar?: string;
            serviceChargeTemplateRecurrings?: components["schemas"]["ServiceChargeTemplateRecurringsDto"];
            serviceChargeTemplateSubscriptions?: components["schemas"]["ServiceChargeTemplateSubscriptionsDto"];
            serviceChargeTemplateTerminations?: components["schemas"]["ServiceChargeTemplateTerminationsDto"];
            serviceChargeTemplateUsages?: components["schemas"]["ServiceChargeTemplateUsagesDto"];
            customFields?: components["schemas"]["CustomFieldsDto"];
            mandatory?: boolean;
            somCode?: string;
            imagePath?: string;
            imageBase64?: string;
            minimumAmountEl?: string;
            minimumLabelEl?: string;
            minimumInvoiceSubCategory?: string;
            autoEndOfEngagement?: boolean;
            minimumChargeTemplate?: string;
            renewalRule?: components["schemas"]["SubscriptionRenewalDto"];
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
            groupedServiceCode?: string;
            values?: Record<string, never>[];
            valueValidator?: string;
            serviceTypeCode?: string;
            display?: boolean;
            param?: string;
            medias?: components["schemas"]["MediaDto"][];
            codeOnly?: boolean;
        };
        ServiceUsageChargeTemplateDto: {
            code?: string;
            wallets?: components["schemas"]["WalletsDto"];
            counterTemplate?: string;
            accumulatorCounterTemplates?: components["schemas"]["CounterTemplatesDto"];
        };
        WalletsDto: {
            wallet?: string[];
        };
        GetBusinessOfferModelResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            businessOfferModel?: components["schemas"]["BusinessOfferModelDto"];
        };
        GetBusinessProductModelResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            businessProductModel?: components["schemas"]["BusinessProductModelDto"];
        };
        BusinessServiceModelDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            /** @enum {string} */
            license?: "APACHE" | "BSD3_N" | "BSD3_R" | "BSD2_S" | "FREE_BSD" | "GPL" | "AGPL" | "LGPL" | "MIT" | "MOZ" | "CDDL" | "EPL" | "OPEN" | "COM";
            logoPicture?: string;
            logoPictureFile?: string[];
            script?: components["schemas"]["ScriptInstanceDto"];
            moduleItems?: components["schemas"]["BaseEntityDto"][];
            serviceTemplate: components["schemas"]["ServiceTemplateDto"];
            duplicateService?: boolean;
            duplicatePricePlan?: boolean;
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
            codeOnly?: boolean;
            transient?: boolean;
        };
        GetBusinessServiceModelResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            businessServiceModel?: components["schemas"]["BusinessServiceModelDto"];
        };
        GetChannelResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            channel?: components["schemas"]["ChannelDto"];
        };
        GetListChannelsAndSegmentsResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            channels?: components["schemas"]["ChannelDto"][];
            segments?: components["schemas"]["OfferTemplateCategoryDto"][];
        };
        ChargeTemplateDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            /** @description The invoice sub category */
            invoiceSubCategory?: string;
            /** @description The amount can be editable */
            amountEditable?: boolean;
            /** @description list of the language description */
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
            inputUnitDescription?: string;
            ratingUnitDescription?: string;
            unitMultiplicator?: number;
            /** @description code of unit  measure */
            inputUnitOfMeasureCode?: string;
            /** @description code of rating unit of measure */
            ratingUnitOfMeasureCode?: string;
            /** @description input unit expression language */
            inputUnitEL?: string;
            /** @description output unit expression language */
            outputUnitEL?: string;
            /**
             * Format: int32
             * @description EDR and WO quantity field value precision
             */
            unitNbDecimal?: number;
            /**
             * @description EDR and WO quantity field value rounding
             * @example possible value are : NEAREST, DOWN, UP
             * @enum {string}
             */
            roundingModeDtoEnum?: "NEAREST" | "DOWN" | "UP" | "HALF_EVEN";
            /** @description The revenue recognition rule code */
            revenueRecognitionRuleCode?: string;
            /** @description The filter expression */
            filterExpression?: string;
            /** @description code of tax class */
            taxClassCode?: string;
            /** @description Expression to determine tax class */
            taxClassEl?: string;
            /** @description Code of a rating script */
            ratingScriptCode?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
            triggeredEdrs?: components["schemas"]["TriggeredEdrTemplatesDto"];
            /** @description Enable/disable removing WO rated to 0 */
            dropZeroWo?: boolean;
            /** @description Sorting index EL */
            sortIndexEl?: string;
            /**
             * @description ChargeTemplate status
             * @enum {string}
             */
            status?: "DRAFT" | "ACTIVE" | "ARCHIVED";
            linkedAttributes?: string[];
            /** @description Internal Note */
            internalNote?: string;
            /** @description Code of quantity attribute */
            quantityAttribute?: string;
            /** @description Applies the contract during rating script execution. */
            applyContractOverRatingScript?: boolean;
        };
        GetChargeTemplateResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            chargeTemplate?: components["schemas"]["ChargeTemplateDto"];
        };
        CounterTemplateDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            calendar?: string;
            calendarCodeEl?: string;
            unity?: string;
            /** @enum {string} */
            type?: "USAGE" | "NOTIFICATION" | "USAGE_AMOUNT";
            ceiling?: number;
            /** @enum {string} */
            counterLevel?: "SI" | "SU" | "UA" | "BA" | "CA" | "CUST";
            ceilingExpressionEl?: string;
            notificationLevels?: string;
            accumulator?: boolean;
            /** @enum {string} */
            accumulatorType?: "MULTI_VALUE" | "SINGLE_VALUE";
            filterEl?: string;
            keyEl?: string;
            valueEl?: string;
        };
        GetCounterTemplateResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            counterTemplate?: components["schemas"]["CounterTemplateDto"];
        };
        CounterTemplatesResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            counterTemplates?: components["schemas"]["CounterTemplateDto"][];
        };
        DiscountPlanItemResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            discountPlanItem?: components["schemas"]["DiscountPlanItemDto"];
        };
        DiscountPlanItemsResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            discountPlanItems?: components["schemas"]["DiscountPlanItemDto"][];
        };
        DiscountPlansDto: {
            discountPlan?: components["schemas"]["DiscountPlanDto"][];
        };
        GetDiscountPlansResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            discountPlan?: components["schemas"]["DiscountPlansDto"];
        };
        GetDiscountPlanResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            discountPlanDto?: components["schemas"]["DiscountPlanDto"];
        };
        GetOfferTemplateCategoryResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            offerTemplateCategory?: components["schemas"]["OfferTemplateCategoryDto"];
        };
        OfferTemplateCategoriesResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            offerTemplateCategories?: components["schemas"]["OfferTemplateCategoryDto"][];
        };
        GetOfferTemplateResponseDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            /** Format: date-time */
            validFrom?: string;
            /** Format: date-time */
            validTo?: string;
            /** Format: date-time */
            newValidFrom?: string;
            /** Format: date-time */
            newValidTo?: string;
            name: string;
            offerTemplateCategories?: components["schemas"]["OfferTemplateCategoryDto"][];
            channels?: components["schemas"]["ChannelDto"][];
            attachments?: components["schemas"]["DigitalResourceDto"][];
            modelCode?: string;
            /** @enum {string} */
            lifeCycleStatus: "IN_STUDY" | "IN_DESIGN" | "IN_TEST" | "ACTIVE" | "LAUNCHED" | "RETIRED" | "OBSOLETE" | "REJECTED";
            customFields?: components["schemas"]["CustomFieldsDto"];
            imagePath?: string;
            imageBase64?: string;
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
            longDescription?: string;
            longDescriptionsTranslated?: components["schemas"]["LanguageDescriptionDto"][];
            globalRatingScriptInstance?: string;
            sellers?: string[];
            customerCategories?: components["schemas"]["CustomerCategoryDto"][];
            /** @description the bom code */
            bomCode?: string;
            offerTemplateCategoryCode?: string;
            /** @description list of the offer service templates */
            offerServiceTemplates?: components["schemas"]["OfferServiceTemplateDto"][];
            offerProductTemplates?: components["schemas"]["OfferProductTemplateDto"][];
            /** @description list of The offer component */
            offerProducts?: components["schemas"]["OfferProductsDto"][];
            /** @description list of The offer product template */
            allowedDiscountPlans?: components["schemas"]["DiscountPlanDto"][];
            /** @description list of attributes */
            offerAttributes?: components["schemas"]["ProductVersionAttributeDTO"][];
            attributes?: components["schemas"]["AttributeDTO"][];
            /** @description list of codes of commercial rules */
            commercialRuleCodes?: string[];
            /** @description list of allowed offer change */
            allowedOfferChange?: string[];
            renewalRule?: components["schemas"]["SubscriptionRenewalDto"];
            /** @description Expression to determine minimum amount value */
            minimumAmountEl?: string;
            /** @description Expression to determine labe value */
            minimumLabelEl?: string;
            /** @description Corresponding to minimum invoice subcategory */
            minimumInvoiceSubCategory?: string;
            /** @description indicate end of engagement */
            autoEndOfEngagement?: boolean;
            /** @description Corresponding to minimum one shot charge template code */
            minimumChargeTemplate?: string;
            /**
             * Format: date-time
             * @description last update status datetime
             */
            statusDate?: string;
            /** @description allowing to create,update and delete an offer from a model */
            isModel?: boolean;
            /** @description Offer template code */
            offerModelCode?: string;
            /** @description allow to generate each edr per product */
            generateQuoteEdrPerProduct?: boolean;
            offerTemplate?: components["schemas"]["OfferTemplateDto"];
            tags?: components["schemas"]["TagDto"][];
            actionStatus?: components["schemas"]["ActionStatus"];
            offerChangeRestricted?: boolean;
            documentDto?: components["schemas"]["DocumentDto"];
            codeOnly?: boolean;
        };
        MissingParameterException: {
            cause?: {
                stackTrace?: {
                    classLoaderName?: string;
                    moduleName?: string;
                    moduleVersion?: string;
                    methodName?: string;
                    fileName?: string;
                    /** Format: int32 */
                    lineNumber?: number;
                    className?: string;
                    nativeMethod?: boolean;
                }[];
                message?: string;
                suppressed?: {
                    stackTrace?: {
                        classLoaderName?: string;
                        moduleName?: string;
                        moduleVersion?: string;
                        methodName?: string;
                        fileName?: string;
                        /** Format: int32 */
                        lineNumber?: number;
                        className?: string;
                        nativeMethod?: boolean;
                    }[];
                    message?: string;
                    localizedMessage?: string;
                }[];
                localizedMessage?: string;
            };
            stackTrace?: {
                classLoaderName?: string;
                moduleName?: string;
                moduleVersion?: string;
                methodName?: string;
                fileName?: string;
                /** Format: int32 */
                lineNumber?: number;
                className?: string;
                nativeMethod?: boolean;
            }[];
            errorCode?: components["schemas"]["ApiErrorCodeEnum"];
            message?: string;
            suppressed?: {
                stackTrace?: {
                    classLoaderName?: string;
                    moduleName?: string;
                    moduleVersion?: string;
                    methodName?: string;
                    fileName?: string;
                    /** Format: int32 */
                    lineNumber?: number;
                    className?: string;
                    nativeMethod?: boolean;
                }[];
                message?: string;
                localizedMessage?: string;
            }[];
            localizedMessage?: string;
        };
        EntityDoesNotExistsException: {
            cause?: {
                stackTrace?: {
                    classLoaderName?: string;
                    moduleName?: string;
                    moduleVersion?: string;
                    methodName?: string;
                    fileName?: string;
                    /** Format: int32 */
                    lineNumber?: number;
                    className?: string;
                    nativeMethod?: boolean;
                }[];
                message?: string;
                suppressed?: {
                    stackTrace?: {
                        classLoaderName?: string;
                        moduleName?: string;
                        moduleVersion?: string;
                        methodName?: string;
                        fileName?: string;
                        /** Format: int32 */
                        lineNumber?: number;
                        className?: string;
                        nativeMethod?: boolean;
                    }[];
                    message?: string;
                    localizedMessage?: string;
                }[];
                localizedMessage?: string;
            };
            stackTrace?: {
                classLoaderName?: string;
                moduleName?: string;
                moduleVersion?: string;
                methodName?: string;
                fileName?: string;
                /** Format: int32 */
                lineNumber?: number;
                className?: string;
                nativeMethod?: boolean;
            }[];
            errorCode?: components["schemas"]["ApiErrorCodeEnum"];
            message?: string;
            suppressed?: {
                stackTrace?: {
                    classLoaderName?: string;
                    moduleName?: string;
                    moduleVersion?: string;
                    methodName?: string;
                    fileName?: string;
                    /** Format: int32 */
                    lineNumber?: number;
                    className?: string;
                    nativeMethod?: boolean;
                }[];
                message?: string;
                localizedMessage?: string;
            }[];
            localizedMessage?: string;
        };
        BusinessException: {
            cause?: {
                stackTrace?: {
                    classLoaderName?: string;
                    moduleName?: string;
                    moduleVersion?: string;
                    methodName?: string;
                    fileName?: string;
                    /** Format: int32 */
                    lineNumber?: number;
                    className?: string;
                    nativeMethod?: boolean;
                }[];
                message?: string;
                suppressed?: {
                    stackTrace?: {
                        classLoaderName?: string;
                        moduleName?: string;
                        moduleVersion?: string;
                        methodName?: string;
                        fileName?: string;
                        /** Format: int32 */
                        lineNumber?: number;
                        className?: string;
                        nativeMethod?: boolean;
                    }[];
                    message?: string;
                    localizedMessage?: string;
                }[];
                localizedMessage?: string;
            };
            stackTrace?: {
                classLoaderName?: string;
                moduleName?: string;
                moduleVersion?: string;
                methodName?: string;
                fileName?: string;
                /** Format: int32 */
                lineNumber?: number;
                className?: string;
                nativeMethod?: boolean;
            }[];
            errorContext?: {
                [key: string]: Record<string, never>;
            };
            message?: string;
            suppressed?: {
                stackTrace?: {
                    classLoaderName?: string;
                    moduleName?: string;
                    moduleVersion?: string;
                    methodName?: string;
                    fileName?: string;
                    /** Format: int32 */
                    lineNumber?: number;
                    className?: string;
                    nativeMethod?: boolean;
                }[];
                message?: string;
                localizedMessage?: string;
            }[];
            localizedMessage?: string;
        };
        ProductOfferTemplateDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            /** Format: date-time */
            validFrom?: string;
            /** Format: date-time */
            validTo?: string;
            products: components["schemas"]["OfferProductsDto"][];
        };
        EntityAlreadyExistsException: {
            cause?: {
                stackTrace?: {
                    classLoaderName?: string;
                    moduleName?: string;
                    moduleVersion?: string;
                    methodName?: string;
                    fileName?: string;
                    /** Format: int32 */
                    lineNumber?: number;
                    className?: string;
                    nativeMethod?: boolean;
                }[];
                message?: string;
                suppressed?: {
                    stackTrace?: {
                        classLoaderName?: string;
                        moduleName?: string;
                        moduleVersion?: string;
                        methodName?: string;
                        fileName?: string;
                        /** Format: int32 */
                        lineNumber?: number;
                        className?: string;
                        nativeMethod?: boolean;
                    }[];
                    message?: string;
                    localizedMessage?: string;
                }[];
                localizedMessage?: string;
            };
            stackTrace?: {
                classLoaderName?: string;
                moduleName?: string;
                moduleVersion?: string;
                methodName?: string;
                fileName?: string;
                /** Format: int32 */
                lineNumber?: number;
                className?: string;
                nativeMethod?: boolean;
            }[];
            errorCode?: components["schemas"]["ApiErrorCodeEnum"];
            message?: string;
            suppressed?: {
                stackTrace?: {
                    classLoaderName?: string;
                    moduleName?: string;
                    moduleVersion?: string;
                    methodName?: string;
                    fileName?: string;
                    /** Format: int32 */
                    lineNumber?: number;
                    className?: string;
                    nativeMethod?: boolean;
                }[];
                message?: string;
                localizedMessage?: string;
            }[];
            localizedMessage?: string;
        };
        InvalidParameterException: {
            cause?: {
                stackTrace?: {
                    classLoaderName?: string;
                    moduleName?: string;
                    moduleVersion?: string;
                    methodName?: string;
                    fileName?: string;
                    /** Format: int32 */
                    lineNumber?: number;
                    className?: string;
                    nativeMethod?: boolean;
                }[];
                message?: string;
                suppressed?: {
                    stackTrace?: {
                        classLoaderName?: string;
                        moduleName?: string;
                        moduleVersion?: string;
                        methodName?: string;
                        fileName?: string;
                        /** Format: int32 */
                        lineNumber?: number;
                        className?: string;
                        nativeMethod?: boolean;
                    }[];
                    message?: string;
                    localizedMessage?: string;
                }[];
                localizedMessage?: string;
            };
            stackTrace?: {
                classLoaderName?: string;
                moduleName?: string;
                moduleVersion?: string;
                methodName?: string;
                fileName?: string;
                /** Format: int32 */
                lineNumber?: number;
                className?: string;
                nativeMethod?: boolean;
            }[];
            errorCode?: components["schemas"]["ApiErrorCodeEnum"];
            message?: string;
            suppressed?: {
                stackTrace?: {
                    classLoaderName?: string;
                    moduleName?: string;
                    moduleVersion?: string;
                    methodName?: string;
                    fileName?: string;
                    /** Format: int32 */
                    lineNumber?: number;
                    className?: string;
                    nativeMethod?: boolean;
                }[];
                message?: string;
                localizedMessage?: string;
            }[];
            localizedMessage?: string;
        };
        InvalidImageData: {
            cause?: {
                stackTrace?: {
                    classLoaderName?: string;
                    moduleName?: string;
                    moduleVersion?: string;
                    methodName?: string;
                    fileName?: string;
                    /** Format: int32 */
                    lineNumber?: number;
                    className?: string;
                    nativeMethod?: boolean;
                }[];
                message?: string;
                suppressed?: {
                    stackTrace?: {
                        classLoaderName?: string;
                        moduleName?: string;
                        moduleVersion?: string;
                        methodName?: string;
                        fileName?: string;
                        /** Format: int32 */
                        lineNumber?: number;
                        className?: string;
                        nativeMethod?: boolean;
                    }[];
                    message?: string;
                    localizedMessage?: string;
                }[];
                localizedMessage?: string;
            };
            stackTrace?: {
                classLoaderName?: string;
                moduleName?: string;
                moduleVersion?: string;
                methodName?: string;
                fileName?: string;
                /** Format: int32 */
                lineNumber?: number;
                className?: string;
                nativeMethod?: boolean;
            }[];
            errorCode?: components["schemas"]["ApiErrorCodeEnum"];
            message?: string;
            suppressed?: {
                stackTrace?: {
                    classLoaderName?: string;
                    moduleName?: string;
                    moduleVersion?: string;
                    methodName?: string;
                    fileName?: string;
                    /** Format: int32 */
                    lineNumber?: number;
                    className?: string;
                    nativeMethod?: boolean;
                }[];
                message?: string;
                localizedMessage?: string;
            }[];
            localizedMessage?: string;
        };
        GetListOfferTemplateResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            offerTemplates?: components["schemas"]["OfferTemplateDto"][];
        };
        CpqOfferDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            bomCode?: string;
            offerServiceTemplates?: components["schemas"]["OfferServiceTemplateDto"][];
            offerProducts?: components["schemas"]["OfferProductsDto"][];
            allowedDiscountPlans?: components["schemas"]["DiscountPlanDto"][];
            tags?: components["schemas"]["TagDto"][];
            attributes?: components["schemas"]["ProductVersionAttributeDTO"][];
            /** Format: date-time */
            validFrom?: string;
            /** Format: date-time */
            validTo?: string;
            name: string;
            attachments?: components["schemas"]["DigitalResourceDto"][];
            /** @enum {string} */
            lifeCycleStatus: "IN_STUDY" | "IN_DESIGN" | "IN_TEST" | "ACTIVE" | "LAUNCHED" | "RETIRED" | "OBSOLETE" | "REJECTED";
            customFields?: components["schemas"]["CustomFieldsDto"];
        };
        GetListCpqOfferResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            offers?: components["schemas"]["CpqOfferDto"][];
        };
        /** @description information for customer */
        CustomerContextDTO: {
            /** @description The billing account code */
            billingAccountCode?: string;
            /** @description The the seller tags */
            sellerTags?: string[];
            /** @description The customer tags */
            customerTags?: string[];
            /** @description The contract code */
            contractCode?: string;
            /** @description requested tag types */
            requestedTagTypes?: string[];
            pagingAndFiltering?: components["schemas"]["PagingAndFiltering"];
        };
        EnableOfferTemplateDto: {
            /** @description Provided filters to filter Offer Template */
            filters?: {
                [key: string]: Record<string, never>;
            };
        };
        GetOneShotChargeTemplateResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            oneShotChargeTemplate?: components["schemas"]["OneShotChargeTemplateDto"];
        };
        OneShotChargeTemplateResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            oneShotChargeTemplates?: components["schemas"]["OneShotChargeTemplatesDto"];
        };
        OneShotChargeTemplatesDto: {
            oneShotChargeTemplates?: components["schemas"]["OneShotChargeTemplateDto"][];
        };
        OneShotChargeTemplateWithPriceDto: {
            chargeCode?: string;
            description?: string;
            /** Format: double */
            unitPriceWithoutTax?: number;
            /** Format: double */
            taxPercent?: number;
            taxCode?: string;
            taxDescription?: string;
        };
        OneShotChargeTemplateWithPriceListDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            oneShotChargeTemplateDtos?: components["schemas"]["OneShotChargeTemplateWithPriceDto"][];
        };
        GetPricePlanVersionResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            pricePlanVersion?: components["schemas"]["PricePlanMatrixVersionDto"];
        };
        PricePlanMatrixColumnDto: {
            /** @description The price plan matrix column code */
            code: string;
            /** @description The price plan matrix code */
            pricePlanMatrixCode?: string;
            /**
             * Format: int32
             * @description The price plan matrix version
             */
            pricePlanMatrixVersion?: number;
            /** @description The product code */
            productCode?: string;
            /** @description The offer template code */
            offerTemplateCode?: string;
            /** @description The attribute code */
            attributeCode?: string;
            /**
             * Format: int32
             * @description The position of price plan column
             */
            position?: number;
            /**
             * @description The type of the price plan column
             * @enum {string}
             */
            type?: "String" | "Long" | "Double" | "Range_Date" | "Range_Numeric" | "Boolean";
            /** @description The el value of price plan matrix column */
            elValue?: string;
            range?: boolean;
        };
        PricePlanMatrixLineDto: {
            /**
             * Format: int64
             * @description The price plan line id
             */
            ppmLineId?: number;
            /** @description The price without tax */
            priceWithoutTax?: number;
            /** @description The value of price without tax or a discount */
            value?: number;
            /** @description The price plan matrix code */
            pricePlanMatrixCode?: string;
            /**
             * Format: int32
             * @description The price plan matrix version
             */
            pricePlanMatrixVersion?: number;
            /** @description The description price plan line */
            description?: string;
            pricePlanMatrixValues?: components["schemas"]["PricePlanMatrixValueDto"][];
            /**
             * Format: int32
             * @description The priority
             */
            priority?: number;
            /** @description The Price EL */
            priceEL?: string;
            /** @description The EL Value */
            valueEL?: string;
        };
        PricePlanMatrixValueDto: {
            /**
             * Format: int64
             * @description The price plan matrix value id
             */
            ppmValueId?: number;
            /** @description The price plan column code */
            ppmColumnCode: string;
            /**
             * Format: int64
             * @description The long value
             */
            longValue?: number;
            /**
             * Format: double
             * @description The double value
             */
            doubleValue?: number;
            /** @description The string value */
            stringValue?: string;
            /**
             * Format: date-time
             * @description The date value
             */
            dateValue?: string;
            /**
             * Format: date-time
             * @description The from date value
             */
            fromDateValue?: string;
            /**
             * Format: date-time
             * @description The to date value
             */
            toDateValue?: string;
            /**
             * Format: double
             * @description The from double value
             */
            fromDoubleValue?: number;
            /**
             * Format: double
             * @description The to double value
             */
            toDoubleValue?: number;
            /** @description The boolean value */
            booleanValue?: boolean;
        };
        PricePlanMatrixVersionDto: {
            /**
             * Format: int64
             * @description The price plan matrix version id
             */
            id?: number;
            /** @description The price plan matrix code */
            pricePlanMatrixCode: string;
            /**
             * @description The status of price plan matrix version
             * @enum {string}
             */
            statusEnum?: "DRAFT" | "PUBLISHED" | "CLOSED";
            /**
             * Format: int32
             * @description the current version of price plan matrix
             */
            version?: number;
            /**
             * Format: date-time
             * @description The status date. it set automatically when the status change
             */
            statusDate?: string;
            /** @description The label of price plan matrix version */
            label?: string;
            validity?: components["schemas"]["DatePeriod"];
            /** @description The price */
            price?: number;
            /** @description The amount without tax */
            amountWithoutTax?: number;
            /** @description The amount with tax */
            amountWithTax?: number;
            /** @description The amount without tax EL */
            amountWithoutTaxEL?: string;
            /** @description The amount with tax EL */
            amountWithTaxEL?: string;
            /** @description The Price EL */
            priceEL?: string;
            /**
             * Format: int32
             * @description The priority
             */
            priority?: number;
            /**
             * @description The price version type, can be PERCENTAGE or FIXED.
             * @enum {string}
             */
            priceVersionType?: "FIXED" | "PERCENTAGE";
            columns?: components["schemas"]["PricePlanMatrixColumnDto"][];
            lines?: components["schemas"]["PricePlanMatrixLineDto"][];
            matrix?: boolean;
        };
        PricePlanMatrixLinesDto: {
            /** @description The price plan matrix code */
            pricePlanMatrixCode?: string;
            /**
             * Format: int32
             * @description The price plan matrix version
             */
            pricePlanMatrixVersion?: number;
            pricePlanMatrixLines?: components["schemas"]["PricePlanMatrixLineDto"][];
            pricePlanMatrixLineDto?: components["schemas"]["PricePlanMatrixLineDto"];
        };
        PricePlanMatrixDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            /** @description The event code */
            eventCode: string;
            /** @description The seller code */
            seller?: string;
            /** @description The country code */
            country?: string;
            /** @description The currency code */
            currency?: string;
            /** @description The min quantity */
            minQuantity?: number;
            /** @description The max quantity */
            maxQuantity?: number;
            /** @description The offer template code */
            offerTemplate?: string;
            offerTemplateVersion?: components["schemas"]["OfferTemplateDto"];
            /**
             * Format: date-time
             * @description The start subscription date
             */
            startSubscriptionDate?: string;
            /**
             * Format: date-time
             * @description The end subscription date
             */
            endSubscriptionDate?: string;
            /**
             * Format: date-time
             * @description The start rating date
             */
            startRatingDate?: string;
            /**
             * Format: date-time
             * @description The end rating date
             */
            endRatingDate?: string;
            /**
             * Format: int64
             * @description The min subscription age in month
             */
            minSubscriptionAgeInMonth?: number;
            /**
             * Format: int64
             * @description The max subscription age in month
             */
            maxSubscriptionAgeInMonth?: number;
            /** @description The amount without tax */
            amountWithoutTax?: number;
            /** @description The amount with tax */
            amountWithTax?: number;
            /** @description The amount without tax EL */
            amountWithoutTaxEL?: string;
            /** @description The amount with tax EL */
            amountWithTaxEL?: string;
            /** @description The minimum amount without tax el */
            minimumAmountWithoutTaxEl?: string;
            /** @description The minimum amount with tax el */
            minimumAmountWithTaxEl?: string;
            /**
             * Format: int32
             * @description The priority
             */
            priority?: number;
            /** @description The criteria 1 */
            criteria1?: string;
            /** @description The criteria 2 */
            criteria2?: string;
            /** @description The criteria 3 */
            criteria3?: string;
            /** @description The criteria EL */
            criteriaEL?: string;
            /** @description The validity calendar code */
            validityCalendarCode?: string;
            /** @description The script instance */
            scriptInstance?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
            woDescriptionEL?: string;
            ratingWithTaxEL?: string;
            /** @description Expression to calculate price without tax */
            ratingWithoutTaxEL?: string;
            versions?: components["schemas"]["PricePlanMatrixVersionDto"][];
            /** @description Expression for getting the InvoiceSubCategory */
            invoiceSubCategoryEL?: string;
            /** @description Expression to calculate price with/without tax. It overrides quantity x unitPrice when set */
            totalAmountEL?: string;
            /** @description Minimum allowed amount for a walletOperation. If this amount is less than the walletOperation this amount is save and the old value is save in rawAmount */
            minimumAmountEL?: string;
            /** @description An El expression used to override wallet operation's parameter1El */
            parameter1El?: string;
            /** @description An El expression used to override wallet operation's parameter2El */
            parameter2El?: string;
            /** @description An El expression used to override wallet operation's parameter3El */
            parameter3El?: string;
        };
        DatePeriodDto: {
            validity?: components["schemas"]["DatePeriod"];
        };
        GetPricePlanResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            pricePlan?: components["schemas"]["PricePlanMatrixDto"];
        };
        PricePlanMatrixesResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            pricePlanMatrixes?: components["schemas"]["PricePlansDto"];
        };
        PricePlansDto: {
            pricePlanMatrix?: components["schemas"]["PricePlanMatrixDto"][];
        };
        GetProductDtoResponse: {
            discountList?: components["schemas"]["DiscountPlanDto"][];
            /**
             * Format: int64
             * @description Id of the product
             */
            id?: number;
            /** @description Code of the product */
            code: string;
            /** @description Description of the product */
            label: string;
            /**
             * @description Status of the product
             * @enum {string}
             */
            status?: "DRAFT" | "ACTIVE" | "CLOSED";
            /**
             * Format: date-time
             * @description Datetime of the status
             */
            statusDate?: string;
            /** @description Product line code related to product */
            productLineCode?: string;
            /** @description Bran code related to product */
            brandCode?: string;
            /** @description The reference */
            reference?: string;
            /** @description The model of the product */
            model?: string;
            /** @description List of model children */
            modelChildren?: string[];
            /**
             * @description Indicate if the discount is activate
             * @default false
             */
            discountFlag: boolean;
            /**
             * @description Indicate if the product packaged
             * @default false
             */
            packageFlag: boolean;
            /**
             * @description Price version date setting
             * @enum {string}
             */
            priceVersionDateSetting?: "QUOTE" | "DELIVERY" | "RENEWAL" | "EVENT";
            customFields?: components["schemas"]["CustomFieldsDto"];
            currentProductVersion?: components["schemas"]["ProductVersionDto"];
            /** @description List product charge template mapping */
            productChargeTemplateMappingDto?: components["schemas"]["ProductChargeTemplateMappingDto"][];
            /** @description List discount list code */
            discountListCodes?: string[];
            /** @description allowing to create,update and delete an product from a model */
            isModel?: boolean;
            /** @description product model code */
            productModelCode?: string;
            /**
             * @description Agreeemnt date Setting
             * @enum {string}
             */
            agreementDateSetting?: "COPY" | "INHERIT" | "MANUAL";
            productVersions?: components["schemas"]["GetProductVersionResponse"][];
            chargeTemplates?: components["schemas"]["ChargeTemplateDto"][];
            commercialHeaderRules?: components["schemas"]["CommercialRuleHeaderDTO"][];
            medias?: components["schemas"]["MediaDto"][];
            actionStatus?: components["schemas"]["ActionStatus"];
        };
        GetProductVersionResponse: {
            /** @description The short description of the product version */
            shortDescription: string;
            /** @description The product code */
            productCode: string;
            /**
             * Format: int32
             * @description The current version of the product
             */
            currentVersion: number;
            /**
             * @description The status of the product version
             * @enum {string}
             */
            status?: "DRAFT" | "PUBLISHED" | "CLOSED";
            /**
             * Format: date-time
             * @description The statusDate : is set automatically when the status was changed
             */
            statusDate?: string;
            /** @description The long description */
            longDescription?: string;
            validity?: components["schemas"]["DatePeriod"];
            /** @description List of the attribute */
            productAttributes?: components["schemas"]["ProductVersionAttributeDTO"][];
            tagList?: components["schemas"]["TagDto"][];
            groupedAttributes?: components["schemas"]["GroupedAttributeDto"][];
            actionStatus?: components["schemas"]["ActionStatus"];
        };
        GetProductLineDtoResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            productLineDto?: components["schemas"]["ProductLineDto"];
        };
        ProductLineDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            sellerCode?: string;
            longDescription?: string;
            parentLineCode?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
        };
        GetListProductVersionsResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            productVersions?: components["schemas"]["ProductVersionDto"][];
        };
        GetCpqOfferResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            cpqOfferDto?: components["schemas"]["CpqOfferDto"];
        };
        /** @description Context config */
        OfferContextConfigDTO: {
            /** @description Load related Tag of Attribute */
            loadAttributeTags?: boolean;
            /** @description Load related GroupedAttribute of Attribute */
            loadAttributeGroupedAttribute?: boolean;
            /** @description Load related ChargeTemplate of Attribute */
            loadAttributeChargeTemplates?: boolean;
            /** @description Load related AssignedAttribute of Attribute */
            loadAttributeAssignedAttr?: boolean;
            /** @description Load related Media of Attribute */
            loadAttributeMedia?: boolean;
        };
        OfferContextDTO: {
            /** @description code of offer template */
            offerCode?: string;
            customerContextDTO?: components["schemas"]["CustomerContextDTO"];
            /** @description code of quote lot */
            quoteLotCode?: string;
            /** @description The selected products in the quote */
            selectedProducts?: components["schemas"]["ProductContextDTO"][];
            /** @description The selected services in the quote with their values, DO NOT change to Map. Used LinkedHashMap to preserve the item order during read/write */
            selectedOfferAttributes?: {
                [key: string]: Record<string, never>;
            };
            config?: components["schemas"]["OfferContextConfigDTO"];
        };
        /** @description The selected products in the quote */
        ProductContextDTO: {
            /** @description The selected product code in the quote */
            productCode: string;
            /**
             * Format: int32
             * @description The selected product version in the quote
             */
            producVersion: number;
            /**
             * Format: int32
             * @description The product quantity
             */
            quantity?: number;
            /** @description The selected services in the quote with their values, DO NOT change to Map. Used LinkedHashMap to preserve the item order during read/write */
            selectedAttributes?: {
                [key: string]: Record<string, never>;
            };
            /** @description selected grouped attribute */
            selectedGroupedAttributes?: {
                [key: string]: Record<string, never>;
            };
        };
        GetListProductsResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            products?: components["schemas"]["ProductDto"][];
        };
        RecurringChargeTemplateDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            /** @description The invoice sub category */
            invoiceSubCategory?: string;
            /** @description The amount can be editable */
            amountEditable?: boolean;
            /** @description list of the language description */
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
            inputUnitDescription?: string;
            ratingUnitDescription?: string;
            unitMultiplicator?: number;
            /** @description code of unit  measure */
            inputUnitOfMeasureCode?: string;
            /** @description code of rating unit of measure */
            ratingUnitOfMeasureCode?: string;
            /** @description input unit expression language */
            inputUnitEL?: string;
            /** @description output unit expression language */
            outputUnitEL?: string;
            /**
             * Format: int32
             * @description EDR and WO quantity field value precision
             */
            unitNbDecimal?: number;
            /**
             * @description EDR and WO quantity field value rounding
             * @example possible value are : NEAREST, DOWN, UP
             * @enum {string}
             */
            roundingModeDtoEnum?: "NEAREST" | "DOWN" | "UP" | "HALF_EVEN";
            /** @description The revenue recognition rule code */
            revenueRecognitionRuleCode?: string;
            /** @description The filter expression */
            filterExpression?: string;
            /** @description code of tax class */
            taxClassCode?: string;
            /** @description Expression to determine tax class */
            taxClassEl?: string;
            /** @description Code of a rating script */
            ratingScriptCode?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
            triggeredEdrs?: components["schemas"]["TriggeredEdrTemplatesDto"];
            /** @description Enable/disable removing WO rated to 0 */
            dropZeroWo?: boolean;
            /** @description Sorting index EL */
            sortIndexEl?: string;
            /**
             * @description ChargeTemplate status
             * @enum {string}
             */
            status?: "DRAFT" | "ACTIVE" | "ARCHIVED";
            linkedAttributes?: string[];
            /** @description Internal Note */
            internalNote?: string;
            /** @description Code of quantity attribute */
            quantityAttribute?: string;
            /** @description Applies the contract during rating script execution. */
            applyContractOverRatingScript?: boolean;
            /** @description the calendar */
            calendar: string;
            /**
             * Format: int32
             * @description The duration term in month
             */
            durationTermInMonth?: number;
            /** @description The subscription prorata */
            subscriptionProrata?: boolean;
            /** @description The termination prorata */
            terminationProrata?: boolean;
            /** @description The apply in advance */
            applyInAdvance?: boolean;
            /**
             * Format: int32
             * @description The share level
             */
            shareLevel?: number;
            /** @description The calendar code expression language */
            calendarCodeEl?: string;
            /** @description The duration term in month on expression language */
            durationTermInMonthEl?: string;
            /** @description The subscription prorata on expression language */
            subscriptionProrataEl?: string;
            /** @description The termination prorata on expression language */
            terminationProrataEl?: string;
            /** @description The apply in advance on expression language */
            applyInAdvanceEl?: string;
            /** @description Expression to determine and override the date that recurring charge should be charged to upon charge/service termination */
            applyTerminatedChargeToDateEL?: string;
            /**
             * @description recrrence type
             * @default CALENDAR
             * @example possible value are : CALENDAR, PERIOD
             * @enum {string}
             */
            recurrenceType: "CALENDAR" | "PERIOD";
            /** @description code of attribute duration */
            attributeDurationCode?: string;
            /** @description code of attribute calendar */
            attributeCalendarCode?: string;
            /** @description The flag to anticipate the end of Subscription */
            anticipateEndOfSubscription?: boolean;
        };
        GetRecurringChargeTemplateResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            recurringChargeTemplate?: components["schemas"]["RecurringChargeTemplateDto"];
        };
        RecurringChargeTemplateResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            recurringChargeTemplates?: components["schemas"]["RecurringChargeTemplatesDto"];
        };
        RecurringChargeTemplatesDto: {
            recurringChargeTemplates?: components["schemas"]["RecurringChargeTemplateDto"][];
        };
        GetServiceTemplateResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            serviceTemplate?: components["schemas"]["ServiceTemplateDto"];
        };
        GetListServiceTemplateResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            listServiceTemplate?: components["schemas"]["ServiceTemplateDto"][];
        };
        GetTriggeredEdrResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            triggeredEdrTemplate?: components["schemas"]["TriggeredEdrTemplateDto"];
        };
        TriggeredEdrsResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            triggeredEdrs?: components["schemas"]["TriggeredEdrTemplateDto"][];
        };
        UnitOfMeasureDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            symbol: string;
            /** Format: int64 */
            multiplicator?: number;
            parentUOMCode?: string;
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
        };
        GetUnitOfMeasureResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            unitOfMeasure?: components["schemas"]["UnitOfMeasureDto"];
        };
        GetListUnitOfMeasureResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            listUnitOfMeasure?: components["schemas"]["UnitOfMeasureDto"][];
        };
        UsageChargeTemplateDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            /** @description The invoice sub category */
            invoiceSubCategory?: string;
            /** @description The amount can be editable */
            amountEditable?: boolean;
            /** @description list of the language description */
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
            inputUnitDescription?: string;
            ratingUnitDescription?: string;
            unitMultiplicator?: number;
            /** @description code of unit  measure */
            inputUnitOfMeasureCode?: string;
            /** @description code of rating unit of measure */
            ratingUnitOfMeasureCode?: string;
            /** @description input unit expression language */
            inputUnitEL?: string;
            /** @description output unit expression language */
            outputUnitEL?: string;
            /**
             * Format: int32
             * @description EDR and WO quantity field value precision
             */
            unitNbDecimal?: number;
            /**
             * @description EDR and WO quantity field value rounding
             * @example possible value are : NEAREST, DOWN, UP
             * @enum {string}
             */
            roundingModeDtoEnum?: "NEAREST" | "DOWN" | "UP" | "HALF_EVEN";
            /** @description The revenue recognition rule code */
            revenueRecognitionRuleCode?: string;
            /** @description The filter expression */
            filterExpression?: string;
            /** @description code of tax class */
            taxClassCode?: string;
            /** @description Expression to determine tax class */
            taxClassEl?: string;
            /** @description Code of a rating script */
            ratingScriptCode?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
            triggeredEdrs?: components["schemas"]["TriggeredEdrTemplatesDto"];
            /** @description Enable/disable removing WO rated to 0 */
            dropZeroWo?: boolean;
            /** @description Sorting index EL */
            sortIndexEl?: string;
            /**
             * @description ChargeTemplate status
             * @enum {string}
             */
            status?: "DRAFT" | "ACTIVE" | "ARCHIVED";
            linkedAttributes?: string[];
            /** @description Internal Note */
            internalNote?: string;
            /** @description Code of quantity attribute */
            quantityAttribute?: string;
            /** @description Applies the contract during rating script execution. */
            applyContractOverRatingScript?: boolean;
            /** @description first filter parameter */
            filterParam1?: string;
            /** @description second filter parameter */
            filterParam2?: string;
            /** @description third filter parameter */
            filterParam3?: string;
            /** @description fourth filter parameter */
            filterParam4?: string;
            /**
             * Format: int32
             * @description The priority
             */
            priority?: number;
            /** @description If set to true and (charge has no counter associated) then the next matching charge with the full quantity of the EDR */
            triggerNextCharge?: boolean;
            /** @description Overrides the triggerNextCharge switch */
            triggerNextChargeEL?: string;
            /** @description code of usage attribute quantity */
            usageQuantityAttributeCode?: string;
        };
        GetUsageChargeTemplateResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            usageChargeTemplate?: components["schemas"]["UsageChargeTemplateDto"];
        };
        UsageChargeTemplateResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            usageChargeTemplates?: components["schemas"]["UsageChargeTemplatesDto"];
        };
        UsageChargeTemplatesDto: {
            usageChargeTemplates?: components["schemas"]["UsageChargeTemplateDto"][];
        };
        DateLimiteDto: {
            dateLimite?: string;
        };
        GenericFieldDetails: {
            transformation?: string;
            mappings?: {
                [key: string]: string;
            };
            formula?: string;
            formulaInputs?: string;
            header?: string;
            /** @description name generic field */
            name?: string;
        };
        GenericPagingAndFiltering: {
            disableAutoFetchListOfNestedEntities?: boolean;
            groupBy?: string[];
            having?: string[];
            genericFields?: string[];
            nestedEntities?: string[];
            excluding?: string[];
            /** Format: int64 */
            nestedDepth?: number;
            genericFieldDetails?: components["schemas"]["GenericFieldDetails"][];
            /** Format: int64 */
            total?: number;
            translations?: {
                [key: string]: string;
            };
            /** @enum {string} */
            joinType?: "INNER" | "LEFT" | "RIGHT";
            fullTextFilter?: string;
            sortBy?: string;
            sortOrder?: string;
            filters?: {
                [key: string]: Record<string, never>;
            };
            /** Format: int64 */
            limit?: number;
            /** Format: int64 */
            offset?: number;
        };
        AbsenceDto: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            start_date?: string;
            /** Format: date-time */
            end_date?: string;
            workflows?: components["schemas"]["WorkflowData"][];
            actif?: boolean;
            comment?: string;
            /** Format: date-time */
            creation_date?: string;
            /** Format: date-time */
            update_date?: string;
            updater?: string;
            status?: string;
        };
        WorkflowData: {
            workflow?: string;
            approver_firstname?: string;
            approver_lastname?: string;
            /** Format: int64 */
            approver_user_id?: number;
            approver_username?: string;
            approver_email?: string;
        };
        /** @description list of billing rules */
        BillingRuleDto: {
            /** @description Expression to tell OC if this rule should apply to the tested rated transaction */
            criteriaEL?: string;
            /** @description Expression to provide the code of a billing account that will be invoiced this rated transaction. */
            invoicedBACodeEL?: string;
            /** Format: int32 */
            priority?: number;
            links?: {
                title?: string;
                uriBuilder?: Record<string, never>;
                rel?: string;
                rels?: string[];
                params?: {
                    [key: string]: string;
                };
                /** Format: uri */
                uri?: string;
                type?: string;
            }[];
            code?: string;
            /** Format: int64 */
            id?: number;
        };
        ContractDTO: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            /**
             * @description contract account level, associate seller or customer or customer account or billing account to this contract
             * @example possible value are : SELLER, CUSTOMER, CUSTOMER_ACCOUNT, BILLING_ACCOUNT
             * @enum {string}
             */
            contractAccountLevel?: "SELLER" | "CUSTOMER" | "CUSTOMER_ACCOUNT" | "BILLING_ACCOUNT";
            /** @description account code associated to contract depending the value of  contractAccountLevel */
            accountCode?: string;
            /**
             * @description status of the contract
             * @example possible value are : DRAFT, ACTIVE, CLOSED
             */
            status?: string;
            /**
             * Format: date-time
             * @description date of the changement of the status, it set automatically
             */
            statusDate?: string;
            /**
             * Format: date-time
             * @description day of the contract
             */
            contractDate: string;
            /**
             * Format: date-time
             * @description begin date of the contract
             */
            beginDate: string;
            /**
             * Format: date-time
             * @description end date of the contract
             */
            endDate: string;
            /** @description renwal a the contract */
            renewal: boolean;
            /**
             * Format: int32
             * @description duration of the contract
             */
            contractDuration?: number;
            customFields?: components["schemas"]["CustomFieldsDto"];
            /** @description list of billing rules */
            billingRules?: components["schemas"]["BillingRuleDto"][];
            /** @description An expression to decide whether the contract should be applied or not */
            applicationEl?: string;
            numeroACC?: string;
            libelle?: string;
            /** Format: int64 */
            clientSignataire?: number;
            grille?: boolean;
            /** Format: double */
            remise?: number;
            etat?: string;
            applicationEL?: string;
        };
        QuoteDTO: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            /**
             * Format: date-time
             * @description The date of the quote
             */
            quoteDate?: string;
            validity?: components["schemas"]["DatePeriod"];
            /**
             * @description The status of the quote
             * @default IN_PROGRESS
             * @example Possible value : IN_PROGRESS, PENDING, CANCELLED, APPROVED, ACCEPTED, REJECTED
             */
            status: string;
            /** @description The code of the billing account of the applicant */
            applicantAccountCode: string;
            /** @description The code of the billing account of the billable */
            billableAccountCode?: string;
            /**
             * Format: date-time
             * @description The delivery date of quote lot
             */
            deliveryDate?: string;
            /**
             * Format: int32
             * @description Duration of the quote lot
             */
            quoteLotDuration?: number;
            /** @description The opportunity ref */
            opportunityRef?: string;
            /** @description The code of the seller */
            sellerCode?: string;
            /**
             * Format: date-time
             * @description The send date
             */
            sendDate?: string;
            /** @description The quote number */
            quoteNumber?: string;
            /** @description The external id */
            externalId?: string;
            /**
             * Format: date-time
             * @description The status date
             */
            statusDate?: string;
            /** @description The code of the user account */
            userAccountCode?: string;
            /** @description The sales person name */
            salesPersonName?: string;
            /** @description Contract code */
            contractCode?: string;
            quoteVersion?: components["schemas"]["QuoteVersionDto"];
        };
        QuoteVersionDto: {
            /** @description The short description */
            shortDescription?: string;
            /** @description The code quote */
            quoteCode: string;
            /**
             * Format: int32
             * @description The current version
             */
            currentVersion?: number;
            /**
             * @description Status of quote version
             * @example Possible value : DRAFT, PUBLISHED, CLOSED
             * @enum {string}
             */
            status?: "DRAFT" | "PUBLISHED" | "CLOSED";
            /**
             * Format: date-time
             * @description The status date, it set automaically when status is changed
             */
            statusDate?: string;
            /**
             * Format: date-time
             * @description The start date
             */
            startDate?: string;
            /**
             * Format: date-time
             * @description The end date
             */
            endDate?: string;
            /** @description The code of the billing plan */
            billingPlanCode?: string;
            /** @description The code of the discount plan */
            discountPlanCode?: string;
            /** @description The code of the contract */
            contractCode?: string;
            mediaCodes?: string[];
            /** @description The comment */
            comment?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
        };
        InitCPQQuoteDataDTO: {
            customerId?: string;
            agenceMandate?: boolean;
            opportunity?: string;
            opportunityLabel?: string;
        };
        MessageDto: {
            /** Format: int64 */
            id?: number;
            message?: string;
            alert_level?: string;
            mdp?: boolean;
            lp?: boolean;
            /** Format: date-time */
            start_date?: string;
            /** Format: date-time */
            end_date?: string;
            /** Format: date-time */
            creation_date?: string;
            /** Format: date-time */
            update_date?: string;
            updater?: string;
        };
        AdsInterest: {
            id?: string;
        };
        City: {
            key?: string;
        };
        GeoLocations: {
            regions?: components["schemas"]["Region"][];
            cities?: components["schemas"]["City"][];
        };
        Region: {
            key?: string;
        };
        SimulationFB: {
            publisher_platform?: string[];
            /** Format: int32 */
            campaign_duration?: number;
            /** Format: int32 */
            budget?: number;
            targeting?: components["schemas"]["Targeting"];
            ads_interest?: components["schemas"]["AdsInterest"][];
            geo_locations?: components["schemas"]["GeoLocations"];
        };
        Targeting: {
            gender?: number[];
            /** Format: int32 */
            age_min?: number;
            /** Format: int32 */
            age_max?: number;
        };
        SimulationDto: {
            serviceName?: string;
            locationId?: string;
        };
        AccountingArticlePricesDTO: {
            accountingArticleCode?: string;
            accountingArticleLabel?: string;
            accountingArticlePrices?: components["schemas"]["PriceDTO"][];
            discountPlanItemCode?: string;
            discountValue?: string;
        };
        PriceDTO: {
            /** @enum {string} */
            priceType?: "RECURRING" | "ONE_SHOT_SUBSCRIPTION" | "ONE_SHOT_TERMINATION" | "ONE_SHOT_OTHER" | "USAGE" | "FIXED_DISCOUNT";
            amountWithTax?: number;
            unitPriceWithoutTax?: number;
            amountWithoutTax?: number;
            amountWithoutTaxWithoutDiscount?: number;
            taxAmount?: number;
            taxRate?: number;
            priceOverCharged?: boolean;
            currencyCode?: string;
            currencySymbol?: string;
            /** Format: int64 */
            recurrenceDuration?: number;
            recurrencePeriodicity?: string;
            chargeCode?: string;
            chargeLabel?: string;
            taxCategory?: string;
            taxCode?: string;
            quantity?: number;
            discountedQuotePrice?: components["schemas"]["PriceDTO"];
            unitMultiplicator?: number;
            discountValue?: number;
            /** @enum {string} */
            discountPlanType?: "PERCENTAGE" | "FIXED";
            discountPlanItemCode?: string;
            discountPlanCode?: string;
            discountPlanItemDesc?: string;
            discountPlanDesc?: string;
            applyDiscountsOnOverridenPrice?: boolean;
            overchargedUnitAmountWithoutTax?: number;
            discountedAmount?: number;
            /** Format: int32 */
            sequence?: number;
            /** Format: int64 */
            id?: number;
            contractCode?: string;
            contractDescription?: string;
            contractItemCode?: string;
            contractItemDescription?: string;
            contractType?: string;
            pricePlanMatrixCode?: string;
            pricePlanMatrixLabel?: string;
            /** Format: int64 */
            pricePlanMatrixVersionId?: number;
            /** Format: int64 */
            pricePlanMatrixLineId?: number;
            /** @enum {string} */
            contractItemRateType?: "PERCENTAGE" | "FIXED";
            customFields?: components["schemas"]["CustomFieldsDto"];
        };
        /**
         * @description list of quote attribute
         * @example "offerAttributes": [[<br/>        {[<br/>            "quoteAttributeCode": "Attribute_code}}",[<br/>            "stringValue": "Monthly",[<br/>            "doubleValue": 24,[<br/>            "dateValue": "2021-02-22"[<br/>        }[<br/>    ]
         */
        QuoteAttributeDTO: {
            /** Format: int64 */
            quoteAttributeId?: number;
            quoteAttributeCode?: string;
            linkedQuoteAttribute?: components["schemas"]["QuoteAttributeDTO"][];
            stringValue?: string;
            /** Format: double */
            doubleValue?: number;
            /** Format: date-time */
            dateValue?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
            /** Format: int32 */
            sequence?: number;
        };
        QuoteOfferDTO: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            /**
             * Format: int64
             * @description quote offer id, used for updating an existing quote offer
             */
            quoteOfferId?: number;
            /** @description the code of the quote */
            quoteCode?: string;
            /**
             * Format: int32
             * @description the version of the quote, associated to the quote code to retrieve a quote
             */
            quoteVersion: number;
            /** @description the code of the quote lot */
            quoteLotCode?: string;
            /**
             * Format: int64
             * @description id of offer template
             */
            offerId: number;
            /** @description the code of offer template */
            offerCode?: string;
            /** @description code of billing account */
            billableAccountCode?: string;
            /** @description the code of contract */
            contractCode?: string;
            /**
             * @description list of quote product
             * @example "products": [[<br/>        {[<br/>            "productCode": "product_Code",[<br/>            "quoteCode": "quote_Code",[<br/>            "productVersion": product_Version,[<br/>            "quoteVersion": Quote_Version,[<br/>            "quantity": 1,[<br/>            "productAttributes": [[<br/>                {[<br/>                    "quoteAttributeCode": "billing_Cycle_Attribute",[<br/>                    "stringValue": "Monthly"[<br/>                },[<br/>                {[<br/>                    "quoteAttributeCode": "engagement_Attribute_Code",[<br/>                    "doubleValue": 24[<br/>                }[<br/>            ][<br/>        }[<br/>    ]
             */
            products?: components["schemas"]["QuoteProductDTO"][];
            /**
             * @description list of quote attribute
             * @example "offerAttributes": [[<br/>        {[<br/>            "quoteAttributeCode": "Attribute_code}}",[<br/>            "stringValue": "Monthly",[<br/>            "doubleValue": 24,[<br/>            "dateValue": "2021-02-22"[<br/>        }[<br/>    ]
             */
            offerAttributes?: components["schemas"]["QuoteAttributeDTO"][];
            customFields?: components["schemas"]["CustomFieldsDto"];
            /** @description the code of the discount plan */
            discountPlanCode?: string;
            /** @description total amounts */
            prices?: components["schemas"]["TaxPricesDto"][];
            /**
             * Format: int32
             * @description the position of the quote item in GUI
             */
            sequence?: number;
            /**
             * Format: date-time
             * @description the delivery date
             */
            deliveryDate?: string;
            /** @description The code of the user account */
            userAccountCode?: string;
            /**
             * @description The quote line type
             * @enum {string}
             */
            quoteLineType?: "CREATE" | "AMEND" | "TERMINATE";
            /** @description The code of the subscription */
            subscriptionCode?: string;
        };
        /**
         * @description list of quote product
         * @example "products": [[<br/>        {[<br/>            "productCode": "product_Code",[<br/>            "quoteCode": "quote_Code",[<br/>            "productVersion": product_Version,[<br/>            "quoteVersion": Quote_Version,[<br/>            "quantity": 1,[<br/>            "productAttributes": [[<br/>                {[<br/>                    "quoteAttributeCode": "billing_Cycle_Attribute",[<br/>                    "stringValue": "Monthly"[<br/>                },[<br/>                {[<br/>                    "quoteAttributeCode": "engagement_Attribute_Code",[<br/>                    "doubleValue": 24[<br/>                }[<br/>            ][<br/>        }[<br/>    ]
         */
        QuoteProductDTO: {
            /** Format: int64 */
            quoteProductId?: number;
            quoteCode: string;
            productCode: string;
            /** Format: int32 */
            quoteVersion: number;
            /** Format: int32 */
            productVersion: number;
            quantity: number;
            /** @description The code of the discount plan */
            discountPlanCode?: string;
            productAttributes?: components["schemas"]["QuoteAttributeDTO"][];
            accountingArticlePrices?: components["schemas"]["AccountingArticlePricesDTO"][];
            customFields?: components["schemas"]["CustomFieldsDto"];
            /** Format: date-time */
            deliveryDate?: string;
            /**
             * Format: date-time
             * @description The termination date
             */
            terminationDate?: string;
            /** @description The termination reason code */
            terminationReasonCode?: string;
            /**
             * @description The action type
             * @enum {string}
             */
            actionType?: "CREATE" | "ACTIVATE" | "SUSPEND" | "TERMINATE" | "MODIFY";
        };
        TaxPricesDto: {
            taxRate?: number;
            unitPriceAmountWithoutTax?: number;
            prices?: components["schemas"]["PriceDTO"][];
        };
        InterlocuteurWrapper: {
            interlocuteursIds?: string[];
            lienCB?: string;
            nomClient?: string;
        };
        LinkSendDto: {
            /** @description lien */
            lien?: string;
            /** @description dateStatus */
            dateStatus?: string;
        };
        UpdateVendeurInfos: {
            idVendeurContractant?: string;
            typeDIntervention?: string;
        };
        CommunicationRequestDto: {
            meveoInstanceCode: string;
            macAddress: string;
            subject: string;
            body?: string;
            additionnalInfo1?: string;
            additionnalInfo2?: string;
            additionnalInfo3?: string;
            additionnalInfo4?: string;
            vaild?: boolean;
        };
        EmailTemplateDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            /** @enum {string} */
            media?: "POSTAL_MAIL" | "EMAIL" | "SMS" | "IM" | "FAX" | "VOICE" | "WEBSERVICE" | "QUEUE" | "FTP_FILE" | "CFT_FILE" | "DATABASE" | "DUNNING_MEDIA";
            tagStartDelimiter?: string;
            tagEndDelimiter?: string;
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string;
            /** @enum {string} */
            type?: "DUNNING" | "INVOICE" | "OTHER";
            textContent?: string;
            translatedTextContent?: components["schemas"]["TranslatedTextContentDto"][];
            subject: string;
            htmlContent?: string;
            translatedHtmlContent?: components["schemas"]["TranslatedHtmlContentDto"][];
            translatedSubject?: components["schemas"]["TranslatedSubjectDto"][];
        };
        TranslatedHtmlContentDto: {
            /** @description The language code */
            languageCode?: string;
            /** @description Subject Translation */
            htmlContent?: string;
        };
        TranslatedSubjectDto: {
            /** @description The language code */
            languageCode?: string;
            /** @description Subject Translation */
            subject?: string;
            textContent?: string;
        };
        TranslatedTextContentDto: {
            /** @description The language code */
            languageCode?: string;
            /** @description Text content translation */
            textContent?: string;
        };
        EmailTemplateResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            emailTemplate?: components["schemas"]["EmailTemplateDto"];
        };
        EmailTemplatesResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            emailTemplates?: components["schemas"]["EmailTemplateDto"][];
        };
        MeveoInstanceDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            productName?: string;
            productVersion?: string;
            owner?: string;
            md5?: string;
            /** @enum {string} */
            status?: "UNKNOWN" | "PARENT" | "CHILD" | "PARTNER";
            /** Format: date-time */
            creationDate?: string;
            /** Format: date-time */
            updateDate?: string;
            keyEntreprise?: string;
            macAddress?: string;
            machineVendor?: string;
            installationMode?: string;
            nbCores?: string;
            memory?: string;
            hdSize?: string;
            osName?: string;
            osVersion?: string;
            osArch?: string;
            javaVmVersion?: string;
            javaVmName?: string;
            javaVendor?: string;
            javaVersion?: string;
            asVendor?: string;
            asVersion?: string;
            url: string;
            authUsername?: string;
            authPassword?: string;
            user?: string;
            customer?: string;
        };
        MeveoInstanceResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            meveoInstance?: components["schemas"]["MeveoInstanceDto"];
        };
        MeveoInstancesResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            meveoInstances?: components["schemas"]["MeveoInstanceDto"][];
        };
        GetAttributeDtoResponse: {
            /**
             * Format: int64
             * @description attribute id
             */
            id?: number;
            /** @description Code of attribute */
            code?: string;
            /** @description description */
            description?: string;
            /** @description description */
            disabled?: boolean;
            /**
             * @description Corresponding to minimum one shot charge template code
             * @example possible value are : INFO, LIST_TEXT, LIST_MULTIPLE_TEXT, LIST_NUMERIC, LIST_MULTIPLE_NUMERIC, TEXT, NUMERIC, INTEGER, DATE, CALENDAR, EMAIL, PHONE, TOTAL, COUNT, EXPRESSION_LANGUAGE
             * @enum {string}
             */
            attributeType?: "INFO" | "LIST_TEXT" | "LIST_MULTIPLE_TEXT" | "LIST_NUMERIC" | "LIST_MULTIPLE_NUMERIC" | "TEXT" | "NUMERIC" | "INTEGER" | "DATE" | "CALENDAR" | "EMAIL" | "PHONE" | "TOTAL" | "COUNT" | "EXPRESSION_LANGUAGE" | "BOOLEAN";
            /** @description Corresponding to predefined allowed values */
            allowedValues?: string[];
            /** @description diplay the attribute */
            display?: boolean;
            /** @description indicate if the attribute is mandatory */
            mandatory: boolean;
            /** @description indicate if the attribute is selectable */
            selectable?: boolean;
            /** @description indicate if the attribute is ruled */
            ruled?: boolean;
            /**
             * Format: int32
             * @description number of decimal for attribute if the type of attribute is a NUMBER
             */
            unitNbDecimal?: number;
            /** @description indicate if the attribute is read only */
            readOnly?: boolean;
            /** @description Code of attribute */
            attributeCode: string;
            /**
             * Format: int32
             * @description attribute order in the GUI
             */
            sequence?: number;
            /** @description Indicate if the attribute has a mandatory EL */
            mandatoryWithEl?: string;
            /** @description default value for attribute */
            defaultValue?: string;
            /**
             * @description Validation type
             * @example Possible value are: EL, REGEX
             * @enum {string}
             */
            validationType?: "REGEX" | "EL";
            /** @description Validation pattern */
            validationPattern?: string;
            /** @description Validation label */
            validationLabel?: string;
            /** @description replaced value */
            assignedValue?: Record<string, never>;
            /**
             * Format: int32
             * @description The lower number, the higher the priority is
             */
            priority?: number;
            customFields?: components["schemas"]["CustomFieldsDto"];
            groupedAttributes?: components["schemas"]["GroupedAttributeDto"][];
            chargeTemplates?: components["schemas"]["ChargeTemplateDto"][];
            commercialRules?: components["schemas"]["CommercialRuleHeaderDTO"][];
            tags?: components["schemas"]["TagDto"][];
            assignedAttributes?: components["schemas"]["AttributeDTO"][];
            actionStatus?: components["schemas"]["ActionStatus"];
        };
        BaseQuoteDTO: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            /**
             * Format: date-time
             * @description The date of the quote
             */
            quoteDate?: string;
            validity?: components["schemas"]["DatePeriod"];
            /**
             * @description The status of the quote
             * @default IN_PROGRESS
             * @example Possible value : IN_PROGRESS, PENDING, CANCELLED, APPROVED, ACCEPTED, REJECTED
             */
            status: string;
            /** @description The code of the billing account of the applicant */
            applicantAccountCode: string;
            /** @description The code of the billing account of the billable */
            billableAccountCode?: string;
            /**
             * Format: date-time
             * @description The delivery date of quote lot
             */
            deliveryDate?: string;
            /**
             * Format: int32
             * @description Duration of the quote lot
             */
            quoteLotDuration?: number;
            /** @description The opportunity ref */
            opportunityRef?: string;
            /** @description The code of the seller */
            sellerCode?: string;
            /**
             * Format: date-time
             * @description The send date
             */
            sendDate?: string;
            /** @description The quote number */
            quoteNumber?: string;
            /** @description The external id */
            externalId?: string;
            /**
             * Format: date-time
             * @description The status date
             */
            statusDate?: string;
            /** @description The code of the user account */
            userAccountCode?: string;
            /** @description The sales person name */
            salesPersonName?: string;
            /** @description Contract code */
            contractCode?: string;
        };
        GetQuoteDtoResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            quoteDto?: components["schemas"]["BaseQuoteDTO"];
            currentVersion?: components["schemas"]["GetQuoteVersionDtoResponse"];
            allQuoteVersions?: components["schemas"]["GetQuoteVersionDtoResponse"][];
        };
        GetQuoteVersionDtoResponse: {
            /** @description The short description */
            shortDescription?: string;
            /** @description The code quote */
            quoteCode: string;
            /**
             * Format: int32
             * @description The current version
             */
            currentVersion?: number;
            /**
             * @description Status of quote version
             * @example Possible value : DRAFT, PUBLISHED, CLOSED
             * @enum {string}
             */
            status?: "DRAFT" | "PUBLISHED" | "CLOSED";
            /**
             * Format: date-time
             * @description The status date, it set automaically when status is changed
             */
            statusDate?: string;
            /**
             * Format: date-time
             * @description The start date
             */
            startDate?: string;
            /**
             * Format: date-time
             * @description The end date
             */
            endDate?: string;
            /** @description The code of the billing plan */
            billingPlanCode?: string;
            /** @description The code of the discount plan */
            discountPlanCode?: string;
            /** @description The code of the contract */
            contractCode?: string;
            mediaCodes?: string[];
            /** @description The comment */
            comment?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
            quoteItems?: components["schemas"]["QuoteOfferDTO"][];
            prices?: components["schemas"]["TaxPricesDto"][];
            actionStatus?: components["schemas"]["ActionStatus"];
        };
        CommercialOrderDto: {
            /**
             * Format: int64
             * @description id of the order
             */
            id?: number;
            /** @description code of the order */
            code?: string;
            /** @description description of the order */
            description?: string;
            /** @description code seller */
            sellerCode: string;
            /** @description order number of the order, it set automatically when the order is validated */
            orderNumber?: string;
            /** @description description of the order */
            label?: string;
            /** @description code of existing the billing account */
            billingAccountCode: string;
            /** @description code of existing quote */
            quoteCode?: string;
            /** @description code of existing contract */
            contractCode?: string;
            /** @description code of existing order type, can be empty */
            orderTypeCode?: string;
            /** @description code of existing invoicing plan */
            invoicingPlanCode?: string;
            /** @description status of the order */
            status?: string;
            /**
             * Format: int32
             * @description order progress for the order
             */
            orderProgress: number;
            /**
             * Format: date-time
             * @description progress date of order, must not be empty
             */
            progressDate: string;
            /**
             * Format: date-time
             * @description date of the order, must not be empty
             */
            orderDate: string;
            /**
             * Format: date-time
             * @description date of delivery of the order
             */
            deliveryDate?: string;
            /**
             * Format: date-time
             * @description date begin of the customer service
             */
            customerServiceBegin?: string;
            /**
             * Format: int32
             * @description duration customer service
             */
            customerServiceDuration?: number;
            externalReference?: string;
            orderParentCode?: string;
            /** @description code of the user account */
            userAccountCode?: string;
            accessDto?: components["schemas"]["AccessDto"];
            /** @description list of order lot's code */
            orderLotCodes?: string[];
            customFields?: components["schemas"]["CustomFieldsDto"];
            /** @description The code of the discount plan */
            discountPlanCode?: string;
            /** @description The sales person name */
            salesPersonName?: string;
            /** @description Order billing cycle */
            billingCycleCode?: string;
        };
        GetOrderOfferDtoResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            orderOfferDto?: components["schemas"]["OrderOfferDto"];
        };
        OrderOfferDto: {
            /**
             * Format: int64
             * @description The id of the order offer
             */
            orderOfferId?: number;
            /**
             * Format: int64
             * @description The commercial order id
             */
            commercialOrderId?: number;
            /** @description The offer template code */
            offerTemplateCode?: string;
            /** @description The discountPlan code */
            discountPlanCode?: string;
            orderProducts?: components["schemas"]["OrderProductDto"][];
            orderAttributes?: components["schemas"]["OrderAttributeDto"][];
            /**
             * Format: date-time
             * @description The delivery date
             */
            deliveryDate?: string;
            userAccountCode?: string;
            /** @description The subscription code */
            subscriptionCode?: string;
            /**
             * @description The order line type
             * @enum {string}
             */
            orderLineType?: "CREATE" | "AMEND" | "TERMINATE";
            /**
             * Format: date-time
             * @description The termination date
             */
            terminationDate?: string;
            /** @description The termination reason */
            terminationReasonCode?: string;
            /** @description code of existing contract */
            contractCode?: string;
        };
        OrderProductDto: {
            /**
             * Format: int64
             * @description The order product id
             */
            orderProductId?: number;
            /**
             * Format: int64
             * @description The commercial order id
             */
            commercialOrderId?: number;
            /** @description The order lot code */
            orderLotCode?: string;
            /**
             * Format: int64
             * @description The order offer id
             */
            orderOfferId?: number;
            /** @description The discount plan code */
            discountPlanCode?: string;
            /**
             * Format: int32
             * @description The proudct version
             */
            productVersion?: number;
            /** @description The product code */
            productCode?: string;
            /** @description The quantity */
            quantity?: number;
            /**
             * Format: date-time
             * @description The delivery date
             */
            deliveryDate?: string;
            /**
             * Format: date-time
             * @description The termination date
             */
            terminationDate?: string;
            /** @description The termination reason code */
            terminationReasonCode?: string;
            /**
             * @description The action type
             * @enum {string}
             */
            actionType?: "CREATE" | "ACTIVATE" | "SUSPEND" | "TERMINATE" | "MODIFY";
            /**
             * Format: int64
             * @description The service instance id
             */
            serviceInstanceId?: number;
            orderAttributes?: components["schemas"]["OrderAttributeDto"][];
            /** @enum {string} */
            instanceStatus?: "ACTIVE" | "INACTIVE" | "CANCELED" | "TERMINATED" | "SUSPENDED" | "CLOSED" | "PENDING";
        };
        GetCommercialOrderDtoResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            commercialOrderDto?: components["schemas"]["CommercialOrderDto"];
        };
        GetListCommercialOrderDtoResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            commercialOrderDtos?: components["schemas"]["CommercialOrderDto"][];
        };
        GetCommercialRuleDtoResponse: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            /**
             * @description rule type
             * @example possible value are : PRE_REQUISITE, INCOMPATIBILITY, REPLACEMENT
             * @enum {string}
             */
            ruleType?: "PRE_REQUISITE" | "INCOMPATIBILITY" | "REPLACEMENT";
            /** @description rule expression language */
            ruleEl?: string;
            /** @description code offer of template */
            offerCode?: string;
            /** @description code product */
            productCode?: string;
            /**
             * Format: int32
             * @description product version
             */
            productVersion?: number;
            /** @description code of attribute */
            attributeCode?: string;
            /**
             * @description commercial rule scope
             * @enum {string}
             */
            scope?: "QUOTE" | "QUOTE_OFFER";
            /** @description code tag */
            tagCode?: string;
            /** @description code of grouped attribute */
            groupedAttributeCode?: string;
            /** @description target attribute value */
            targetAttributeValue?: string;
            /** @description is commercial rule header is the target, default value is True */
            isTarget?: boolean;
            /** @description is commercial rule disabled, default value is false */
            disabled?: boolean;
            /** @description list of commercial rule item */
            commercialRuleItems?: components["schemas"]["CommercialRuleItemDTO"][];
            actionStatus?: components["schemas"]["ActionStatus"];
        };
        GetListCommercialRulesResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            commercialRules?: components["schemas"]["CommercialRuleHeaderDTO"][];
        };
        ContractDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            /**
             * @description contract account level, associate seller or customer or customer account or billing account to this contract
             * @example possible value are : SELLER, CUSTOMER, CUSTOMER_ACCOUNT, BILLING_ACCOUNT
             * @enum {string}
             */
            contractAccountLevel?: "SELLER" | "CUSTOMER" | "CUSTOMER_ACCOUNT" | "BILLING_ACCOUNT";
            /** @description account code associated to contract depending the value of  contractAccountLevel */
            accountCode?: string;
            /**
             * @description status of the contract
             * @example possible value are : DRAFT, ACTIVE, CLOSED
             */
            status?: string;
            /**
             * Format: date-time
             * @description date of the changement of the status, it set automatically
             */
            statusDate?: string;
            /**
             * Format: date-time
             * @description day of the contract
             */
            contractDate: string;
            /**
             * Format: date-time
             * @description begin date of the contract
             */
            beginDate: string;
            /**
             * Format: date-time
             * @description end date of the contract
             */
            endDate: string;
            /** @description renwal a the contract */
            renewal: boolean;
            /**
             * Format: int32
             * @description duration of the contract
             */
            contractDuration?: number;
            customFields?: components["schemas"]["CustomFieldsDto"];
            /** @description list of billing rules */
            billingRules?: components["schemas"]["BillingRuleDto"][];
            /** @description An expression to decide whether the contract should be applied or not */
            applicationEl?: string;
            applicationEL?: string;
        };
        ContractListDto: {
            /** Format: int32 */
            listSize?: number;
            contracts?: components["schemas"]["ContractDto"][];
        };
        ContractListResponsDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            contracts?: components["schemas"]["ContractListDto"];
        };
        ContractItemDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            /** @description contract code */
            contractCode: string;
            /** @description code of the offer template */
            offerTemplateCode?: string;
            /** @description code of the product */
            productCode?: string;
            /** @description code price plan */
            pricePlanCode: string;
            /** @description code of charge template */
            chargeTemplateCode?: string;
            /** @description code of the service template */
            serviceTemplateCode?: string;
            /**
             * Format: double
             * @description rate of the contract
             */
            rate?: number;
            /** @description amount without tax */
            amountWithoutTax?: number;
            /** @description separate discount */
            seperateDiscountLine?: boolean;
            /** @description Expression language to condition contract line application */
            applicationEl?: string;
            /** @description If true then contract discount will apply to price overridden in quote. */
            applicableOnOverriddenPrice?: boolean;
            /**
             * @description rate of contract type
             * @example possible value are : PERCENTAGE, FIXED
             * @enum {string}
             */
            contractRateType?: "PERCENTAGE" | "FIXED";
            customFields?: components["schemas"]["CustomFieldsDto"];
            /** @description defind list of target article that can be applied */
            targetAccountingArticleCodes?: string[];
        };
        GetContractDtoResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            contract?: components["schemas"]["ContractDto"];
        };
        GetListContractDtoResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            contracts?: components["schemas"]["ContractDto"][];
        };
        GetQuoteOfferDtoResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            quoteOfferDto?: components["schemas"]["QuoteOfferDTO"];
        };
        CpqQuotesListDto: {
            /** Format: int32 */
            listSize?: number;
            quoteDtos?: components["schemas"]["QuoteDTO"][];
        };
        CpqQuotesListResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            quotes?: components["schemas"]["CpqQuotesListDto"];
        };
        GetPdfQuoteResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            pdfFileName?: string;
            xmlFileName?: string;
            pdfContent?: string[];
            xmlContent?: string[];
        };
        OverrideChargedPriceDto: {
            /** Format: int64 */
            offerId?: number;
            accountingArticleCode?: string;
            unitAmountWithoutTax?: number;
            priceOverCharged?: boolean;
            applyDiscountsOnOverridenPrice?: boolean;
        };
        OverrideChargedPricesDto: {
            prices?: components["schemas"]["OverrideChargedPriceDto"][];
        };
        GetGroupedAttributesResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            groupedAttributeDto?: components["schemas"]["GroupedAttributeDto"];
        };
        GetMediaDtoResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            mediaDto?: components["schemas"]["MediaDto"];
        };
        GetOrderTypeDtoResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            orderTypeDto?: components["schemas"]["OrderTypeDto"];
        };
        OrderTypeDto: {
            /** Format: int64 */
            id?: number;
            /** @description code of the order type */
            code: string;
            /** @description description of order type */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
        };
        GetListOrderTypeResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            orderTypes?: components["schemas"]["OrderTypeDto"][];
        };
        GetTagDtoResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            tagDto?: components["schemas"]["TagDto"];
            /** Format: int64 */
            id?: number;
        };
        GetTagTypeDtoResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            tagTypeDto?: components["schemas"]["TagTypeDto"];
            /** Format: int64 */
            id?: number;
        };
        TagTypeDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            sellerCode?: string;
        };
        AddressBookContactDto: {
            /** Format: int64 */
            id?: number;
            addressBook?: {
                [key: string]: number;
            };
            position?: string;
            mainContact?: boolean;
            customer?: components["schemas"]["CustomerDto"];
        };
        AddressBookDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            contact?: components["schemas"]["ContactDto"][];
        };
        ContactDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            /** @description The external ref 1 */
            externalRef1?: string;
            /** @description The external ref 2 */
            externalRef2?: string;
            name?: components["schemas"]["NameDto"];
            address?: components["schemas"]["AddressDto"];
            /** @description The job title */
            jobTitle?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
            loaded?: boolean;
            /** @description The vat no */
            vatNo?: string;
            /** @description The registration no */
            registrationNo?: string;
            contactInformation?: components["schemas"]["ContactInformationDto"];
            /** @description indicate if this is a company */
            isCompany?: boolean;
            legalEntityType?: components["schemas"]["TitleDto"];
            assistantName?: string;
            assistantPhone?: string;
            position?: string;
            company?: string;
            websiteUrl?: string;
            importedFrom?: string;
            importedBy?: string;
            socialIdentifier?: string;
            reference?: string;
            comment?: string;
            agreedToUA?: boolean;
            contactPolicy?: components["schemas"]["CommunicationPolicy"];
            tags?: string[];
            contactCategoryCodes?: string[];
            addressBookContacts?: components["schemas"]["AddressBookContactDto"][];
            prospect?: boolean;
            vip?: boolean;
            isVip?: boolean;
            isProspect?: boolean;
        };
        GetAddressBookResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            addressBook?: components["schemas"]["AddressBookDto"];
        };
        GetContactResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            contact?: components["schemas"]["ContactDto"];
        };
        ContactsDto: {
            contact?: components["schemas"]["ContactDto"][];
            /** Format: int64 */
            totalNumberOfRecords?: number;
        };
        ContactsResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            contacts?: components["schemas"]["ContactsDto"];
        };
        CustomEntityInstanceDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            cetCode?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
        };
        CustomEntityInstanceResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            customEntityInstance?: components["schemas"]["CustomEntityInstanceDto"];
        };
        CustomEntityInstancesResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            customEntityInstances?: components["schemas"]["CustomEntityInstanceDto"][];
        };
        CustomFieldMatrixColumnDto: {
            /** @enum {string} */
            columnUse?: "USE_KEY" | "USE_VALUE";
            /** Format: int32 */
            position?: number;
            code?: string;
            label?: string;
            /** @enum {string} */
            keyType?: "STRING" | "LONG" | "DOUBLE" | "RON";
        };
        CustomFieldTemplateDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
            /** @enum {string} */
            fieldType: "STRING" | "DATE" | "LONG" | "DOUBLE" | "LIST" | "CHECKBOX_LIST" | "ENTITY" | "TEXT_AREA" | "CHILD_ENTITY" | "MULTI_VALUE" | "BOOLEAN" | "CUSTOM_TABLE_WRAPPER" | "URL";
            accountLevel?: string;
            appliesTo?: string;
            defaultValue?: string;
            useInheritedAsDefaultValue?: boolean;
            /** @enum {string} */
            storageType: "SINGLE" | "LIST" | "MAP" | "MATRIX";
            valueRequired?: boolean;
            uniqueConstraint?: boolean;
            versionable?: boolean;
            triggerEndPeriodEvent?: boolean;
            calendar?: string;
            /** Format: int32 */
            cacheValueTimeperiod?: number;
            entityClazz?: string;
            listValues?: {
                [key: string]: string;
            };
            allowEdit?: boolean;
            hideOnNew?: boolean;
            /** Format: int64 */
            maxValue?: number;
            /** Format: int64 */
            minValue?: number;
            regExp?: string;
            cacheValue?: boolean;
            /** Format: int32 */
            nbDecimal?: number;
            /** @enum {string} */
            roundingMode?: "NEAREST" | "DOWN" | "UP" | "HALF_EVEN";
            guiPosition?: string;
            /** @enum {string} */
            mapKeyType?: "STRING" | "LONG" | "DOUBLE" | "RON";
            applicableOnEl?: string;
            matrixColumns?: components["schemas"]["CustomFieldMatrixColumnDto"][];
            childEntityFieldsForSummary?: string[];
            /** @enum {string} */
            indexType?: "STORE_ONLY" | "INDEX" | "INDEX_NOT_ANALYZE";
            tags?: string;
            displayFormat?: string;
            customTableCodeEL?: string;
            dataFilterEL?: string;
            fieldsEL?: string;
            versionFilterEL?: string;
        };
        GetCustomFieldTemplateReponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            customFieldTemplate?: components["schemas"]["CustomFieldTemplateDto"];
        };
        CustomTableDataDto: {
            customTableCode?: string;
            overwrite?: boolean;
            values?: components["schemas"]["CustomTableRecordDto"][];
            valuesFromListofMap?: {
                [key: string]: Record<string, never>;
            }[];
        };
        CustomTableRecordDto: {
            /** Format: int64 */
            id?: number;
            values?: {
                [key: string]: Record<string, never>;
            };
            tableName?: string;
        };
        CustomTableDataResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            customTableData?: components["schemas"]["CustomTableDataDto"];
        };
        CustomTableWrapperDto: {
            ctwCode: string;
            entityId?: string;
            entityClass?: string;
            pagingAndFiltering?: components["schemas"]["PagingAndFiltering"];
        };
        EntityCustomActionDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            appliesTo?: string;
            applicableOnEl?: string;
            label?: string;
            labelsTranslated?: components["schemas"]["LanguageDescriptionDto"][];
            script?: components["schemas"]["ScriptInstanceDto"];
            guiPosition?: string;
        };
        CustomEntityTemplateDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            name?: string;
            storeAsTable?: boolean;
            storeInES?: boolean;
            fields?: components["schemas"]["CustomFieldTemplateDto"][];
            actions?: components["schemas"]["EntityCustomActionDto"][];
            disableable?: boolean;
            versioned?: boolean;
        };
        EntityCustomizationDto: {
            classname?: string;
            fields?: components["schemas"]["CustomFieldTemplateDto"][];
            actions?: components["schemas"]["EntityCustomActionDto"][];
        };
        EntityCustomActionResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            entityAction?: components["schemas"]["EntityCustomActionDto"];
        };
        EntityCustomizationResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            entityCustomization?: components["schemas"]["EntityCustomizationDto"];
        };
        CustomEntityTemplateResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            customEntityTemplate?: components["schemas"]["CustomEntityTemplateDto"];
        };
        BusinessEntityResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            businessEntities?: components["schemas"]["BusinessEntityDto"][];
        };
        CustomEntityTemplatesResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            customEntityTemplates?: components["schemas"]["CustomEntityTemplateDto"][];
        };
        UnitaryCustomTableDataDto: {
            customTableCode?: string;
            overwrite?: boolean;
            value?: components["schemas"]["CustomTableRecordDto"];
            rowValues?: {
                [key: string]: Record<string, never>;
            };
        };
        ApiException: {
            causes?: components["schemas"]["Cause"][];
            details?: string;
            code?: string;
            /** @enum {string} */
            status?: "OK" | "Created" | "Accepted" | "No Content" | "Reset Content" | "Partial Content" | "Moved Permanently" | "Found" | "See Other" | "Not Modified" | "Use Proxy" | "Temporary Redirect" | "Bad Request" | "Unauthorized" | "Payment Required" | "Forbidden" | "Not Found" | "Method Not Allowed" | "Not Acceptable" | "Proxy Authentication Required" | "Request Timeout" | "Conflict" | "Gone" | "Length Required" | "Precondition Failed" | "Request Entity Too Large" | "Request-URI Too Long" | "Unsupported Media Type" | "Requested Range Not Satisfiable" | "Expectation Failed" | "Precondition Required" | "Too Many Requests" | "Request Header Fields Too Large" | "Internal Server Error" | "Not Implemented" | "Bad Gateway" | "Service Unavailable" | "Gateway Timeout" | "HTTP Version Not Supported" | "Network Authentication Required";
            /** Format: int64 */
            id?: number;
            links?: {
                title?: string;
                uriBuilder?: Record<string, never>;
                rel?: string;
                rels?: string[];
                params?: {
                    [key: string]: string;
                };
                /** Format: uri */
                uri?: string;
                type?: string;
            }[];
        };
        Cause: {
            causeMessage?: string;
        };
        IdentityResponseDTO: {
            actionStatus?: components["schemas"]["ActionStatus"];
            /** Format: int64 */
            id?: number;
        };
        DataCollectorDto: {
            /** Format: int64 */
            id?: number;
            code?: string;
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            sqlQuery?: string;
            aliases?: {
                [key: string]: string;
            };
            parameters?: {
                [key: string]: string;
            };
            customTableCode?: string;
            entityTemplateDto?: components["schemas"]["CustomEntityTemplateDto"];
        };
        DataCollectorResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            dataCollectorDto?: components["schemas"]["DataCollectorDto"];
        };
        SignFileResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            id?: string;
            name?: string;
            description?: string;
            content?: string[];
        };
        SignMemberDto: {
            id?: string;
            firstname?: string;
            lastname?: string;
            email?: string;
            phone?: string;
            user?: string;
            internal?: boolean;
        };
        SignProcedureResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            id?: string;
            name?: string;
            description?: string;
            status?: string;
            members?: components["schemas"]["SignMemberDto"][];
            files?: components["schemas"]["SignFileResponseDto"][];
        };
        CreateProcedureRequestDto: {
            absolutePaths?: boolean;
            withInternalMember?: boolean;
            filesToSign?: components["schemas"]["SignFileRequestDto"][];
            procedure?: components["schemas"]["SignProcedureDto"];
        };
        SignEventEmailDto: {
            subject?: string;
            message?: string;
            to?: string[];
        };
        SignEventWebhookDto: {
            url?: string;
            method?: string;
            headers?: {
                [key: string]: string;
            };
        };
        SignFileObjectRequestDto: {
            position?: string;
            /** Format: int32 */
            page?: number;
            file?: string;
        };
        SignFileRequestDto: {
            id?: string;
            name?: string;
            filePath?: string;
            /** Format: int32 */
            position?: number;
            internalPosition?: string;
            externalPosition?: string;
            /** Format: int32 */
            internalPage?: number;
            /** Format: int32 */
            externalPage?: number;
            content?: string[];
            listExternalPositions?: components["schemas"]["SignFileObjectRequestDto"][];
        };
        SignMemberRequestDto: {
            id?: string;
            firstname?: string;
            lastname?: string;
            email?: string;
            phone?: string;
            user?: string;
            internal?: boolean;
            fileObjects?: components["schemas"]["SignFileObjectRequestDto"][];
        };
        SignProcedureConfigDto: {
            email?: {
                [key: string]: components["schemas"]["SignEventEmailDto"][];
            };
            webhook?: {
                [key: string]: components["schemas"]["SignEventWebhookDto"][];
            };
        };
        SignProcedureDto: {
            id?: string;
            name?: string;
            description?: string;
            start?: boolean;
            members?: components["schemas"]["SignMemberRequestDto"][];
            config?: components["schemas"]["SignProcedureConfigDto"];
        };
        RawResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            response: Record<string, never>;
        };
        RawResponseDtoString: {
            actionStatus?: components["schemas"]["ActionStatus"];
            response: string;
        };
        PDFDocumentResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            listPdfFilePaths?: string[];
            pdfFilePath?: string;
            pdfFile?: string[];
            pdfFiles?: string[][];
        };
        PDFDocumentRequestDto: {
            listTemplates?: components["schemas"]["PDFTemplateDto"][];
            documentDestinationDir?: string;
            documentNamePrefix?: string;
            returnPdf?: boolean;
            combineFiles?: boolean;
            absolutePaths?: boolean;
            flattened?: boolean;
        };
        PDFTemplateDto: {
            templateFields?: {
                [key: string]: string;
            };
            templateName?: string;
            templatePath?: string;
            barCodeFields?: string[];
        };
        DunningDocumentDto: {
            dunningDocumentId?: string;
            customerAccountCode?: string;
            subscriptionCode?: string;
            payments: components["schemas"]["PaymentDto"][];
            dueInvoices: components["schemas"]["InvoiceDto"][];
        };
        PaymentDto: {
            type?: string;
            description?: string;
            /** @enum {string} */
            paymentMethod?: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
            occTemplateCode?: string;
            amount?: number;
            customerAccountCode?: string;
            reference?: string;
            bankLot?: string;
            /** Format: date-time */
            depositDate?: string;
            /** Format: date-time */
            bankCollectionDate?: string;
            /** Format: date-time */
            collectionDate?: string;
            /** Format: date-time */
            dueDate?: string;
            /** Format: date-time */
            transactionDate?: string;
            listOCCReferenceforMatching?: string[];
            listAoIdsForMatching?: number[];
            paymentOrder?: string;
            fees?: number;
            comment?: string;
            paymentInfo?: string;
            paymentInfo1?: string;
            paymentInfo2?: string;
            paymentInfo3?: string;
            paymentInfo4?: string;
            paymentInfo5?: string;
            paymentInfo6?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
            toMatching?: boolean;
        };
        DunningDocumentResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            dunningDocument?: components["schemas"]["DunningDocumentDto"];
        };
        DunningDocumentListDto: {
            /** Format: int32 */
            listSize?: number;
            dunningDocuments?: components["schemas"]["DunningDocumentDto"][];
        };
        DunningDocumentsListResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            dunningDocuments?: components["schemas"]["DunningDocumentListDto"];
        };
        BarChartDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            measurableQuantity?: components["schemas"]["MeasurableQuantityDto"];
            width?: string;
            height?: string;
            style?: string;
            styleClass?: string;
            extender?: string;
            visible?: boolean;
            /** @enum {string} */
            legendPosition?: "n" | "s" | "e" | "w";
            /** Format: int32 */
            barPadding?: number;
            /** Format: int32 */
            barMargin?: number;
            /** @enum {string} */
            orientation?: "vertical" | "horizontal";
            stacked?: boolean;
            /** Format: double */
            min?: number;
            /** Format: double */
            max?: number;
            breakOnNull?: boolean;
            xaxisLabel?: string;
            yaxisLabel?: string;
            /** Format: int32 */
            xaxisAngle?: number;
            /** Format: int32 */
            yaxisAngle?: number;
            /** Format: int32 */
            legendCols?: number;
            /** Format: int32 */
            legendRows?: number;
            zoom?: boolean;
            animate?: boolean;
            showDataTip?: boolean;
            datatipFormat?: string;
        };
        ChartDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            measurableQuantity?: components["schemas"]["MeasurableQuantityDto"];
            width?: string;
            height?: string;
            style?: string;
            styleClass?: string;
            extender?: string;
            visible?: boolean;
            chartType: string;
        };
        LineChartDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            measurableQuantity?: components["schemas"]["MeasurableQuantityDto"];
            width?: string;
            height?: string;
            style?: string;
            styleClass?: string;
            extender?: string;
            visible?: boolean;
            filled?: boolean;
            /** @enum {string} */
            legendPosition?: "n" | "s" | "e" | "w";
            seriesColors?: string;
            shadow?: boolean;
            /** Format: int32 */
            minX?: number;
            /** Format: int32 */
            maxX?: number;
            /** Format: int32 */
            minY?: number;
            /** Format: int32 */
            maxY?: number;
            breakOnNull?: boolean;
            xaxisLabel?: string;
            yaxisLabel?: string;
            /** Format: int32 */
            xaxisAngle?: number;
            /** Format: int32 */
            yaxisAngle?: number;
            stacked?: boolean;
            zoom?: boolean;
            animate?: boolean;
            showDataTip?: boolean;
            datatipFormat?: string;
            /** Format: int32 */
            legendCols?: number;
            /** Format: int32 */
            legendRows?: number;
        };
        MeasurableQuantityDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            theme?: string;
            dimension1?: string;
            dimension2?: string;
            dimension3?: string;
            dimension4?: string;
            editable?: boolean;
            additive?: boolean;
            sqlQuery?: string;
            /** @enum {string} */
            measurementPeriod?: "DAILY" | "WEEKLY" | "MONTHLY" | "YEARLY";
            /** Format: date-time */
            lastMeasureDate?: string;
            codeOnly?: boolean;
        };
        PieChartDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            measurableQuantity?: components["schemas"]["MeasurableQuantityDto"];
            width?: string;
            height?: string;
            style?: string;
            styleClass?: string;
            extender?: string;
            visible?: boolean;
            filled?: boolean;
            /** @enum {string} */
            legendPosition?: "n" | "s" | "e" | "w";
            seriesColors?: string;
            /** Format: int32 */
            diameter?: number;
            /** Format: int32 */
            sliceMargin?: number;
            shadow?: boolean;
            showDataLabels?: boolean;
            /** Format: int32 */
            legendCols?: number;
            /** Format: int32 */
            legendRows?: number;
        };
        GetChartResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            chartDto?: components["schemas"]["ChartDto"];
        };
        ChartsResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            charts?: components["schemas"]["ChartDto"][];
        };
        GetMeasurableQuantityResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            measurableQuantityDto?: components["schemas"]["MeasurableQuantityDto"];
        };
        GetListMeasurableQuantityResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            listMeasurableQuantityDto?: components["schemas"]["MeasurableQuantityDto"][];
        };
        ReportExtractDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            /** @enum {string} */
            scriptType?: "JAVA" | "SQL";
            filenameFormat?: string;
            fileSeparator?: string;
            category?: string;
            outputDir?: string;
            scriptInstanceCode?: string;
            sqlQuery?: string;
            params?: {
                [key: string]: string;
            };
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string;
            /** @enum {string} */
            reportExtractResultType?: "CSV" | "HTML";
            style?: string;
            imagePath?: string;
            customTableCode?: string;
            accumulate?: boolean;
            separator?: string;
            decimalSeparator?: string;
            generateEmptyReport?: boolean;
            /** Format: int64 */
            maximumLine?: number;
            includeHeaders?: boolean;
        };
        ReportExtractResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            reportExtract?: components["schemas"]["ReportExtractDto"];
        };
        ReportExtractExecutionResultDto: {
            reportExtractCode?: string;
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string;
            filePath?: string;
            /** Format: int32 */
            lineCount?: number;
            /** @enum {string} */
            origin?: "API" | "JOB" | "GUI";
            errorMessage?: string;
            status?: boolean;
        };
        ReportExtractExecutionResultResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            reportExtractExecutionResult?: components["schemas"]["ReportExtractExecutionResultDto"];
        };
        ReportExtractExecutionResultsResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            reportExtractExecutionResults?: components["schemas"]["ReportExtractExecutionResultDto"][];
        };
        ReportExtractsResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            reportExtracts?: components["schemas"]["ReportExtractDto"][];
        };
        RunReportExtractDto: {
            code: string;
            params?: {
                [key: string]: string;
            };
        };
        GWFActionDto: {
            description?: string;
            uuid?: string;
            /** Format: int32 */
            priority?: number;
            /** @enum {string} */
            type?: "UPDATE_FIELD" | "LOG" | "ACTION_SCRIPT" | "NOTIFICATION";
            conditionEl?: string;
            asynchronous?: boolean;
            actionScriptCode?: string;
            notificationCode?: string;
            valueEl?: string;
            /** @enum {string} */
            logLevel?: "INFO" | "DEBUG" | "TRACE";
            field?: string;
            parameters?: {
                [key: string]: string;
            };
        };
        GWFTransitionDto: {
            uuid?: string;
            fromStatus: string;
            toStatus: string;
            conditionEl: string;
            /** Format: int32 */
            priority?: number;
            description: string;
            actionScriptCode?: string;
            actions?: components["schemas"]["GWFActionDto"][];
        };
        GenericWorkflowDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            targetEntityClass: string;
            targetCetCode?: string;
            filter?: components["schemas"]["FilterDto"];
            initStatus: string;
            statuses?: components["schemas"]["WFStatusDto"][];
            transitions?: components["schemas"]["GWFTransitionDto"][];
            enableHistory?: boolean;
        };
        WFStatusDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            uuid?: string;
        };
        GenericWorkflowResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            genericWorkflow?: components["schemas"]["GenericWorkflowDto"];
        };
        GenericWorkflowsResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            workflows?: components["schemas"]["GenericWorkflowDto"][];
        };
        WorkflowInsHistoryResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            workflowInsHistories?: components["schemas"]["WorkflowInstanceHistoryDto"][];
        };
        WorkflowInstanceHistoryDto: {
            /** Format: date-time */
            actionDate?: string;
            workflowInstanceCode?: string;
            fromStatus?: string;
            toStatus?: string;
            transitionName?: string;
        };
        UserHierarchyLevelDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            parentLevel?: string;
            childLevels?: components["schemas"]["UserHierarchyLevelDto"][];
        };
        UserHierarchyLevelResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            userHierarchyLevel?: components["schemas"]["UserHierarchyLevelDto"];
        };
        UserHierarchyLevelsDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            userHierarchyLevels?: components["schemas"]["UserHierarchyLevelDto"][];
        };
        FieldsNotImportedStringCollectionDto: {
            fieldsNotImported?: string[];
        };
        ImportExportResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            executionId?: string;
            summary?: {
                [key: string]: number;
            };
            importResultDto?: components["schemas"]["ImportResultDto"][];
            fieldsNotImported?: {
                [key: string]: components["schemas"]["FieldsNotImportedStringCollectionDto"];
            };
            exceptionMessage?: string;
            failureMessageKey?: string;
            failureMessage?: string;
            failed?: boolean;
            done?: boolean;
        };
        ImportResultDto: {
            name?: string;
            code?: string;
            status?: string;
        };
        ImportExportRequestDto: {
            exportType?: string;
            instanceCode?: string;
            fileName?: string;
            entityToExport?: string;
        };
        InputPart: {
            contentTypeFromMessage?: boolean;
            bodyAsString?: string;
            mediaType?: {
                type?: string;
                subtype?: string;
                parameters?: {
                    [key: string]: string;
                };
                wildcardType?: boolean;
                wildcardSubtype?: boolean;
            };
            headers?: {
                empty?: boolean;
            } & {
                [key: string]: string[];
            };
        };
        MultipartFormDataInput: {
            formData?: {
                [key: string]: components["schemas"]["InputPart"];
            };
            formDataMap?: {
                [key: string]: components["schemas"]["InputPart"][];
            };
            preamble?: string;
            parts?: components["schemas"]["InputPart"][];
        };
        CancelInvoiceRequestDto: {
            /** Format: int64 */
            invoiceId: number;
        };
        CreateInvoiceResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            /** Format: int64 */
            invoiceId?: number;
            invoiceNumber?: string;
            /** Format: date-time */
            invoiceDate?: string;
            /** Format: date-time */
            dueDate?: string;
            amountWithoutTax?: number;
            amountTax?: number;
            amountWithTax?: number;
            netToPay?: number;
            xmlFilename?: string;
            xmlInvoice?: string;
            pdfFilename?: string;
            pdfInvoice?: string[];
            sentByEmail?: boolean;
        };
        CustomerInvoicesResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            customerInvoiceDtoList?: components["schemas"]["InvoiceDto"][];
        };
        GetInvoiceResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            invoice?: components["schemas"]["InvoiceDto"];
        };
        GetPdfInvoiceResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            pdfContent?: string[];
            pdfFileName?: string;
        };
        GetPdfInvoiceRequestDto: {
            /** Format: int64 */
            invoiceId?: number;
            invoiceNumber?: string;
            invoiceType?: string;
            generatePdf?: boolean;
        };
        GetXmlInvoiceResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            xmlContent?: string;
            xmlFileName?: string;
        };
        GetXmlInvoiceRequestDto: {
            /** Format: int64 */
            invoiceId?: number;
            invoiceNumber?: string;
            invoiceType?: string;
        };
        GenerateInvoiceResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            generateInvoiceResultDto?: components["schemas"]["GenerateInvoiceResultDto"][];
        };
        GenerateInvoiceResultDto: {
            /**
             * Format: int64
             * @description The invoice id
             */
            invoiceId?: number;
            /** @description The invoice type */
            invoiceType: string;
            /** @description The billing account code */
            billingAccountCode: string;
            /** @description Code of the Seller */
            sellerCode?: string;
            /** @description Code of the subscription */
            subscriptionCode?: string;
            /**
             * Format: int64
             * @description Id of the subscription
             */
            subscriptionId?: number;
            /** @description Order number of the invoice */
            orderNumber?: string;
            /**
             * @description The invoice status
             * @example possible value are : NEW, SUSPECT, REJECTED, DRAFT, CANCELED, VALIDATED
             * @enum {string}
             */
            status?: "NEW" | "SUSPECT" | "REJECTED" | "DRAFT" | "CANCELED" | "VALIDATED";
            /**
             * Format: date-time
             * @description The due date
             */
            dueDate: string;
            /**
             * Format: date-time
             * @description The invoice date
             */
            invoiceDate: string;
            /** @description The category invoice aggregates */
            categoryInvoiceAgregates?: components["schemas"]["CategoryInvoiceAgregateDto"][];
            /** @description The tax aggregates */
            taxAggregates: components["schemas"]["TaxInvoiceAggregateDto"][];
            /** @description The list invoice id to link */
            listInvoiceIdToLink?: number[];
            /** @description The invoice number */
            invoiceNumber?: string;
            /** @description discount applied to this invoice */
            discount?: number;
            /** @description The amount without tax */
            amountWithoutTax?: number;
            /** @description The amount tax */
            amountTax?: number;
            /** @description The amount with tax */
            amountWithTax?: number;
            /**
             * @description The payment method
             * @example possible value are : CHECK, DIRECTDEBIT, WIRETRANSFER, CARD, PAYPAL, STRIPE, CASH
             * @enum {string}
             */
            paymentMethod?: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
            /** @description The xml filename */
            xmlFilename?: string;
            /** @description The xml */
            xml?: string;
            /** @description he pdf filename */
            pdfFilename?: string;
            /** @description content of the pdf */
            pdf?: string[];
            /**
             * @description A request-only parameter. True if invoice should be assigned a number
             * @default true
             */
            autoValidation: boolean;
            /** @description A request-only parameter. True if XML invoice should be generated and returned */
            returnXml?: boolean;
            /** @description A request-only parameter. True if PDF invoice should be generated and returned */
            returnPdf?: boolean;
            /** @description A request-only parameter. True if PDF should be delivered by email. Defaults to True */
            sendByEmail?: boolean;
            /** @description A request-only parameter. True if currently due balance should be returned */
            includeBalance?: boolean;
            recordedInvoiceDto?: components["schemas"]["RecordedInvoiceDto"];
            /** @description The net to pay */
            netToPay?: number;
            /**
             * @description The invoice mode
             * @example possible value are: AGGREGATED, DETAILLED
             * @enum {string}
             */
            invoiceMode: "AGGREGATED" | "DETAILLED";
            customFields?: components["schemas"]["CustomFieldsDto"];
            /** @description The total due is a snapshot at invoice generation time of the due balance (not exigible) before invoice calculation+invoice amount. Due balance is a 'future' dueBalance (the due balance at the invoice due date) */
            dueBalance?: number;
            /** @description A flag to generate a draft invoice */
            isDraft?: boolean;
            /** @description Before sending the invoice, check if not already sent */
            checkAlreadySent?: boolean;
            /** @description Override Email defined in the billing entity */
            overrideEmail?: string;
            /**
             * @description True if the invoice was sent by email or delibered by some other electronic means, false otherwise
             * @default false
             */
            sentByEmail: boolean;
            paymentScheduleInstancesDto?: components["schemas"]["PaymentScheduleInstancesDto"];
            /**
             * Format: date-time
             * @description associated dunning creation date
             */
            dunningEntryDate?: string;
            /**
             * Format: date-time
             * @description associated dunning last update date
             */
            dunningLastModification?: string;
            /** @description associated dunning current status */
            dunningStatus?: string;
            /**
             * @description The invoice real time status
             * @example possible value are: NONE, PENDING, PAID, PPAID, UNPAID, ABANDONED, REFUNDED, DISPUTED
             * @enum {string}
             */
            realTimeStatus?: "NONE" | "PENDING" | "PENDING_PLAN" | "PAID" | "PPAID" | "UNPAID" | "ABANDONED" | "REFUNDED" | "DISPUTED";
            /** @description List of existing RTs to include, identified by id This option is allowed only if invoiceMode=='DETAILLED' */
            ratedTransactionsToLink?: number[];
            /** @description List of payment incidents */
            paymentIncidents?: string[];
            /**
             * Format: date-time
             * @description Date of send payment
             */
            sendPaymentDate?: string;
            /**
             * Format: date-time
             * @description Invoice payment collection date
             */
            initialCollectionDate?: string;
            /** @description Sum off writeOff accountOperations amounts */
            writeOffAmount?: number;
            /**
             * Format: date-time
             * @description last payment Date
             */
            paymentDate?: string;
            /**
             * Format: date-time
             * @description Invoice status change date
             */
            statusDate?: string;
            /**
             * Format: date-time
             * @description Date when the XML has been produced on a validated invoice
             */
            xmlDate?: string;
            /**
             * Format: date-time
             * @description Date when the PDf has been produced on a validated invoice
             */
            pdfDate?: string;
            /**
             * Format: date-time
             * @description Date when the invoice has been sent for a validated invoice
             */
            emailSentDate?: string;
            /**
             * @description payment status
             * @example possible value are: NONE, PENDING, PAID, PPAID, UNPAID, ABANDONED, REFUNDED, DISPUTED
             * @enum {string}
             */
            paymentStatus?: "NONE" | "PENDING" | "PENDING_PLAN" | "PAID" | "PPAID" | "UNPAID" | "ABANDONED" | "REFUNDED" | "DISPUTED";
            /**
             * Format: date-time
             * @description Payment status change date
             */
            paymentStatusDate?: string;
            /**
             * Format: date-time
             * @description Beginning of the billed period (based on billing cycle period whenever possible or min(invoiceLine.valueDate))
             */
            startDate?: string;
            /**
             * Format: date-time
             * @description End of the billed period (based on billing cycle period whenever possible or applied lastTransactionDate or max(invoiceLine.valueDate))
             */
            endDate?: string;
            /** @description Total raw amount from invoice lines. <ul><li>Does not include discount</li><li>With or without tax depending on provider setting (isEnterprise)</li></ul> */
            rawAmount: number;
            /** @description Discount rate to apply (in %).<p>Initialize with discount rate from linked invoice discount plan</p> */
            discountRate?: number;
            /** @description Total discount amount with or without tax depending on provider settings.<p>Can be inconsistent with discountRate.</p><p>discountAmount has precedence over discountRate</p> */
            discountAmount: number;
            /** @description Discount plan code */
            discountPlanCode?: string;
            /** @description The exchange rate that converted amounts of the invoice. */
            lastAppliedRate?: number;
            /**
             * Format: date-time
             * @description The date of exchange rate applied to amounts of the invoice.
             */
            lastAppliedRateDate?: string;
            temporaryInvoiceNumber?: string;
            invoiceTypeCode?: string;
            amount?: number;
            /** Format: int64 */
            accountOperationId?: number;
            ratedTransactionsTolink?: number[];
            alreadyAppliedMinimum?: boolean;
            draft?: boolean;
            alreadyAddedDiscount?: boolean;
        };
        GenerateInvoiceRequestDto: {
            targetType?: string;
            targetCode?: string;
            billingAccountCode?: string;
            openOrderCode?: string;
            applyBillingRules?: boolean;
            /** Format: date-time */
            invoicingDate: string;
            /** Format: date-time */
            firstTransactionDate?: string;
            /** Format: date-time */
            lastTransactionDate?: string;
            filter?: components["schemas"]["FilterDto"];
            orderNumber?: string;
            generateXML?: boolean;
            generatePDF?: boolean;
            generateAO?: boolean;
            customFields?: components["schemas"]["CustomFieldsDto"];
            includeRatedTransactions?: boolean;
            applyMinimum?: string;
            skipValidation?: boolean;
        };
        InvoicesDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            invoices?: components["schemas"]["InvoiceDto"][];
        };
        ValidateInvoiceRequestDto: {
            /** Format: int64 */
            invoiceId: number;
            generateAO?: boolean;
            refreshExchangeRate?: boolean;
            skipValidation?: boolean;
        };
        JobInstanceDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            jobCategory: components["schemas"]["JobCategoryEnum"];
            /** @description Job template */
            jobTemplate: string;
            /** @description Following job to execute */
            followingJob?: string;
            /** @description Parameter to job execution */
            parameter?: string;
            /**
             * @deprecated
             * @description Is job active. A negative of Disabled. Deprecated in 5.0.1. Use Disabled field instead
             */
            active?: boolean;
            customFields?: components["schemas"]["CustomFieldsDto"];
            /** @description Job scheduling timer code */
            timerCode?: string;
            /** @description What cluster nodes job could/should run on. A comma separated list of custer nodes. A job can/will be run on any node if value is null */
            runOnNodes?: string;
            /** @description Can job be run in parallel on several cluster nodes. Value of True indicates that job can be run on a single node at a time */
            limitToSingleNode?: boolean;
            /** @description Whether a verbose error log will be kept */
            verboseReport?: boolean;
            /**
             * @description Job execution speed. Defines how often job execution history gets updated
             * @enum {string}
             */
            jobSpeed?: "SLOW" | "NORMAL" | "FAST" | "VERY_FAST";
        };
        JobInstanceResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            jobInstanceDto?: components["schemas"]["JobInstanceDto"];
        };
        JobInstanceListDto: {
            /** Format: int32 */
            listSize?: number;
            jobInstances?: components["schemas"]["JobInstanceDto"][];
        };
        JobInstanceListResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            jobInstances?: components["schemas"]["JobInstanceListDto"];
        };
        TimerEntityDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            hour?: string;
            minute?: string;
            second?: string;
            year?: string;
            month?: string;
            dayOfMonth?: string;
            dayOfWeek?: string;
        };
        JobExecutionResultDto: {
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            jobInstanceId?: number;
            runningOnNodes?: string;
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string;
            /** Format: int64 */
            nbItemsToProcess?: number;
            /** Format: int64 */
            nbItemsCorrectlyProcessed: number;
            /** Format: int64 */
            nbItemsProcessedWithWarning: number;
            /** Format: int64 */
            nbItemsProcessedWithError: number;
            done?: boolean;
            /** @enum {string} */
            status?: "RUNNING" | "COMPLETED" | "COMPLETED_MORE" | "CANCELLED" | "FAILED";
            report?: string;
            jobInstanceCode?: string;
        };
        JobExecutionResultResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            jobExecutionResultDto?: components["schemas"]["JobExecutionResultDto"];
        };
        JobInstanceInfoDto: {
            timerName?: string;
            code?: string;
            start?: boolean;
            /** Format: date-time */
            lastTransactionDate?: string;
            /** Format: date-time */
            invoiceDate?: string;
            billingCycle?: string;
            forceExecution?: boolean;
            runOnNodes?: string;
            parameters?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
        };
        TimerEntityResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            timerEntity?: components["schemas"]["TimerEntityDto"];
        };
        JobExecutionResultsDto: {
            jobExecutionResults?: components["schemas"]["JobExecutionResultDto"][];
            /** Format: int64 */
            totalNumberOfRecords?: number;
        };
        JobExecutionResultsResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            jobExecutionResult?: components["schemas"]["JobExecutionResultsDto"];
        };
        JobCategoriesResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            jobCategories?: components["schemas"]["JobCategoryEnum"][];
        };
        GetTimerEntityResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            timerEntity?: components["schemas"]["TimerEntityDto"];
        };
        InvoiceLinesInput: {
            invoiceLines?: components["schemas"]["InvoiceLine"][];
            /** @description Indicate if the invoice line will skip validation */
            skipValidation?: boolean;
        };
        InvoiceCustomDto: {
            invoiceTypeCode?: string;
            billingAccountCode?: string;
            sellerCode?: string;
            amountWithTax?: number;
            comment?: string;
            clientContractant?: string;
            /** Format: date-time */
            invoiceDate?: string;
            /** Format: date-time */
            dueDate?: string;
            cfs?: {
                [key: string]: Record<string, never>;
            };
        };
        InvoiceLineInput: {
            /** @description Indicate if the invoice line will skip validation */
            skipValidation?: boolean;
            invoiceLine?: components["schemas"]["InvoiceLine"];
        };
        DiscountInvoiceAggregate: {
            /** @description The code of discount plan item */
            discountPlanItemCode?: string;
            /** @description The discount percent */
            discountPercent?: number;
            links?: {
                title?: string;
                uriBuilder?: Record<string, never>;
                rel?: string;
                rels?: string[];
                params?: {
                    [key: string]: string;
                };
                /** Format: uri */
                uri?: string;
                type?: string;
            }[];
            code?: string;
            /** Format: int64 */
            id?: number;
        };
        MetricsConfigurationDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            fullPath: string;
            method: string;
            metricsType: string;
            metricsUnit: string;
        };
        GetMetricsConfigurationResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            metricsConfigurationDto?: components["schemas"]["MetricsConfigurationDto"];
        };
        MeveoModuleDtoResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            module?: components["schemas"]["MeveoModuleDto"];
        };
        EmailNotificationDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            classNameFilter: string;
            /** @enum {string} */
            eventTypeFilter: "CREATED" | "UPDATED" | "REMOVED" | "TERMINATED" | "ENABLED" | "DISABLED" | "STARTED" | "PROCESSED" | "REJECTED" | "REJECTED_CDR" | "LOGGED_IN" | "INBOUND_REQ" | "LOW_BALANCE" | "COUNTER_DEDUCED" | "END_OF_TERM" | "STATUS_UPDATED" | "PAYMENT_STATUS_UPDATED" | "RENEWAL_UPDATED" | "XML_GENERATED" | "PDF_GENERATED" | "INVOICE_NUMBER_ASSIGNED" | "TO_R0" | "TO_R1" | "TO_R2" | "VERSION_CREATED" | "VERSION_REMOVED" | "ADVT_RATE_INCREASED";
            elFilter?: string;
            scriptInstanceCode?: string;
            scriptParams?: {
                [key: string]: string;
            };
            counterTemplate?: string;
            /** Format: int32 */
            priority?: number;
            active?: boolean;
            runAsync?: boolean;
            saveSuccessfulNotifications?: boolean;
            emailFrom: string;
            emailToEl?: string;
            subject: string;
            body?: string;
            htmlBody?: string;
            sendToMail?: string[];
        };
        GetEmailNotificationResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            emailNotificationDto?: components["schemas"]["EmailNotificationDto"];
        };
        JobTriggerDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            classNameFilter: string;
            /** @enum {string} */
            eventTypeFilter: "CREATED" | "UPDATED" | "REMOVED" | "TERMINATED" | "ENABLED" | "DISABLED" | "STARTED" | "PROCESSED" | "REJECTED" | "REJECTED_CDR" | "LOGGED_IN" | "INBOUND_REQ" | "LOW_BALANCE" | "COUNTER_DEDUCED" | "END_OF_TERM" | "STATUS_UPDATED" | "PAYMENT_STATUS_UPDATED" | "RENEWAL_UPDATED" | "XML_GENERATED" | "PDF_GENERATED" | "INVOICE_NUMBER_ASSIGNED" | "TO_R0" | "TO_R1" | "TO_R2" | "VERSION_CREATED" | "VERSION_REMOVED" | "ADVT_RATE_INCREASED";
            elFilter?: string;
            scriptInstanceCode?: string;
            scriptParams?: {
                [key: string]: string;
            };
            counterTemplate?: string;
            /** Format: int32 */
            priority?: number;
            active?: boolean;
            runAsync?: boolean;
            saveSuccessfulNotifications?: boolean;
            jobParams?: {
                [key: string]: string;
            };
            jobInstance: string;
        };
        GetJobTriggerResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            jobTriggerDto?: components["schemas"]["JobTriggerDto"];
        };
        ScriptNotificationDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            classNameFilter: string;
            /** @enum {string} */
            eventTypeFilter: "CREATED" | "UPDATED" | "REMOVED" | "TERMINATED" | "ENABLED" | "DISABLED" | "STARTED" | "PROCESSED" | "REJECTED" | "REJECTED_CDR" | "LOGGED_IN" | "INBOUND_REQ" | "LOW_BALANCE" | "COUNTER_DEDUCED" | "END_OF_TERM" | "STATUS_UPDATED" | "PAYMENT_STATUS_UPDATED" | "RENEWAL_UPDATED" | "XML_GENERATED" | "PDF_GENERATED" | "INVOICE_NUMBER_ASSIGNED" | "TO_R0" | "TO_R1" | "TO_R2" | "VERSION_CREATED" | "VERSION_REMOVED" | "ADVT_RATE_INCREASED";
            elFilter?: string;
            scriptInstanceCode?: string;
            scriptParams?: {
                [key: string]: string;
            };
            counterTemplate?: string;
            /** Format: int32 */
            priority?: number;
            active?: boolean;
            runAsync?: boolean;
            saveSuccessfulNotifications?: boolean;
        };
        GetScriptNotificationResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            notificationDto?: components["schemas"]["ScriptNotificationDto"];
        };
        InboundRequestDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            /** Format: int32 */
            contentLength?: number;
            contentType?: string;
            protocol?: string;
            scheme?: string;
            remoteAddr?: string;
            /** Format: int32 */
            remotePort?: number;
            method?: string;
            authType?: string;
            pathInfo?: string;
            requestURI?: string;
            responseContentType?: string;
            responseEncoding?: string;
        };
        InboundRequestsDto: {
            inboundRequest?: components["schemas"]["InboundRequestDto"][];
        };
        InboundRequestsResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            inboundRequests?: components["schemas"]["InboundRequestsDto"];
        };
        NotificationHistoriesDto: {
            notificationHistory?: components["schemas"]["NotificationHistoryDto"][];
        };
        NotificationHistoriesResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            notificationHistories?: components["schemas"]["NotificationHistoriesDto"];
        };
        NotificationHistoryDto: {
            notification?: string;
            entityClassName?: string;
            entityCode?: string;
            serializedEntity?: string;
            /** Format: int32 */
            nbRetry?: number;
            result?: string;
            /** Format: date-time */
            date?: string;
            /** @enum {string} */
            status?: "SENT" | "TO_RETRY" | "FAILED" | "CANCELED";
        };
        SMSInfoDto: {
            targetType?: string;
            code?: string;
            body?: string;
        };
        WebHookDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            classNameFilter: string;
            /** @enum {string} */
            eventTypeFilter: "CREATED" | "UPDATED" | "REMOVED" | "TERMINATED" | "ENABLED" | "DISABLED" | "STARTED" | "PROCESSED" | "REJECTED" | "REJECTED_CDR" | "LOGGED_IN" | "INBOUND_REQ" | "LOW_BALANCE" | "COUNTER_DEDUCED" | "END_OF_TERM" | "STATUS_UPDATED" | "PAYMENT_STATUS_UPDATED" | "RENEWAL_UPDATED" | "XML_GENERATED" | "PDF_GENERATED" | "INVOICE_NUMBER_ASSIGNED" | "TO_R0" | "TO_R1" | "TO_R2" | "VERSION_CREATED" | "VERSION_REMOVED" | "ADVT_RATE_INCREASED";
            elFilter?: string;
            scriptInstanceCode?: string;
            scriptParams?: {
                [key: string]: string;
            };
            counterTemplate?: string;
            /** Format: int32 */
            priority?: number;
            active?: boolean;
            runAsync?: boolean;
            saveSuccessfulNotifications?: boolean;
            /** @enum {string} */
            httpProtocol?: "HTTPS" | "HTTP";
            host: string;
            /** Format: int32 */
            port: number;
            page: string;
            /** @enum {string} */
            httpMethod: "HTTP_GET" | "HTTP_POST" | "HTTP_PUT" | "HTTP_DELETE";
            username?: string;
            password?: string;
            headers?: {
                [key: string]: string;
            };
            params?: {
                [key: string]: string;
            };
            bodyEl?: string;
        };
        GetWebHookNotificationResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            webhookDto?: components["schemas"]["WebHookDto"];
        };
        LitigationRequestDto: {
            customerAccountCode?: string;
            /** Format: int64 */
            accountOperationId?: number;
        };
        AccountOperationResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            accountOperation?: components["schemas"]["AccountOperationDto"];
        };
        AccountOperationsResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            accountOperations?: components["schemas"]["AccountOperationsDto"];
        };
        MatchedOperationDto: {
            /** Format: int64 */
            matchingId?: number;
            /** @enum {string} */
            matchingType?: "A" | "M" | "A_TIP" | "A_DERICT_DEBIT";
            /** Format: date-time */
            matchingDate?: string;
            matchingAmount?: number;
            /** Format: int64 */
            accountOperationId?: number;
            code?: string;
            description?: string;
            /** Format: date-time */
            transactionDate?: string;
            /** @enum {string} */
            transactionCategory?: "DEBIT" | "CREDIT";
            /** Format: date-time */
            dueDate?: string;
            transactionAmount?: number;
            matchedTransactionAmount?: number;
            /** @enum {string} */
            matchingStatus?: "O" | "L" | "P" | "C" | "I" | "R";
        };
        MatchedOperationsResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            matchedOperations?: components["schemas"]["MatchedOperationDto"][];
        };
        MatchOperationRequestDto: {
            customerAccountCode?: string;
            accountOperations?: components["schemas"]["AccountOperationsDto"];
        };
        TransferAccountOperationDto: {
            fromCustomerAccountCode: string;
            /** Format: int64 */
            accountOperationId?: number;
            toCustomerAccounts?: components["schemas"]["TransferCustomerAccountDto"][];
        };
        UnMatchingOperationRequestDto: {
            customerAccountCode?: string;
            /** Format: int64 */
            accountOperationId?: number;
            matchingAmountIds?: number[];
        };
        CreditCategoryResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            creditCategory?: components["schemas"]["CreditCategoryDto"];
        };
        CreditCategoriesResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            creditCategories?: components["schemas"]["CreditCategoryDto"][];
        };
        DDRequestLotOpDto: {
            /** Format: date-time */
            fromDueDate: string;
            /** Format: date-time */
            toDueDate: string;
            filterCode?: string;
            /** @enum {string} */
            ddrequestOp?: "CREATE" | "PAYMENT" | "FILE";
            /** @enum {string} */
            status?: "WAIT" | "PROCESSED" | "ERROR";
            errorCause?: string;
            ddRequestBuilderCode?: string;
            dueDateRageScriptCode?: string;
            recurrent?: boolean;
            /** @enum {string} */
            paymentOrRefundEnum?: "PAYMENT" | "REFUND";
            sellerCode?: string;
            generatePaymentLines?: boolean;
            /** @enum {string} */
            paymentStatus?: "ACCEPTED" | "PENDING" | "REJECTED" | "ERROR" | "NOT_PROCESSED";
        };
        DDRequestLotOpsResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            ddrequestLotOps?: components["schemas"]["DDRequestLotOpDto"][];
        };
        CardPaymentMethodDto: {
            /**
             * @description type of the payment method
             * @example possible value are: CHECK, DIRECTDEBIT, WIRETRANSFER, CARD, PAYPAL, STRIPE, CASH
             * @enum {string}
             */
            paymentMethodType: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
            /**
             * Format: int64
             * @description id of the entity
             */
            id?: number;
            /** @description Indicate if the payment method is disabled */
            disabled?: boolean;
            /** @description Alias */
            alias?: string;
            /**
             * @description Is it a preferred payment method
             * @default false
             */
            preferred: boolean;
            /** @description Customer account code */
            customerAccountCode?: string;
            /** @description first Additional info */
            info1?: string;
            /** @description second Additional info */
            info2?: string;
            /** @description third Additional info */
            info3?: string;
            /** @description fourth Additional info */
            info4?: string;
            /** @description fifth Additional info */
            info5?: string;
            bankCoordinates?: components["schemas"]["BankCoordinatesDto"];
            /** @description Mandate identification for SEPA */
            mandateIdentification?: string;
            /**
             * Format: date-time
             * @description Mandate date for SEPA
             */
            mandateDate?: string;
            /**
             * @description Card type
             * @example possible value are : VISA, MASTERCARD, AMERICAN_EXPRESS, CB
             * @enum {string}
             */
            cardType?: "VISA" | "MASTERCARD" | "AMERICAN_EXPRESS" | "CB";
            /** @description Cardholder: first and last name */
            owner?: string;
            /**
             * Format: int32
             * @description Card expiration: month
             */
            monthExpiration?: number;
            /**
             * Format: int32
             * @description Card expiration: year
             */
            yearExpiration?: number;
            /** @description Token ID in a payment gateway */
            tokenId?: string;
            /** @description Card number: full number , with first 12 digits hiding in read operation */
            cardNumber?: string;
            /** @description Issue number */
            issueNumber?: string;
            /** @description Id of the user */
            userId?: string;
            /** @description Email */
            email?: string;
            /** @description The code of reference document */
            referenceDocumentCode?: string;
            customerCode?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
        };
        CardPaymentMethodTokenDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            cardPaymentMethod?: components["schemas"]["CardPaymentMethodDto"];
        };
        DDRequestBuilderDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            /** @enum {string} */
            type?: "CUSTOM" | "NATIF";
            scriptInstanceCode?: string;
            implementationClassName?: string;
            /** Format: int64 */
            nbOperationPerFile?: number;
            /** Format: int64 */
            maxSizeFile?: number;
            /** @enum {string} */
            paymentLevel?: "AO" | "CA";
            customFields?: components["schemas"]["CustomFieldsDto"];
        };
        DDRequestBuilderResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            ddRequestBuilders?: components["schemas"]["DDRequestBuilderDto"][];
        };
        PaymentGatewayDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            /** @enum {string} */
            type?: "CUSTOM" | "NATIF";
            /** @enum {string} */
            paymentMethodType?: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
            scriptInstanceCode?: string;
            implementationClassName?: string;
            applicationEL?: string;
            countryCode?: string;
            tradingCurrencyCode?: string;
            /** @enum {string} */
            cardType?: "VISA" | "MASTERCARD" | "AMERICAN_EXPRESS" | "CB";
            marchandId?: string;
            secretKey?: string;
            apiKey?: string;
            webhooksSecretKey?: string;
            webhooksKeyId?: string;
            profile?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
            rumSequence?: components["schemas"]["PaymentGatewayRumSequenceDto"];
            sellerCode?: string;
            bankCoordinates?: components["schemas"]["BankCoordinatesDto"];
        };
        PaymentGatewayResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            paymentGateways?: components["schemas"]["PaymentGatewayDto"][];
        };
        PaymentGatewayRumSequenceDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            genericSequence?: components["schemas"]["GenericSequenceDto"];
            paymentGateway?: string;
        };
        PaymentMethodTokenDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paymentMethod?: components["schemas"]["PaymentMethodDto"];
        };
        MandatInfoDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            id?: string;
            reference?: string;
            /** @enum {string} */
            state?: "created" | "waitingForReference" | "active" | "revoked" | "expired" | "blocked" | "used";
            standard?: string;
            /** Format: int32 */
            initialScore?: number;
            /** Format: date-time */
            dateCreated?: string;
            /** Format: date-time */
            dateSigned?: string;
            paymentScheme?: string;
            bic?: string;
            iban?: string;
            bankName?: string;
        };
        PaymentActionStatus: {
            /**
             * @description Tells whether the instance of this status object is ok or not
             * @example possible value are : SUCCESS, FAIL
             * @enum {string}
             */
            status: "SUCCESS" | "FAIL" | "WARNING";
            errorCode?: components["schemas"]["ApiErrorCodeEnum"];
            /** @description A detailed error message if applicable, can contain the entity id that was created */
            message: string;
            /**
             * Format: int64
             * @description The entity identifier after creation of an entity
             */
            entityId?: number;
            /** @description The entity code after creation of an entity */
            entityCode?: string;
            /**
             * Format: int32
             * @description Number of items/records affected by the action
             */
            nrAffected?: number;
            /** Format: int64 */
            paymentId?: number;
        };
        PaymentScheduleTemplateDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            /** Format: date-time */
            startDate?: string;
            amount?: number;
            calendarCode?: string;
            paymentLabel?: string;
            /** Format: int32 */
            paymentDayInMonth?: number;
            serviceTemplateCode?: string;
            advancePaymentInvoiceTypeCode?: string;
            generateAdvancePaymentInvoice?: boolean;
            doPayment?: boolean;
            advancePaymentInvoiceSubCategoryCode?: string;
            applyAgreement?: boolean;
            amountEl?: string;
            filterEl?: string;
            customFields?: components["schemas"]["CustomFieldsDto"];
            taxClassCode?: string;
            paymentDayInMonthEl?: string;
            scriptInstanceCode?: string;
            useBankingCalendar?: boolean;
        };
        PaymentMethodTokensDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            paymentMethods?: components["schemas"]["PaymentMethodDto"][];
        };
        PaymentScheduleInstanceResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paymentScheduleInstanceDto?: components["schemas"]["PaymentScheduleInstanceDto"];
        };
        PaymentScheduleTemplateResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paymentScheduleTemplateDto?: components["schemas"]["PaymentScheduleTemplateDto"];
        };
        PaymentGatewayRumSequenceResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paymentGatewayRumSequence?: components["schemas"]["PaymentGatewayRumSequenceDto"];
        };
        HostedCheckoutStatusResponseDto: {
            /**
             * @description Tells whether the instance of this status object is ok or not
             * @example possible value are : SUCCESS, FAIL
             * @enum {string}
             */
            status: "SUCCESS" | "FAIL" | "WARNING";
            errorCode?: components["schemas"]["ApiErrorCodeEnum"];
            /** @description A detailed error message if applicable, can contain the entity id that was created */
            message: string;
            /**
             * Format: int64
             * @description The entity identifier after creation of an entity
             */
            entityId?: number;
            /** @description The entity code after creation of an entity */
            entityCode?: string;
            /**
             * Format: int32
             * @description Number of items/records affected by the action
             */
            nrAffected?: number;
            hostedCheckoutStatus?: string;
            /** @enum {string} */
            paymentStatus?: "ACCEPTED" | "PENDING" | "REJECTED" | "ERROR" | "NOT_PROCESSED";
            paymentId?: string;
        };
        PaymentHostedCheckoutResponseDto: {
            /**
             * @description Tells whether the instance of this status object is ok or not
             * @example possible value are : SUCCESS, FAIL
             * @enum {string}
             */
            status: "SUCCESS" | "FAIL" | "WARNING";
            errorCode?: components["schemas"]["ApiErrorCodeEnum"];
            /** @description A detailed error message if applicable, can contain the entity id that was created */
            message: string;
            /**
             * Format: int64
             * @description The entity identifier after creation of an entity
             */
            entityId?: number;
            /** @description The entity code after creation of an entity */
            entityCode?: string;
            /**
             * Format: int32
             * @description Number of items/records affected by the action
             */
            nrAffected?: number;
            result?: components["schemas"]["Result"];
        };
        Result: {
            id?: string;
            hostedCheckoutUrl?: string;
            hostedCheckoutVersion?: string;
            ca?: string;
            returnUrl?: string;
            data?: string;
            seal?: string;
        };
        CustomerPaymentsResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            customerPaymentDtoList?: components["schemas"]["PaymentDto"][];
            /** Format: double */
            balance?: number;
        };
        CardPaymentMethodTokensDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            cardPaymentMethods?: components["schemas"]["CardPaymentMethodDto"][];
        };
        PaymentHistoriesDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            paymentHistories?: components["schemas"]["PaymentHistoryDto"][];
        };
        PaymentScheduleTemplatesDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            templates?: components["schemas"]["PaymentScheduleTemplateDto"][];
        };
        PaymentScheduleInstanceItemsDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            paymentScheduleInstanceItems?: components["schemas"]["PaymentScheduleInstanceItemDto"][];
        };
        RefundActionStatus: {
            /**
             * @description Tells whether the instance of this status object is ok or not
             * @example possible value are : SUCCESS, FAIL
             * @enum {string}
             */
            status: "SUCCESS" | "FAIL" | "WARNING";
            errorCode?: components["schemas"]["ApiErrorCodeEnum"];
            /** @description A detailed error message if applicable, can contain the entity id that was created */
            message: string;
            /**
             * Format: int64
             * @description The entity identifier after creation of an entity
             */
            entityId?: number;
            /** @description The entity code after creation of an entity */
            entityCode?: string;
            /**
             * Format: int32
             * @description Number of items/records affected by the action
             */
            nrAffected?: number;
            /** Format: int64 */
            refundId?: number;
        };
        RefundDto: {
            type?: string;
            description?: string;
            /** @enum {string} */
            paymentMethod?: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
            occTemplateCode?: string;
            amount?: number;
            customerAccountCode?: string;
            reference?: string;
            bankLot?: string;
            /** Format: date-time */
            depositDate?: string;
            /** Format: date-time */
            bankCollectionDate?: string;
            /** Format: date-time */
            dueDate?: string;
            /** Format: date-time */
            transactionDate?: string;
            listOCCReferenceforMatching?: string[];
            listAoIdsForMatching?: number[];
            customFields?: components["schemas"]["CustomFieldsDto"];
            toMatching?: boolean;
        };
        RevenueRecognitionRuleDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            disabled?: boolean;
            /** Format: int32 */
            startDelay?: number;
            /** @enum {string} */
            startUnit?: "revenueRecognitionDelayUnitEnum.MONTH" | "revenueRecognitionDelayUnitEnum.DAY";
            /** @enum {string} */
            startEvent?: "revenueRecognitionEvent.SUBSCRIPTION_START" | "revenueRecognitionEvent.SUBSCRIPTION_STOP" | "revenueRecognitionEvent.INVOICE_DATE" | "revenueRecognitionEvent.INVOICE_DUE_DATE" | "revenueRecognitionEvent.SERVICE_PERIOD_START" | "revenueRecognitionEvent.SERVICE_PERIOD_STOP";
            /** Format: int32 */
            stopDelay?: number;
            /** @enum {string} */
            stopUnit?: "revenueRecognitionDelayUnitEnum.MONTH" | "revenueRecognitionDelayUnitEnum.DAY";
            /** @enum {string} */
            stopEvent?: "revenueRecognitionEvent.SUBSCRIPTION_START" | "revenueRecognitionEvent.SUBSCRIPTION_STOP" | "revenueRecognitionEvent.INVOICE_DATE" | "revenueRecognitionEvent.INVOICE_DUE_DATE" | "revenueRecognitionEvent.SERVICE_PERIOD_START" | "revenueRecognitionEvent.SERVICE_PERIOD_STOP";
            script?: components["schemas"]["ScriptInstanceDto"];
        };
        RevenueRecognitionRuleDtoResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            revenueRecognitionRuleDto?: components["schemas"]["RevenueRecognitionRuleDto"];
        };
        RevenueRecognitionRuleDtosResponse: {
            actionStatus?: components["schemas"]["ActionStatus"];
            revenueRecognitionRules?: components["schemas"]["RevenueRecognitionRuleDto"][];
        };
        ClientWithCoclicoDto: {
            /** Format: int64 */
            coclico?: number;
            /** Format: int64 */
            cli_id?: number;
        };
        TaxCategoryDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            descriptionI18n?: components["schemas"]["LanguageDescriptionDto"][];
            customFields?: components["schemas"]["CustomFieldsDto"];
        };
        TaxCategoryResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            dto?: components["schemas"]["TaxCategoryDto"];
        };
        TaxCategoryListResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            dtos?: components["schemas"]["TaxCategoryDto"][];
        };
        TaxClassDto: {
            /** Format: int64 */
            id?: number;
            /** @description The code of the entity */
            code: string;
            /** @description The description of the entity */
            description?: string;
            /** @description The changed code */
            updatedCode?: string;
            descriptionI18n?: components["schemas"]["LanguageDescriptionDto"][];
            customFields?: components["schemas"]["CustomFieldsDto"];
        };
        TaxClassResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            dto?: components["schemas"]["TaxClassDto"];
        };
        TaxClassListResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            dtos?: components["schemas"]["TaxClassDto"][];
        };
        TaxMappingDto: {
            /** Format: int64 */
            id?: number;
            accountTaxCategoryCode?: string;
            chargeTaxClassCode?: string;
            /** Format: date-time */
            validFrom?: string;
            /** Format: date-time */
            validTo?: string;
            sellerCountryCode?: string;
            buyerCountryCode?: string;
            filterEL?: string;
            taxCode?: string;
            taxEL?: string;
            taxScriptCode?: string;
            /** Format: int32 */
            priority?: number;
            source?: string;
            /** Format: int64 */
            originId?: number;
        };
        TaxMappingResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            dto?: components["schemas"]["TaxMappingDto"];
        };
        TaxMappingListResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            dtos?: components["schemas"]["TaxMappingDto"][];
        };
        BSMConfigurationDto: {
            code?: string;
            serviceConfiguration?: components["schemas"]["ServiceConfigurationDto"];
        };
        BomOfferDto: {
            bomCode: string;
            code: string;
            name: string;
            description?: string;
            customFields?: components["schemas"]["CustomFieldDto"][];
            prefix?: string;
            servicesToActivate?: components["schemas"]["ServiceConfigurationDto"][];
            productsToActivate?: components["schemas"]["ServiceConfigurationDto"][];
            businessServiceModels?: components["schemas"]["BSMConfigurationDto"][];
            /** @enum {string} */
            lifeCycleStatusEnum?: "IN_STUDY" | "IN_DESIGN" | "IN_TEST" | "ACTIVE" | "LAUNCHED" | "RETIRED" | "OBSOLETE" | "REJECTED";
            offerTemplateCategories?: components["schemas"]["OfferTemplateCategoryDto"][];
            imageBase64?: string;
            imagePath?: string;
            /** Format: date-time */
            validFrom?: string;
            /** Format: date-time */
            validTo?: string;
            renewalRule?: components["schemas"]["SubscriptionRenewalDto"];
            longDescription?: string;
            longDescriptionsTranslated?: components["schemas"]["LanguageDescriptionDto"][];
            languageDescriptions?: components["schemas"]["LanguageDescriptionDto"][];
            channels?: string[];
            sellers?: string[];
            customerCategories?: string[];
        };
        ServiceConfigurationDto: {
            code: string;
            description?: string;
            customFields?: components["schemas"]["CustomFieldDto"][];
            mandatory?: boolean;
            instantiatedFromBSM?: boolean;
            match?: boolean;
            imageBase64?: string;
            imagePath?: string;
        };
        BpmProductDto: {
            bpmCode: string;
            prefix: string;
            customFields?: components["schemas"]["CustomFieldDto"][];
        };
        BsmServiceDto: {
            bsmCode: string;
            prefix: string;
            customFields?: components["schemas"]["CustomFieldDto"][];
            imageBase64?: string;
            imagePath?: string;
        };
        ProductChargeTemplatesResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            productChargeTemplates?: components["schemas"]["ProductChargeTemplateDto"][];
        };
        GetListProductTemplateResponseDto: {
            actionStatus?: components["schemas"]["ActionStatus"];
            paging?: components["schemas"]["PagingAndFiltering"];
            listProductTemplate?: components["schemas"]["ProductTemplateDto"][];
        };
        AbstractEntity: {
            id?: string;
            version?: string;
            href?: string;
            name?: string;
            description?: string;
            /** Format: date-time */
            lastUpdate?: string;
            /** @enum {string} */
            lifecycleStatus?: "In Study" | "In Design" | "In Test" | "Active" | "Launched" | "Retired" | "Obsolete" | "Rejected";
            validFor?: components["schemas"]["TimeRange"];
        };
        AlterationPrice: {
            percentage?: string;
        };
        BundledProductReference: {
            id?: string;
            version?: string;
            href?: string;
            name?: string;
            description?: string;
            /** Format: date-time */
            lastUpdate?: string;
            /** @enum {string} */
            lifecycleStatus?: "In Study" | "In Design" | "In Test" | "Active" | "Launched" | "Retired" | "Obsolete" | "Rejected";
            validFor?: components["schemas"]["TimeRange"];
        };
        CatalogReference: {
            id?: string;
            version?: string;
            href?: string;
            name?: string;
            description?: string;
            /** Format: date-time */
            lastUpdate?: string;
            /** @enum {string} */
            lifecycleStatus?: "In Study" | "In Design" | "In Test" | "Active" | "Launched" | "Retired" | "Obsolete" | "Rejected";
            validFor?: components["schemas"]["TimeRange"];
        };
        Note: {
            text?: string;
            /** Format: date-time */
            date?: string;
            author?: string;
        };
        Place: {
            id?: string;
            href?: string;
            name?: string;
            address?: components["schemas"]["AddressDto"];
        };
        Price: {
            taxIncludedAmount?: string;
            dutyFreeAmount?: string;
            taxRate?: string;
            currencyCode?: string;
            percentage?: number;
        };
        ProductCharacteristic: {
            name?: string;
            value?: string;
        };
        ProductOfferPriceAlteration: {
            name?: string;
            description?: string;
            validFor?: components["schemas"]["TimeRange"];
            /** @enum {string} */
            priceType?: "recurring" | "one time" | "usage";
            unitOfMeasure?: string;
            price?: components["schemas"]["AlterationPrice"];
            recurringChargePeriod?: string;
            priceCondition?: string;
        };
        ProductOfferingPrice: {
            /** @enum {string} */
            priceType?: "recurring" | "one time" | "usage";
            unitOfMeasure?: string;
            price?: components["schemas"]["Price"];
            recurringChargePeriod?: string;
            productOfferPriceAlteration?: components["schemas"]["ProductOfferPriceAlteration"];
            name?: string;
            description?: string;
            validFor?: components["schemas"]["TimeRange"];
        };
        ProductOfferingTerm: {
            name?: string;
            description?: string;
            duration?: string;
            validFor?: components["schemas"]["TimeRange"];
        };
        ProductOrder: {
            id?: string;
            href?: string;
            externalId?: string;
            priority?: string;
            description?: string;
            category?: string;
            state?: string;
            /** Format: date-time */
            orderDate?: string;
            /** Format: date-time */
            completionDate?: string;
            /** Format: date-time */
            requestedStartDate?: string;
            /** Format: date-time */
            requestedCompletionDate?: string;
            /** Format: date-time */
            expectedCompletionDate?: string;
            notificationContact?: string;
            note?: components["schemas"]["Note"][];
            relatedParty?: components["schemas"]["RelatedParty"][];
            orderItem?: components["schemas"]["ProductOrderItem"][];
            customFields?: components["schemas"]["CustomFieldsDto"];
            paymentMethods?: components["schemas"]["PaymentMethodDto"][];
            dueDateDelayEL?: string;
            dueDateDelayELSpark?: string;
            billingCycle?: string;
            electronicBilling?: boolean;
            email?: string;
            mailingType?: string;
            emailTemplate?: string;
            ccedEmails?: string;
        };
        ProductOrderItem: {
            id?: string;
            action?: string;
            state?: string;
            appointment?: string;
            billingAccount?: components["schemas"]["BillingAccount"][];
            productOffering?: components["schemas"]["ProductOffering"];
            product?: components["schemas"]["Product"];
            customFields?: components["schemas"]["CustomFieldsDto"];
        };
        ProductRelationship: {
            type?: string;
            product?: components["schemas"]["Product"];
        };
        RelatedParty: {
            id?: string;
            href?: string;
            name?: string;
            validFor?: components["schemas"]["TimeRange"];
            role?: string;
        };
        ServiceLevelAgreement: {
            id?: string;
            href?: string;
            name?: string;
        };
        TimeRange: {
            /** Format: date-time */
            startDateTime?: string;
            /** Format: date-time */
            endDateTime?: string;
        };
        ApplicableDueDateDelayDto: {
            /** @enum {string} */
            level?: "ORDER" | "CA" | "BC";
            custom?: boolean;
            /** @enum {string} */
            referenceDate?: "INVOICE_DATE" | "INVOICE_GENERATION_DATE" | "END_OF_MONTH_INVOICE_DATE" | "NEXT_MONTH_INVOICE_DATE" | "END_OF_MONTH_INVOICE_GENERATION_DATE" | "NEXT_MONTH_INVOICE_GENERATION_DATE";
            /** Format: int32 */
            numberOfDays?: number;
            dueDateDelayEL?: string;
        };
        Attachment: {
            id?: string;
            href?: string;
            description?: string;
            type?: string;
            url?: string;
        };
        Characteristic: {
            name?: string;
            value?: string;
        };
        CustomerService: {
            id?: string;
            href?: string;
            name?: string;
            /** Format: date-time */
            executionDate?: string;
            /** Format: int32 */
            duration?: number;
            description?: string;
            productCharacteristic?: components["schemas"]["ProductCharacteristic"][];
        };
        ProductQuote: {
            billingAccount?: components["schemas"]["BillingAccount"][];
            state?: string;
            id?: string;
            href?: string;
            externalId?: string;
            description?: string;
            category?: string;
            version?: string;
            /** Format: date-time */
            quoteDate?: string;
            /** Format: date-time */
            effectiveQuoteCompletionDate?: string;
            /** Format: date-time */
            quoteCompletionDate?: string;
            /** Format: date-time */
            fulfillmentStartDate?: string;
            notificationContact?: string;
            validFor?: components["schemas"]["TimeRange"];
            note?: components["schemas"]["Note"][];
            characteristic?: components["schemas"]["Characteristic"][];
            customer?: components["schemas"]["Customer"];
            relatedParty?: components["schemas"]["RelatedParty"][];
            agreement?: components["schemas"]["ServiceLevelAgreement"][];
            quoteProductOfferingPrice?: components["schemas"]["QuoteProductOfferingPrice"][];
            accountingArticlePricesDTO?: components["schemas"]["AccountingArticlePricesDTO"][];
            quoteItem?: components["schemas"]["ProductQuoteItem"][];
            customerService?: components["schemas"]["CustomerService"][];
            generatePdf?: boolean;
            customFields?: components["schemas"]["CustomFieldsDto"];
            invoices?: components["schemas"]["GenerateInvoiceResultDto"][];
            contractCode?: string;
            /** Format: date-time */
            customerServiceDateBegin?: string;
            /** Format: int32 */
            customerServiceDuration?: number;
            opportunityRef?: string;
            virtual?: boolean;
        };
        ProductQuoteItem: {
            id?: string;
            state?: string;
            action?: string;
            appointment?: string;
            attachment?: components["schemas"]["Attachment"];
            relatedParty?: components["schemas"]["RelatedParty"][];
            note?: components["schemas"]["Note"][];
            productOffering?: components["schemas"]["ProductOffering"];
            product?: components["schemas"]["Product"];
            service?: components["schemas"]["Service"];
            /** Format: int32 */
            quantity?: number;
            customerService?: components["schemas"]["CustomerService"];
            itemQuoteProductOfferingPrice?: components["schemas"]["QuoteProductOfferingPrice"][];
            billingAccount?: components["schemas"]["BillingAccount"][];
            produtQuote?: string;
            produtQuoteVersion?: string;
            produtVersion?: string;
            subscriptionPeriod?: components["schemas"]["TimeRange"];
            consumptionCdr?: string[];
        };
        QuotePriceAlteration: {
            name?: string;
            description?: string;
            validFor?: components["schemas"]["TimeRange"];
        };
        QuoteProductOfferingPrice: {
            /** @enum {string} */
            priceType?: "recurring" | "one time" | "usage";
            recurringChargePeriod?: string;
            priceCondition?: string;
            quotePriceAlteration?: components["schemas"]["QuotePriceAlteration"];
            price?: components["schemas"]["Price"];
        };
        Service: {
            id?: string;
            href?: string;
            name?: string;
            productCharacteristic?: components["schemas"]["ProductCharacteristic"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "    GET_BillingCycle_search": {
        parameters: {
            query?: {
                billingCycleCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description billing cycle if exists */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetBillingCycleResponse"];
                    "application/xml": components["schemas"]["GetBillingCycleResponse"];
                };
            };
        };
    };
    "    PUT_BillingCycle_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BillingCycleDto"];
                "application/xml": components["schemas"]["BillingCycleDto"];
            };
        };
        responses: {
            /** @description actioon result */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_BillingCycle_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BillingCycleDto"];
                "application/xml": components["schemas"]["BillingCycleDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_BillingCycle_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BillingCycleDto"];
                "application/xml": components["schemas"]["BillingCycleDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_BillingCycle_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of billingCycles */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BillingCyclesResponseDto"];
                    "application/xml": components["schemas"]["BillingCyclesResponseDto"];
                };
            };
        };
    };
    "    DELETE_BillingCycle_{billingCycleCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                billingCycleCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description action result */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Calendar_search": {
        parameters: {
            query?: {
                calendarCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description calendar if exists */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCalendarResponse"];
                    "application/xml": components["schemas"]["GetCalendarResponse"];
                };
            };
        };
    };
    "    PUT_Calendar_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CalendarDto"];
                "application/xml": components["schemas"]["CalendarDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Calendar_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CalendarDto"];
                "application/xml": components["schemas"]["CalendarDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST _Calendar_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CalendarDto"];
                "application/xml": components["schemas"]["CalendarDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Calendar_bankingDateStatus": {
        parameters: {
            query?: {
                date?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description the banking date status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BankingDateStatusResponse"];
                    "application/xml": components["schemas"]["BankingDateStatusResponse"];
                };
            };
        };
    };
    index_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET _Calendar_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of all calendars */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListCalendarResponse"];
                    "application/xml": components["schemas"]["ListCalendarResponse"];
                };
            };
        };
    };
    "    GET_Calendar_listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of Calendars */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListCalendarResponse"];
                    "application/xml": components["schemas"]["ListCalendarResponse"];
                };
            };
        };
    };
    "    DELETE _Calendar_{calendarCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                calendarCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description action result */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Configuration_properties": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description system properties */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetConfigurationResponse"];
                    "application/xml": components["schemas"]["GetConfigurationResponse"];
                };
            };
        };
    };
    "    POST_Configuration_properties": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PropertiesDto"];
                "application/xml": components["schemas"]["PropertiesDto"];
            };
        };
        responses: {
            /** @description ActionStatus response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Configuration_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ConfigurationDto"];
                "application/xml": components["schemas"]["ConfigurationDto"];
            };
        };
        responses: {
            /** @description ActionStatus response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_CountryIso_ ": {
        parameters: {
            query?: {
                countryCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description link org.meveo.api.dto.response.GetCountryIsoResponse}. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCountryIsoResponse"];
                    "application/xml": components["schemas"]["GetCountryIsoResponse"];
                };
            };
        };
    };
    "    PUT_CountryIso_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CountryIsoDto"];
                "application/xml": components["schemas"]["CountryIsoDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_CountryIso_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CountryIsoDto"];
                "application/xml": components["schemas"]["CountryIsoDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_CountryIso_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CountryIsoDto"];
                "application/xml": components["schemas"]["CountryIsoDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_3: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_CountryIso_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of countries */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCountriesIsoResponse"];
                    "application/xml": components["schemas"]["GetCountriesIsoResponse"];
                };
            };
        };
    };
    "    GET_CountryIso_listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of countries ISO */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCountriesIsoResponse"];
                    "application/xml": components["schemas"]["GetCountriesIsoResponse"];
                };
            };
        };
    };
    "    DELETE_CountryIso_{countryCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                countryCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Country_search": {
        parameters: {
            query?: {
                countryCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description link org.meveo.api.dto.response.GetCountryResponse}. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTradingCountryResponse"];
                    "application/xml": components["schemas"]["GetTradingCountryResponse"];
                };
            };
        };
    };
    "    PUT_Country_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CountryDto"];
                "application/xml": components["schemas"]["CountryDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Country_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CountryDto"];
                "application/xml": components["schemas"]["CountryDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Country_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CountryDto"];
                "application/xml": components["schemas"]["CountryDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Country_{code}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Country_{code}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_4: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Country_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of trading countries */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TradingCountriesResponseDto"];
                    "application/xml": components["schemas"]["TradingCountriesResponseDto"];
                };
            };
        };
    };
    "    DELETE_Country_{countryCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                countryCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    DELETE_Country_{countryCode}_{currencyCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                countryCode: string;
                currencyCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_CurrencyIso_ ": {
        parameters: {
            query?: {
                currencyCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description currency iso if found. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCurrencyIsoResponse"];
                    "application/xml": components["schemas"]["GetCurrencyIsoResponse"];
                };
            };
        };
    };
    "    PUT_CurrencyIso_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CurrencyIsoDto"];
                "application/xml": components["schemas"]["CurrencyIsoDto"];
            };
        };
        responses: {
            /** @description action status. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_CurrencyIso_ ": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CurrencyIsoDto"];
                "application/xml": components["schemas"]["CurrencyIsoDto"];
            };
        };
        responses: {
            /** @description action status. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_CurrencyIso_createOrUpdate ": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CurrencyIsoDto"];
                "application/xml": components["schemas"]["CurrencyIsoDto"];
            };
        };
        responses: {
            /** @description action status. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_5: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_CurrencyIso_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of all currency iso/ */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCurrenciesIsoResponse"];
                    "application/xml": components["schemas"]["GetCurrenciesIsoResponse"];
                };
            };
        };
    };
    "    GET_CurrencyIso_listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of currencies ISO */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCurrenciesIsoResponse"];
                    "application/xml": components["schemas"]["GetCurrenciesIsoResponse"];
                };
            };
        };
    };
    "    DELETE_CurrencyIso_{currencyCode} ": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                currencyCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description action status. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    ADD_EXCHANGE_RATE: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ExchangeRateDto"];
                "application/xml": components["schemas"]["ExchangeRateDto"];
                "multipart/form-data": components["schemas"]["ExchangeRateDto"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed action */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Entity does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing parameters */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ADD_FUNCTIONAL_CURRENCY: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CurrencyDto"];
                "application/xml": components["schemas"]["CurrencyDto"];
                "multipart/form-data": components["schemas"]["CurrencyDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    GET_Currency_search: {
        parameters: {
            query?: {
                currencyCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description currency if exists */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTradingCurrencyResponse"];
                    "application/xml": components["schemas"]["GetTradingCurrencyResponse"];
                };
            };
        };
    };
    PUT_Currency_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CurrencyDto"];
                "application/xml": components["schemas"]["CurrencyDto"];
                "multipart/form-data": components["schemas"]["CurrencyDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    POST_Currency_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CurrencyDto"];
                "application/xml": components["schemas"]["CurrencyDto"];
                "multipart/form-data": components["schemas"]["CurrencyDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    POST_Currency_createOrUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CurrencyDto"];
                "application/xml": components["schemas"]["CurrencyDto"];
                "multipart/form-data": components["schemas"]["CurrencyDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "POST_Currency_{code}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "POST_Currency_{code}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    importExchangeRate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["FileUploadForm"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed action */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Entity does not exist. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing parameters */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    index_6: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    GET_Currency_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of trading currencies */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TradingCurrenciesResponseDto"];
                    "application/xml": components["schemas"]["TradingCurrenciesResponseDto"];
                };
            };
        };
    };
    "DELETE_Currency_{currencyCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                currencyCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    removeExchangeRateById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description id of the exchange rate */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description the exchange rate successfully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad request when exchange rate is not found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UPDATE_EXCHANGE_RATE: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ExchangeRateDto"];
                "application/xml": components["schemas"]["ExchangeRateDto"];
                "multipart/form-data": components["schemas"]["ExchangeRateDto"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description failed action */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Entity does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing parameters */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "    GET_Filter_search": {
        parameters: {
            query?: {
                filterCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Dto for FilteredList API */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetFilterResponseDto"];
                    "application/xml": components["schemas"]["GetFilterResponseDto"];
                };
            };
        };
    };
    "    PUT_Filter_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["FilterDto"];
                "application/xml": components["schemas"]["FilterDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Filter_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["FilterDto"];
                "application/xml": components["schemas"]["FilterDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Filter_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["FilterDto"];
                "application/xml": components["schemas"]["FilterDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Filter_{code}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Filter_{code}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_7: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_GenericCode_search": {
        parameters: {
            query?: {
                entityClass?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description GetGenericCodeResponseDto response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetGenericCodeResponseDto"];
                    "application/xml": components["schemas"]["GetGenericCodeResponseDto"];
                };
            };
        };
    };
    "    PUT_GenericCode_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GenericCodeDto"];
                "application/xml": components["schemas"]["GenericCodeDto"];
            };
        };
        responses: {
            /** @description ActionStatus response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_GenericCode_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GenericCodeDto"];
                "application/xml": components["schemas"]["GenericCodeDto"];
            };
        };
        responses: {
            /** @description ActionStatus response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_GenericCode_sequence_": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SequenceDto"];
                "application/xml": components["schemas"]["SequenceDto"];
            };
        };
        responses: {
            /** @description ActionStatus response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_GenericCode_generateCode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GenericCodeDto"];
                "application/xml": components["schemas"]["GenericCodeDto"];
            };
        };
        responses: {
            /** @description GenericCodeResponseDto response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericCodeResponseDto"];
                    "application/xml": components["schemas"]["GenericCodeResponseDto"];
                };
            };
        };
    };
    index_8: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_InvoiceCategory_search": {
        parameters: {
            query?: {
                invoiceCategoryCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description invoice category */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetInvoiceCategoryResponse"];
                    "application/xml": components["schemas"]["GetInvoiceCategoryResponse"];
                };
            };
        };
    };
    "    PUT_InvoiceCategory_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InvoiceCategoryDto"];
                "application/xml": components["schemas"]["InvoiceCategoryDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_InvoiceCategory_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InvoiceCategoryDto"];
                "application/xml": components["schemas"]["InvoiceCategoryDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_InvoiceCategory_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InvoiceCategoryDto"];
                "application/xml": components["schemas"]["InvoiceCategoryDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_9: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_InvoiceCategory_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of invoice categories */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvoiceCategoryResponseDto"];
                    "application/xml": components["schemas"]["InvoiceCategoryResponseDto"];
                };
            };
        };
    };
    "    POST_InvoiceCategory_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description List of InvoiceCategory */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvoiceCategoryResponseDto"];
                    "application/xml": components["schemas"]["InvoiceCategoryResponseDto"];
                };
            };
        };
    };
    "    DELETE_InvoiceCategory_{invoiceCategoryCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invoiceCategoryCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_InvoiceSequence_search": {
        parameters: {
            query?: {
                invoiceSequenceCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description invoice sequence */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetInvoiceSequenceResponse"];
                    "application/xml": components["schemas"]["GetInvoiceSequenceResponse"];
                };
            };
        };
    };
    "    PUT_InvoiceSequence_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InvoiceSequenceDto"];
                "application/xml": components["schemas"]["InvoiceSequenceDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_InvoiceSequence_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InvoiceSequenceDto"];
                "application/xml": components["schemas"]["InvoiceSequenceDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_InvoiceSequence_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InvoiceSequenceDto"];
                "application/xml": components["schemas"]["InvoiceSequenceDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_10: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_InvoiceSequence_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of invoiceSequence */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetInvoiceSequencesResponse"];
                    "application/xml": components["schemas"]["GetInvoiceSequencesResponse"];
                };
            };
        };
    };
    "    GET_InvoiceSubCategory_search": {
        parameters: {
            query?: {
                invoiceSubCategoryCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description invoice sub category */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetInvoiceSubCategoryResponse"];
                    "application/xml": components["schemas"]["GetInvoiceSubCategoryResponse"];
                };
            };
        };
    };
    "    PUT_InvoiceSubCategory_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InvoiceSubCategoryDto"];
                "application/xml": components["schemas"]["InvoiceSubCategoryDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_InvoiceSubCategory_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InvoiceSubCategoryDto"];
                "application/xml": components["schemas"]["InvoiceSubCategoryDto"];
            };
        };
        responses: {
            /** @description action status. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_InvoiceSubCategory_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InvoiceSubCategoryDto"];
                "application/xml": components["schemas"]["InvoiceSubCategoryDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_11: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_InvoiceSubCategory_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of invoiceSubCategories */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvoiceSubCategoryResponseDto"];
                    "application/xml": components["schemas"]["InvoiceSubCategoryResponseDto"];
                };
            };
        };
    };
    "    POST_InvoiceSubCategory_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description List of InvoiceSubCategory */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvoiceSubCategoryResponseDto"];
                    "application/xml": components["schemas"]["InvoiceSubCategoryResponseDto"];
                };
            };
        };
    };
    "    DELETE_InvoiceSubCategory_{invoiceSubCategoryCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invoiceSubCategoryCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_InvoiceType_search": {
        parameters: {
            query?: {
                invoiceTypeCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description invoice type */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetInvoiceTypeResponse"];
                    "application/xml": components["schemas"]["GetInvoiceTypeResponse"];
                };
            };
        };
    };
    "    PUT_InvoiceType_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InvoiceTypeDto"];
                "application/xml": components["schemas"]["InvoiceTypeDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_InvoiceType_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InvoiceTypeDto"];
                "application/xml": components["schemas"]["InvoiceTypeDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_InvoiceType_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InvoiceTypeDto"];
                "application/xml": components["schemas"]["InvoiceTypeDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_12: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_InvoiceType_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of invoiceType */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetInvoiceTypesResponse"];
                    "application/xml": components["schemas"]["GetInvoiceTypesResponse"];
                };
            };
        };
    };
    "    DELETE_InvoiceType_{invoiceTypeCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invoiceTypeCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_LanguageIso_search": {
        parameters: {
            query?: {
                languageCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description language iso for given code */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetLanguageIsoResponse"];
                    "application/xml": components["schemas"]["GetLanguageIsoResponse"];
                };
            };
        };
    };
    "    PUT_LanguageIso_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["LanguageIsoDto"];
                "application/xml": components["schemas"]["LanguageIsoDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_LanguageIso_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["LanguageIsoDto"];
                "application/xml": components["schemas"]["LanguageIsoDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_LanguageIso_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["LanguageIsoDto"];
                "application/xml": components["schemas"]["LanguageIsoDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_13: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_LanguageIso_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description all languages */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetLanguagesIsoResponse"];
                    "application/xml": components["schemas"]["GetLanguagesIsoResponse"];
                };
            };
        };
    };
    "    GET_LanguageIso_listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of languages ISO */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetLanguagesIsoResponse"];
                    "application/xml": components["schemas"]["GetLanguagesIsoResponse"];
                };
            };
        };
    };
    "    DELETE_LanguageIso_{languageCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                languageCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Language_search": {
        parameters: {
            query?: {
                languageCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description language */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTradingLanguageResponse"];
                    "application/xml": components["schemas"]["GetTradingLanguageResponse"];
                };
            };
        };
    };
    "    PUT_Language_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["LanguageDto"];
                "application/xml": components["schemas"]["LanguageDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Language_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["LanguageDto"];
                "application/xml": components["schemas"]["LanguageDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Language_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["LanguageDto"];
                "application/xml": components["schemas"]["LanguageDto"];
            };
        };
        responses: {
            /** @description action status. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Language_{code}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Language_{code}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_14: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Language_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of trading languages */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TradingLanguagesResponseDto"];
                    "application/xml": components["schemas"]["TradingLanguagesResponseDto"];
                };
            };
        };
    };
    "    DELETE_Language_{languageCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                languageCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description action satus */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_UploadMass": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["FileImportForm"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ImportFileTypeDto"];
                    "application/xml": components["schemas"]["ImportFileTypeDto"];
                };
            };
        };
    };
    "    GET_OccTemplate_search": {
        parameters: {
            query?: {
                occTemplateCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description account operation template */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOccTemplateResponseDto"];
                    "application/xml": components["schemas"]["GetOccTemplateResponseDto"];
                };
            };
        };
    };
    "    PUT_OccTemplate_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OccTemplateDto"];
                "application/xml": components["schemas"]["OccTemplateDto"];
            };
        };
        responses: {
            /** @description account operation template */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOccTemplateResponseDto"];
                    "application/xml": components["schemas"]["GetOccTemplateResponseDto"];
                };
            };
        };
    };
    "    POST_OccTemplate_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OccTemplateDto"];
                "application/xml": components["schemas"]["OccTemplateDto"];
            };
        };
        responses: {
            /** @description account operation template */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOccTemplateResponseDto"];
                    "application/xml": components["schemas"]["GetOccTemplateResponseDto"];
                };
            };
        };
    };
    "    POST_OccTemplate_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OccTemplateDto"];
                "application/xml": components["schemas"]["OccTemplateDto"];
            };
        };
        responses: {
            /** @description action status. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_15: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_OccTemplate_list": {
        parameters: {
            query?: {
                query?: string;
                fields?: string;
                offset?: number;
                limit?: number;
                sortBy?: string;
                sortOrder?: "ASCENDING" | "DESCENDING";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of account operations */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOccTemplatesResponseDto"];
                    "application/xml": components["schemas"]["GetOccTemplatesResponseDto"];
                };
            };
        };
    };
    "    POST_OccTemplate_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description List of account operations */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOccTemplatesResponseDto"];
                    "application/xml": components["schemas"]["GetOccTemplatesResponseDto"];
                };
            };
        };
    };
    "    DELETE_OccTemplate_{occTemplateCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                occTemplateCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description action status. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_PdfInvoice_search": {
        parameters: {
            query?: {
                invoiceNumber?: string;
                customerAccountCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description invoice's pdf */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PdfInvoiceResponse"];
                    "application/xml": components["schemas"]["PdfInvoiceResponse"];
                };
            };
        };
    };
    index_16: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Provider_search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Provider information */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetProviderResponse"];
                    "application/xml": components["schemas"]["GetProviderResponse"];
                };
            };
        };
    };
    "    PUT_Provider_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ProviderDto"];
                "application/xml": components["schemas"]["ProviderDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Provider_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ProviderDto"];
                "application/xml": components["schemas"]["ProviderDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Provider_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ProviderDto"];
                "application/xml": components["schemas"]["ProviderDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Provider_createTenant": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ProviderDto"];
                "application/xml": components["schemas"]["ProviderDto"];
            };
        };
        responses: {
            /** @description Action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Provider_getCustomerAccountConfiguration": {
        parameters: {
            query?: {
                providerCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description customer account configuration */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCustomerAccountConfigurationResponseDto"];
                    "application/xml": components["schemas"]["GetCustomerAccountConfigurationResponseDto"];
                };
            };
        };
    };
    "    GET_Provider_getCustomerConfiguration": {
        parameters: {
            query?: {
                providerCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description customer configuration */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCustomerConfigurationResponseDto"];
                    "application/xml": components["schemas"]["GetCustomerConfigurationResponseDto"];
                };
            };
        };
    };
    "    GET_Provider_getInvoicingConfiguration": {
        parameters: {
            query?: {
                providerCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description invoicing configuration */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetInvoicingConfigurationResponseDto"];
                    "application/xml": components["schemas"]["GetInvoicingConfigurationResponseDto"];
                };
            };
        };
    };
    "    GET_Provider_findProviderCF": {
        parameters: {
            query?: {
                providerCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description provider if exists */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetProviderResponse"];
                    "application/xml": components["schemas"]["GetProviderResponse"];
                };
            };
        };
    };
    "    GET_Provider_getTradingConfiguration": {
        parameters: {
            query?: {
                providerCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description trading configuration. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTradingConfigurationResponseDto"];
                    "application/xml": components["schemas"]["GetTradingConfigurationResponseDto"];
                };
            };
        };
    };
    index_17: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Provider_listTenants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of Tenant/provider data */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProvidersDto"];
                    "application/xml": components["schemas"]["ProvidersDto"];
                };
            };
        };
    };
    "    DELETE_Provider_{providerCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                providerCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_Provider_updateProviderCF": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ProviderDto"];
                "application/xml": components["schemas"]["ProviderDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Query_search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description QueryResponse object that contains the status, pagination, and the result in json string form. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QueryResponse"];
                };
            };
        };
    };
    find: {
        parameters: {
            query: {
                /** @description role name */
                roleName: string;
                /** @description indicate if the list of secured entties will be included */
                includeSecuredEntities?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetRoleResponse"];
                    "application/xml": components["schemas"]["GetRoleResponse"];
                };
            };
        };
    };
    update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RoleDto"];
                "application/xml": components["schemas"]["RoleDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RoleDto"];
                "application/xml": components["schemas"]["RoleDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    createOrUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RoleDto"];
                "application/xml": components["schemas"]["RoleDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    findV2: {
        parameters: {
            query?: {
                /** @description indicate if the list of secured entties will be included */
                includeSecuredEntities?: boolean;
            };
            header?: never;
            path: {
                /** @description role name */
                roleName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetRoleResponse"];
                    "application/xml": components["schemas"]["GetRoleResponse"];
                };
            };
        };
    };
    remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description role name to be deleting */
                roleName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_18: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    listExternalRoles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RolesDto"];
                    "application/xml": components["schemas"]["RolesDto"];
                };
            };
        };
    };
    listExternalRolesV2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RolesDto"];
                    "application/xml": components["schemas"]["RolesDto"];
                };
            };
        };
    };
    listGet: {
        parameters: {
            query?: {
                /**
                 * @description query Search criteria
                 * @example filterKey1:filterValue1|filterKey2:filterValue2
                 */
                query?: string;
                /** @description fields Data retrieval options/fieldnames separated by a comma. Specify "permissions" in fields to include the permissions. Specify "roles" to include child roles */
                fields?: string;
                /** @description offset Pagination - from record number */
                offset?: number;
                /** @description limit Pagination - number of records to retrieve */
                limit?: number;
                /** @description sortBy Sorting - field to sort by - a field from a main entity being searched. See Data model for a list of fields */
                sortBy?: string;
                /** @description sortOrder Sorting - sort order */
                sortOrder?: "ASCENDING" | "DESCENDING";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RolesDto"];
                    "application/xml": components["schemas"]["RolesDto"];
                };
            };
        };
    };
    listPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RolesDto"];
                    "application/xml": components["schemas"]["RolesDto"];
                };
            };
        };
    };
    listGetV2: {
        parameters: {
            query?: {
                /**
                 * @description query Search criteria
                 * @example filterKey1:filterValue1|filterKey2:filterValue2
                 */
                query?: string;
                /** @description fields Data retrieval options/fieldnames separated by a comma. Specify "permissions" in fields to include the permissions. Specify "roles" to include child roles */
                fields?: string;
                /** @description offset Pagination - from record number */
                offset?: number;
                /** @description limit Pagination - number of records to retrieve */
                limit?: number;
                /** @description sortBy Sorting - field to sort by - a field from a main entity being searched. See Data model for a list of fields */
                sortBy?: string;
                /** @description sortOrder Sorting - sort order */
                sortOrder?: "ASCENDING" | "DESCENDING";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RolesDto"];
                    "application/xml": components["schemas"]["RolesDto"];
                };
            };
        };
    };
    listPostV2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RolesDto"];
                    "application/xml": components["schemas"]["RolesDto"];
                };
            };
        };
    };
    "    GET_ScriptInstance_search": {
        parameters: {
            query?: {
                scriptInstanceCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description script instance */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetScriptInstanceResponseDto"];
                    "application/xml": components["schemas"]["GetScriptInstanceResponseDto"];
                };
            };
        };
    };
    "    PUT_ScriptInstance_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ScriptInstanceDto"];
                "application/xml": components["schemas"]["ScriptInstanceDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScriptInstanceReponseDto"];
                    "application/xml": components["schemas"]["ScriptInstanceReponseDto"];
                };
            };
        };
    };
    "    POST_ScriptInstance_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ScriptInstanceDto"];
                "application/xml": components["schemas"]["ScriptInstanceDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScriptInstanceReponseDto"];
                    "application/xml": components["schemas"]["ScriptInstanceReponseDto"];
                };
            };
        };
    };
    "    POST_ScriptInstance_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ScriptInstanceDto"];
                "application/xml": components["schemas"]["ScriptInstanceDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScriptInstanceReponseDto"];
                    "application/xml": components["schemas"]["ScriptInstanceReponseDto"];
                };
            };
        };
    };
    "    POST_ScriptInstance_{code}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_ScriptInstance_{code}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_ScriptInstance_execute": {
        parameters: {
            query?: {
                scriptInstanceCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description response of the script */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    index_19: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    DELETE_ScriptInstance_{scriptInstanceCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                scriptInstanceCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Seller_search": {
        parameters: {
            query?: {
                sellerCode?: string;
                inheritCF?: "INHERIT_NONE" | "INHERIT_NO_MERGE" | "INHERIT_MERGED" | "ACCUMULATED";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description found seller. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetSellerResponse"];
                    "application/xml": components["schemas"]["GetSellerResponse"];
                };
            };
        };
    };
    "    PUT_Seller_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SellerDto"];
                "application/xml": components["schemas"]["SellerDto"];
            };
        };
        responses: {
            /** @description action status. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Seller_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SellerDto"];
                "application/xml": components["schemas"]["SellerDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Seller_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SellerDto"];
                "application/xml": components["schemas"]["SellerDto"];
            };
        };
        responses: {
            /** @description created or updated seller. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_91: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Seller_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of sellers */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SellerResponseDto"];
                    "application/xml": components["schemas"]["SellerResponseDto"];
                };
            };
        };
    };
    "    GET_Seller_listSellerCodes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of seller's code. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SellerCodesResponseDto"];
                    "application/xml": components["schemas"]["SellerCodesResponseDto"];
                };
            };
        };
    };
    "    DELETE_Seller_{sellerCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sellerCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description action status. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Tax_search": {
        parameters: {
            query?: {
                taxCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description tax if exists */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTaxResponse"];
                    "application/xml": components["schemas"]["GetTaxResponse"];
                };
            };
        };
    };
    "    PUT_Tax_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TaxDto"];
                "application/xml": components["schemas"]["TaxDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Tax_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TaxDto"];
                "application/xml": components["schemas"]["TaxDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST _Tax_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TaxDto"];
                "application/xml": components["schemas"]["TaxDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_21: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET _Tax_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of all taxes. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTaxesResponse"];
                    "application/xml": components["schemas"]["GetTaxesResponse"];
                };
            };
        };
    };
    "    GET_Tax_listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of taxes */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTaxesResponse"];
                    "application/xml": components["schemas"]["GetTaxesResponse"];
                };
            };
        };
    };
    "    DELETE_Tax_{taxCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                taxCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_TerminationReason_search": {
        parameters: {
            query?: {
                terminationReasonCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description found termination reason */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTerminationReasonResponse"];
                    "application/xml": components["schemas"]["GetTerminationReasonResponse"];
                };
            };
        };
    };
    "    PUT_TerminationReason_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TerminationReasonDto"];
                "application/xml": components["schemas"]["TerminationReasonDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_TerminationReason_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TerminationReasonDto"];
                "application/xml": components["schemas"]["TerminationReasonDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_TerminationReason_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TerminationReasonDto"];
                "application/xml": components["schemas"]["TerminationReasonDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_22: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_TerminationReason_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of termination reasons */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTerminationReasonResponse"];
                    "application/xml": components["schemas"]["GetTerminationReasonResponse"];
                };
            };
        };
    };
    "    DELETE_TerminationReason_{terminationReasonCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                terminationReasonCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Usage_chargeAggregate": {
        parameters: {
            query?: {
                userAccountCode?: string;
                fromDate?: string;
                toDate?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description usage charge aggregate */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsageChargeAggregateResponseDto"];
                    "application/xml": components["schemas"]["UsageChargeAggregateResponseDto"];
                };
            };
        };
    };
    "    GET_Usage_search": {
        parameters: {
            query?: {
                userAccountCode?: string;
                fromDate?: string;
                toDate?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description usage */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsageResponseDto"];
                    "application/xml": components["schemas"]["UsageResponseDto"];
                };
            };
        };
    };
    index_23: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    find_1: {
        parameters: {
            query: {
                /** @description The username of user */
                username: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetUserResponse"];
                    "application/xml": components["schemas"]["GetUserResponse"];
                };
            };
        };
    };
    update_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UserDto"];
                "application/xml": components["schemas"]["UserDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    create_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UserDto"];
                "application/xml": components["schemas"]["UserDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    updateExternalUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UserDto"];
                "application/xml": components["schemas"]["UserDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    createExternalUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UserDto"];
                "application/xml": components["schemas"]["UserDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    createOrUpdate_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UserDto"];
                "application/xml": components["schemas"]["UserDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    deleteExternalUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The usename of user to be deleted in keykloak */
                username: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    findV2_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The username of user */
                username: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetUserResponse"];
                    "application/xml": components["schemas"]["GetUserResponse"];
                };
            };
        };
    };
    getCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCurrentUserResponse"];
                    "application/xml": components["schemas"]["GetCurrentUserResponse"];
                };
            };
        };
    };
    index_24: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsersDto"];
                    "application/xml": components["schemas"]["UsersDto"];
                };
            };
        };
    };
    listGet_1: {
        parameters: {
            query?: {
                /**
                 * @description query Search criteria. Query is composed of the following
                 * @example filterKey1:filterValue1|filterKey2:filterValue2
                 */
                query?: string;
                /** @description ields Data retrieval options/fieldnames separated by a comma. Specify "securedEntities" in fields to include the secured entities */
                fields?: string;
                /** @description offset Pagination - from record number */
                offset?: number;
                /** @description limit Pagination - number of records to retrieve */
                limit?: number;
                /** @description sort by Sorting - field to sort by - a field from a main entity being searched. See Data model for a list of fields */
                sortBy?: string;
                /** @description sort order Sorting */
                sortOrder?: "ASCENDING" | "DESCENDING";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsersDto"];
                    "application/xml": components["schemas"]["UsersDto"];
                };
            };
        };
    };
    listPost_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsersDto"];
                    "application/xml": components["schemas"]["UsersDto"];
                };
            };
        };
    };
    listGetV2_1: {
        parameters: {
            query?: {
                /**
                 * @description query Search criteria. Query is composed of the following
                 * @example filterKey1:filterValue1|filterKey2:filterValue2
                 */
                query?: string;
                /** @description ields Data retrieval options/fieldnames separated by a comma. Specify "securedEntities" in fields to include the secured entities */
                fields?: string;
                /** @description offset Pagination - from record number */
                offset?: number;
                /** @description limit Pagination - number of records to retrieve */
                limit?: number;
                /** @description sort by Sorting - field to sort by - a field from a main entity being searched. See Data model for a list of fields */
                sortBy?: string;
                /** @description sort order Sorting */
                sortOrder?: "ASCENDING" | "DESCENDING";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsersDto"];
                    "application/xml": components["schemas"]["UsersDto"];
                };
            };
        };
    };
    listPostV2_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsersDto"];
                    "application/xml": components["schemas"]["UsersDto"];
                };
            };
        };
    };
    remove_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The usename of user to be deleted */
                username: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Access_search": {
        parameters: {
            query?: {
                accessCode?: string;
                subscriptionCode?: string;
                subscriptionValidityDate?: string;
                startDate?: string;
                endDate?: string;
                usageDate?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Access */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAccessResponseDto"];
                    "application/xml": components["schemas"]["GetAccessResponseDto"];
                };
            };
        };
    };
    "    PUT_Access_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AccessDto"];
                "application/xml": components["schemas"]["AccessDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Access_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AccessDto"];
                "application/xml": components["schemas"]["AccessDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Access_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AccessDto"];
                "application/xml": components["schemas"]["AccessDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Access_{accessCode}_{subscriptionCode}_{startDate}_{endDate}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                accessCode: string;
                subscriptionCode: string;
                startDate: string;
                endDate: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Access_{accessCode}_{subscriptionCode}_{startDate}_{endDate}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                accessCode: string;
                subscriptionCode: string;
                startDate: string;
                endDate: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_25: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Access_list": {
        parameters: {
            query?: {
                subscriptionCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of accesses */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccessesResponseDto"];
                    "application/xml": components["schemas"]["AccessesResponseDto"];
                };
            };
        };
    };
    "    DELETE_Access_{accessCode}_{subscriptionCode}_{startDate}_{endDate}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                accessCode: string;
                subscriptionCode: string;
                startDate: string;
                endDate: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    update_2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AccountHierarchyDto"];
                "application/xml": components["schemas"]["AccountHierarchyDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    create_2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AccountHierarchyDto"];
                "application/xml": components["schemas"]["AccountHierarchyDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    createCRMAccountHierarchy: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CRMAccountHierarchyDto"];
                "application/xml": components["schemas"]["CRMAccountHierarchyDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    createOrUpdate_2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AccountHierarchyDto"];
                "application/xml": components["schemas"]["AccountHierarchyDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    createOrUpdateCRMAccountHierarchy: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CRMAccountHierarchyDto"];
                "application/xml": components["schemas"]["CRMAccountHierarchyDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    customerHierarchyUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomerHierarchyDto"];
                "application/xml": components["schemas"]["CustomerHierarchyDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    find_2: {
        parameters: {
            query?: {
                calculateBalances?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AccountHierarchyDto"];
                "application/xml": components["schemas"]["AccountHierarchyDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerListResponse"];
                    "application/xml": components["schemas"]["CustomerListResponse"];
                };
            };
        };
    };
    findAccountHierarchy2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["FindAccountHierachyRequestDto"];
                "application/xml": components["schemas"]["FindAccountHierachyRequestDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAccountHierarchyResponseDto"];
                    "application/xml": components["schemas"]["GetAccountHierarchyResponseDto"];
                };
            };
        };
    };
    findV2_2: {
        parameters: {
            query?: {
                calculateBalances?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AccountHierarchyDto"];
                "application/xml": components["schemas"]["AccountHierarchyDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerListResponse"];
                    "application/xml": components["schemas"]["CustomerListResponse"];
                };
            };
        };
    };
    index_26: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    updateCRMAccountHierarchy: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CRMAccountHierarchyDto"];
                "application/xml": components["schemas"]["CRMAccountHierarchyDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    find_3: {
        parameters: {
            query?: {
                billingAccountCode?: string;
                inheritCF?: "INHERIT_NONE" | "INHERIT_NO_MERGE" | "INHERIT_MERGED" | "ACCUMULATED";
                includeUserAccounts?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetBillingAccountResponseDto"];
                    "application/xml": components["schemas"]["GetBillingAccountResponseDto"];
                };
            };
        };
    };
    update_3: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BillingAccountDto"];
                "application/xml": components["schemas"]["BillingAccountDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    create_3: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BillingAccountDto"];
                "application/xml": components["schemas"]["BillingAccountDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    createOrUpdate_3: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BillingAccountDto"];
                "application/xml": components["schemas"]["BillingAccountDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    filterBillingAccountCountersByPeriod: {
        parameters: {
            query?: {
                billingAccountCode?: string;
                date?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCountersInstancesResponseDto"];
                    "application/xml": components["schemas"]["GetCountersInstancesResponseDto"];
                };
            };
        };
    };
    filterBillingAccountCountersByPeriodV2: {
        parameters: {
            query?: {
                date?: string;
            };
            header?: never;
            path: {
                billingAccountCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCountersInstancesResponseDto"];
                    "application/xml": components["schemas"]["GetCountersInstancesResponseDto"];
                };
            };
        };
    };
    findV2_3: {
        parameters: {
            query?: {
                inheritCF?: "INHERIT_NONE" | "INHERIT_NO_MERGE" | "INHERIT_MERGED" | "ACCUMULATED";
                includeUserAccounts?: boolean;
            };
            header?: never;
            path: {
                billingAccountCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetBillingAccountResponseDto"];
                    "application/xml": components["schemas"]["GetBillingAccountResponseDto"];
                };
            };
        };
    };
    remove_2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                billingAccountCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_27: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    listByCustomerAccount: {
        parameters: {
            query?: {
                customerAccountCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BillingAccountsResponseDto"];
                    "application/xml": components["schemas"]["BillingAccountsResponseDto"];
                };
            };
        };
    };
    listByCustomerAccountV2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customerAccountCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BillingAccountsResponseDto"];
                    "application/xml": components["schemas"]["BillingAccountsResponseDto"];
                };
            };
        };
    };
    listGetAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BillingAccountsResponseDto"];
                    "application/xml": components["schemas"]["BillingAccountsResponseDto"];
                };
            };
        };
    };
    "    GET_BusinessAccountModel_ ": {
        parameters: {
            query?: {
                businessAccountModelCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description business account model response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessAccountModelResponseDto"];
                    "application/xml": components["schemas"]["BusinessAccountModelResponseDto"];
                };
            };
        };
    };
    "    PUT_BusinessAccountModel_ ": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BusinessAccountModelDto"];
                "application/xml": components["schemas"]["BusinessAccountModelDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_BusinessAccountModel_ ": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BusinessAccountModelDto"];
                "application/xml": components["schemas"]["BusinessAccountModelDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_BusinessAccountModel_findParents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CRMAccountTypeSearchDto"];
                "application/xml": components["schemas"]["CRMAccountTypeSearchDto"];
            };
        };
        responses: {
            /** @description parent list reponse */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ParentListResponse"];
                    "application/xml": components["schemas"]["ParentListResponse"];
                };
            };
        };
    };
    index_28: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_BusinessAccountModel_install ": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BusinessAccountModelDto"];
                "application/xml": components["schemas"]["BusinessAccountModelDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_BusinessAccountModel_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description meveo module response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MeveoModuleDtosResponse"];
                    "application/xml": components["schemas"]["MeveoModuleDtosResponse"];
                };
            };
        };
    };
    "    GET_BusinessAccountModel_listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of MeveoModuleDtos */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MeveoModuleDtosResponse"];
                    "application/xml": components["schemas"]["MeveoModuleDtosResponse"];
                };
            };
        };
    };
    "    DELETE_BusinessAccountModel_{businessAccountModelCode} ": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                businessAccountModelCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    find_4: {
        parameters: {
            query?: {
                customerAccountCode?: string;
                calculateBalances?: boolean;
                inheritCF?: "INHERIT_NONE" | "INHERIT_NO_MERGE" | "INHERIT_MERGED" | "ACCUMULATED";
                withAccountOperations?: boolean;
                includeBillingAccounts?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCustomerAccountResponseDto"];
                    "application/xml": components["schemas"]["GetCustomerAccountResponseDto"];
                };
            };
        };
    };
    update_4: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomerAccountDto"];
                "application/xml": components["schemas"]["CustomerAccountDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    create_4: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomerAccountDto"];
                "application/xml": components["schemas"]["CustomerAccountDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    createCreditCategory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreditCategoryDto"];
                "application/xml": components["schemas"]["CreditCategoryDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    createOrUpdate_4: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomerAccountDto"];
                "application/xml": components["schemas"]["CustomerAccountDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    filterCustomerAccountCountersByPeriod: {
        parameters: {
            query?: {
                customerAccountCode?: string;
                date?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCountersInstancesResponseDto"];
                    "application/xml": components["schemas"]["GetCountersInstancesResponseDto"];
                };
            };
        };
    };
    filterCustomerAccountCountersByPeriodV2: {
        parameters: {
            query?: {
                date?: string;
            };
            header?: never;
            path: {
                customerAccountCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCountersInstancesResponseDto"];
                    "application/xml": components["schemas"]["GetCountersInstancesResponseDto"];
                };
            };
        };
    };
    findV2_4: {
        parameters: {
            query?: {
                calculateBalances?: boolean;
                inheritCF?: "INHERIT_NONE" | "INHERIT_NO_MERGE" | "INHERIT_MERGED" | "ACCUMULATED";
                withAccountOperations?: boolean;
                includeBillingAccounts?: boolean;
            };
            header?: never;
            path: {
                customerAccountCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCustomerAccountResponseDto"];
                    "application/xml": components["schemas"]["GetCustomerAccountResponseDto"];
                };
            };
        };
    };
    remove_3: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customerAccountCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_29: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    listByCustomer: {
        parameters: {
            query?: {
                customerCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerAccountsResponseDto"];
                    "application/xml": components["schemas"]["CustomerAccountsResponseDto"];
                };
            };
        };
    };
    listByCustomerV2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customerCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerAccountsResponseDto"];
                    "application/xml": components["schemas"]["CustomerAccountsResponseDto"];
                };
            };
        };
    };
    listGetAll_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerAccountsResponseDto"];
                    "application/xml": components["schemas"]["CustomerAccountsResponseDto"];
                };
            };
        };
    };
    removeCreditCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                creditCategoryCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    transferAccount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TransferCustomerAccountDto"];
                "application/xml": components["schemas"]["TransferCustomerAccountDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    anonymizeGdpr: {
        parameters: {
            query?: {
                /** @description The customer code */
                customerCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    anonymizeGdprV2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The customer code */
                customerCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    find_5: {
        parameters: {
            query?: {
                /** @description The customer code */
                customerCode?: string;
                /** @description The type of the customer */
                inheritCF?: "INHERIT_NONE" | "INHERIT_NO_MERGE" | "INHERIT_MERGED" | "ACCUMULATED";
                /** @description Indicate if account of the customer will included */
                includeCustomerAccounts?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCustomerResponseDto"];
                    "application/xml": components["schemas"]["GetCustomerResponseDto"];
                };
            };
        };
    };
    update_5: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomerDto"];
                "application/xml": components["schemas"]["CustomerDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    create_5: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomerDto"];
                "application/xml": components["schemas"]["CustomerDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    createBrand: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomerBrandDto"];
                "application/xml": components["schemas"]["CustomerBrandDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    updateBrandV2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomerBrandDto"];
                "application/xml": components["schemas"]["CustomerBrandDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    createBrandV2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomerBrandDto"];
                "application/xml": components["schemas"]["CustomerBrandDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    createCategory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomerCategoryDto"];
                "application/xml": components["schemas"]["CustomerCategoryDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    updateCategoryV2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomerCategoryDto"];
                "application/xml": components["schemas"]["CustomerCategoryDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    createCategoryV2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomerCategoryDto"];
                "application/xml": components["schemas"]["CustomerCategoryDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    updateCustomerSequence: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomerSequenceDto"];
                "application/xml": components["schemas"]["CustomerSequenceDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    createCustomerSequence: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomerSequenceDto"];
                "application/xml": components["schemas"]["CustomerSequenceDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    createOrUpdate_5: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomerDto"];
                "application/xml": components["schemas"]["CustomerDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    createOrUpdateBrand: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomerBrandDto"];
                "application/xml": components["schemas"]["CustomerBrandDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    createOrUpdateCategory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomerCategoryDto"];
                "application/xml": components["schemas"]["CustomerCategoryDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    exportCustomerHierarchy: {
        parameters: {
            query?: {
                /** @description The customer code */
                customerCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    exportCustomerHierarchyV2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The customer code */
                customerCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    filterCustomerCountersByPeriod: {
        parameters: {
            query: {
                /** @description The customer code */
                customerCode?: string;
                /** @description The date to compare */
                date: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCountersInstancesResponseDto"];
                    "application/xml": components["schemas"]["GetCountersInstancesResponseDto"];
                };
            };
        };
    };
    filterCustomerCountersByPeriodV2: {
        parameters: {
            query: {
                /** @description The date to compare */
                date: string;
            };
            header?: never;
            path: {
                /** @description The customer code */
                customerCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCountersInstancesResponseDto"];
                    "application/xml": components["schemas"]["GetCountersInstancesResponseDto"];
                };
            };
        };
    };
    findCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The category code */
                categoryCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCustomerCategoryResponseDto"];
                    "application/xml": components["schemas"]["GetCustomerCategoryResponseDto"];
                };
            };
        };
    };
    findCategoryV2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The category code */
                categoryCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCustomerCategoryResponseDto"];
                    "application/xml": components["schemas"]["GetCustomerCategoryResponseDto"];
                };
            };
        };
    };
    removeCategoryV2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The category code */
                categoryCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    findRootParent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The customer code */
                customerCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCustomerResponseDto"];
                    "application/xml": components["schemas"]["GetCustomerResponseDto"];
                };
            };
        };
    };
    findV2_5: {
        parameters: {
            query?: {
                /** @description The type of the customer */
                inheritCF?: "INHERIT_NONE" | "INHERIT_NO_MERGE" | "INHERIT_MERGED" | "ACCUMULATED";
                /** @description Indicate if account of the customer will included */
                includeCustomerAccounts?: boolean;
            };
            header?: never;
            path: {
                /** @description The customer code */
                customerCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCustomerResponseDto"];
                    "application/xml": components["schemas"]["GetCustomerResponseDto"];
                };
            };
        };
    };
    remove_4: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The customer code */
                customerCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    updateCustomerNumberSequence: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GenericSequenceDto"];
                "application/xml": components["schemas"]["GenericSequenceDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    getNextCustomerNumber: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericSequenceValueResponseDto"];
                    "application/xml": components["schemas"]["GenericSequenceValueResponseDto"];
                };
            };
        };
    };
    getNextCustomerSequenceNumber: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The code of the sequence */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericSequenceValueResponseDto"];
                    "application/xml": components["schemas"]["GenericSequenceValueResponseDto"];
                };
            };
        };
    };
    index_30: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    list_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomersResponseDto"];
                    "application/xml": components["schemas"]["CustomersResponseDto"];
                };
            };
        };
    };
    list47: {
        parameters: {
            query?: {
                /** @description from record number. Deprecated in v.4.7, use 'from' instead */
                firstRow?: number;
                /** @description Pagination - number of records to retrieve. Deprecated in v.4.7, use 'limit' instead */
                numberOfRows?: number;
                /** @description Pagination - from record number */
                offset?: number;
                /** @description Pagination - number of records to retrieve */
                limit?: number;
                /** @description sort by field */
                sortBy?: string;
                /** @description sort Order */
                sortOrder?: "ASCENDING" | "DESCENDING";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The customer's data */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomerDto"];
                "application/xml": components["schemas"]["CustomerDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomersResponseDto"];
                    "application/xml": components["schemas"]["CustomersResponseDto"];
                };
            };
        };
    };
    listGet_2: {
        parameters: {
            query?: {
                /** @description query Search criteria */
                query?: string;
                /** @description fields Data retrieval options/fieldnames separated by a comma */
                fields?: string;
                /** @description offset Pagination - from record number */
                offset?: number;
                /** @description limit Pagination - number of records to retrieve */
                limit?: number;
                /** @description Sorting - field to sort by - a field from a main entity being searched. See Data model for a list of fields */
                sortBy?: string;
                /** @description sort order */
                sortOrder?: "ASCENDING" | "DESCENDING";
                /** @description Should inherited custom fields be retrieved. Defaults to INHERIT_NO_MERGE */
                inheritCF?: "INHERIT_NONE" | "INHERIT_NO_MERGE" | "INHERIT_MERGED" | "ACCUMULATED";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomersResponseDto"];
                    "application/xml": components["schemas"]["CustomersResponseDto"];
                };
            };
        };
    };
    listPost_2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomersResponseDto"];
                    "application/xml": components["schemas"]["CustomersResponseDto"];
                };
            };
        };
    };
    listPostV2_2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomersResponseDto"];
                    "application/xml": components["schemas"]["CustomersResponseDto"];
                };
            };
        };
    };
    removeBrand: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The customer brand code */
                brandCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    removeBrandV2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The customer brand code */
                brandCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    removeCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The category code */
                categoryCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    updateBrand: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomerBrandDto"];
                "application/xml": components["schemas"]["CustomerBrandDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    updateCategory: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomerCategoryDto"];
                "application/xml": components["schemas"]["CustomerCategoryDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_ProviderContact_search": {
        parameters: {
            query?: {
                providerContactCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A provider contact */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProviderContactResponseDto"];
                    "application/xml": components["schemas"]["ProviderContactResponseDto"];
                };
            };
        };
    };
    "    PUT_ProviderContact_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ProviderContactDto"];
                "application/xml": components["schemas"]["ProviderContactDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_ProviderContact_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ProviderContactDto"];
                "application/xml": components["schemas"]["ProviderContactDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_ProviderContact_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ProviderContactDto"];
                "application/xml": components["schemas"]["ProviderContactDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_31: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_ProviderContact_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of provider contacts */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProviderContactsResponseDto"];
                    "application/xml": components["schemas"]["ProviderContactsResponseDto"];
                };
            };
        };
    };
    "    DELETE_ProviderContact_{code}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Title_search": {
        parameters: {
            query?: {
                titleCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A title's data */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TitleResponseDto"];
                    "application/xml": components["schemas"]["TitleResponseDto"];
                };
            };
        };
    };
    "    PUT_Title_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TitleDto"];
                "application/xml": components["schemas"]["TitleDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Title_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TitleDto"];
                "application/xml": components["schemas"]["TitleDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Title_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TitleDto"];
                "application/xml": components["schemas"]["TitleDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_32: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Title_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of titles */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TitlesResponseDto"];
                    "application/xml": components["schemas"]["TitlesResponseDto"];
                };
            };
        };
    };
    "    GET_Title_listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of titles */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TitlesResponseDto"];
                    "application/xml": components["schemas"]["TitlesResponseDto"];
                };
            };
        };
    };
    "    DELETE_Title_{titleCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                titleCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    applyProduct: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ApplyProductRequestDto"];
                "application/xml": components["schemas"]["ApplyProductRequestDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    find_6: {
        parameters: {
            query?: {
                userAccountCode?: string;
                includeSubscriptions?: boolean;
                inheritCF?: "INHERIT_NONE" | "INHERIT_NO_MERGE" | "INHERIT_MERGED" | "ACCUMULATED";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetUserAccountResponseDto"];
                    "application/xml": components["schemas"]["GetUserAccountResponseDto"];
                };
            };
        };
    };
    update_6: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UserAccountDto"];
                "application/xml": components["schemas"]["UserAccountDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    create_6: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UserAccountDto"];
                "application/xml": components["schemas"]["UserAccountDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    createOrUpdate_6: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UserAccountDto"];
                "application/xml": components["schemas"]["UserAccountDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    filterUserAccountCountersByPeriod: {
        parameters: {
            query?: {
                userAccountCode?: string;
                date?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCountersInstancesResponseDto"];
                    "application/xml": components["schemas"]["GetCountersInstancesResponseDto"];
                };
            };
        };
    };
    filterUserAccountCountersByPeriodV2: {
        parameters: {
            query?: {
                date?: string;
            };
            header?: never;
            path: {
                userAccountCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCountersInstancesResponseDto"];
                    "application/xml": components["schemas"]["GetCountersInstancesResponseDto"];
                };
            };
        };
    };
    findV2_6: {
        parameters: {
            query?: {
                includeSubscriptions?: boolean;
                inheritCF?: "INHERIT_NONE" | "INHERIT_NO_MERGE" | "INHERIT_MERGED" | "ACCUMULATED";
            };
            header?: never;
            path: {
                userAccountCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetUserAccountResponseDto"];
                    "application/xml": components["schemas"]["GetUserAccountResponseDto"];
                };
            };
        };
    };
    remove_5: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userAccountCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description the user account is successfully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
            /** @description the user account is referenced */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description unknown user account code */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    index_33: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    listByBillingAccount: {
        parameters: {
            query?: {
                billingAccountCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserAccountsResponseDto"];
                    "application/xml": components["schemas"]["UserAccountsResponseDto"];
                };
            };
        };
    };
    listByBillingAccountV2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                billingAccountCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserAccountsResponseDto"];
                    "application/xml": components["schemas"]["UserAccountsResponseDto"];
                };
            };
        };
    };
    listGetAll_2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserAccountsResponseDto"];
                    "application/xml": components["schemas"]["UserAccountsResponseDto"];
                };
            };
        };
    };
    "    PUT_Audit_{enableORdisable}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                enableORdisable: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_34: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_FileFormat_search": {
        parameters: {
            query?: {
                code?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A File format's data */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileFormatResponseDto"];
                    "application/xml": components["schemas"]["FileFormatResponseDto"];
                };
            };
        };
    };
    "    PUT_FileFormat_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["FileFormatDto"];
                "application/xml": components["schemas"]["FileFormatDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_FileFormat_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["FileFormatDto"];
                "application/xml": components["schemas"]["FileFormatDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_FileFormat_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["FileFormatDto"];
                "application/xml": components["schemas"]["FileFormatDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_35: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_FileFormat_listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of fileFormats */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileFormatListResponseDto"];
                    "application/xml": components["schemas"]["FileFormatListResponseDto"];
                };
            };
        };
    };
    "    DELETE_FileFormat_{code}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_FileFormat_list": {
        parameters: {
            query?: {
                query?: string;
                fields?: string;
                offset?: number;
                limit?: number;
                sortBy?: string;
                sortOrder?: "ASCENDING" | "DESCENDING";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of File formats */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileFormatListResponseDto"];
                    "application/xml": components["schemas"]["FileFormatListResponseDto"];
                };
            };
        };
    };
    "    POST_FileFormat_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description List of File formats */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileFormatListResponseDto"];
                    "application/xml": components["schemas"]["FileFormatListResponseDto"];
                };
            };
        };
    };
    "    POST_Files_createDir": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": string;
                "application/xml": string;
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Files_downloadFile": {
        parameters: {
            query?: {
                file?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_36: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Files_all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of all files */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetFilesResponseDto"];
                    "application/xml": components["schemas"]["GetFilesResponseDto"];
                };
            };
        };
    };
    "    GET_Files_search": {
        parameters: {
            query?: {
                dir?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetFilesResponseDto"];
                    "application/xml": components["schemas"]["GetFilesResponseDto"];
                };
            };
        };
    };
    "    POST_Files_suppressDirectory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": string;
                "application/xml": string;
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Files_suppressFile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": string;
                "application/xml": string;
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Files_upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["FileUploadForm"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Files_uploadFileBase64": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["FileRequestDto"];
                "application/xml": components["schemas"]["FileRequestDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Files_uploadZippedFileBase64": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["FileRequestDto"];
                "application/xml": components["schemas"]["FileRequestDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Files_zipDirectory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": string;
                "application/xml": string;
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Files_zipFile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": string;
                "application/xml": string;
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_AccountingCode_search": {
        parameters: {
            query?: {
                accountingCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountingCodeGetResponseDto"];
                    "application/xml": components["schemas"]["AccountingCodeGetResponseDto"];
                };
            };
        };
    };
    "    PUT_AccountingCode_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AccountingCodeDto"];
                "application/xml": components["schemas"]["AccountingCodeDto"];
            };
        };
        responses: {
            /** @description request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_AccountingCode_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AccountingCodeDto"];
                "application/xml": components["schemas"]["AccountingCodeDto"];
            };
        };
        responses: {
            /** @description request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_AccountingCode_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AccountingCodeDto"];
                "application/xml": components["schemas"]["AccountingCodeDto"];
            };
        };
        responses: {
            /** @description request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_AccountingCode_{code}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_AccountingCode_{code}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_37: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_AccountingCode_listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of AccountingCodes */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountingCodeListResponseDto"];
                    "application/xml": components["schemas"]["AccountingCodeListResponseDto"];
                };
            };
        };
    };
    "    GET_AccountingCode_list": {
        parameters: {
            query?: {
                offset?: number;
                limit?: number;
                sortBy?: string;
                sortOrder?: "ASCENDING" | "DESCENDING";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of AccountingCode */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountingCodeListResponseDto"];
                    "application/xml": components["schemas"]["AccountingCodeListResponseDto"];
                };
            };
        };
    };
    "    POST_AccountingCode_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description list of AccountingCode */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountingCodeListResponseDto"];
                    "application/xml": components["schemas"]["AccountingCodeListResponseDto"];
                };
            };
        };
    };
    "    DELETE_AccountingCode_{accountingCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                accountingCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    GET_InvoicingPlanItem_search: {
        parameters: {
            query?: {
                invoicingPlanItemCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A invoicingPlanItem's data */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvoicingPlanItemResponseDto"];
                    "application/xml": components["schemas"]["InvoicingPlanItemResponseDto"];
                };
            };
        };
    };
    PUT_InvoicingPlanItem_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InvoicingPlanItemDto"];
                "application/xml": components["schemas"]["InvoicingPlanItemDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    POST_InvoicingPlanItem_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InvoicingPlanItemDto"];
                "application/xml": components["schemas"]["InvoicingPlanItemDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    POST_InvoicingPlanItem_createOrUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InvoicingPlanItemDto"];
                "application/xml": components["schemas"]["InvoicingPlanItemDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_38: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    POST_InvoicingPlanItem_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description A list of invoicingPlanItems */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvoicingPlanItemsResponseDto"];
                    "application/xml": components["schemas"]["InvoicingPlanItemsResponseDto"];
                };
            };
        };
    };
    "DELETE_InvoicingPlanItem_{invoicingPlanItemCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invoicingPlanItemCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    GET_InvoicingPlan_search: {
        parameters: {
            query?: {
                invoicingPlanCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A invoicingPlan's data */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvoicingPlanResponseDto"];
                    "application/xml": components["schemas"]["InvoicingPlanResponseDto"];
                };
            };
        };
    };
    PUT_InvoicingPlan_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InvoicingPlanDto"];
                "application/xml": components["schemas"]["InvoicingPlanDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    POST_InvoicingPlan_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InvoicingPlanDto"];
                "application/xml": components["schemas"]["InvoicingPlanDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_39: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    POST_InvoicingPlan_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description A list of invoicingPlans */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvoicingPlansResponseDto"];
                    "application/xml": components["schemas"]["InvoicingPlansResponseDto"];
                };
            };
        };
    };
    "DELETE_InvoicingPlan_{invoicingPlanCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invoicingPlanCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_Invoicing_cancelBillingRun": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CancelBillingRunRequestDto"];
                "application/xml": components["schemas"]["CancelBillingRunRequestDto"];
            };
        };
        responses: {
            /** @description action status. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Invoicing_cancelBillingRun": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": number;
                "application/xml": number;
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_Invoicing_billingRun_{billingRunId}_cancelInvoice": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                billingRunId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InvoiceValidationDto"];
                "application/xml": components["schemas"]["InvoiceValidationDto"];
            };
        };
        responses: {
            /** @description type ActionStatus.class Move invoices to a new Billing Run with the same parameters as the current one, and also in status REJECTED|POSTINVOICED. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    DELETE_Invoicing_billingRun_{billingRunId}_canceledInvoices": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                billingRunId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description type ActionStatus.class Delete canceled invoices for a given billing run. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Invoicing_createBillingRun": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateBillingRunDto"];
                "application/xml": components["schemas"]["CreateBillingRunDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Invoicing_createBillingRun_1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateBillingRunDto"];
                "application/xml": components["schemas"]["CreateBillingRunDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Invoicing_getBillingAccountListInRun": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": number;
                "application/xml": number;
            };
        };
        responses: {
            /** @description A list of billing accounts */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetBillingAccountListInRunResponseDto"];
                    "application/xml": components["schemas"]["GetBillingAccountListInRunResponseDto"];
                };
            };
        };
    };
    "    POST_Invoicing_getBillingRunInfo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": number;
                "application/xml": number;
            };
        };
        responses: {
            /** @description The billing run info */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetBillingRunInfoResponseDto"];
                    "application/xml": components["schemas"]["GetBillingRunInfoResponseDto"];
                };
            };
        };
    };
    "    POST_Invoicing_getPostInvoicingReport": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": number;
                "application/xml": number;
            };
        };
        responses: {
            /** @description A post-invoicing reports */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetPostInvoicingReportsResponseDto"];
                    "application/xml": components["schemas"]["GetPostInvoicingReportsResponseDto"];
                };
            };
        };
    };
    "    POST_Invoicing_getPreInvoicingReport": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": number;
                "application/xml": number;
            };
        };
        responses: {
            /** @description A pre-invoicing reports */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetPreInvoicingReportsResponseDto"];
                    "application/xml": components["schemas"]["GetPreInvoicingReportsResponseDto"];
                };
            };
        };
    };
    index_40: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_Invoicing_billingRun_{billingRunId}_invalidateInvoice": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                billingRunId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InvalidateInvoiceDocumentsDto"];
                "application/xml": components["schemas"]["InvalidateInvoiceDocumentsDto"];
            };
        };
        responses: {
            /** @description type ActionStatus.class Invalidate billing run invoice files */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_Invoicing_billingRun_{billingRunId}_moveInvoice": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                billingRunId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InvoiceValidationDto"];
                "application/xml": components["schemas"]["InvoiceValidationDto"];
            };
        };
        responses: {
            /** @description type ActionStatus.class Move invoices to a new Billing Run with the same parameters as the current one, and also in status REJECTED|POSTINVOICED. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_Invoicing_rebuildInvoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InvoiceValidationDto"];
                "application/xml": components["schemas"]["InvoiceValidationDto"];
            };
        };
        responses: {
            /** @description type ActionStatus.class Recompute invoices based on RatedTransactions and re-apply invoiceValidationScript */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_Invoicing_billingRun_{billingRunId}_rejectInvoice": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                billingRunId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InvoiceValidationDto"];
                "application/xml": components["schemas"]["InvoiceValidationDto"];
            };
        };
        responses: {
            /** @description type ActionStatus.class Reject one or several invoices (change status to REJECTED). Body will contains a list of invoice ids. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_Invoicing_validateBillingRun": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ValidateBillingRunRequestDto"];
                "application/xml": components["schemas"]["ValidateBillingRunRequestDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Invoicing_validateBillingRun": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": number;
                "application/xml": number;
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_Invoicing_billingRun_{billingRunId}_validateInvoice": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                billingRunId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InvoiceValidationDto"];
                "application/xml": components["schemas"]["InvoiceValidationDto"];
            };
        };
        responses: {
            /** @description type ActionStatus.class Validate one or several invoices (change status to DRAFT). Body will contain a list of invoice id */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Mediation_cancelReservation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PrepaidReservationDto"];
                "application/xml": components["schemas"]["PrepaidReservationDto"];
                "text/plain": components["schemas"]["PrepaidReservationDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Mediation_chargeCdr": {
        parameters: {
            query?: {
                isVirtual?: boolean;
                rateTriggeredEdr?: boolean;
                maxDepth?: number;
                returnEDRs?: boolean;
                returnWalletOperations?: boolean;
                returnWalletOperationDetails?: boolean;
                returnCounters?: boolean;
                generateRTs?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": string;
                "application/xml": string;
                "text/plain": string;
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChargeCDRResponseDto"];
                    "application/xml": components["schemas"]["ChargeCDRResponseDto"];
                };
            };
        };
    };
    "    POST_Mediation_confirmReservation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PrepaidReservationDto"];
                "application/xml": components["schemas"]["PrepaidReservationDto"];
                "text/plain": components["schemas"]["PrepaidReservationDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    createCDR: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CdrDto"];
                "application/xml": components["schemas"]["CdrDto"];
                "text/plain": components["schemas"]["CdrDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_82: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Mediation_notifyOfRejectedCdrs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CdrListDto"];
                "application/xml": components["schemas"]["CdrListDto"];
                "text/plain": components["schemas"]["CdrListDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Mediation_processCdrList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": number[];
                "application/xml": number[];
                "text/plain": number[];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Mediation_registerCdrList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CdrListDto"];
                "application/xml": components["schemas"]["CdrListDto"];
                "text/plain": components["schemas"]["CdrListDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Mediation_reserveCdr": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": string;
                "application/xml": string;
                "text/plain": string;
            };
        };
        responses: {
            /** @description Available quantity and reservationID is ed */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CdrReservationResponseDto"];
                    "application/xml": components["schemas"]["CdrReservationResponseDto"];
                };
            };
        };
    };
    "    POST_RatedTransaction_cancelRatedTransactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description Only rated transactions in statuses OPEN, REJECTED, CANCELED can be cancelled */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description ActionStatus with SUCESS or FAIL status inside */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_42: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_RatedTransaction_listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of ratedTransactions */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RatedTransactionListResponseDto"];
                    "application/xml": components["schemas"]["RatedTransactionListResponseDto"];
                };
            };
        };
    };
    "    GET_RatedTransaction_list": {
        parameters: {
            query?: {
                query?: string;
                fields?: string;
                offset?: number;
                limit?: number;
                sortBy?: string;
                sortOrder?: "ASCENDING" | "DESCENDING";
                returnUserAccountCode?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of Rated transactions */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RatedTransactionListResponseDto"];
                    "application/xml": components["schemas"]["RatedTransactionListResponseDto"];
                };
            };
        };
    };
    "    POST_RatedTransaction_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description A list of Rated transactions */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RatedTransactionListResponseDto"];
                    "application/xml": components["schemas"]["RatedTransactionListResponseDto"];
                };
            };
        };
    };
    "    PUT_Subscription_activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ActivateSubscriptionRequestDto"];
                "application/xml": components["schemas"]["ActivateSubscriptionRequestDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Subscription_activate": {
        parameters: {
            query?: {
                subscriptionValidityDate?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": string;
                "application/xml": string;
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Subscription_activateForCustomer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SubscriptionForCustomerRequestDto"];
                "application/xml": components["schemas"]["SubscriptionForCustomerRequestDto"];
            };
        };
        responses: {
            /** @description the raw result holding the Subscription EndAgreementDate in its response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubscriptionForCustomerResponseDto"];
                    "application/xml": components["schemas"]["SubscriptionForCustomerResponseDto"];
                };
            };
        };
    };
    "    POST_Patched_Subscription_activate": {
        parameters: {
            query?: {
                updateEffectiveDate?: boolean;
                newEffectiveDate?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": string;
                "application/xml": string;
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Subscription_activateServices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ActivateServicesRequestDto"];
                "application/xml": components["schemas"]["ActivateServicesRequestDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Subscription_applyOneShotChargeInstance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ApplyOneShotChargeInstanceRequestDto"];
                "application/xml": components["schemas"]["ApplyOneShotChargeInstanceRequestDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Subscription_applyProduct": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ApplyProductRequestDto"];
                "application/xml": components["schemas"]["ApplyProductRequestDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Subscription_cancelSubscriptionRenewal_{subscriptionCode}": {
        parameters: {
            query?: {
                subscriptionValidityDate?: string;
            };
            header?: never;
            path: {
                subscriptionCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description status of the request */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Subscription_cancelSubscriptionRenewal_{subscriptionCode}_1": {
        parameters: {
            query?: {
                subscriptionValidityDate?: string;
            };
            header?: never;
            path: {
                subscriptionCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description status of the request */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Subscription_search": {
        parameters: {
            query?: {
                subscriptionCode?: string;
                mergedCF?: boolean;
                inheritCF?: "INHERIT_NONE" | "INHERIT_NO_MERGE" | "INHERIT_MERGED" | "ACCUMULATED";
                validityDate?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetSubscriptionResponseDto"];
                    "application/xml": components["schemas"]["GetSubscriptionResponseDto"];
                };
            };
        };
    };
    "    PUT_Subscription_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SubscriptionDto"];
                "application/xml": components["schemas"]["SubscriptionDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Subscription_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SubscriptionDto"];
                "application/xml": components["schemas"]["SubscriptionDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Subscription_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SubscriptionDto"];
                "application/xml": components["schemas"]["SubscriptionDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Subscription_createOrUpdatePartial": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SubscriptionDto"];
                "application/xml": components["schemas"]["SubscriptionDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    DELETE_Subscription_serviceInstance: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                subscriptionId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ServiceInstanceToDelete"];
                "application/xml": components["schemas"]["ServiceInstanceToDelete"];
            };
        };
        responses: {
            /** @description A subscription */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Subscription_findByCustomer": {
        parameters: {
            query?: {
                customerCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of subscriptions */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubscriptionsListResponseDto"];
                    "application/xml": components["schemas"]["SubscriptionsListResponseDto"];
                };
            };
        };
    };
    "    GET_Subscription_dueDateDelay": {
        parameters: {
            query?: {
                subscriptionCode?: string;
                subscriptionValidityDate?: string;
                invoiceNumber?: string;
                invoiceTypeCode?: string;
                orderCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of due date delay */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetDueDateDelayResponseDto"];
                    "application/xml": components["schemas"]["GetDueDateDelayResponseDto"];
                };
            };
        };
    };
    "    GET_SubscriptionserviceInstance": {
        parameters: {
            query?: {
                subscriptionCode?: string;
                serviceInstanceId?: number;
                serviceInstanceCode?: string;
                subscriptionValidityDate?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service instance */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceInstanceResponseDto"];
                    "application/xml": components["schemas"]["GetServiceInstanceResponseDto"];
                };
            };
        };
    };
    "    GET_Subscription_listOneshotChargeOthers": {
        parameters: {
            query?: {
                subscriptionCode?: string;
                validityDate?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of one-shot other charges. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOneShotChargesResponseDto"];
                    "application/xml": components["schemas"]["GetOneShotChargesResponseDto"];
                };
            };
        };
    };
    index_43: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Subscription_instantiateServices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InstantiateServicesRequestDto"];
                "application/xml": components["schemas"]["InstantiateServicesRequestDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Subscription_listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of subscriptions */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubscriptionsListResponseDto"];
                    "application/xml": components["schemas"]["SubscriptionsListResponseDto"];
                };
            };
        };
    };
    "    GET_Subscription_listAll": {
        parameters: {
            query?: {
                offset?: number;
                limit?: number;
                mergedCF?: boolean;
                sortBy?: string;
                sortOrder?: "ASCENDING" | "DESCENDING";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of all subscriptions. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubscriptionsListResponseDto"];
                    "application/xml": components["schemas"]["SubscriptionsListResponseDto"];
                };
            };
        };
    };
    "    GET_Subscription_list": {
        parameters: {
            query?: {
                userAccountCode?: string;
                mergedCF?: boolean;
                query?: string;
                fields?: string;
                offset?: number;
                limit?: number;
                sortBy?: string;
                sortOrder?: "ASCENDING" | "DESCENDING";
                inheritCF?: "INHERIT_NONE" | "INHERIT_NO_MERGE" | "INHERIT_MERGED" | "ACCUMULATED";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of subscriptions */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubscriptionsListResponseDto"];
                    "application/xml": components["schemas"]["SubscriptionsListResponseDto"];
                };
            };
        };
    };
    "    POST_Subscription_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description List of subscriptions */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubscriptionsListResponseDto"];
                    "application/xml": components["schemas"]["SubscriptionsListResponseDto"];
                };
            };
        };
    };
    "    GET_SubscriptionserviceInstances": {
        parameters: {
            query?: {
                subscriptionCode?: string;
                subscriptionValidityDate?: string;
                serviceInstanceCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of service instances */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetListServiceInstanceResponseDto"];
                    "application/xml": components["schemas"]["GetListServiceInstanceResponseDto"];
                };
            };
        };
    };
    "    PATCH_Subscription_{code}_offer": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SubscriptionPatchDto"];
                "application/xml": components["schemas"]["SubscriptionPatchDto"];
            };
        };
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Subscription_rate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RateSubscriptionRequestDto"];
                "application/xml": components["schemas"]["RateSubscriptionRequestDto"];
            };
        };
        responses: {
            /** @description list of service instances */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RateSubscriptionResponseDto"];
                    "application/xml": components["schemas"]["RateSubscriptionResponseDto"];
                };
            };
        };
    };
    "    PUT_SubscriptionresumeServices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OperationServicesRequestDto"];
                "application/xml": components["schemas"]["OperationServicesRequestDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_Subscriptionresume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OperationSubscriptionRequestDto"];
                "application/xml": components["schemas"]["OperationSubscriptionRequestDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PATCH_Subscription{code}_offer_rollback": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OfferRollbackDto"];
                "application/xml": components["schemas"]["OfferRollbackDto"];
            };
        };
        responses: {
            /** @description ActionStatus response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    POST_Subscription_subscribeAndActivateProducts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SubscriptionAndProductsToInstantiateDto"];
                "application/xml": components["schemas"]["SubscriptionAndProductsToInstantiateDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Subscription_subscribeAndActivateServices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SubscriptionAndServicesToActivateRequestDto"];
                "application/xml": components["schemas"]["SubscriptionAndServicesToActivateRequestDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Subscription_subscribeAndInstantiateProducts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SubscriptionAndProductsToInstantiateDto"];
                "application/xml": components["schemas"]["SubscriptionAndProductsToInstantiateDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_SubscriptionsuspendServices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OperationServicesRequestDto"];
                "application/xml": components["schemas"]["OperationServicesRequestDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_Subscriptionsuspend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OperationSubscriptionRequestDto"];
                "application/xml": components["schemas"]["OperationSubscriptionRequestDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    DELETE_Subscription_oneShotCharge_{subscriptionCode}_{oneshotChargeCode}": {
        parameters: {
            query?: {
                validityDate?: string;
            };
            header?: never;
            path: {
                subscriptionCode: string;
                oneshotChargeCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A subscription */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Subscription_terminateServices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TerminateSubscriptionServicesRequestDto"];
                "application/xml": components["schemas"]["TerminateSubscriptionServicesRequestDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_Subscription_terminate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TerminateSubscriptionRequestDto"];
                "application/xml": components["schemas"]["TerminateSubscriptionRequestDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Subscription_terminate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TerminateSubscriptionRequestDto"];
                "application/xml": components["schemas"]["TerminateSubscriptionRequestDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_SubscriptionupdateServices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateServicesRequestDto"];
                "application/xml": components["schemas"]["UpdateServicesRequestDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    DELETE_Wallet_reservation_{reservationId:[0-9]+}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reservationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Wallet_reservation_confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WalletReservationDto"];
                "application/xml": components["schemas"]["WalletReservationDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Wallet_operation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WalletOperationDto"];
                "application/xml": components["schemas"]["WalletOperationDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Wallet_template_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WalletTemplateDto"];
                "application/xml": components["schemas"]["WalletTemplateDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_Wallet_reservation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WalletReservationDto"];
                "application/xml": components["schemas"]["WalletReservationDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Wallet_reservation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WalletReservationDto"];
                "application/xml": components["schemas"]["WalletReservationDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Wallet_template": {
        parameters: {
            query?: {
                walletTemplateCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A wallet template */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetWalletTemplateResponseDto"];
                    "application/xml": components["schemas"]["GetWalletTemplateResponseDto"];
                };
            };
        };
    };
    "    PUT_Wallet_template": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WalletTemplateDto"];
                "application/xml": components["schemas"]["WalletTemplateDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Wallet_template": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WalletTemplateDto"];
                "application/xml": components["schemas"]["WalletTemplateDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Wallet_balance_current": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WalletBalanceDto"];
                "application/xml": components["schemas"]["WalletBalanceDto"];
            };
        };
        responses: {
            /** @description Request processing status and balance amounts */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WalletBalanceResponseDto"];
                    "application/xml": components["schemas"]["WalletBalanceResponseDto"];
                };
            };
        };
    };
    "    POST_Wallet_operation_find": {
        parameters: {
            query?: {
                offset?: number;
                limit?: number;
                sortBy?: string;
                sortOrder?: "ASCENDING" | "DESCENDING";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["FindWalletOperationsDto"];
                "application/xml": components["schemas"]["FindWalletOperationsDto"];
            };
        };
        responses: {
            /** @description List of wallet operations */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FindWalletOperationsResponseDto"];
                    "application/xml": components["schemas"]["FindWalletOperationsResponseDto"];
                };
            };
        };
    };
    index_44: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Wallet_operation_listGetAll": {
        parameters: {
            query?: {
                withRTs?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of wallet operations */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FindWalletOperationsResponseDto"];
                    "application/xml": components["schemas"]["FindWalletOperationsResponseDto"];
                };
            };
        };
    };
    "    GET_Wallet_operation_list": {
        parameters: {
            query?: {
                query?: string;
                fields?: string;
                offset?: number;
                limit?: number;
                sortBy?: string;
                sortOrder?: "ASCENDING" | "DESCENDING";
                withRTs?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of wallet operations */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FindWalletOperationsResponseDto"];
                    "application/xml": components["schemas"]["FindWalletOperationsResponseDto"];
                };
            };
        };
    };
    "    POST_Wallet_operation_list": {
        parameters: {
            query?: {
                withRTs?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description List of wallet operations */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FindWalletOperationsResponseDto"];
                    "application/xml": components["schemas"]["FindWalletOperationsResponseDto"];
                };
            };
        };
    };
    "    POST_Wallet_balance_open": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WalletBalanceDto"];
                "application/xml": components["schemas"]["WalletBalanceDto"];
            };
        };
        responses: {
            /** @description Request processing status and balance amounts status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WalletBalanceResponseDto"];
                    "application/xml": components["schemas"]["WalletBalanceResponseDto"];
                };
            };
        };
    };
    "    DELETE_Wallet_template_{walletTemplateCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                walletTemplateCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Wallet_balance_reserved": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WalletBalanceDto"];
                "application/xml": components["schemas"]["WalletBalanceDto"];
            };
        };
        responses: {
            /** @description Request processing status and balance amounts */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WalletBalanceResponseDto"];
                    "application/xml": components["schemas"]["WalletBalanceResponseDto"];
                };
            };
        };
    };
    "    PUT_BundleTemplate_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BundleTemplateDto"];
                "application/xml": components["schemas"]["BundleTemplateDto"];
            };
        };
        responses: {
            /** @description Response of the update bundleTemplate */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    POST_BundleTemplate_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BundleTemplateDto"];
                "application/xml": components["schemas"]["BundleTemplateDto"];
            };
        };
        responses: {
            /** @description Response of the create bundleTemplate */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    POST_BundleTemplate_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BundleTemplateDto"];
                "application/xml": components["schemas"]["BundleTemplateDto"];
            };
        };
        responses: {
            /** @description Response of the create or update bundleTemplate */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    index_45: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_BusinessOfferModel_search": {
        parameters: {
            query?: {
                businessOfferModelCode?: string;
                loadOfferServiceTemplate?: boolean;
                loadOfferProductTemplate?: boolean;
                loadServiceChargeTemplate?: boolean;
                loadProductChargeTemplate?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A business offer model */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetBusinessOfferModelResponseDto"];
                    "application/xml": components["schemas"]["GetBusinessOfferModelResponseDto"];
                };
            };
        };
    };
    "    PUT_BusinessOfferModel_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BusinessOfferModelDto"];
                "application/xml": components["schemas"]["BusinessOfferModelDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_BusinessOfferModel_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BusinessOfferModelDto"];
                "application/xml": components["schemas"]["BusinessOfferModelDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_BusinessOfferModel_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BusinessOfferModelDto"];
                "application/xml": components["schemas"]["BusinessOfferModelDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_46: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_BusinessOfferModel_install": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BusinessOfferModelDto"];
                "application/xml": components["schemas"]["BusinessOfferModelDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_BusinessOfferModel_list": {
        parameters: {
            query?: {
                query?: string;
                fields?: string;
                offset?: number;
                limit?: number;
                sortBy?: string;
                sortOrder?: "ASCENDING" | "DESCENDING";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of business offer models */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MeveoModuleDtosResponse"];
                    "application/xml": components["schemas"]["MeveoModuleDtosResponse"];
                };
            };
        };
    };
    "    POST_BusinessOfferModel_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description A list of business offer models */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MeveoModuleDtosResponse"];
                    "application/xml": components["schemas"]["MeveoModuleDtosResponse"];
                };
            };
        };
    };
    "    DELETE_BusinessOfferModel_{businessOfferModelCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                businessOfferModelCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_BusinessProductModel_search": {
        parameters: {
            query?: {
                businessProductModelCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A business product model */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetBusinessProductModelResponseDto"];
                    "application/xml": components["schemas"]["GetBusinessProductModelResponseDto"];
                };
            };
        };
    };
    "    PUT_BusinessProductModel_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BusinessProductModelDto"];
                "application/xml": components["schemas"]["BusinessProductModelDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_BusinessProductModel_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BusinessProductModelDto"];
                "application/xml": components["schemas"]["BusinessProductModelDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_BusinessProductModel_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BusinessProductModelDto"];
                "application/xml": components["schemas"]["BusinessProductModelDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_47: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_BusinessProductModel_install": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BusinessProductModelDto"];
                "application/xml": components["schemas"]["BusinessProductModelDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_BusinessProductModel_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of business product models */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MeveoModuleDtosResponse"];
                    "application/xml": components["schemas"]["MeveoModuleDtosResponse"];
                };
            };
        };
    };
    "    GET_BusinessProductModel_listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of Business Account Models */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MeveoModuleDtosResponse"];
                    "application/xml": components["schemas"]["MeveoModuleDtosResponse"];
                };
            };
        };
    };
    "    DELETE_BusinessProductModel_{businessProductModelCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                businessProductModelCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_BusinessServiceModel_search": {
        parameters: {
            query?: {
                businessServiceModelCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A business servie model */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetBusinessServiceModelResponseDto"];
                    "application/xml": components["schemas"]["GetBusinessServiceModelResponseDto"];
                };
            };
        };
    };
    "    PUT_BusinessServiceModel_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BusinessServiceModelDto"];
                "application/xml": components["schemas"]["BusinessServiceModelDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_BusinessServiceModel_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BusinessServiceModelDto"];
                "application/xml": components["schemas"]["BusinessServiceModelDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_BusinessServiceModel_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BusinessServiceModelDto"];
                "application/xml": components["schemas"]["BusinessServiceModelDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_48: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_BusinessServiceModel_install": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BusinessServiceModelDto"];
                "application/xml": components["schemas"]["BusinessServiceModelDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_BusinessServiceModel_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of business service models */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MeveoModuleDtosResponse"];
                    "application/xml": components["schemas"]["MeveoModuleDtosResponse"];
                };
            };
        };
    };
    "    GET_BusinessServiceModel_listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of Business Service Models */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MeveoModuleDtosResponse"];
                    "application/xml": components["schemas"]["MeveoModuleDtosResponse"];
                };
            };
        };
    };
    "    DELETE_BusinessServiceModel_{businessServiceModelCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                businessServiceModelCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Channel_search": {
        parameters: {
            query?: {
                channelCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A channel */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetChannelResponseDto"];
                    "application/xml": components["schemas"]["GetChannelResponseDto"];
                };
            };
        };
    };
    "    PUT_Channel_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ChannelDto"];
                "application/xml": components["schemas"]["ChannelDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Channel_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ChannelDto"];
                "application/xml": components["schemas"]["ChannelDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    DELETE_Channel_delete": {
        parameters: {
            query?: {
                channelCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Channel_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ChannelDto"];
                "application/xml": components["schemas"]["ChannelDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Channel_{code}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Channel_{code}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_49: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_50: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_ChannelsAndSegments_search": {
        parameters: {
            query?: {
                active?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A channel list */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetListChannelsAndSegmentsResponseDto"];
                    "application/xml": components["schemas"]["GetListChannelsAndSegmentsResponseDto"];
                };
            };
        };
    };
    "POST_ChargeTemplate_chargeTemplates_{chargeTemplateCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chargeTemplateCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description charge template */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetChargeTemplateResponseDto"];
                    "application/xml": components["schemas"]["GetChargeTemplateResponseDto"];
                };
            };
        };
    };
    "    GET_ChargeTemplate_chargeTemplate": {
        parameters: {
            query?: {
                chargeTemplateCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A charge template */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetChargeTemplateResponseDto"];
                    "application/xml": components["schemas"]["GetChargeTemplateResponseDto"];
                };
            };
        };
    };
    "GET_ChargeTemplate_chargeTemplates_{chargeTemplateCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chargeTemplateCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A charge template */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetChargeTemplateResponseDto"];
                    "application/xml": components["schemas"]["GetChargeTemplateResponseDto"];
                };
            };
        };
    };
    index_52: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "PUT_ChargeTemplate_chargeTemplates_{chargeTemplateCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chargeTemplateCode: string;
                status: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description charge template */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetChargeTemplateResponseDto"];
                    "application/xml": components["schemas"]["GetChargeTemplateResponseDto"];
                };
            };
        };
    };
    "    GET_CounterTemplate_search": {
        parameters: {
            query?: {
                counterTemplateCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description counter template */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCounterTemplateResponseDto"];
                    "application/xml": components["schemas"]["GetCounterTemplateResponseDto"];
                };
            };
        };
    };
    "    PUT_CounterTemplate_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CounterTemplateDto"];
                "application/xml": components["schemas"]["CounterTemplateDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_CounterTemplate_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CounterTemplateDto"];
                "application/xml": components["schemas"]["CounterTemplateDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_CounterTemplate_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CounterTemplateDto"];
                "application/xml": components["schemas"]["CounterTemplateDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_CounterTemplate_{code}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_CounterTemplate_{code}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_51: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_CounterTemplate_listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of CounterTemplates */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CounterTemplatesResponseDto"];
                    "application/xml": components["schemas"]["CounterTemplatesResponseDto"];
                };
            };
        };
    };
    "    DELETE_CounterTemplate_{counterTemplateCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                counterTemplateCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_DiscountPlanItem_search": {
        parameters: {
            query?: {
                discountPlanItemCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A discount plan item */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DiscountPlanItemResponseDto"];
                    "application/xml": components["schemas"]["DiscountPlanItemResponseDto"];
                };
            };
        };
    };
    "    PUT_DiscountPlanItem_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DiscountPlanItemDto"];
                "application/xml": components["schemas"]["DiscountPlanItemDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_DiscountPlanItem_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DiscountPlanItemDto"];
                "application/xml": components["schemas"]["DiscountPlanItemDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_DiscountPlanItem_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DiscountPlanItemDto"];
                "application/xml": components["schemas"]["DiscountPlanItemDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_DiscountPlanItem_{code}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_DiscountPlanItem_{code}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_53: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_DiscountPlanItem_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of discount plan items */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DiscountPlanItemsResponseDto"];
                    "application/xml": components["schemas"]["DiscountPlanItemsResponseDto"];
                };
            };
        };
    };
    "    GET_DiscountPlanItem_listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of DiscountPlanItems */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DiscountPlanItemsResponseDto"];
                    "application/xml": components["schemas"]["DiscountPlanItemsResponseDto"];
                };
            };
        };
    };
    "    DELETE_DiscountPlanItem_{discountPlanItemCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                discountPlanItemCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_DiscountPlan_search": {
        parameters: {
            query?: {
                discountPlanCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return discount plan */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetDiscountPlanResponseDto"];
                    "application/xml": components["schemas"]["GetDiscountPlanResponseDto"];
                };
            };
        };
    };
    "    PUT_DiscountPlan_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DiscountPlanDto"];
                "application/xml": components["schemas"]["DiscountPlanDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_DiscountPlan_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DiscountPlanDto"];
                "application/xml": components["schemas"]["DiscountPlanDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    DELETE_DiscountPlan_delete": {
        parameters: {
            query?: {
                discountPlanCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_DiscountPlan_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DiscountPlanDto"];
                "application/xml": components["schemas"]["DiscountPlanDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_DiscountPlan_{code}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_DiscountPlan_{code}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of DiscountPlans */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetDiscountPlansResponseDto"];
                    "application/xml": components["schemas"]["GetDiscountPlansResponseDto"];
                };
            };
        };
    };
    index_54: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_DiscountPlan_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of discount plans */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetDiscountPlansResponseDto"];
                    "application/xml": components["schemas"]["GetDiscountPlansResponseDto"];
                };
            };
        };
    };
    listGetAll_3: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetDiscountPlansResponseDto"];
                    "application/xml": components["schemas"]["GetDiscountPlansResponseDto"];
                };
            };
        };
    };
    "    GET_OfferTemplateCategory_search": {
        parameters: {
            query?: {
                offerTemplateCategoryCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return offerTemplateCategoryCodeDto containing offerTemplateCategoryCode */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOfferTemplateCategoryResponseDto"];
                    "application/xml": components["schemas"]["GetOfferTemplateCategoryResponseDto"];
                };
            };
        };
    };
    "    PUT_OfferTemplateCategory_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OfferTemplateCategoryDto"];
                "application/xml": components["schemas"]["OfferTemplateCategoryDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_OfferTemplateCategory_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OfferTemplateCategoryDto"];
                "application/xml": components["schemas"]["OfferTemplateCategoryDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    DELETE_OfferTemplateCategory_delete": {
        parameters: {
            query?: {
                offerTemplateCategoryCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_OfferTemplateCategory_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OfferTemplateCategoryDto"];
                "application/xml": components["schemas"]["OfferTemplateCategoryDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_OfferTemplateCategory_{code}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_OfferTemplateCategory_{code}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_55: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_OfferTemplateCategory_listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of DiscountPlanItems */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OfferTemplateCategoriesResponseDto"];
                    "application/xml": components["schemas"]["OfferTemplateCategoriesResponseDto"];
                };
            };
        };
    };
    addProduct: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                offerCode: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ProductOfferTemplateDto"];
                "application/xml": components["schemas"]["ProductOfferTemplateDto"];
            };
        };
        responses: {
            /** @description Internat error while adding product to offer template */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessException"];
                    "application/xml": components["schemas"]["BusinessException"];
                };
            };
            /** @description OfferTemplate doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description product code and product id paramters are missing */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
            /** @description Request processing status and offerTemplate */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOfferTemplateResponseDto"];
                    "application/xml": components["schemas"]["GetOfferTemplateResponseDto"];
                };
            };
        };
    };
    "    GET_OfferTemplate_search": {
        parameters: {
            query?: {
                offerTemplateCode?: string;
                validFrom?: string;
                validTo?: string;
                inheritCF?: "INHERIT_NONE" | "INHERIT_NO_MERGE" | "INHERIT_MERGED" | "ACCUMULATED";
                loadOfferServiceTemplate?: boolean;
                loadOfferProductTemplate?: boolean;
                loadServiceChargeTemplate?: boolean;
                loadProductChargeTemplate?: boolean;
                loadAllowedDiscountPlan?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Entity OfferTemplate doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description offerTemplateCode paramter is missing */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
            /** @description Return offerTemplateDto containing offerTemplate */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOfferTemplateResponseDto"];
                    "application/xml": components["schemas"]["GetOfferTemplateResponseDto"];
                };
            };
        };
    };
    "    PUT_OfferTemplate_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OfferTemplateDto"];
                "application/xml": components["schemas"]["OfferTemplateDto"];
            };
        };
        responses: {
            /** @description Offer template already existe */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityAlreadyExistsException"];
                    "application/xml": components["schemas"]["EntityAlreadyExistsException"];
                };
            };
            /** @description Failed creating/deleting image */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvalidImageData"];
                    "application/xml": components["schemas"]["InvalidImageData"];
                };
            };
            /** @description one of these entities doesn't exist : BusinessOfferModel, OfferTemplateCategory, ScriptInstance, Seller, Channel, OneShotChargeTemplate, CustomerCategory */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description code of Offer template is missing / imagePath is missing */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
            /** @description Update offer template. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_OfferTemplate_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OfferTemplateDto"];
                "application/xml": components["schemas"]["OfferTemplateDto"];
            };
        };
        responses: {
            /** @description Create offer template. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
            /** @description Offer template already existe */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityAlreadyExistsException"];
                    "application/xml": components["schemas"]["EntityAlreadyExistsException"];
                };
            };
            /** @description Failed creating/deleting image */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvalidImageData"];
                    "application/xml": components["schemas"]["InvalidImageData"];
                };
            };
            /** @description one of these entities doesn't exist : BusinessOfferModel, OfferTemplateCategory, ScriptInstance, Seller, Channel, OneShotChargeTemplate, CustomerCategory */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description code of Offer template is missing / imagePath is missing */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    "    POST_OfferTemplate_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OfferTemplateDto"];
                "application/xml": components["schemas"]["OfferTemplateDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_OfferTemplate_{code}_disable": {
        parameters: {
            query?: {
                validFrom?: string;
                validTo?: string;
            };
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Internat error while enabling offer template */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessException"];
                    "application/xml": components["schemas"]["BusinessException"];
                };
            };
            /** @description OfferTemplate doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description code paramter is missing */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    dissociateProduct: {
        parameters: {
            query?: {
                validFrom?: string;
                validTo?: string;
            };
            header?: never;
            path: {
                offerCode: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": string[];
                "application/xml": string[];
            };
        };
        responses: {
            /** @description Internat error while dissociate product from offer template */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessException"];
                    "application/xml": components["schemas"]["BusinessException"];
                };
            };
            /** @description OfferTemplate doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description Request processing status and offerTemplate */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOfferTemplateResponseDto"];
                    "application/xml": components["schemas"]["GetOfferTemplateResponseDto"];
                };
            };
        };
    };
    duplicateOffer: {
        parameters: {
            query?: {
                /** @description copy the hierarchy of the offer */
                duplicateHierarchy?: boolean;
                /** @description preserve code of offer */
                preserveCode?: boolean;
                "date valid from"?: string;
                "date valid to"?: string;
            };
            header?: never;
            path: {
                /** @description code of the offer that will be duplicate */
                offerTemplateCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                };
            };
        };
    };
    "    POST_OfferTemplate_{code}_enable": {
        parameters: {
            query?: {
                validFrom?: string;
                validTo?: string;
            };
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Internat error while enabling offer template */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessException"];
                    "application/xml": components["schemas"]["BusinessException"];
                };
            };
            /** @description OfferTemplate doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description code paramter is missing */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_56: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    list_2: {
        parameters: {
            query?: {
                offerTemplateCode?: string;
                validFrom?: string;
                validTo?: string;
                inheritCF?: "INHERIT_NONE" | "INHERIT_NO_MERGE" | "INHERIT_MERGED" | "ACCUMULATED";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetListOfferTemplateResponseDto"];
                    "application/xml": components["schemas"]["GetListOfferTemplateResponseDto"];
                };
            };
        };
    };
    "    GET_OfferTemplate_list": {
        parameters: {
            query?: {
                offerTemplateCode?: string;
                validFrom?: string;
                validTo?: string;
                query?: string;
                fields?: string;
                offset?: number;
                limit?: number;
                sortBy?: string;
                sortOrder?: "ASCENDING" | "DESCENDING";
                inheritCF?: "INHERIT_NONE" | "INHERIT_NO_MERGE" | "INHERIT_MERGED" | "ACCUMULATED";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description some field doesn't have a valid field name */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvalidParameterException"];
                    "application/xml": components["schemas"]["InvalidParameterException"];
                };
            };
            /** @description A list of offer templates */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetListOfferTemplateResponseDto"];
                    "application/xml": components["schemas"]["GetListOfferTemplateResponseDto"];
                };
            };
        };
    };
    "    POST_OfferTemplate_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description some field doesn't have a valid field name */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvalidParameterException"];
                    "application/xml": components["schemas"]["InvalidParameterException"];
                };
            };
            /** @description List of Offer templates */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetListOfferTemplateResponseDto"];
                    "application/xml": components["schemas"]["GetListOfferTemplateResponseDto"];
                };
            };
        };
    };
    listPost_3: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The customer context information */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomerContextDTO"];
                "application/xml": components["schemas"]["CustomerContextDTO"];
            };
        };
        responses: {
            /** @description All offers successfully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetListCpqOfferResponseDto"];
                    "application/xml": components["schemas"]["GetListCpqOfferResponseDto"];
                };
            };
            /** @description some field doesn't have a valid field name */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvalidParameterException"];
                    "application/xml": components["schemas"]["InvalidParameterException"];
                };
            };
            /** @description billingAccountCode does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "    PUT_OfferTemplate_massEnable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Map of filters */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EnableOfferTemplateDto"];
                "application/xml": components["schemas"]["EnableOfferTemplateDto"];
            };
        };
        responses: {
            /** @description Internat error while disabling all offer templates match the filter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessException"];
                    "application/xml": components["schemas"]["BusinessException"];
                };
            };
            /** @description Filters is required */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_OfferTemplate_massEnable_1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Map of filters */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EnableOfferTemplateDto"];
                "application/xml": components["schemas"]["EnableOfferTemplateDto"];
            };
        };
        responses: {
            /** @description Internat error while enabling all offer templates match the filter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessException"];
                    "application/xml": components["schemas"]["BusinessException"];
                };
            };
            /** @description Filters is required */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    DELETE_OfferTemplate_{offerTemplateCode}": {
        parameters: {
            query?: {
                validFrom?: string;
                validTo?: string;
            };
            header?: never;
            path: {
                offerTemplateCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OfferTemplate doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description offerTemplateCode paramter is missing */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
            /** @description List of offer templates */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    updateStatus: {
        parameters: {
            query: {
                "new status": "IN_STUDY" | "IN_DESIGN" | "IN_TEST" | "ACTIVE" | "LAUNCHED" | "RETIRED" | "OBSOLETE" | "REJECTED";
                "date valid from"?: string;
                "date valid to"?: string;
            };
            header?: never;
            path: {
                offerTemplateCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                };
            };
        };
    };
    "    GET_OneShotChargeTemplate_search": {
        parameters: {
            query: {
                /** @description The One shot charge template code */
                oneShotChargeTemplateCode: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description one shot charge template */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOneShotChargeTemplateResponseDto"];
                    "application/xml": components["schemas"]["GetOneShotChargeTemplateResponseDto"];
                };
            };
        };
    };
    "    PUT_OneShotChargeTemplate_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OneShotChargeTemplateDto"];
                "application/xml": components["schemas"]["OneShotChargeTemplateDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_OneShotChargeTemplate_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OneShotChargeTemplateDto"];
                "application/xml": components["schemas"]["OneShotChargeTemplateDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_OneShotChargeTemplate_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OneShotChargeTemplateDto"];
                "application/xml": components["schemas"]["OneShotChargeTemplateDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_OneShotChargeTemplate_{code}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The code of One shot charge template to be disabled */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_OneShotChargeTemplate_{code}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The code of One shot charge template to be enabled */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_57: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    list_3: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OneShotChargeTemplateResponseDto"];
                    "application/xml": components["schemas"]["OneShotChargeTemplateResponseDto"];
                };
            };
        };
    };
    "    GET_OneShotChargeTemplate_list": {
        parameters: {
            query?: {
                /** @description The language code */
                languageCode?: string;
                /** @description The country code */
                countryCode?: string;
                /** @description The currency code */
                currencyCode?: string;
                /** @description The seller code */
                sellerCode?: string;
                /** @description The subscription date */
                date?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of one shot charge template */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OneShotChargeTemplateWithPriceListDto"];
                    "application/xml": components["schemas"]["OneShotChargeTemplateWithPriceListDto"];
                };
            };
        };
    };
    "    DELETE_OneShotChargeTemplate_{oneShotChargeTemplateCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The one shot charge template code */
                oneShotChargeTemplateCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of oneShotChargeTemplates */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OneShotChargeTemplateResponseDto"];
                    "application/xml": components["schemas"]["OneShotChargeTemplateResponseDto"];
                };
            };
        };
    };
    updatePricePlanMatrixLines: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                pricePlanMatrixCode: string;
                pricePlanMatrixVersion: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PricePlanMatrixLinesDto"];
                "application/xml": components["schemas"]["PricePlanMatrixLinesDto"];
            };
        };
        responses: {
            /** @description the price plan line successfully updated */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetPricePlanVersionResponseDto"];
                    "application/xml": components["schemas"]["GetPricePlanVersionResponseDto"];
                };
            };
            /** @description Internat error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addPricePlanMatrixLines: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                pricePlanMatrixCode: string;
                pricePlanMatrixVersion: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PricePlanMatrixLinesDto"];
                "application/xml": components["schemas"]["PricePlanMatrixLinesDto"];
            };
        };
        responses: {
            /** @description the price plan line successfully added */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetPricePlanVersionResponseDto"];
                    "application/xml": components["schemas"]["GetPricePlanVersionResponseDto"];
                };
            };
            /** @description Internat error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    find_7: {
        parameters: {
            query: {
                /** @description The price plan code */
                pricePlanCode: string;
                /** @description Indicate if returning pricePlanMatrixLine */
                returnPricePlanMatrixLine?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description the price plan is successfully retreived */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetPricePlanResponseDto"];
                    "application/xml": components["schemas"]["GetPricePlanResponseDto"];
                };
            };
            /** @description Internat error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_7: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PricePlanMatrixDto"];
                "application/xml": components["schemas"]["PricePlanMatrixDto"];
            };
        };
        responses: {
            /** @description the price plan is successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internat error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_7: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PricePlanMatrixDto"];
                "application/xml": components["schemas"]["PricePlanMatrixDto"];
            };
        };
        responses: {
            /** @description the price plan is successfully created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internat error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_8: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                pricePlanMatrixCode: string;
                pricePlanMatrixVersion: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PricePlanMatrixColumnDto"];
                "application/xml": components["schemas"]["PricePlanMatrixColumnDto"];
            };
        };
        responses: {
            /** @description the price plan column successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internat error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    create_8: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                pricePlanMatrixCode: string;
                pricePlanMatrixVersion: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PricePlanMatrixColumnDto"];
                "application/xml": components["schemas"]["PricePlanMatrixColumnDto"];
            };
        };
        responses: {
            /** @description the price plan column successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description the price plan column already existe with the given code */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internat error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description the price plan column with code is missing */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createOrUpdate_7: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PricePlanMatrixDto"];
                "application/xml": components["schemas"]["PricePlanMatrixDto"];
            };
        };
        responses: {
            /** @description the price plan is successfully created/updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internat error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateMatrixPricePlanVersion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PricePlanMatrixVersionDto"];
                "application/xml": components["schemas"]["PricePlanMatrixVersionDto"];
            };
        };
        responses: {
            /** @description the price plan version successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetPricePlanVersionResponseDto"];
                    "application/xml": components["schemas"]["GetPricePlanVersionResponseDto"];
                };
            };
            /** @description the product verion with product code and current version in param does not exist */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unkonw product to attach to product version */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createOrUpdateMatrixPricePlanVersion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PricePlanMatrixVersionDto"];
                "application/xml": components["schemas"]["PricePlanMatrixVersionDto"];
            };
        };
        responses: {
            /** @description the price plan version successfully created or updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetPricePlanVersionResponseDto"];
                    "application/xml": components["schemas"]["GetPricePlanVersionResponseDto"];
                };
            };
            /** @description the product verion with product code and current version in param does not exist */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unkonw product to attach to product version */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    disable: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The price plan code */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description the price plan is successfully disabled */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internat error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    duplicatePricePlan: {
        parameters: {
            query: {
                /** @description The price plan matrix new code */
                pricePlanMatrixNewCode: string;
                priceVersionType?: string;
            };
            header?: never;
            path: {
                /** @description The price plan matrix code */
                pricePlanMatrixCode: string;
                /** @description The price plan matrix version to be duplicated */
                pricePlanMatrixVersion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description the price plan version successfully duplicated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description the price plan version with price plan code and current version in param does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    duplicatePricePlanVersion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The price plan matrix code */
                pricePlanMatrixCode: string;
                /** @description The price plan matrix version to be duplicated */
                pricePlanMatrixVersion: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DatePeriodDto"];
                "application/xml": components["schemas"]["DatePeriodDto"];
            };
        };
        responses: {
            /** @description the price plan version successfully duplicated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description the price plan version with price plan code and current version in param does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Warning : Unable to confirm - An other period is overlapping. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    enable: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The price plan code */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description the price plan is successfully enabled */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internat error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    findPricePlanMatrixColumn: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The price plan matrix column code */
                pricePlanMatrixColumnCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description the price plan column successfully loaded */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internat error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getPricePlanMatrixLine: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The price plan matrix line id */
                pricePlanMatrixLineId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description the price plan line successfully loaded */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removePricePlanMatrixLine: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The price plan matrix line id */
                pricePlanMatrixLineId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description the price plan line successfully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    index_58: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    listGetAll_4: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PricePlanMatrixesResponseDto"];
                    "application/xml": components["schemas"]["PricePlanMatrixesResponseDto"];
                };
            };
        };
    };
    listPricePlanByEventCode: {
        parameters: {
            query: {
                /** @description The event code */
                eventCode: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description price plans are successfully retreived */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PricePlanMatrixesResponseDto"];
                    "application/xml": components["schemas"]["PricePlanMatrixesResponseDto"];
                };
            };
            /** @description Internat error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listPricePlanMatrixVersions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description the list of price plan version successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetPricePlanVersionResponseDto"];
                    "application/xml": components["schemas"]["GetPricePlanVersionResponseDto"];
                };
            };
            /** @description Unknown error */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    remove_6: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The price plan code */
                pricePlanCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description the price plan is successfully removed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
            /** @description Internat error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removeMatrixPricePlanVersion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The price plan matrix code */
                pricePlanMatrixCode: string;
                /** @description The price plan matrix version */
                pricePlanMatrixVersion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description the price plan version successfully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
            /** @description the price plan version with price plan code and current version in param does not exist or the price plan matrix version is attached to a price plan matrix */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unknown price plan version */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removePricePlanMatrixColumnCode: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                pricePlanMatrixCode: string;
                pricePlanMatrixVersion: number;
                /** @description The price plan matrix column code */
                pricePlanMatrixColumnCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description the price plan column successfully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internat error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removePricePlanMatrixLines: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PricePlanMatrixLinesDto"];
                "application/xml": components["schemas"]["PricePlanMatrixLinesDto"];
            };
        };
        responses: {
            /** @description the price plan lines successfully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updatePricePlanMatrixVersionStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The price plan matrix code */
                pricePlanMatrixCode: string;
                /** @description The price plan matrix version */
                pricePlanMatrixVersion: number;
                /** @description The status of Price plan */
                status: "DRAFT" | "PUBLISHED" | "CLOSED";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description the price plan version successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetPricePlanVersionResponseDto"];
                    "application/xml": components["schemas"]["GetPricePlanVersionResponseDto"];
                };
            };
            /** @description the status of the price plan matrix is already closed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unknown price plan version */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateWithoutDeletePricePlanMatrixLines: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                pricePlanMatrixCode: string;
                pricePlanMatrixVersion: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PricePlanMatrixLinesDto"];
                "application/xml": components["schemas"]["PricePlanMatrixLinesDto"];
            };
        };
        responses: {
            /** @description the price plan line successfully updated */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetPricePlanVersionResponseDto"];
                    "application/xml": components["schemas"]["GetPricePlanVersionResponseDto"];
                };
            };
            /** @description Internat error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addCharges: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                productCode: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ProductChargeTemplateMappingDto"][];
                "application/xml": components["schemas"]["ProductChargeTemplateMappingDto"][];
            };
        };
        responses: {
            /** @description All charges was added */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetProductDtoResponse"];
                    "application/xml": components["schemas"]["GetProductDtoResponse"];
                };
            };
            /** @description product or one of the charges doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createOrUpdateProductLine: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description create new product line or update an existing product line */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductLineDto"];
                "application/xml": components["schemas"]["ProductLineDto"];
            };
        };
        responses: {
            /** @description the product line successfully created or updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetProductLineDtoResponse"];
                    "application/xml": components["schemas"]["GetProductLineDtoResponse"];
                };
            };
            /** @description the product with code in param does exist for a new product line */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createOrUpdateProductVersion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description create new product version or update an existing product version */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductVersionDto"];
                "application/xml": components["schemas"]["ProductVersionDto"];
            };
        };
        responses: {
            /** @description the product version successfully created or updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetProductVersionResponse"];
                    "application/xml": components["schemas"]["GetProductVersionResponse"];
                };
            };
            /** @description the product verion with product code and current version in param does not exist */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unkonw product to attach to product version */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listProducts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description The search operation is succefully executed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetListProductsResponseDto"];
                    "application/xml": components["schemas"]["GetListProductsResponseDto"];
                };
            };
        };
    };
    createProduct: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description product dto for a new insertion */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductDto"];
                "application/xml": components["schemas"]["ProductDto"];
            };
        };
        responses: {
            /** @description the product successfully created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetProductDtoResponse"];
                    "application/xml": components["schemas"]["GetProductDtoResponse"];
                };
            };
            /** @description the product already existe with the given code */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internat error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description one of the entites doesn't exist : */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description the product with code is missing */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    duplicateProduct: {
        parameters: {
            query?: {
                /** @description copy the hierarchy of the product */
                duplicateHierarchy?: boolean;
                /** @description preserve code of product */
                preserveCode?: boolean;
            };
            header?: never;
            path: {
                /** @description code of the product that will be duplicate */
                productCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description the product successfully duplicated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetProductDtoResponse"];
                    "application/xml": components["schemas"]["GetProductDtoResponse"];
                };
            };
            /** @description the product with product code in param does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
        };
    };
    duplicateProductVersion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                productCode: string;
                productVersion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description the product version successfully duplicated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description the product verion with product code and current version in param does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    findProductByCode: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description code product for searching an existing product */
                productCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The search operation is succefully executed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetProductDtoResponse"];
                    "application/xml": components["schemas"]["GetProductDtoResponse"];
                };
            };
            /** @description the product with code in param does not exist */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateProduct: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description code of the product to be updated */
                productCode: string;
            };
            cookie?: never;
        };
        /** @description product dto for updating a product */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProductDto"];
                "application/xml": components["schemas"]["ProductDto"];
            };
        };
        responses: {
            /** @description the product successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetProductDtoResponse"];
                    "application/xml": components["schemas"]["GetProductDtoResponse"];
                };
            };
            /** @description the status of the product is different to DRAFT */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unknown producth */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removeProduct: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description product code */
                productCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description the product is successfully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
            /** @description the product is attached to an offer */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description unknown product line */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    findProductLineByCode: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description find an existing product line */
                productLineCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The search operation is succefully executed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetProductLineDtoResponse"];
                    "application/xml": components["schemas"]["GetProductLineDtoResponse"];
                };
            };
            /** @description the product line with code in param does not exist */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unkonw product line */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description productLineCode parameter is missing */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removeProductLine: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description productLine code */
                productLineCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description the product line is successfully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
            /** @description the product line is attached to a product */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description unknown product line */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    findProductVersion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                productCode: string;
                productVersion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The search operation is succefully executed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetProductVersionResponse"];
                    "application/xml": components["schemas"]["GetProductVersionResponse"];
                };
            };
            /** @description the product verion with product code and current version in param does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removeProductVersion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                productCode: string;
                productVersion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description the product version successfully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
            /** @description the product version with product code and current version in param does not exist or the product version is attached to a product */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unknown product version */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    findProductVersions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                productCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The search operation is succefully executed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetListProductVersionsResponseDto"];
                    "application/xml": components["schemas"]["GetListProductVersionsResponseDto"];
                };
            };
        };
    };
    index_59: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    listPost_4: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The Offer context */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OfferContextDTO"];
                "application/xml": components["schemas"]["OfferContextDTO"];
            };
        };
        responses: {
            /** @description The search operation is succefully executed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCpqOfferResponseDto"];
                    "application/xml": components["schemas"]["GetCpqOfferResponseDto"];
                };
            };
            /** @description offerCode does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removeCharge: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                productCode: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": string[];
                "application/xml": string[];
            };
        };
        responses: {
            /** @description All charges was removed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetProductDtoResponse"];
                    "application/xml": components["schemas"]["GetProductDtoResponse"];
                };
            };
            /** @description product or one of the charges doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateProductStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                productCode: string;
                status: "DRAFT" | "ACTIVE" | "CLOSED";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description the product successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetProductDtoResponse"];
                    "application/xml": components["schemas"]["GetProductDtoResponse"];
                };
            };
            /** @description the status of the product is already closed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateProductVersionStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                productCode: string;
                productVersion: number;
                status: "DRAFT" | "PUBLISHED" | "CLOSED";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description the product version successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetProductVersionResponse"];
                    "application/xml": components["schemas"]["GetProductVersionResponse"];
                };
            };
            /** @description the status of the product is already closed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unknown product version */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "    GET_RecurringChargeTemplate_search": {
        parameters: {
            query: {
                /** @description code of recurring charge template */
                recurringChargeTemplateCode: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return a recurringChargeTemplate */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetRecurringChargeTemplateResponseDto"];
                    "application/xml": components["schemas"]["GetRecurringChargeTemplateResponseDto"];
                };
            };
        };
    };
    "    PUT_RecurringChargeTemplate_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RecurringChargeTemplateDto"];
                "application/xml": components["schemas"]["RecurringChargeTemplateDto"];
            };
        };
        responses: {
            /** @description list of recurringChargeTemplates */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecurringChargeTemplateResponseDto"];
                    "application/xml": components["schemas"]["RecurringChargeTemplateResponseDto"];
                };
            };
        };
    };
    "    POST_RecurringChargeTemplate_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RecurringChargeTemplateDto"];
                "application/xml": components["schemas"]["RecurringChargeTemplateDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_RecurringChargeTemplate_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RecurringChargeTemplateDto"];
                "application/xml": components["schemas"]["RecurringChargeTemplateDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_RecurringChargeTemplate_{code}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The code of recurring charge template to be disabled */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_RecurringChargeTemplate_{code}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The code of recurring charge template to be enabled */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_60: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    list_4: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecurringChargeTemplateResponseDto"];
                    "application/xml": components["schemas"]["RecurringChargeTemplateResponseDto"];
                };
            };
        };
    };
    "    DELETE_RecurringChargeTemplate_{recurringChargeTemplateCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The recurring charge template code */
                recurringChargeTemplateCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_ServiceTemplate_search": {
        parameters: {
            query?: {
                serviceTemplateCode?: string;
                inheritCF?: "INHERIT_NONE" | "INHERIT_NO_MERGE" | "INHERIT_MERGED" | "ACCUMULATED";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ServiceTemplate doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description serviceTemplateCode is missing */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
            /** @description Return serviceTemplate */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceTemplateResponseDto"];
                    "application/xml": components["schemas"]["GetServiceTemplateResponseDto"];
                };
            };
        };
    };
    "    PUT_ServiceTemplate_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ServiceTemplateDto"];
                "application/xml": components["schemas"]["ServiceTemplateDto"];
            };
        };
        responses: {
            /** @description ServiceTemplateService already existe */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityAlreadyExistsException"];
                    "application/xml": components["schemas"]["EntityAlreadyExistsException"];
                };
            };
            /** @description Failed creating/deleting image */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvalidImageData"];
                    "application/xml": components["schemas"]["InvalidImageData"];
                };
            };
            /** @description one of these entities doesn't exist : Calendar, BusinessServiceModel, OneShotChargeTemplate */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description one of these fields is missing : code, renewalInfo/initillyActiveForUnit, renewalInfo/endOfTermAction, renewalInfo/renewFor, renewalInfo/renewForUnit, renewalInfo/terminationReason */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
            /** @description Update an existing service template. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_ServiceTemplate_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ServiceTemplateDto"];
                "application/xml": components["schemas"]["ServiceTemplateDto"];
            };
        };
        responses: {
            /** @description ServiceTemplateService already existe */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityAlreadyExistsException"];
                    "application/xml": components["schemas"]["EntityAlreadyExistsException"];
                };
            };
            /** @description Failed creating/deleting image */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvalidImageData"];
                    "application/xml": components["schemas"]["InvalidImageData"];
                };
            };
            /** @description one of these entities doesn't exist : Calendar, BusinessServiceModel, OneShotChargeTemplate */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description one of these fields is missing : code, renewalInfo/initillyActiveForUnit, renewalInfo/endOfTermAction, renewalInfo/renewFor, renewalInfo/renewForUnit, renewalInfo/terminationReason */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
            /** @description Create a new service template. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_ServiceTemplate_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ServiceTemplateDto"];
                "application/xml": components["schemas"]["ServiceTemplateDto"];
            };
        };
        responses: {
            /** @description ServiceTemplateService already existe */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityAlreadyExistsException"];
                    "application/xml": components["schemas"]["EntityAlreadyExistsException"];
                };
            };
            /** @description Failed creating/deleting image */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvalidImageData"];
                    "application/xml": components["schemas"]["InvalidImageData"];
                };
            };
            /** @description one of these entities doesn't exist : Calendar, BusinessServiceModel, OneShotChargeTemplate */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description one of these fields is missing : code, renewalInfo/initillyActiveForUnit, renewalInfo/endOfTermAction, renewalInfo/renewFor, renewalInfo/renewForUnit, renewalInfo/terminationReason */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_ServiceTemplate_{code}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Internat error while enabling offer template */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessException"];
                    "application/xml": components["schemas"]["BusinessException"];
                };
            };
            /** @description OfferTemplate doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description code paramter is missing */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_ServiceTemplate_{code}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Internat error while enabling offer template */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessException"];
                    "application/xml": components["schemas"]["BusinessException"];
                };
            };
            /** @description OfferTemplate doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description code paramter is missing */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_61: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_ServiceTemplate_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description some field doesn't have a valid field name */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvalidParameterException"];
                    "application/xml": components["schemas"]["InvalidParameterException"];
                };
            };
            /** @description Return serviceTemplate list */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetListServiceTemplateResponseDto"];
                    "application/xml": components["schemas"]["GetListServiceTemplateResponseDto"];
                };
            };
        };
    };
    listGetAll_5: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetListServiceTemplateResponseDto"];
                    "application/xml": components["schemas"]["GetListServiceTemplateResponseDto"];
                };
            };
        };
    };
    "    DELETE_ServiceTemplate_{serviceTemplateCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                serviceTemplateCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ServiceTemplate doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description serviceTemplateCode is missing */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_TriggeredEdr_search": {
        parameters: {
            query?: {
                triggeredEdrCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns triggeredEdrTemplate */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTriggeredEdrResponseDto"];
                    "application/xml": components["schemas"]["GetTriggeredEdrResponseDto"];
                };
            };
        };
    };
    "    PUT_TriggeredEdr_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TriggeredEdrTemplateDto"];
                "application/xml": components["schemas"]["TriggeredEdrTemplateDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_TriggeredEdr_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TriggeredEdrTemplateDto"];
                "application/xml": components["schemas"]["TriggeredEdrTemplateDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_TriggeredEdr_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TriggeredEdrTemplateDto"];
                "application/xml": components["schemas"]["TriggeredEdrTemplateDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_62: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_TriggeredEdr_listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return triggeredEdrs list */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TriggeredEdrsResponseDto"];
                    "application/xml": components["schemas"]["TriggeredEdrsResponseDto"];
                };
            };
        };
    };
    "    DELETE_TriggeredEdr_{triggeredEdrCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                triggeredEdrCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_UnitOfMeasure_search": {
        parameters: {
            query?: {
                unitOfMeasureCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A unitOfMeasure */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetUnitOfMeasureResponseDto"];
                    "application/xml": components["schemas"]["GetUnitOfMeasureResponseDto"];
                };
            };
        };
    };
    update_9: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UnitOfMeasureDto"];
                "application/xml": components["schemas"]["UnitOfMeasureDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    create_9: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UnitOfMeasureDto"];
                "application/xml": components["schemas"]["UnitOfMeasureDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    createOrUpdate_8: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UnitOfMeasureDto"];
                "application/xml": components["schemas"]["UnitOfMeasureDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_63: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_UnitOfMeasure_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of all unitOfMeasure/ */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetListUnitOfMeasureResponseDto"];
                    "application/xml": components["schemas"]["GetListUnitOfMeasureResponseDto"];
                };
            };
        };
    };
    "    GET_UnitOfMeasure_listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of UnitOfMeasures */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetListUnitOfMeasureResponseDto"];
                    "application/xml": components["schemas"]["GetListUnitOfMeasureResponseDto"];
                };
            };
        };
    };
    "    GET_UsageChargeTemplate_search": {
        parameters: {
            query: {
                /** @description The usage charge template code */
                usageChargeTemplateCode: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns a usageChargeTemplate */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetUsageChargeTemplateResponseDto"];
                    "application/xml": components["schemas"]["GetUsageChargeTemplateResponseDto"];
                };
            };
        };
    };
    "    PUT_UsageChargeTemplate_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UsageChargeTemplateDto"];
                "application/xml": components["schemas"]["UsageChargeTemplateDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_UsageChargeTemplate_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UsageChargeTemplateDto"];
                "application/xml": components["schemas"]["UsageChargeTemplateDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_UsageChargeTemplate_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UsageChargeTemplateDto"];
                "application/xml": components["schemas"]["UsageChargeTemplateDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_UsageChargeTemplate_{code}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The code of the usage charge template to be disabeled */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_UsageChargeTemplate_{code}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The code of the usage charge template to be enabled */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_64: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    listGetAll_6: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsageChargeTemplateResponseDto"];
                    "application/xml": components["schemas"]["UsageChargeTemplateResponseDto"];
                };
            };
        };
    };
    "    POST_UsageChargeTemplate_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description List of UsageChargeTemplate */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UsageChargeTemplateResponseDto"];
                    "application/xml": components["schemas"]["UsageChargeTemplateResponseDto"];
                };
            };
        };
    };
    "    DELETE_UsageChargeTemplate_{usageChargeTemplateCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The usage charge template code */
                usageChargeTemplateCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    getDateLimiteDevis: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                codeQuote: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DateLimiteDto"];
                };
            };
        };
    };
    index_65: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    getAbonnements: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GenericPagingAndFiltering"];
                "application/xml": components["schemas"]["GenericPagingAndFiltering"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                };
            };
        };
    };
    index_66: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    cancel: {
        parameters: {
            query?: {
                /** @description Username */
                username?: string;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                };
            };
        };
    };
    getAllByCurrentUserOrUserId: {
        parameters: {
            query?: {
                /** @description Username */
                username?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                };
            };
        };
    };
    update_10: {
        parameters: {
            query?: {
                /** @description User id */
                username?: string;
                /** @description Force to create without checking preconditions */
                force?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                };
            };
        };
    };
    create_10: {
        parameters: {
            query?: {
                /** @description Username */
                username?: string;
                /** @description Force to create without checking preconditions */
                force?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                };
            };
        };
    };
    delete_1: {
        parameters: {
            query?: {
                /** @description Username */
                username?: string;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                };
            };
        };
    };
    findSubstituteByValidationPlanId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                plan_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                };
            };
        };
    };
    findTemporaryApprover: {
        parameters: {
            query?: {
                /** @description Username */
                username?: string;
                /** @description Firstname */
                fn?: string;
                /** @description Lastname */
                ln?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                };
            };
        };
    };
    findUserByFirstnameAndLastname: {
        parameters: {
            query?: {
                /** @description Firstname */
                fn?: string;
                /** @description Lastname */
                ln?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                };
            };
        };
    };
    index_67: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    find_8: {
        parameters: {
            query?: {
                accessCode?: string;
                subscriptionCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAccessResponseDto"];
                    "application/xml": components["schemas"]["GetAccessResponseDto"];
                };
            };
        };
    };
    update_11: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AccessDto"];
                "application/xml": components["schemas"]["AccessDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    create_11: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AccessDto"];
                "application/xml": components["schemas"]["AccessDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_68: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    getAnnexes: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                quoteVersionId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    getInvoices: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                idDevis: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    index_69: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    getContracts: {
        parameters: {
            query?: {
                codeContract?: string;
            };
            header?: never;
            path: {
                quoteVersionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                };
            };
        };
    };
    getContractsByCustomerId: {
        parameters: {
            query?: {
                codeContract?: string;
            };
            header?: never;
            path: {
                customerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                };
            };
        };
    };
    getContractsDTOByCustomerId: {
        parameters: {
            query?: {
                codeContract?: string;
            };
            header?: never;
            path: {
                customerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContractDTO"][];
                    "application/xml": components["schemas"]["ContractDTO"][];
                };
            };
        };
    };
    index_70: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_71: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    updateQuoteAPI: {
        parameters: {
            query: {
                /** @description The currentStatus of quote */
                currentStatus: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Product quote information */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["QuoteDTO"];
                "application/xml": components["schemas"]["QuoteDTO"];
            };
        };
        responses: {
            /** @description The quote is succeffully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                };
            };
            /** @description Applicant account code is missing */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
        };
    };
    updateQuoteStatusAPI: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                quoteCode: string;
                status: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    getCustomerHierarchy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GenericPagingAndFiltering"];
                "application/xml": components["schemas"]["GenericPagingAndFiltering"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    index_72: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_73: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    searchCustomerInfos: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                };
            };
        };
    };
    getDashboardDatas: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GenericPagingAndFiltering"];
                "application/xml": components["schemas"]["GenericPagingAndFiltering"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                };
            };
        };
    };
    index_74: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    duplicatePrestation: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string;
            };
            path: {
                quoteCode: string;
                version: number;
                quoteItemId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    duplicateQuote: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string;
            };
            path: {
                quoteCode: string;
                version: number;
                avenant: boolean;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    duplicateQuoteWithSpecifiedQuoteOffer: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string;
            };
            path: {
                quoteCode: string;
                version: number;
                avenant: boolean;
                quoteItemId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    duplicateVersion: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string;
            };
            path: {
                quoteCode: string;
                version: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    index_75: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    downloadEdevisSigne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                quoteVersionId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                    "application/octet-stream": unknown;
                };
            };
        };
    };
    index_76: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                    "application/octet-stream": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    resendESignatureLink: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                quoteVersionId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                    "application/octet-stream": unknown;
                };
            };
        };
    };
    duplicataEnrichiXmlAndPdf: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    generateAndArchivePdfInvoice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    getInvoicePdf: {
        parameters: {
            query?: {
                file?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_77: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_78: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    getInfoVendeur: {
        parameters: {
            query?: {
                agenceId?: string;
                vendeurContractantId?: string;
            };
            header?: never;
            path: {
                clientDonneurOrdreId: string;
                createurDevisId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    getListValidVendeurs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": string;
                "application/xml": string;
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    index_79: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    getInfoCpqQuote: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description requestDto carries the wanted fields ex: {fields = [customerId]} */
        requestBody: {
            content: {
                "application/json": components["schemas"]["InitCPQQuoteDataDTO"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    getInfoCpqQuoteV2: {
        parameters: {
            query?: {
                create?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description requestDto carries the wanted fields ex: {fields = [customerId]} */
        requestBody: {
            content: {
                "application/json": components["schemas"]["InitCPQQuoteDataDTO"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    index_80: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_81: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    update_12: {
        parameters: {
            query?: {
                quoteVersionId?: number;
            };
            header?: never;
            path: {
                ClientDonneurOrdreCode: string;
                ClientFactureCode: string;
                MontantDevis: number;
                totalChargesOther: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    "    POST_Mediation_registerCdrList_1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CdrListDto"];
                "application/xml": components["schemas"]["CdrListDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    getAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                };
            };
        };
    };
    update_13: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                };
            };
        };
    };
    create_12: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                };
            };
        };
    };
    delete_2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                };
            };
        };
    };
    getAllByCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                };
            };
        };
    };
    index_41: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    listPost_5: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The Offer context */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OfferContextDTO"];
                "application/xml": components["schemas"]["OfferContextDTO"];
            };
        };
        responses: {
            /** @description The search operation is succefully executed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCpqOfferResponseDto"];
                    "application/xml": components["schemas"]["GetCpqOfferResponseDto"];
                };
            };
            /** @description offerCode does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getProductsLine: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    getProductsLine_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                quoteId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    index_83: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    getInteret: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    getLieux: {
        parameters: {
            query?: {
                query?: string;
            };
            header?: {
                authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    getRegion: {
        parameters: {
            query?: {
                query?: string;
            };
            header?: {
                authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    index_84: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    simulation: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    getActiviteClient: {
        parameters: {
            query?: {
                query?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    getListActiviteClient: {
        parameters: {
            query?: {
                isPackClick?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    getLocaliteClient: {
        parameters: {
            query?: {
                query?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    index_85: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    simulation_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    valider: {
        parameters: {
            query?: {
                keyword?: string;
                localite?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    validerPackClick: {
        parameters: {
            query?: {
                keyword?: string;
                localite?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    quoteQuotation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description quote code */
                quoteCode: string;
                /** @description quote version number */
                quoteVersion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description quotation is succefully done! */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    createAdjustment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description id of the Invoice */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                };
            };
        };
    };
    index_125: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_87: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    remindValidationAvoir: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invoiceId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    updateQuoteStatusAPI_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                quoteId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    index_89: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    smcTarification: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        /** @description requestDto carries the wanted fields */
        requestBody: {
            content: {
                "application/json": components["schemas"]["QuoteOfferDTO"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    createQuoteitems: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        /** @description requestDto carries the wanted fields */
        requestBody: {
            content: {
                "application/json": components["schemas"]["QuoteOfferDTO"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    updateQuoteitems: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        /** @description requestDto carries the wanted fields */
        requestBody: {
            content: {
                "application/json": components["schemas"]["QuoteOfferDTO"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    updateQuoteitemsAfterModif: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        /** @description requestDto carries the wanted fields */
        requestBody: {
            content: {
                "application/json": components["schemas"]["QuoteOfferDTO"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    getCustomersByInetr: {
        parameters: {
            query?: {
                nomInter?: string;
                prenomInter?: string;
                telInter?: string;
                emailInetr?: string;
                idrefcli?: string;
                functionInter?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                };
            };
        };
    };
    index_88: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_140: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    searchRefundMotif: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                };
            };
        };
    };
    searchSeller: {
        parameters: {
            query?: {
                sellerCode?: string;
                inheritCF?: "INHERIT_NONE" | "INHERIT_NO_MERGE" | "INHERIT_MERGED" | "ACCUMULATED";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetSellerResponse"];
                    "application/xml": components["schemas"]["GetSellerResponse"];
                };
            };
        };
    };
    envoyerEmail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                idDevis: string;
                idInterlocuteur: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_20: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    envoyerEmail_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                idDevis: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_92: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    envoyerEmail_2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                idDevis: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_93: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    resendPaymentLink: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invoiceId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_94: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    update_14: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                idDevis: string;
                idBillingAccout: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LinkSendDto"];
                };
            };
        };
    };
    index_95: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    suiviPrestation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                quoteOfferId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                };
            };
        };
    };
    index_96: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    updateDefaultBillingAccount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_97: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    updateBonDeCommande: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                quoteId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": string;
                "application/xml": string;
                "text/plain": string;
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_98: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    updateVendeur: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                idDevis: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Communication_inbound": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CommunicationRequestDto"];
                "application/xml": components["schemas"]["CommunicationRequestDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_99: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_EmailTemplate_search": {
        parameters: {
            query?: {
                code?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns an email template */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailTemplateResponseDto"];
                    "application/xml": components["schemas"]["EmailTemplateResponseDto"];
                };
            };
        };
    };
    "    PUT_EmailTemplate_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EmailTemplateDto"];
                "application/xml": components["schemas"]["EmailTemplateDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    POST_EmailTemplate_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EmailTemplateDto"];
                "application/xml": components["schemas"]["EmailTemplateDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_EmailTemplate_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EmailTemplateDto"];
                "application/xml": components["schemas"]["EmailTemplateDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_100: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_EmailTemplate_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of email templates */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmailTemplatesResponseDto"];
                    "application/xml": components["schemas"]["EmailTemplatesResponseDto"];
                };
            };
        };
    };
    "    DELETE_EmailTemplate_{code}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_MeveoInstance_search": {
        parameters: {
            query?: {
                code?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MeveoInstanceResponseDto"];
                    "application/xml": components["schemas"]["MeveoInstanceResponseDto"];
                };
            };
        };
    };
    "    PUT_MeveoInstance_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["MeveoInstanceDto"];
                "application/xml": components["schemas"]["MeveoInstanceDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    POST_MeveoInstance_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["MeveoInstanceDto"];
                "application/xml": components["schemas"]["MeveoInstanceDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_MeveoInstance_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["MeveoInstanceDto"];
                "application/xml": components["schemas"]["MeveoInstanceDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_101: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_MeveoInstance_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of Meveo Instances */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MeveoInstancesResponseDto"];
                    "application/xml": components["schemas"]["MeveoInstancesResponseDto"];
                };
            };
        };
    };
    "    DELETE_MeveoInstance_{code}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    update_15: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description attribute dto for updating an existing attribute */
        requestBody: {
            content: {
                "application/json": components["schemas"]["AttributeDTO"];
                "application/xml": components["schemas"]["AttributeDTO"];
            };
        };
        responses: {
            /** @description the Attribute successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAttributeDtoResponse"];
                    "application/xml": components["schemas"]["GetAttributeDtoResponse"];
                };
            };
            /** @description No grouped attribute is found for the parameter GroupedAttributeCode */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
            /** @description missing required paramter for AttributeDTO.The required params are : code */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    create_13: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Attribute dto for a new insertion */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AttributeDTO"];
                "application/xml": components["schemas"]["AttributeDTO"];
            };
        };
        responses: {
            /** @description the Attribute successfully added */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAttributeDtoResponse"];
                    "application/xml": components["schemas"]["GetAttributeDtoResponse"];
                };
            };
            /** @description No grouped attribute is found for the parameter GroupedAttributeCode */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
            /** @description missing required paramter for AttributeDto.The required params are : code */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    findByCode: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description retrieving a attribute with its code */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Attribute successfully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAttributeDtoResponse"];
                    "application/xml": components["schemas"]["GetAttributeDtoResponse"];
                };
            };
        };
    };
    delete_3: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description contain the code of Attribute te be deleted by its code */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Attribute successfully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAttributeDtoResponse"];
                    "application/xml": components["schemas"]["GetAttributeDtoResponse"];
                };
            };
            /** @description No Attribute found for the code parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessException"];
                    "application/xml": components["schemas"]["BusinessException"];
                };
            };
        };
    };
    index_102: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    listPost_6: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description product code */
                productCode: string;
                /** @description product version */
                productVersion: string;
            };
            cookie?: never;
        };
        /** @description The Offer context */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OfferContextDTO"];
                "application/xml": components["schemas"]["OfferContextDTO"];
            };
        };
        responses: {
            /** @description The search operation is succefully executed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetProductDtoResponse"];
                    "application/xml": components["schemas"]["GetProductDtoResponse"];
                };
            };
            /** @description selected service does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listCommercialOrder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description The search operation is succefully executed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetListCommercialOrderDtoResponse"];
                    "application/xml": components["schemas"]["GetListCommercialOrderDtoResponse"];
                };
            };
        };
    };
    update_16: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CommercialOrderDto"];
                "application/xml": components["schemas"]["CommercialOrderDto"];
            };
        };
        responses: {
            /** @description The order is succeffully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetQuoteDtoResponse"];
                    "application/xml": components["schemas"]["GetQuoteDtoResponse"];
                };
            };
            /** @description One of attached fields is unknown */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description Missing required parameters */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    create_14: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CommercialOrderDto"];
                "application/xml": components["schemas"]["CommercialOrderDto"];
            };
        };
        responses: {
            /** @description The order is succeffully created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetQuoteDtoResponse"];
                    "application/xml": components["schemas"]["GetQuoteDtoResponse"];
                };
            };
            /** @description The order already exist */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityAlreadyExistsException"];
                    "application/xml": components["schemas"]["EntityAlreadyExistsException"];
                };
            };
            /** @description One of attached fields is unknown */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description Missing required parameters */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    updateOrderOffer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description order offer dto for updating an existing order offer */
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderOfferDto"];
                "application/xml": components["schemas"]["OrderOfferDto"];
            };
        };
        responses: {
            /** @description the order offer successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderOfferDtoResponse"];
                    "application/xml": components["schemas"]["GetOrderOfferDtoResponse"];
                };
            };
            /** @description missing required paramter for order offer.The required */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    createOrderOffer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description order offer dto for a new insertion */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OrderOfferDto"];
                "application/xml": components["schemas"]["OrderOfferDto"];
            };
        };
        responses: {
            /** @description the order offer successfully added */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderOfferDtoResponse"];
                    "application/xml": components["schemas"]["GetOrderOfferDtoResponse"];
                };
            };
            /** @description missing required paramter for order offer required */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    delete_4: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the commercial order */
                orderId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The order is succeffully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetQuoteDtoResponse"];
                    "application/xml": components["schemas"]["GetQuoteDtoResponse"];
                };
            };
            /** @description Order Does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description id of order is missing */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    findOrderOffer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the order offer */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The order type is succefully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderOfferDtoResponse"];
                    "application/xml": components["schemas"]["GetOrderOfferDtoResponse"];
                };
            };
            /** @description Order offer Does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
        };
    };
    deleteOrderOffer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description contain the code of order offer te be deleted by its id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The order offer successfully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderOfferDtoResponse"];
                    "application/xml": components["schemas"]["GetOrderOfferDtoResponse"];
                };
            };
            /** @description No order offer found for the id parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessException"];
                    "application/xml": components["schemas"]["BusinessException"];
                };
            };
        };
    };
    duplicate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the commercial order */
                orderId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The order is succeffully duplicated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetQuoteDtoResponse"];
                    "application/xml": components["schemas"]["GetQuoteDtoResponse"];
                };
            };
            /** @description Order Does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description id of order is missing */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    findByOrderNumber: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The order number for an existing commercial order */
                orderNumber: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The order is succefully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCommercialOrderDtoResponse"];
                    "application/xml": components["schemas"]["GetCommercialOrderDtoResponse"];
                };
            };
            /** @description Order Does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
        };
    };
    orderValidationProcess: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the commercial order */
                orderId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The order is successfully validated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCommercialOrderDtoResponse"];
                    "application/xml": components["schemas"]["GetCommercialOrderDtoResponse"];
                };
            };
            /** @description Order Does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
        };
    };
    updateOrderInvoicingPlan: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the commercial order */
                commercialOrderId: number;
                /** @description The code of the invoicing plan */
                invoicingPlanCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The order is succeffully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetQuoteDtoResponse"];
                    "application/xml": components["schemas"]["GetQuoteDtoResponse"];
                };
            };
            /** @description One of attached fields is unknown */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description Missing required parameters */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    updateOrderProgress: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the commercial order */
                commercialOrderId: number;
                /** @description The value of order to be progress */
                progressValue: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The order progress is succeffully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetQuoteDtoResponse"];
                    "application/xml": components["schemas"]["GetQuoteDtoResponse"];
                };
            };
            /** @description Missing required parameters */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    updateStatus_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the commercial order */
                orderId: number;
                /** @description The status to be updated */
                statusTarget: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The order's status is succeffully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetQuoteDtoResponse"];
                    "application/xml": components["schemas"]["GetQuoteDtoResponse"];
                };
            };
            /** @description Order Does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description id of order is missing */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    updateUserAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The id of the commercial order */
                commercialOrderId: number;
                /** @description The code of the user account */
                userAccountCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The order is succeffully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetQuoteDtoResponse"];
                    "application/xml": components["schemas"]["GetQuoteDtoResponse"];
                };
            };
            /** @description One of attached fields is unknown */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description Missing required parameters */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    list_5: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description The search operation is succefully executed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetListCommercialRulesResponseDto"];
                    "application/xml": components["schemas"]["GetListCommercialRulesResponseDto"];
                };
            };
        };
    };
    update_17: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description commercialRule dto for updating an existing commercialRule */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CommercialRuleHeaderDTO"];
                "application/xml": components["schemas"]["CommercialRuleHeaderDTO"];
            };
        };
        responses: {
            /** @description the CommercialRule successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCommercialRuleDtoResponse"];
                    "application/xml": components["schemas"]["GetCommercialRuleDtoResponse"];
                };
            };
            /** @description missing required paramter for CommercialRuleDTO.The required params are : code */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    create_15: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description CommercialRule dto for a new insertion */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CommercialRuleHeaderDTO"];
                "application/xml": components["schemas"]["CommercialRuleHeaderDTO"];
            };
        };
        responses: {
            /** @description the CommercialRule successfully added */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCommercialRuleDtoResponse"];
                    "application/xml": components["schemas"]["GetCommercialRuleDtoResponse"];
                };
            };
            /** @description missing required paramter for CommercialRuleDto.The required params are : code */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    findByCode_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description retrieving a commercialRule with its code */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The CommercialRule successfully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCommercialRuleDtoResponse"];
                    "application/xml": components["schemas"]["GetCommercialRuleDtoResponse"];
                };
            };
        };
    };
    delete_5: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description contain the code of CommercialRule te be deleted by its code */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The CommercialRule successfully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCommercialRuleDtoResponse"];
                    "application/xml": components["schemas"]["GetCommercialRuleDtoResponse"];
                };
            };
            /** @description No CommercialRule found for the code parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessException"];
                    "application/xml": components["schemas"]["BusinessException"];
                };
            };
        };
    };
    findAttributeRules: {
        parameters: {
            query: {
                /** @description attribute code */
                attributeCode?: string;
                /** @description product code */
                productCode: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The search operation is succefully executed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetListCommercialRulesResponseDto"];
                    "application/xml": components["schemas"]["GetListCommercialRulesResponseDto"];
                };
            };
        };
    };
    findGroupedAttributeRules: {
        parameters: {
            query: {
                /** @description grouped attribute code */
                groupedAttributeCode?: string;
                /** @description product code */
                productCode: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The search operation is succefully executed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetListCommercialRulesResponseDto"];
                    "application/xml": components["schemas"]["GetListCommercialRulesResponseDto"];
                };
            };
        };
    };
    findOfferRules: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description offer code */
                offerCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The search operation is succefully executed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetListCommercialRulesResponseDto"];
                    "application/xml": components["schemas"]["GetListCommercialRulesResponseDto"];
                };
            };
        };
    };
    findProductRules: {
        parameters: {
            query: {
                /** @description offer code */
                offerCode?: string;
                /** @description product code */
                productCode: string;
                /** @description product version */
                productVersion?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The search operation is succefully executed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetListCommercialRulesResponseDto"];
                    "application/xml": components["schemas"]["GetListCommercialRulesResponseDto"];
                };
            };
        };
    };
    findTagRules: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description tag code */
                tagCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The search operation is succefully executed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetListCommercialRulesResponseDto"];
                    "application/xml": components["schemas"]["GetListCommercialRulesResponseDto"];
                };
            };
        };
    };
    index_103: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    findByCode_3: {
        parameters: {
            query?: {
                /** @description retrieving a Contract with its contract account level */
                contractAccountLevel?: "SELLER" | "CUSTOMER" | "CUSTOMER_ACCOUNT" | "BILLING_ACCOUNT";
                /** @description retrieving a Contract with its code */
                accountCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Contract successfully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetListContractDtoResponse"];
                    "application/xml": components["schemas"]["GetListContractDtoResponse"];
                };
            };
            /** @description One of the parameters is missing */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    updateContract: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description contract dto for an updating an existing contract */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContractDto"];
                "application/xml": components["schemas"]["ContractDto"];
            };
        };
        responses: {
            /** @description the Contract successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
            /** @description code of the contract already exist */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityAlreadyExistsException"];
                    "application/xml": components["schemas"]["EntityAlreadyExistsException"];
                };
            };
            /** @description date start is great than date end */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessException"];
                    "application/xml": components["schemas"]["BusinessException"];
                };
            };
            /** @description code of the seller doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description missing required paramter for contractDto.The required params are : code, sellerCode, contractDate, beginDate, endDate */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    createContract: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description contract dto for a new insertion */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContractDto"];
                "application/xml": components["schemas"]["ContractDto"];
            };
        };
        responses: {
            /** @description the contract successfully added */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                    "application/xml": number;
                };
            };
            /** @description code of the contract already exist */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityAlreadyExistsException"];
                    "application/xml": components["schemas"]["EntityAlreadyExistsException"];
                };
            };
            /** @description date start is great than date end */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessException"];
                    "application/xml": components["schemas"]["BusinessException"];
                };
            };
            /** @description code of the seller doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description missing required paramter for contractDto.The required params are : code, sellerCode, contractDate, beginDate, endDate */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    updateContractLine: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description contract Line dto for a new insertion */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContractItemDto"];
                "application/xml": components["schemas"]["ContractItemDto"];
            };
        };
        responses: {
            /** @description the contract Line successfully added */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                    "application/xml": number;
                };
            };
            /** @description one of these parameters contractCode, serviceTemplateCode doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description missing required paramter for contractDto.The required params are : contractCode, code, serviceTemplateCode */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    createContractLine: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description contract Line dto for a new insertion */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContractItemDto"];
                "application/xml": components["schemas"]["ContractItemDto"];
            };
        };
        responses: {
            /** @description the contract Line successfully added */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                    "application/xml": number;
                };
            };
            /** @description code of the contract line already exist */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityAlreadyExistsException"];
                    "application/xml": components["schemas"]["EntityAlreadyExistsException"];
                };
            };
            /** @description one of these parameters contractCode, serviceTemplateCode doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description missing required paramter for contractDto.The required params are : contractCode, code, serviceTemplateCode */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    findByCode_2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description retrieving a Contract with its code */
                contractCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Contract successfully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetContractDtoResponse"];
                    "application/xml": components["schemas"]["GetContractDtoResponse"];
                };
            };
            /** @description The parameter contractCode is missing */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    deleteContract: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description contain the code of contract te be deleted by its code */
                contractCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Contract successfully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": "SUCCESS" | "FAIL" | "WARNING";
                    "application/xml": "SUCCESS" | "FAIL" | "WARNING";
                };
            };
            /** @description Status of the contract is Active */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessException"];
                    "application/xml": components["schemas"]["BusinessException"];
                };
            };
            /** @description No Contract found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
        };
    };
    deleteContractLine: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description contract item code to be deleted */
                contractCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Contract item successfully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": "SUCCESS" | "FAIL" | "WARNING";
                    "application/xml": "SUCCESS" | "FAIL" | "WARNING";
                };
            };
            /** @description Status of the contract is Active */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessException"];
                    "application/xml": components["schemas"]["BusinessException"];
                };
            };
            /** @description No Contract item found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
        };
    };
    duplicateContract: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Contract Code */
                contractCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The contract has been successfully duplicated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Contract with code=contractcode does not exists */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
        };
    };
    getContractLine: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description contract item code */
                contractItemCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Contract item successfully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetListContractDtoResponse"];
                    "application/xml": components["schemas"]["GetListContractDtoResponse"];
                };
            };
            /** @description contractItemCode is missing */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    index_104: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    updateStatus_2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description contract code to update status */
                contractCode: string;
                /** @description target contract status */
                status: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Contract successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
            /** @description One of the parameters is missing */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    findQuotes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description quotes are successfully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CpqQuotesListResponseDto"];
                    "application/xml": components["schemas"]["CpqQuotesListResponseDto"];
                };
            };
        };
    };
    updateQuote: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Product quote information */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["QuoteDTO"];
                "application/xml": components["schemas"]["QuoteDTO"];
            };
        };
        responses: {
            /** @description The quote is succeffully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
            /** @description Applicant account code is missing */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
        };
    };
    createQuote: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Product quote information */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["QuoteDTO"];
                "application/xml": components["schemas"]["QuoteDTO"];
            };
        };
        responses: {
            /** @description The quote is successfully created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetQuoteDtoResponse"];
                    "application/xml": components["schemas"]["GetQuoteDtoResponse"];
                };
            };
            /** @description The quote already exist */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityAlreadyExistsException"];
                    "application/xml": components["schemas"]["EntityAlreadyExistsException"];
                };
            };
            /** @description Applicant account is unknown */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description the parameter quote.applicantAccountCode is missing */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    updateQuoteItem: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Product quote information */
        requestBody: {
            content: {
                "application/json": components["schemas"]["QuoteOfferDTO"];
                "application/xml": components["schemas"]["QuoteOfferDTO"];
            };
        };
        responses: {
            /** @description The quote item is successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetQuoteOfferDtoResponse"];
                    "application/xml": components["schemas"]["GetQuoteOfferDtoResponse"];
                };
            };
        };
    };
    createQuoteItem: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Product quote item information */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["QuoteOfferDTO"];
                "application/xml": components["schemas"]["QuoteOfferDTO"];
            };
        };
        responses: {
            /** @description quote item is successfully created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetQuoteOfferDtoResponse"];
                    "application/xml": components["schemas"]["GetQuoteOfferDtoResponse"];
                };
            };
        };
    };
    createQuoteVersion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Product quote version information */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["QuoteVersionDto"];
                "application/xml": components["schemas"]["QuoteVersionDto"];
            };
        };
        responses: {
            /** @description New quote version is successfully created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetQuoteVersionDtoResponse"];
                    "application/xml": components["schemas"]["GetQuoteVersionDtoResponse"];
                };
            };
            /** @description the quote version with code or short description  is missing */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getQuote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product quote code */
                quoteCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The quote is successfully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetQuoteDtoResponse"];
                    "application/xml": components["schemas"]["GetQuoteDtoResponse"];
                };
            };
            /** @description The quote is missing */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
        };
    };
    deleteQuote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product quote code */
                quoteCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The quote is successfully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
            /** @description Quote code doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
        };
    };
    findQuoteItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description quote offer id */
                quoteItemId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The quote is succeffully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetQuoteOfferDtoResponse"];
                    "application/xml": components["schemas"]["GetQuoteOfferDtoResponse"];
                };
            };
            /** @description The quote offer doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
        };
    };
    deleteQuoteItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product quote item code */
                quoteItemId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description quote item is successfully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    deleteQuoteVersion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description quote code attached to quote version */
                quoteCode: string;
                /** @description quote version number */
                quoteVersion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Existing quote version is successfully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
            /** @description No quote version was found with quoteCode and quoteVersion in parameter */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
        };
    };
    duplicateQuote_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                quoteCode: string;
                quoteVersion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description quote is successfully duplicated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
            /** @description Quote doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
        };
    };
    duplicateQuoteVersion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                quoteCode: string;
                quoteVersion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description quote version  is successfully duplicated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetQuoteVersionDtoResponse"];
                    "application/xml": components["schemas"]["GetQuoteVersionDtoResponse"];
                };
            };
            /** @description Quote version doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
        };
    };
    findQuoteItems: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product quote code */
                quoteCode: string;
                /** @description Product quote code */
                quoteVersion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The quote is successfully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetQuoteDtoResponse"];
                    "application/xml": components["schemas"]["GetQuoteDtoResponse"];
                };
            };
            /** @description The quote offer doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
        };
    };
    generateQuoteXml: {
        parameters: {
            query: {
                /** @description Indicate if the quote will generate a new xml */
                generatePdf: boolean;
            };
            header?: never;
            path: {
                /** @description The code of the quote */
                quoteCode: string;
                /** @description The version of the quote */
                currentVersion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description quote XML is successfully generated! */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetPdfQuoteResponseDto"];
                    "application/xml": components["schemas"]["GetPdfQuoteResponseDto"];
                };
            };
        };
    };
    getQuotePDF: {
        parameters: {
            query: {
                /** @description Indicate if the quote will generate a new pdf */
                generatePdf: boolean;
            };
            header?: never;
            path: {
                /** @description The code of the quote */
                quoteCode: string;
                /** @description The version of the quote */
                currentVersion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description quote PDF is successfully returned! */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetPdfQuoteResponseDto"];
                    "application/xml": components["schemas"]["GetPdfQuoteResponseDto"];
                };
            };
        };
    };
    overridePrices: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OverrideChargedPricesDto"];
                "application/xml": components["schemas"]["OverrideChargedPricesDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                };
            };
        };
    };
    placeOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description quote code attached to quote version */
                quoteCode: string;
                /** @description quote version number */
                quoteVersion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description order successfully created from current quote */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    quoteQuotation_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description quote code */
                quoteCode: string;
                /** @description quote version number */
                quoteVersion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description quotation is successfully done! */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    updateQuoteStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                quoteCode: string;
                status: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description quote status is successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
            /** @description the status can not be update, because of its current status */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessException"];
                    "application/xml": components["schemas"]["BusinessException"];
                };
            };
            /** @description Quote  doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
        };
    };
    updateQuoteVersionStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                quoteCode: string;
                currentVersion: number;
                status: "DRAFT" | "PUBLISHED" | "CLOSED";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description quote version status is successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
            /** @description the status can not be update, because of its current status */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessException"];
                    "application/xml": components["schemas"]["BusinessException"];
                };
            };
            /** @description Quote version doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
        };
    };
    find_9: {
        parameters: {
            query: {
                /** @description The code of the grouped attribute */
                groupedAttributeCode: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description the grouped attribute successfully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetGroupedAttributesResponse"];
                    "application/xml": components["schemas"]["GetGroupedAttributesResponse"];
                };
            };
            /** @description the grouped attribute with groupedAttributeCode in param does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No grouped attribute is found for the groupedAttributeCode param */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessException"];
                    "application/xml": components["schemas"]["BusinessException"];
                };
            };
        };
    };
    update_18: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GroupedAttributeDto"];
                "application/xml": components["schemas"]["GroupedAttributeDto"];
            };
        };
        responses: {
            /** @description the grouped attribute successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description the grouped attribute with groupedAttributeDto in param does not exist or null */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No grouped attribute is found for the groupedAttributeCode param */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessException"];
                    "application/xml": components["schemas"]["BusinessException"];
                };
            };
        };
    };
    create_16: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GroupedAttributeDto"];
                "application/xml": components["schemas"]["GroupedAttributeDto"];
            };
        };
        responses: {
            /** @description the GroupedAttribute successfully added */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetGroupedAttributesResponse"];
                    "application/xml": components["schemas"]["GetGroupedAttributesResponse"];
                };
            };
            /** @description No GroupedAttribute is found for the parameter code */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessException"];
                    "application/xml": components["schemas"]["BusinessException"];
                };
            };
            /** @description missing required paramter for GroupedAttributeDto required params are : code */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    index_105: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    remove_7: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The code of the grouped attribute */
                groupedAttributeCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description the grouped attribute successfully removed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description the grouped attribute with groupedAttributeCode in param does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No grouped attribute is found for the groupedAttributeCode param */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessException"];
                    "application/xml": components["schemas"]["BusinessException"];
                };
            };
        };
    };
    update_19: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description updading for a new media */
        requestBody: {
            content: {
                "application/json": components["schemas"]["MediaDto"];
                "application/xml": components["schemas"]["MediaDto"];
            };
        };
        responses: {
            /** @description The media is succeffully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMediaDtoResponse"];
                    "application/xml": components["schemas"]["GetMediaDtoResponse"];
                };
            };
            /** @description composed id of media does not exist or ServiceTemplate doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description One of the requied parameters is missing */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    createMedai: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description information for a new media */
        requestBody: {
            content: {
                "application/json": components["schemas"]["MediaDto"];
                "application/xml": components["schemas"]["MediaDto"];
            };
        };
        responses: {
            /** @description The media is succeffully created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMediaDtoResponse"];
                    "application/xml": components["schemas"]["GetMediaDtoResponse"];
                };
            };
            /** @description The media already exist */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityAlreadyExistsException"];
                    "application/xml": components["schemas"]["EntityAlreadyExistsException"];
                };
            };
            /** @description composed id of media does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description One of the requied parameters is missing */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    findByCode_4: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description media code */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The media is succeffully fetched */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMediaDtoResponse"];
                    "application/xml": components["schemas"]["GetMediaDtoResponse"];
                };
            };
            /** @description composed id of media does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description One of the requied parameters is missing */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    deleteMedia: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description media code */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The media is succeffully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
            /** @description composed id of media does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description One of the requied parameters is missing */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    update_20: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OrderTypeDto"];
                "application/xml": components["schemas"]["OrderTypeDto"];
            };
        };
        responses: {
            /** @description The order is succeffully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderTypeDtoResponse"];
                    "application/xml": components["schemas"]["GetOrderTypeDtoResponse"];
                };
            };
            /** @description current code of order type doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description Missing required parameters */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    create_17: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["OrderTypeDto"];
                "application/xml": components["schemas"]["OrderTypeDto"];
            };
        };
        responses: {
            /** @description The order type is succeffully created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderTypeDtoResponse"];
                    "application/xml": components["schemas"]["GetOrderTypeDtoResponse"];
                };
            };
            /** @description The order type already exist */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityAlreadyExistsException"];
                    "application/xml": components["schemas"]["EntityAlreadyExistsException"];
                };
            };
            /** @description Missing required parameters */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    find_10: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The code of the order type */
                orderTypeCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The order type is succefully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderTypeDtoResponse"];
                    "application/xml": components["schemas"]["GetOrderTypeDtoResponse"];
                };
            };
            /** @description Order type Does not exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
        };
    };
    delete_6: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orderTypeCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The order is succeffully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderTypeDtoResponse"];
                    "application/xml": components["schemas"]["GetOrderTypeDtoResponse"];
                };
            };
            /** @description current code of order type doesn't exist */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
            /** @description code of order type is missing */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    list_6: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description The search operation is succefully executed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetListOrderTypeResponseDto"];
                    "application/xml": components["schemas"]["GetListOrderTypeResponseDto"];
                };
            };
        };
    };
    findByCode_5: {
        parameters: {
            query?: {
                /** @description retrieving a tag with its code */
                codeTag?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Tag successfully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTagDtoResponse"];
                    "application/xml": components["schemas"]["GetTagDtoResponse"];
                };
            };
        };
    };
    updateTag: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description tag dto for updating an existing tag */
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagDto"];
                "application/xml": components["schemas"]["TagDto"];
            };
        };
        responses: {
            /** @description the Tag successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTagDtoResponse"];
                    "application/xml": components["schemas"]["GetTagDtoResponse"];
                };
            };
            /** @description Tag code : ${parentTag.code} already has a tag parent with code : ${tagDto.code} */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Seller with code=${tagDto.sellerCode} does not exists. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The following parameters are required or contain invalid values: code, name, TagTypeCode. */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createTag: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description tag dto for a new insertion */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TagDto"];
                "application/xml": components["schemas"]["TagDto"];
            };
        };
        responses: {
            /** @description the Tag successfully created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTagDtoResponse"];
                    "application/xml": components["schemas"]["GetTagDtoResponse"];
                };
            };
            /** @description Tag with code=${tagDto.code} already exists. */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Parent and child has the same code !! */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Seller with code=${tagDto.sellerCode} does not exists. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The following parameters are required or contain invalid values: code, name, TagTypeCode. */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateTagType: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description tag type dto for updating an existing tag type */
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagTypeDto"];
                "application/xml": components["schemas"]["TagTypeDto"];
            };
        };
        responses: {
            /** @description the Tag type successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTagTypeDtoResponse"];
                    "application/xml": components["schemas"]["GetTagTypeDtoResponse"];
                };
            };
            /** @description No tag type was found with the code */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessException"];
                    "application/xml": components["schemas"]["BusinessException"];
                };
            };
            /** @description missing required paramter for TagDto.The required parameter is  code */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingParameterException"];
                    "application/xml": components["schemas"]["MissingParameterException"];
                };
            };
        };
    };
    createTagType: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description tag type dto for new insertion */
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagTypeDto"];
                "application/xml": components["schemas"]["TagTypeDto"];
            };
        };
        responses: {
            /** @description the Tag type successfully created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTagTypeDtoResponse"];
                    "application/xml": components["schemas"]["GetTagTypeDtoResponse"];
                };
            };
            /** @description TagType with code=${code} already exists. */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The following parameters are required or contain invalid values: code. */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description contain the code of tag te be deleted by its code */
                codeTag: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Tag successfully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTagDtoResponse"];
                    "application/xml": components["schemas"]["GetTagDtoResponse"];
                };
            };
            /** @description Impossible to delete a Tag, because it contains product */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessException"];
                    "application/xml": components["schemas"]["BusinessException"];
                };
            };
        };
    };
    findTagTypeBycode: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description code tag type for retrieving an existing one */
                codeTagType: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Tag type successfully found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTagTypeDtoResponse"];
                    "application/xml": components["schemas"]["GetTagTypeDtoResponse"];
                };
            };
            /** @description No tag type was found with the code */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessException"];
                    "application/xml": components["schemas"]["BusinessException"];
                };
            };
        };
    };
    deleteTagType: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description tagCode */
                codeTagType: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The Tag type successfully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTagTypeDtoResponse"];
                    "application/xml": components["schemas"]["GetTagTypeDtoResponse"];
                };
            };
            /** @description Impossible to delete a Tag type,it is attached to a Tag */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessException"];
                    "application/xml": components["schemas"]["BusinessException"];
                };
            };
            /** @description No Tag type found for the tagCode parameter */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessException"];
                    "application/xml": components["schemas"]["BusinessException"];
                };
            };
        };
    };
    index_106: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_AddressBook_addContact": {
        parameters: {
            query?: {
                addressbookCode?: string;
                contactCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    GET_AddressBook_createAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_AddressBook_search": {
        parameters: {
            query?: {
                code?: string;
                from?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description GetAddressBookResponse data */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAddressBookResponseDto"];
                    "application/xml": components["schemas"]["GetAddressBookResponseDto"];
                };
            };
        };
    };
    index_107: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_AddressBook_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_Contact_{code}_{tag}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                tag: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    DELETE_Contact_{code}_{tag}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                tag: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Contact_search": {
        parameters: {
            query?: {
                code?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetContactResponseDto"];
                    "application/xml": components["schemas"]["GetContactResponseDto"];
                };
            };
        };
    };
    "    PUT_Contact_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ContactDto"];
                "application/xml": components["schemas"]["ContactDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    POST_Contact_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ContactDto"];
                "application/xml": components["schemas"]["ContactDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Contact_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ContactDto"];
                "application/xml": components["schemas"]["ContactDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Contact_importCSVFile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Contact_importCSVText": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": string;
                "application/xml": string;
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContactsResponseDto"];
                    "application/xml": components["schemas"]["ContactsResponseDto"];
                };
            };
        };
    };
    index_108: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Contact_list": {
        parameters: {
            query?: {
                query?: string;
                fields?: string;
                offset?: number;
                limit?: number;
                sortBy?: string;
                sortOrder?: "ASCENDING" | "DESCENDING";
                inheritCF?: "INHERIT_NONE" | "INHERIT_NO_MERGE" | "INHERIT_MERGED" | "ACCUMULATED";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of contacts */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContactsResponseDto"];
                    "application/xml": components["schemas"]["ContactsResponseDto"];
                };
            };
        };
    };
    "    POST_Contact_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContactsResponseDto"];
                    "application/xml": components["schemas"]["ContactsResponseDto"];
                };
            };
        };
    };
    "    GET_Contact_listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of Contacts */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContactsResponseDto"];
                    "application/xml": components["schemas"]["ContactsResponseDto"];
                };
            };
        };
    };
    "    DELETE_Contact_{code}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_CustomEntityInstance_{customEntityTemplateCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customEntityTemplateCode: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomEntityInstanceDto"];
                "application/xml": components["schemas"]["CustomEntityInstanceDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_CustomEntityInstance_{customEntityTemplateCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customEntityTemplateCode: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomEntityInstanceDto"];
                "application/xml": components["schemas"]["CustomEntityInstanceDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_CustomEntityInstance_{customEntityTemplateCode}_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customEntityTemplateCode: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomEntityInstanceDto"];
                "application/xml": components["schemas"]["CustomEntityInstanceDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_CustomEntityInstance_{customEntityTemplateCode}_{code}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customEntityTemplateCode: string;
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_CustomEntityInstance_{customEntityTemplateCode}_{code}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customEntityTemplateCode: string;
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_CustomEntityInstance_{customEntityTemplateCode}_{code}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customEntityTemplateCode: string;
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return a customEntityInstance */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomEntityInstanceResponseDto"];
                    "application/xml": components["schemas"]["CustomEntityInstanceResponseDto"];
                };
            };
        };
    };
    "    DELETE_CustomEntityInstance_{customEntityTemplateCode}_{code}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customEntityTemplateCode: string;
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_109: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_CustomEntityInstance_list_{customEntityTemplateCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customEntityTemplateCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of custom entity instances */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomEntityInstancesResponseDto"];
                    "application/xml": components["schemas"]["CustomEntityInstancesResponseDto"];
                };
            };
        };
    };
    "    POST_CustomEntityInstance_list_{customEntityTemplateCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customEntityTemplateCode: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description Custom table data */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomEntityInstancesResponseDto"];
                    "application/xml": components["schemas"]["CustomEntityInstancesResponseDto"];
                };
            };
        };
    };
    "    GET_CustomFieldTemplate_search": {
        parameters: {
            query?: {
                customFieldTemplateCode?: string;
                appliesTo?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description instance of GetCustomFieldTemplateReponseDto */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCustomFieldTemplateReponseDto"];
                    "application/xml": components["schemas"]["GetCustomFieldTemplateReponseDto"];
                };
            };
        };
    };
    "    PUT_CustomFieldTemplate_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomFieldTemplateDto"];
                "application/xml": components["schemas"]["CustomFieldTemplateDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_CustomFieldTemplate_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomFieldTemplateDto"];
                "application/xml": components["schemas"]["CustomFieldTemplateDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_CustomFieldTemplate_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomFieldTemplateDto"];
                "application/xml": components["schemas"]["CustomFieldTemplateDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_CustomFieldTemplate_{customFieldTemplateCode}_{appliesTo}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customFieldTemplateCode: string;
                appliesTo: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_CustomFieldTemplate_{customFieldTemplateCode}_{appliesTo}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customFieldTemplateCode: string;
                appliesTo: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_110: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    DELETE_CustomFieldTemplate_{customFieldTemplateCode}_{appliesTo}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customFieldTemplateCode: string;
                appliesTo: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_CustomTable_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomTableDataDto"];
                "application/xml": components["schemas"]["CustomTableDataDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_CustomTable_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomTableDataDto"];
                "application/xml": components["schemas"]["CustomTableDataDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    DELETE_CustomTable_delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomTableDataDto"];
                "application/xml": components["schemas"]["CustomTableDataDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_CustomTable_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomTableDataDto"];
                "application/xml": components["schemas"]["CustomTableDataDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_CustomTable_disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomTableDataDto"];
                "application/xml": components["schemas"]["CustomTableDataDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_CustomTable_enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomTableDataDto"];
                "application/xml": components["schemas"]["CustomTableDataDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_111: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_CustomTable_list_{customTableCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customTableCode: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description Custom table data */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomTableDataResponseDto"];
                    "application/xml": components["schemas"]["CustomTableDataResponseDto"];
                };
            };
        };
    };
    "    POST_CustomTable_listFromWrapper": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomTableWrapperDto"];
                "application/xml": components["schemas"]["CustomTableWrapperDto"];
            };
        };
        responses: {
            /** @description Custom table data */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomTableDataResponseDto"];
                    "application/xml": components["schemas"]["CustomTableDataResponseDto"];
                };
            };
        };
    };
    "    DELETE_CustomTable_{customTableCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customTableCode: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description Custom table data */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    findAction: {
        parameters: {
            query?: {
                actionCode?: string;
                appliesTo?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityCustomActionResponseDto"];
                    "application/xml": components["schemas"]["EntityCustomActionResponseDto"];
                };
            };
        };
    };
    updateAction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EntityCustomActionDto"];
                "application/xml": components["schemas"]["EntityCustomActionDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    createAction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EntityCustomActionDto"];
                "application/xml": components["schemas"]["EntityCustomActionDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    updateEntityTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomEntityTemplateDto"];
                "application/xml": components["schemas"]["CustomEntityTemplateDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    createEntityTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomEntityTemplateDto"];
                "application/xml": components["schemas"]["CustomEntityTemplateDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    findField: {
        parameters: {
            query?: {
                customFieldTemplateCode?: string;
                appliesTo?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCustomFieldTemplateReponseDto"];
                    "application/xml": components["schemas"]["GetCustomFieldTemplateReponseDto"];
                };
            };
        };
    };
    updateField: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomFieldTemplateDto"];
                "application/xml": components["schemas"]["CustomFieldTemplateDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    createField: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomFieldTemplateDto"];
                "application/xml": components["schemas"]["CustomFieldTemplateDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    createOrUpdateAction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EntityCustomActionDto"];
                "application/xml": components["schemas"]["EntityCustomActionDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    createOrUpdateCustumizedEntityTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomEntityTemplateDto"];
                "application/xml": components["schemas"]["CustomEntityTemplateDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    createOrUpdateEntityTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomEntityTemplateDto"];
                "application/xml": components["schemas"]["CustomEntityTemplateDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    createOrUpdateField: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CustomFieldTemplateDto"];
                "application/xml": components["schemas"]["CustomFieldTemplateDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    customizeEntity: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EntityCustomizationDto"];
                "application/xml": components["schemas"]["EntityCustomizationDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    disableAction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                actionCode: string;
                appliesTo: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    disableEntityTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    disableField: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customFieldTemplateCode: string;
                appliesTo: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    enableAction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                actionCode: string;
                appliesTo: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    enableEntityTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    enableField: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customFieldTemplateCode: string;
                appliesTo: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    execute: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                actionCode: string;
                appliesTo: string;
                entityCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    findActionV2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                actionCode: string;
                appliesTo: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityCustomActionResponseDto"];
                    "application/xml": components["schemas"]["EntityCustomActionResponseDto"];
                };
            };
        };
    };
    removeAction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                actionCode: string;
                appliesTo: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    findEntityCustomizations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customizedEntityClass: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityCustomizationResponseDto"];
                    "application/xml": components["schemas"]["EntityCustomizationResponseDto"];
                };
            };
        };
    };
    findEntityTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customEntityTemplateCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomEntityTemplateResponseDto"];
                    "application/xml": components["schemas"]["CustomEntityTemplateResponseDto"];
                };
            };
        };
    };
    removeEntityTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customEntityTemplateCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    findFieldV2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customFieldTemplateCode: string;
                appliesTo: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCustomFieldTemplateReponseDto"];
                    "application/xml": components["schemas"]["GetCustomFieldTemplateReponseDto"];
                };
            };
        };
    };
    removeField: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                customFieldTemplateCode: string;
                appliesTo: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_112: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    listBusinessEntityForCFVByCode: {
        parameters: {
            query?: {
                code?: string;
                wildcode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessEntityResponseDto"];
                    "application/xml": components["schemas"]["BusinessEntityResponseDto"];
                };
            };
        };
    };
    listBusinessEntityForCFVByCodeV2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                wildcode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BusinessEntityResponseDto"];
                    "application/xml": components["schemas"]["BusinessEntityResponseDto"];
                };
            };
        };
    };
    listELFiltered: {
        parameters: {
            query?: {
                appliesTo?: string;
                entityCode?: string;
                entityId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityCustomizationResponseDto"];
                    "application/xml": components["schemas"]["EntityCustomizationResponseDto"];
                };
            };
        };
    };
    listEntityTemplates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomEntityTemplatesResponseDto"];
                    "application/xml": components["schemas"]["CustomEntityTemplatesResponseDto"];
                };
            };
        };
    };
    listEntityTemplates_1: {
        parameters: {
            query?: {
                customEntityTemplateCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomEntityTemplatesResponseDto"];
                    "application/xml": components["schemas"]["CustomEntityTemplatesResponseDto"];
                };
            };
        };
    };
    update_21: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UnitaryCustomTableDataDto"];
                "application/xml": components["schemas"]["UnitaryCustomTableDataDto"];
            };
        };
        responses: {
            /** @description row updated succefully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnitaryCustomTableDataDto"];
                    "application/xml": components["schemas"]["UnitaryCustomTableDataDto"];
                };
            };
            /** @description Invalid inputs supplied */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiException"];
                    "application/xml": components["schemas"]["ApiException"];
                };
            };
        };
    };
    create_18: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UnitaryCustomTableDataDto"];
                "application/xml": components["schemas"]["UnitaryCustomTableDataDto"];
            };
        };
        responses: {
            /** @description the created custom table row */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnitaryCustomTableDataDto"];
                    "application/xml": components["schemas"]["UnitaryCustomTableDataDto"];
                };
            };
            /** @description Invalid inputs supplied */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiException"];
                    "application/xml": components["schemas"]["ApiException"];
                };
            };
        };
    };
    disable_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tableName: string;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description row updated succefully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnitaryCustomTableDataDto"];
                    "application/xml": components["schemas"]["UnitaryCustomTableDataDto"];
                };
            };
            /** @description Invalid inputs supplied */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiException"];
                    "application/xml": components["schemas"]["ApiException"];
                };
            };
        };
    };
    enable_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tableName: string;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description row updated succefully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnitaryCustomTableDataDto"];
                    "application/xml": components["schemas"]["UnitaryCustomTableDataDto"];
                };
            };
            /** @description Invalid inputs supplied */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiException"];
                    "application/xml": components["schemas"]["ApiException"];
                };
            };
        };
    };
    index_113: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    remove_8: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tableName: string;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description row deleted succefully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UnitaryCustomTableDataDto"];
                    "application/xml": components["schemas"]["UnitaryCustomTableDataDto"];
                };
            };
            /** @description Invalid inputs supplied */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiException"];
                    "application/xml": components["schemas"]["ApiException"];
                };
            };
        };
    };
    getDashboardData: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    "    GET_DataCollector_search": {
        parameters: {
            query?: {
                code?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Data collector information */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataCollectorResponse"];
                    "application/xml": components["schemas"]["DataCollectorResponse"];
                };
            };
        };
    };
    "    POST_DataCollector_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DataCollectorDto"];
                "application/xml": components["schemas"]["DataCollectorDto"];
            };
        };
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_DataCollector_executeQuery": {
        parameters: {
            query?: {
                code?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_114: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST _DocumentSign_procedures ": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateProcedureRequestDto"];
                "application/xml": components["schemas"]["CreateProcedureRequestDto"];
            };
        };
        responses: {
            /** @description the sign procedure response dto */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SignProcedureResponseDto"];
                    "application/xml": components["schemas"]["SignProcedureResponseDto"];
                };
            };
        };
    };
    "    GET _DocumentSign_files_{id}_download ": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description the file by id */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SignFileResponseDto"];
                    "application/xml": components["schemas"]["SignFileResponseDto"];
                };
            };
        };
    };
    "    GET _DocumentSign_procedures_{id} ": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description the procedure by id */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SignProcedureResponseDto"];
                    "application/xml": components["schemas"]["SignProcedureResponseDto"];
                };
            };
        };
    };
    "    GET _DocumentSign_procedures_{id}_status ": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description the procedure status by id */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RawResponseDto"];
                    "application/xml": components["schemas"]["RawResponseDto"];
                };
            };
        };
    };
    index_115: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_PDFDocument_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PDFDocumentRequestDto"];
                "application/xml": components["schemas"]["PDFDocumentRequestDto"];
            };
        };
        responses: {
            /** @description the PDF contarct response dto */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PDFDocumentResponseDto"];
                    "application/xml": components["schemas"]["PDFDocumentResponseDto"];
                };
            };
        };
    };
    index_116: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_DunningDocument_addPayments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DunningDocumentDto"];
                "application/xml": components["schemas"]["DunningDocumentDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_DunningDocument_search": {
        parameters: {
            query?: {
                dunningDocumentCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description customer account */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DunningDocumentResponseDto"];
                    "application/xml": components["schemas"]["DunningDocumentResponseDto"];
                };
            };
        };
    };
    "    POST_DunningDocument_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DunningDocumentDto"];
                "application/xml": components["schemas"]["DunningDocumentDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_117: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_DunningDocument_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description List of dunningDocuments */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DunningDocumentsListResponseDto"];
                    "application/xml": components["schemas"]["DunningDocumentsListResponseDto"];
                };
            };
        };
    };
    "    GET_Chart_search": {
        parameters: {
            query?: {
                chartCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get Chart Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetChartResponse"];
                    "application/xml": components["schemas"]["GetChartResponse"];
                };
            };
        };
    };
    "    PUT_Chart_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ChartDto"];
                "application/xml": components["schemas"]["ChartDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Chart_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ChartDto"];
                "application/xml": components["schemas"]["ChartDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    DELETE_Chart_delete": {
        parameters: {
            query?: {
                chartCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_Chart_bar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BarChartDto"];
                "application/xml": components["schemas"]["BarChartDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Chart_bar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BarChartDto"];
                "application/xml": components["schemas"]["BarChartDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_Chart_line": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["LineChartDto"];
                "application/xml": components["schemas"]["LineChartDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Chart_line": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["LineChartDto"];
                "application/xml": components["schemas"]["LineChartDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Chart_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ChartDto"];
                "application/xml": components["schemas"]["ChartDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_Chart_pie": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PieChartDto"];
                "application/xml": components["schemas"]["PieChartDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Chart_pie": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PieChartDto"];
                "application/xml": components["schemas"]["PieChartDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Chart_{code}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Chart_{code}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_118: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Chart_listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of Calendars */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChartsResponseDto"];
                    "application/xml": components["schemas"]["ChartsResponseDto"];
                };
            };
        };
    };
    "    GET_MeasurableQuantity_search": {
        parameters: {
            query?: {
                code?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Measurable Quantity Response data */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMeasurableQuantityResponse"];
                    "application/xml": components["schemas"]["GetMeasurableQuantityResponse"];
                };
            };
        };
    };
    "    PUT_MeasurableQuantity_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["MeasurableQuantityDto"];
                "application/xml": components["schemas"]["MeasurableQuantityDto"];
            };
        };
        responses: {
            /** @description actions status. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_MeasurableQuantity_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["MeasurableQuantityDto"];
                "application/xml": components["schemas"]["MeasurableQuantityDto"];
            };
        };
        responses: {
            /** @description action status. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_MeasurableQuantity_{code}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_MeasurableQuantity_{code}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_MeasurableQuantity_findMVByDateAndPeriod": {
        parameters: {
            query?: {
                code?: string;
                fromDate?: string;
                toDate?: string;
                period?: "DAILY" | "WEEKLY" | "MONTHLY" | "YEARLY";
                mqCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description mesurable value by date and period. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    index_119: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_MeasurableQuantity_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of measurable quantities */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetListMeasurableQuantityResponse"];
                    "application/xml": components["schemas"]["GetListMeasurableQuantityResponse"];
                };
            };
        };
    };
    "    DELETE_MeasurableQuantity_{code}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description action status. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_120: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_FilteredList_listByFilter": {
        parameters: {
            query?: {
                from?: number;
                size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["FilterDto"];
                "application/xml": components["schemas"]["FilterDto"];
            };
        };
        responses: {
            /** @description Response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    GET_ReportExtract_search": {
        parameters: {
            query?: {
                reportExtractCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description matched report extract */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportExtractResponseDto"];
                    "application/xml": components["schemas"]["ReportExtractResponseDto"];
                };
            };
        };
    };
    "    POST_ReportExtract_create_1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ReportExtractDto"];
                "application/xml": components["schemas"]["ReportExtractDto"];
            };
        };
        responses: {
            /** @description status of the call */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    DELETE_ReportExtract_delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": string;
                "application/xml": string;
            };
        };
        responses: {
            /** @description status of the call */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_ReportExtract_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ReportExtractDto"];
                "application/xml": components["schemas"]["ReportExtractDto"];
            };
        };
        responses: {
            /** @description status of the call */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_ReportExtract_{code}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_ReportExtract_{code}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_ReportExtract_executionHistory_1": {
        parameters: {
            query?: {
                code?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of report extract execution detail */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportExtractExecutionResultsResponseDto"];
                    "application/xml": components["schemas"]["ReportExtractExecutionResultsResponseDto"];
                };
            };
        };
    };
    index_121: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    GET_ReportExtract_list: {
        parameters: {
            query?: {
                query?: string;
                fields?: string;
                offset?: number;
                limit?: number;
                sortBy?: string;
                sortOrder?: "ASCENDING" | "DESCENDING";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of ReportExtract */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportExtractsResponseDto"];
                    "application/xml": components["schemas"]["ReportExtractsResponseDto"];
                };
            };
        };
    };
    "    GET_ReportExtract_executionHistory_list": {
        parameters: {
            query?: {
                query?: string;
                fields?: string;
                offset?: number;
                limit?: number;
                sortBy?: string;
                sortOrder?: "ASCENDING" | "DESCENDING";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of ReportExtract run history */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportExtractExecutionResultsResponseDto"];
                    "application/xml": components["schemas"]["ReportExtractExecutionResultsResponseDto"];
                };
            };
        };
    };
    "    POST_ReportExtract_executionHistory_list_1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description list of ReportExtract run history */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportExtractExecutionResultsResponseDto"];
                    "application/xml": components["schemas"]["ReportExtractExecutionResultsResponseDto"];
                };
            };
        };
    };
    "    POST_ReportExtract_run": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RunReportExtractDto"];
                "application/xml": components["schemas"]["RunReportExtractDto"];
            };
        };
        responses: {
            /** @description status of the call */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportExtractExecutionResultResponseDto"];
                    "application/xml": components["schemas"]["ReportExtractExecutionResultResponseDto"];
                };
            };
        };
    };
    "    GET_GenericWorkflow_search": {
        parameters: {
            query?: {
                code?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Generic Work flow Response data */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericWorkflowResponseDto"];
                    "application/xml": components["schemas"]["GenericWorkflowResponseDto"];
                };
            };
        };
    };
    "    PUT_GenericWorkflow_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GenericWorkflowDto"];
                "application/xml": components["schemas"]["GenericWorkflowDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_GenericWorkflow_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GenericWorkflowDto"];
                "application/xml": components["schemas"]["GenericWorkflowDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_GenericWorkflow_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GenericWorkflowDto"];
                "application/xml": components["schemas"]["GenericWorkflowDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_GenericWorkflow_{code}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_GenericWorkflow_{code}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_GenericWorkflow_execute": {
        parameters: {
            query?: {
                baseEntityName?: string;
                entityInstanceCode?: string;
                workflowCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_GenericWorkflow_executeTransition": {
        parameters: {
            query?: {
                baseEntityName?: string;
                entityInstanceCode?: string;
                workflowCode?: string;
                transition?: string;
                force?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ActionStatus response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_GenericWorkflow_findByEntity": {
        parameters: {
            query?: {
                baseEntityName?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericWorkflowsResponseDto"];
                    "application/xml": components["schemas"]["GenericWorkflowsResponseDto"];
                };
            };
        };
    };
    "    GET_GenericWorkflow_history": {
        parameters: {
            query?: {
                entityInstanceCode?: string;
                workflowCode?: string;
                fromStatus?: string;
                toStatus?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowInsHistoryResponseDto"];
                    "application/xml": components["schemas"]["WorkflowInsHistoryResponseDto"];
                };
            };
        };
    };
    index_122: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_GenericWorkflow_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of workflow */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericWorkflowsResponseDto"];
                    "application/xml": components["schemas"]["GenericWorkflowsResponseDto"];
                };
            };
        };
    };
    "    DELETE_GenericWorkflow_{code}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_UserHierarchyLevel_search": {
        parameters: {
            query?: {
                hierarchyLevelCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description the UserHierarchyLevel given the hierarchyCode */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserHierarchyLevelResponseDto"];
                    "application/xml": components["schemas"]["UserHierarchyLevelResponseDto"];
                };
            };
        };
    };
    "    PUT_UserHierarchyLevel_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UserHierarchyLevelDto"];
                "application/xml": components["schemas"]["UserHierarchyLevelDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_UserHierarchyLevel_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UserHierarchyLevelDto"];
                "application/xml": components["schemas"]["UserHierarchyLevelDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_UserHierarchyLevel_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UserHierarchyLevelDto"];
                "application/xml": components["schemas"]["UserHierarchyLevelDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_123: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_UserHierarchyLevel_list": {
        parameters: {
            query?: {
                query?: string;
                fields?: string;
                offset?: number;
                limit?: number;
                sortBy?: string;
                sortOrder?: "ASCENDING" | "DESCENDING";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of user hierarchy levels */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserHierarchyLevelsDto"];
                    "application/xml": components["schemas"]["UserHierarchyLevelsDto"];
                };
            };
        };
    };
    "    POST_UserHierarchyLevel_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description A list of user hierarchy levels */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserHierarchyLevelsDto"];
                    "application/xml": components["schemas"]["UserHierarchyLevelsDto"];
                };
            };
        };
    };
    "    DELETE_UserHierarchyLevel_{hierarchyLevelCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                hierarchyLevelCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_ImportExport_checkImportDataResult": {
        parameters: {
            query?: {
                executionId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description the execution result */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ImportExportResponseDto"];
                    "application/xml": components["schemas"]["ImportExportResponseDto"];
                };
            };
        };
    };
    "    POST_ImportExport_generateEntityList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["ImportExportRequestDto"];
                "application/json": components["schemas"]["ImportExportRequestDto"];
            };
        };
        responses: {
            /** @description type ImportExportResponseDto.class s an entity list CSV */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ImportExportResponseDto"];
                    "application/xml": components["schemas"]["ImportExportResponseDto"];
                };
            };
        };
    };
    "    POST_ImportExport_exportData": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["ImportExportRequestDto"];
                "application/json": components["schemas"]["ImportExportRequestDto"];
            };
        };
        responses: {
            /** @description ImportExportResponseDto response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ImportExportResponseDto"];
                    "application/xml": components["schemas"]["ImportExportResponseDto"];
                };
            };
        };
    };
    "    POST_ImportExport_exportDataFromEntityList": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["MultipartFormDataInput"];
            };
        };
        responses: {
            /** @description ImportExportResponseDto response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ImportExportResponseDto"];
                    "application/xml": components["schemas"]["ImportExportResponseDto"];
                };
            };
        };
    };
    "    POST_ImportExport_importData": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["MultipartFormDataInput"];
            };
        };
        responses: {
            /** @description As import is async process, ImportExportResponseDto.executionId contains and ID to be used to query for execution results via a call to/importExport/checkImportDataResult?id=.. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ImportExportResponseDto"];
                    "application/xml": components["schemas"]["ImportExportResponseDto"];
                };
            };
        };
    };
    index_124: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_Invoice_cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CancelInvoiceRequestDto"];
                "application/xml": components["schemas"]["CancelInvoiceRequestDto"];
            };
        };
        responses: {
            /** @description action status. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Invoice_cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": number;
                "application/xml": number;
            };
        };
        responses: {
            /** @description action status. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Invoice_search": {
        parameters: {
            query?: {
                id?: number;
                invoiceNumber?: string;
                invoiceType?: string;
                includeTransactions?: boolean;
                includePdf?: boolean;
                includeXml?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description instance of GetInvoiceResponseDto */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetInvoiceResponseDto"];
                    "application/xml": components["schemas"]["GetInvoiceResponseDto"];
                };
            };
        };
    };
    "    POST_Invoice_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InvoiceDto"];
                "application/xml": components["schemas"]["InvoiceDto"];
            };
        };
        responses: {
            /** @description created invoice */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateInvoiceResponseDto"];
                    "application/xml": components["schemas"]["CreateInvoiceResponseDto"];
                };
            };
        };
    };
    "    GET_Invoice_listInvoiceByCustomerAccount": {
        parameters: {
            query?: {
                customerAccountCode?: string;
                returnPdf?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description customer invoice. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerInvoicesResponse"];
                    "application/xml": components["schemas"]["CustomerInvoicesResponse"];
                };
            };
        };
    };
    "    POST_Invoice_fetchPdfInvoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetPdfInvoiceRequestDto"];
                "application/xml": components["schemas"]["GetPdfInvoiceRequestDto"];
            };
        };
        responses: {
            /** @description pdf invoice */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetPdfInvoiceResponseDto"];
                    "application/xml": components["schemas"]["GetPdfInvoiceResponseDto"];
                };
            };
        };
    };
    "    GET_Invoice_getPdfInvoice": {
        parameters: {
            query?: {
                invoiceId?: number;
                invoiceNumber?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description pdf invoice */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetPdfInvoiceResponseDto"];
                    "application/xml": components["schemas"]["GetPdfInvoiceResponseDto"];
                };
            };
        };
    };
    "    GET_Invoice_getPdfInvoiceWithType": {
        parameters: {
            query?: {
                invoiceId?: number;
                invoiceNumber?: string;
                invoiceType?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description pdf invoice */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetPdfInvoiceResponseDto"];
                    "application/xml": components["schemas"]["GetPdfInvoiceResponseDto"];
                };
            };
        };
    };
    "    POST_Invoice_fetchXMLInvoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetXmlInvoiceRequestDto"];
                "application/xml": components["schemas"]["GetXmlInvoiceRequestDto"];
            };
        };
        responses: {
            /** @description xml invoice */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetXmlInvoiceResponseDto"];
                    "application/xml": components["schemas"]["GetXmlInvoiceResponseDto"];
                };
            };
        };
    };
    "    GET_Invoice_getXMLInvoice": {
        parameters: {
            query?: {
                invoiceId?: number;
                invoiceNumber?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description xml invoice */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetXmlInvoiceResponseDto"];
                    "application/xml": components["schemas"]["GetXmlInvoiceResponseDto"];
                };
            };
        };
    };
    "    GET_Invoice_getXMLInvoiceWithType": {
        parameters: {
            query?: {
                invoiceId?: number;
                invoiceNumber?: string;
                invoiceType?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description xml invoice */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetXmlInvoiceResponseDto"];
                    "application/xml": components["schemas"]["GetXmlInvoiceResponseDto"];
                };
            };
        };
    };
    "    POST_Invoice_generateDraftInvoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GenerateInvoiceRequestDto"];
                "application/xml": components["schemas"]["GenerateInvoiceRequestDto"];
            };
        };
        responses: {
            /** @description action status. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenerateInvoiceResponseDto"];
                    "application/xml": components["schemas"]["GenerateInvoiceResponseDto"];
                };
            };
        };
    };
    "    POST_Invoice_generateInvoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GenerateInvoiceRequestDto"];
                "application/xml": components["schemas"]["GenerateInvoiceRequestDto"];
            };
        };
        responses: {
            /** @description invoice response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenerateInvoiceResponseDto"];
                    "application/xml": components["schemas"]["GenerateInvoiceResponseDto"];
                };
            };
        };
    };
    "    GET_Invoice_listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of invoices */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvoicesDto"];
                    "application/xml": components["schemas"]["InvoicesDto"];
                };
            };
        };
    };
    "    GET_Invoice_list": {
        parameters: {
            query?: {
                query?: string;
                fields?: string;
                offset?: number;
                limit?: number;
                sortBy?: string;
                sortOrder?: "ASCENDING" | "DESCENDING";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description An invoice list */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvoicesDto"];
                    "application/xml": components["schemas"]["InvoicesDto"];
                };
            };
        };
    };
    "    POST_Invoice_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description An invoice list */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvoicesDto"];
                    "application/xml": components["schemas"]["InvoicesDto"];
                };
            };
        };
    };
    "    GET_Invoice_listPresentInAR": {
        parameters: {
            query?: {
                customerAccountCode?: string;
                includePdf?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of invoices */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerInvoicesResponse"];
                    "application/xml": components["schemas"]["CustomerInvoicesResponse"];
                };
            };
        };
    };
    "    POST_Invoice_sendByEmail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InvoiceDto"];
                "application/xml": components["schemas"]["InvoiceDto"];
            };
        };
        responses: {
            /** @description SUCCESS if sent, FAIL else */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_Invoice_validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ValidateInvoiceRequestDto"];
                "application/xml": components["schemas"]["ValidateInvoiceRequestDto"];
            };
        };
        responses: {
            /** @description action status. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Invoice_validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** Format: int64 */
                    invoiceId?: number;
                };
                "application/xml": {
                    /** Format: int64 */
                    invoiceId?: number;
                };
            };
        };
        responses: {
            /** @description action status. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    create_19: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["JobInstanceDto"];
                "application/xml": components["schemas"]["JobInstanceDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    createOrUpdate_9: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["JobInstanceDto"];
                "application/xml": components["schemas"]["JobInstanceDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    disable_2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The job instance's code */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    enable_2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The job instance's code */
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    find_11: {
        parameters: {
            query: {
                /** @description The job instance's code */
                jobInstanceCode: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobInstanceResponseDto"];
                    "application/xml": components["schemas"]["JobInstanceResponseDto"];
                };
            };
        };
    };
    updatePut: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["JobInstanceDto"];
                "application/xml": components["schemas"]["JobInstanceDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_86: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    list_7: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return the list of jobInsttance successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobInstanceListResponseDto"];
                    "application/xml": components["schemas"]["JobInstanceListResponseDto"];
                };
            };
        };
    };
    remove_9: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The job instance's code */
                jobInstanceCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    update_22: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["JobInstanceDto"];
                "application/xml": components["schemas"]["JobInstanceDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Job_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["JobInstanceDto"];
                "application/xml": components["schemas"]["JobInstanceDto"];
            };
        };
        responses: {
            /** @description request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Job_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["JobInstanceDto"];
                "application/xml": components["schemas"]["JobInstanceDto"];
            };
        };
        responses: {
            /** @description request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Job_timer_createOrUpdate_": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TimerEntityDto"];
                "application/xml": components["schemas"]["TimerEntityDto"];
            };
        };
        responses: {
            /** @description request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Job_timer_": {
        parameters: {
            query?: {
                timerCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TimerEntityResponseDto"];
                    "application/xml": components["schemas"]["TimerEntityResponseDto"];
                };
            };
        };
    };
    "    PUT_Job_timer_": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TimerEntityDto"];
                "application/xml": components["schemas"]["TimerEntityDto"];
            };
        };
        responses: {
            /** @description request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Job_timer_": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TimerEntityDto"];
                "application/xml": components["schemas"]["TimerEntityDto"];
            };
        };
        responses: {
            /** @description request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Job_search": {
        parameters: {
            query?: {
                jobInstanceCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description object containing the matched JobInstance */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobInstanceResponseDto"];
                    "application/xml": components["schemas"]["JobInstanceResponseDto"];
                };
            };
        };
    };
    "    PUT_Job_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["JobInstanceDto"];
                "application/xml": components["schemas"]["JobInstanceDto"];
            };
        };
        responses: {
            /** @description request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Job_create_1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["JobInstanceDto"];
                "application/xml": components["schemas"]["JobInstanceDto"];
            };
        };
        responses: {
            /** @description request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Job_execute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["JobInstanceInfoDto"];
                "application/xml": components["schemas"]["JobInstanceInfoDto"];
            };
        };
        responses: {
            /** @description request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobExecutionResultResponseDto"];
                    "application/xml": components["schemas"]["JobExecutionResultResponseDto"];
                };
            };
        };
    };
    "    POST_Job_execution": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["JobInstanceInfoDto"];
                "application/xml": components["schemas"]["JobInstanceInfoDto"];
            };
        };
        responses: {
            /** @description request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobExecutionResultResponseDto"];
                    "application/xml": components["schemas"]["JobExecutionResultResponseDto"];
                };
            };
        };
    };
    "    GET_Job_jobReport": {
        parameters: {
            query?: {
                code?: string;
                id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description object containing the JobExecutionResultImpl */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobExecutionResultResponseDto"];
                    "application/xml": components["schemas"]["JobExecutionResultResponseDto"];
                };
            };
        };
    };
    "    GET_Job{code}_jobExecution_{id}_jobReport": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description object containing the JobExecutionResultImpl */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobExecutionResultResponseDto"];
                    "application/xml": components["schemas"]["JobExecutionResultResponseDto"];
                };
            };
        };
    };
    "    GET_Job_timers_{timerCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                timerCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TimerEntityResponseDto"];
                    "application/xml": components["schemas"]["TimerEntityResponseDto"];
                };
            };
        };
    };
    "    GET_Job_{jobInstanceCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                jobInstanceCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description object containing the matched JobInstance */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobInstanceResponseDto"];
                    "application/xml": components["schemas"]["JobInstanceResponseDto"];
                };
            };
        };
    };
    "    DELETE_Job_{jobInstanceCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                jobInstanceCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_126: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Job_jobReport_listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of jobExecutions */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobExecutionResultsResponseDto"];
                    "application/xml": components["schemas"]["JobExecutionResultsResponseDto"];
                };
            };
        };
    };
    "    GET_Job_jobReport_list": {
        parameters: {
            query?: {
                query?: string;
                fields?: string;
                offset?: number;
                limit?: number;
                sortBy?: string;
                sortOrder?: "ASCENDING" | "DESCENDING";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of JobExecutions */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobExecutionResultsResponseDto"];
                    "application/xml": components["schemas"]["JobExecutionResultsResponseDto"];
                };
            };
        };
    };
    "    POST_Job_jobReport_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description List of JobExecutions */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobExecutionResultsResponseDto"];
                    "application/xml": components["schemas"]["JobExecutionResultsResponseDto"];
                };
            };
        };
    };
    "    GET_Job_list": {
        parameters: {
            query?: {
                offset?: number;
                limit?: number;
                mergedCF?: boolean;
                sortBy?: string;
                sortOrder?: "ASCENDING" | "DESCENDING";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description list of all subscriptions. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobInstanceListResponseDto"];
                    "application/xml": components["schemas"]["JobInstanceListResponseDto"];
                };
            };
        };
    };
    "    GET_Job_listCategories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description object containing the list of job categories */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobCategoriesResponseDto"];
                    "application/xml": components["schemas"]["JobCategoriesResponseDto"];
                };
            };
        };
    };
    "    DELETE_Job_timer_{timerCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                timerCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_Job_stop_{jobInstanceCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                jobInstanceCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Job_stop_{jobInstanceCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                jobInstanceCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_TimerEntity_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TimerEntityDto"];
                "application/xml": components["schemas"]["TimerEntityDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_TimerEntity_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TimerEntityDto"];
                "application/xml": components["schemas"]["TimerEntityDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_TimerEntity_{code}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_TimerEntity_{code}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_TimerEntity_search": {
        parameters: {
            query?: {
                timerEntityCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return timerEntity */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTimerEntityResponseDto"];
                    "application/xml": components["schemas"]["GetTimerEntityResponseDto"];
                };
            };
        };
    };
    index_127: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_TimerEntity_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TimerEntityDto"];
                "application/xml": components["schemas"]["TimerEntityDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    addInvoiceLines: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InvoiceLinesInput"];
                "application/xml": components["schemas"]["InvoiceLinesInput"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    checkAndUpdateDisounctInvoiceLine: {
        parameters: {
            query?: {
                taux?: number;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    createManualInvoice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InvoiceCustomDto"];
                "application/xml": components["schemas"]["InvoiceCustomDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    createOrUpdateWorkflowCreditNote: {
        parameters: {
            query?: {
                status?: string;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    duplicateInvoice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invoicId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    getInvoiceLine: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    updateInvoiceLine: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
                lineId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InvoiceLineInput"];
                "application/xml": components["schemas"]["InvoiceLineInput"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    updateStatus_3: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
                status: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    updateWithoutIl: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Invoice"];
                "application/xml": components["schemas"]["Invoice"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    validateInvoiceRefacturation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    "    GET_MetricsConfiguration_search": {
        parameters: {
            query?: {
                code?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description link GetMetricsConfigurationResponse}. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMetricsConfigurationResponse"];
                    "application/xml": components["schemas"]["GetMetricsConfigurationResponse"];
                };
            };
        };
    };
    "    PUT_MetricsConfiguration_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["MetricsConfigurationDto"];
                "application/xml": components["schemas"]["MetricsConfigurationDto"];
            };
        };
        responses: {
            /** @description link org.meveo.api.dto.ActionStatus}. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_MetricsConfiguration_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["MetricsConfigurationDto"];
                "application/xml": components["schemas"]["MetricsConfigurationDto"];
            };
        };
        responses: {
            /** @description link org.meveo.api.dto.ActionStatus}. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    DELETE_MetricsConfiguration_delete": {
        parameters: {
            query?: {
                code?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description link org.meveo.api.dto.ActionStatus}. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_128: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Module_search": {
        parameters: {
            query?: {
                code?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Meveo module DTO Response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MeveoModuleDtoResponse"];
                    "application/xml": components["schemas"]["MeveoModuleDtoResponse"];
                };
            };
        };
    };
    "    PUT_Module_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["MeveoModuleDto"];
                "application/xml": components["schemas"]["MeveoModuleDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Module_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["MeveoModuleDto"];
                "application/xml": components["schemas"]["MeveoModuleDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Module_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["MeveoModuleDto"];
                "application/xml": components["schemas"]["MeveoModuleDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    DELETE_Module_{code}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Module_{code}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Module_disable": {
        parameters: {
            query?: {
                code?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Module_{code}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Module_enable": {
        parameters: {
            query?: {
                code?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_129: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_Module_install": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["MeveoModuleDto"];
                "application/xml": components["schemas"]["MeveoModuleDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Module_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of Meveo's modules */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MeveoModuleDtosResponse"];
                    "application/xml": components["schemas"]["MeveoModuleDtosResponse"];
                };
            };
        };
    };
    "    GET_Module_uninstall": {
        parameters: {
            query?: {
                code?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_EmailNotification_search": {
        parameters: {
            query?: {
                notificationCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Email Notification Response data */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetEmailNotificationResponseDto"];
                    "application/xml": components["schemas"]["GetEmailNotificationResponseDto"];
                };
            };
        };
    };
    "    PUT_EmailNotification_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EmailNotificationDto"];
                "application/xml": components["schemas"]["EmailNotificationDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_EmailNotification_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EmailNotificationDto"];
                "application/xml": components["schemas"]["EmailNotificationDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_EmailNotification_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["EmailNotificationDto"];
                "application/xml": components["schemas"]["EmailNotificationDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_EmailNotification_{code}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_EmailNotification_{code}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_130: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    DELETE_EmailNotification_{notificationCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                notificationCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_JobTrigger_search": {
        parameters: {
            query?: {
                notificationCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Job Trigger Response data */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetJobTriggerResponseDto"];
                    "application/xml": components["schemas"]["GetJobTriggerResponseDto"];
                };
            };
        };
    };
    "    PUT_JobTrigger_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["JobTriggerDto"];
                "application/xml": components["schemas"]["JobTriggerDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_JobTrigger_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["JobTriggerDto"];
                "application/xml": components["schemas"]["JobTriggerDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_JobTrigger_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["JobTriggerDto"];
                "application/xml": components["schemas"]["JobTriggerDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_JobTrigger_{code}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_JobTrigger_{code}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_131: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    DELETE_JobTrigger_{notificationCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                notificationCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Notification_search": {
        parameters: {
            query?: {
                notificationCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Script notification information */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetScriptNotificationResponseDto"];
                    "application/xml": components["schemas"]["GetScriptNotificationResponseDto"];
                };
            };
        };
    };
    "    PUT_Notification_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ScriptNotificationDto"];
                "application/xml": components["schemas"]["ScriptNotificationDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Notification_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ScriptNotificationDto"];
                "application/xml": components["schemas"]["ScriptNotificationDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Notification_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ScriptNotificationDto"];
                "application/xml": components["schemas"]["ScriptNotificationDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Notification_{code}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Notification_{code}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_132: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Notification_listInboundRequest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of inbound requests */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InboundRequestsResponseDto"];
                    "application/xml": components["schemas"]["InboundRequestsResponseDto"];
                };
            };
        };
    };
    "    GET_Notification_listNotificationHistory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Notification history list */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationHistoriesResponseDto"];
                    "application/xml": components["schemas"]["NotificationHistoriesResponseDto"];
                };
            };
        };
    };
    "    DELETE_Notification_{notificationCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                notificationCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_133: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    send: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["SMSInfoDto"];
                "application/xml": components["schemas"]["SMSInfoDto"];
            };
        };
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                };
            };
        };
    };
    "    GET_WebHookNotification_search": {
        parameters: {
            query?: {
                notificationCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description WebHook Notification Response data */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetWebHookNotificationResponseDto"];
                    "application/xml": components["schemas"]["GetWebHookNotificationResponseDto"];
                };
            };
        };
    };
    "    PUT_WebHookNotification_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WebHookDto"];
                "application/xml": components["schemas"]["WebHookDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_WebHookNotification_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WebHookDto"];
                "application/xml": components["schemas"]["WebHookDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_WebHookNotification_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["WebHookDto"];
                "application/xml": components["schemas"]["WebHookDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_WebHookNotification_{code}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_WebHookNotification_{code}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_134: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    DELETE_WebHookNotification_{notificationCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                notificationCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_AccountOperation_addLitigation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["LitigationRequestDto"];
                "application/xml": components["schemas"]["LitigationRequestDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_AccountOperation_cancelLitigation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["LitigationRequestDto"];
                "application/xml": components["schemas"]["LitigationRequestDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_AccountOperation_search": {
        parameters: {
            query?: {
                id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Account operation response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountOperationResponseDto"];
                    "application/xml": components["schemas"]["AccountOperationResponseDto"];
                };
            };
        };
    };
    "    POST_AccountOperation_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AccountOperationDto"];
                "application/xml": components["schemas"]["AccountOperationDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_AccountOperation_findByCustomerAccount": {
        parameters: {
            query?: {
                customerAccountCode?: string;
                offset?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of accountOperations */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountOperationsResponseDto"];
                    "application/xml": components["schemas"]["AccountOperationsResponseDto"];
                };
            };
        };
    };
    index_135: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_AccountOperation_list": {
        parameters: {
            query?: {
                customerAccountCode?: string;
                query?: string;
                fields?: string;
                offset?: number;
                limit?: number;
                sortBy?: string;
                sortOrder?: "ASCENDING" | "DESCENDING";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of account operations */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountOperationsResponseDto"];
                    "application/xml": components["schemas"]["AccountOperationsResponseDto"];
                };
            };
        };
    };
    "    POST_AccountOperation_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description List of account operations */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountOperationsResponseDto"];
                    "application/xml": components["schemas"]["AccountOperationsResponseDto"];
                };
            };
        };
    };
    "    GET_AccountOperation_{accountOperationId}_listMatchedOperations": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                accountOperationId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of matched operations */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MatchedOperationsResponseDto"];
                    "application/xml": components["schemas"]["MatchedOperationsResponseDto"];
                };
            };
        };
    };
    "    POST_AccountOperation_matchOperations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["MatchOperationRequestDto"];
                "application/xml": components["schemas"]["MatchOperationRequestDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_AccountOperation_transferAccountOperation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TransferAccountOperationDto"];
                "application/xml": components["schemas"]["TransferAccountOperationDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_AccountOperation_unMatchingOperations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UnMatchingOperationRequestDto"];
                "application/xml": components["schemas"]["UnMatchingOperationRequestDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_AccountOperation_update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
                newAccountingDate: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_AccountOperation_updateStatus": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
                newStatus: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    GET_CreditCategory_search: {
        parameters: {
            query?: {
                creditCategoryCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Credit Category Response data */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreditCategoryResponseDto"];
                    "application/xml": components["schemas"]["CreditCategoryResponseDto"];
                };
            };
        };
    };
    PUT_CreditCategory_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreditCategoryDto"];
                "application/xml": components["schemas"]["CreditCategoryDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    POST_CreditCategory_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreditCategoryDto"];
                "application/xml": components["schemas"]["CreditCategoryDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    POST_CreditCategory_createOrUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreditCategoryDto"];
                "application/xml": components["schemas"]["CreditCategoryDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_136: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    GET_CreditCategory_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of Credit Categories */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreditCategoriesResponseDto"];
                    "application/xml": components["schemas"]["CreditCategoriesResponseDto"];
                };
            };
        };
    };
    GET_CreditCategory_listGetAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of creditCategories */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreditCategoriesResponseDto"];
                    "application/xml": components["schemas"]["CreditCategoriesResponseDto"];
                };
            };
        };
    };
    "DELETE_CreditCategory_{creditCategoryCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                creditCategoryCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_DDRequestLotOp_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DDRequestLotOpDto"];
                "application/xml": components["schemas"]["DDRequestLotOpDto"];
            };
        };
        responses: {
            /** @description Action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_137: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_DDRequestLotOp_list": {
        parameters: {
            query?: {
                fromDueDate?: string;
                toDueDate?: string;
                status?: "WAIT" | "PROCESSED" | "ERROR";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description DDRequestLotOps response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DDRequestLotOpsResponseDto"];
                    "application/xml": components["schemas"]["DDRequestLotOpsResponseDto"];
                };
            };
        };
    };
    index_138: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_IBan_validate": {
        parameters: {
            query?: {
                iban?: string;
                bic?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description the status of the validation */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Payment_cardPaymentMethod": {
        parameters: {
            query?: {
                id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Card payment DTO */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardPaymentMethodTokenDto"];
                    "application/xml": components["schemas"]["CardPaymentMethodTokenDto"];
                };
            };
        };
    };
    "    PUT_Payment_cardPaymentMethod": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CardPaymentMethodDto"];
                "application/xml": components["schemas"]["CardPaymentMethodDto"];
            };
        };
        responses: {
            /** @description Action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Payment_cardPaymentMethod": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CardPaymentMethodDto"];
                "application/xml": components["schemas"]["CardPaymentMethodDto"];
            };
        };
        responses: {
            /** @description Token id in payment gateway */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardPaymentMethodTokenDto"];
                    "application/xml": components["schemas"]["CardPaymentMethodTokenDto"];
                };
            };
        };
    };
    "    DELETE_Payment_cardPaymentMethod": {
        parameters: {
            query?: {
                id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Payment_ddRequestBuilder": {
        parameters: {
            query?: {
                code?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ddRequest builder DTO */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DDRequestBuilderResponseDto"];
                    "application/xml": components["schemas"]["DDRequestBuilderResponseDto"];
                };
            };
        };
    };
    "    PUT_Payment_ddRequestBuilder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DDRequestBuilderDto"];
                "application/xml": components["schemas"]["DDRequestBuilderDto"];
            };
        };
        responses: {
            /** @description Action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Payment_ddRequestBuilder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DDRequestBuilderDto"];
                "application/xml": components["schemas"]["DDRequestBuilderDto"];
            };
        };
        responses: {
            /** @description the ddRequestBuilder dto created */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DDRequestBuilderResponseDto"];
                    "application/xml": components["schemas"]["DDRequestBuilderResponseDto"];
                };
            };
        };
    };
    "    DELETE_Payment_ddRequestBuilder": {
        parameters: {
            query?: {
                code?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Payment_paymentGateway": {
        parameters: {
            query?: {
                code?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description payment DTO */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentGatewayResponseDto"];
                    "application/xml": components["schemas"]["PaymentGatewayResponseDto"];
                };
            };
        };
    };
    "    PUT_Payment_paymentGateway": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PaymentGatewayDto"];
                "application/xml": components["schemas"]["PaymentGatewayDto"];
            };
        };
        responses: {
            /** @description Action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Payment_paymentGateway": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PaymentGatewayDto"];
                "application/xml": components["schemas"]["PaymentGatewayDto"];
            };
        };
        responses: {
            /** @description the paymentGateway dto created */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentGatewayResponseDto"];
                    "application/xml": components["schemas"]["PaymentGatewayResponseDto"];
                };
            };
        };
    };
    "    DELETE_Payment_paymentGateway": {
        parameters: {
            query?: {
                code?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Payment_paymentMethod": {
        parameters: {
            query?: {
                id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description payment DTO */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentMethodTokenDto"];
                    "application/xml": components["schemas"]["PaymentMethodTokenDto"];
                };
            };
        };
    };
    "    PUT_Payment_paymentMethod": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PaymentMethodDto"];
                "application/xml": components["schemas"]["PaymentMethodDto"];
            };
        };
        responses: {
            /** @description Action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Payment_paymentMethod": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PaymentMethodDto"];
                "application/xml": components["schemas"]["PaymentMethodDto"];
            };
        };
        responses: {
            /** @description Token id in payment gateway */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentMethodTokenDto"];
                    "application/xml": components["schemas"]["PaymentMethodTokenDto"];
                };
            };
        };
    };
    "    DELETE_Payment_paymentMethod": {
        parameters: {
            query?: {
                id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Payment_paymentGateway_approveSepaDDMandate": {
        parameters: {
            query?: {
                customerAccountCode?: string;
                tokenId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description ActionStatus response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_Payment_paymentScheduleInstance_cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PaymentScheduleInstanceDto"];
                "application/xml": components["schemas"]["PaymentScheduleInstanceDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Payment_paymentGateway_checkMandate": {
        parameters: {
            query?: {
                mandateReference?: string;
                mandateId?: string;
                customerAccountCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description created mandate */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MandatInfoDto"];
                    "application/xml": components["schemas"]["MandatInfoDto"];
                };
            };
        };
    };
    "    POST_Payment_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PaymentDto"];
                "application/xml": components["schemas"]["PaymentDto"];
            };
        };
        responses: {
            /** @description payment action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentActionStatus"];
                    "application/xml": components["schemas"]["PaymentActionStatus"];
                };
            };
        };
    };
    "    POST_Payment_ddRequestBuilder_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DDRequestBuilderDto"];
                "application/xml": components["schemas"]["DDRequestBuilderDto"];
            };
        };
        responses: {
            /** @description the ddRequestBuilder dto created */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DDRequestBuilderResponseDto"];
                    "application/xml": components["schemas"]["DDRequestBuilderResponseDto"];
                };
            };
        };
    };
    "    POST_Payment_paymentGateway_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PaymentGatewayDto"];
                "application/xml": components["schemas"]["PaymentGatewayDto"];
            };
        };
        responses: {
            /** @description the paymentGateway dto created */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentGatewayResponseDto"];
                    "application/xml": components["schemas"]["PaymentGatewayResponseDto"];
                };
            };
        };
    };
    "    POST_Payment_paymentScheduleTemplate_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PaymentScheduleTemplateDto"];
                "application/xml": components["schemas"]["PaymentScheduleTemplateDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Payment_create_1": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PaymentDto"];
                "application/xml": components["schemas"]["PaymentDto"];
            };
        };
        responses: {
            /** @description payment action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentActionStatus"];
                    "application/xml": components["schemas"]["PaymentActionStatus"];
                };
            };
        };
    };
    "    GET_Payment_paymentScheduleTemplate": {
        parameters: {
            query?: {
                paymentScheduleTemplateCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentScheduleTemplateResponseDto"];
                    "application/xml": components["schemas"]["PaymentScheduleTemplateResponseDto"];
                };
            };
        };
    };
    "    PUT_Payment_paymentScheduleTemplate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PaymentScheduleTemplateDto"];
                "application/xml": components["schemas"]["PaymentScheduleTemplateDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Payment_paymentScheduleTemplate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PaymentScheduleTemplateDto"];
                "application/xml": components["schemas"]["PaymentScheduleTemplateDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    DELETE_Payment_paymentScheduleTemplate": {
        parameters: {
            query?: {
                paymentScheduleTemplateCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_Payment_paymentGateway_rumSequence": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PaymentGatewayRumSequenceDto"];
                "application/xml": components["schemas"]["PaymentGatewayRumSequenceDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Payment_paymentGateway_rumSequence": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PaymentGatewayRumSequenceDto"];
                "application/xml": components["schemas"]["PaymentGatewayRumSequenceDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Payment_paymentGateway_rumSequence_{code}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentGatewayRumSequenceResponseDto"];
                    "application/xml": components["schemas"]["PaymentGatewayRumSequenceResponseDto"];
                };
            };
        };
    };
    "    DELETE_Payment_paymentGateway_rumSequence_{code}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Payment_ddRequestBuilder_{code}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Payment_paymentGateway_{code}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Payment_paymentMethod_{id}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Payment_ddRequestBuilder_{code}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Payment_paymentGateway_{code}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Payment_paymentMethod_{id}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Payment_paymentMethod_findByCustomerAccount": {
        parameters: {
            query?: {
                customerAccountCode?: string;
                offset?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description An payment method list */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentMethodTokensDto"];
                    "application/xml": components["schemas"]["PaymentMethodTokensDto"];
                };
            };
        };
    };
    "    GET_Payment_paymentScheduleInstance": {
        parameters: {
            query?: {
                id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A paymentScheduleInstance dto */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentScheduleInstanceResponseDto"];
                    "application/xml": components["schemas"]["PaymentScheduleInstanceResponseDto"];
                };
            };
        };
    };
    "    PUT_Payment_paymentScheduleInstance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PaymentScheduleInstanceDto"];
                "application/xml": components["schemas"]["PaymentScheduleInstanceDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Payment_paymentGateway_getHostedCheckoutStatus": {
        parameters: {
            query?: {
                id?: string;
                ca?: string;
                seller?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description the HostedCheckoutStatusResponseDto */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HostedCheckoutStatusResponseDto"];
                    "application/xml": components["schemas"]["HostedCheckoutStatusResponseDto"];
                };
            };
        };
    };
    "    GET_Payment_paymentGateway_getHostedCheckoutUrl": {
        parameters: {
            query?: {
                ca?: string;
                returnUrl?: string;
                locale?: string;
                amount?: string;
                currencyCode?: string;
                authorizationMode?: string;
                countryCode?: string;
                skipAuthentication?: boolean;
                gatewayPaymentName?: string;
                variant?: string;
                seller?: string;
                automaticReturnUrl?: string;
                allowedActions?: string;
                returnContext?: string;
                authenticationAmount?: string;
                advancedOptions?: string;
                isOneShotPayment?: boolean;
                cancelUrl?: string;
                paymentMethodType?: "CHECK" | "DIRECTDEBIT" | "WIRETRANSFER" | "CARD" | "PAYPAL" | "STRIPE" | "CASH";
                customerIpAddress?: string;
                browserScreenHeight?: string;
                browserScreenWidth?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description the PaymentHostedCheckoutResponseDto */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentHostedCheckoutResponseDto"];
                    "application/xml": components["schemas"]["PaymentHostedCheckoutResponseDto"];
                };
            };
        };
    };
    "    POST_Payment_paymentGateway_rumSequence_{code}_next": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description sequence value dto */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericSequenceValueResponseDto"];
                    "application/xml": components["schemas"]["GenericSequenceValueResponseDto"];
                };
            };
        };
    };
    index_139: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Payment_customerPayment": {
        parameters: {
            query?: {
                customerAccountCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description list of customer's response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomerPaymentsResponse"];
                    "application/xml": components["schemas"]["CustomerPaymentsResponse"];
                };
            };
        };
    };
    "    GET_Payment_cardPaymentMethod_list": {
        parameters: {
            query?: {
                customerAccountId?: number;
                customerAccountCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of card payment methods */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardPaymentMethodTokensDto"];
                    "application/xml": components["schemas"]["CardPaymentMethodTokensDto"];
                };
            };
        };
    };
    "    GET_Payment_ddRequestBuilder_list": {
        parameters: {
            query?: {
                query?: string;
                fields?: string;
                offset?: number;
                limit?: number;
                sortBy?: string;
                sortOrder?: "ASCENDING" | "DESCENDING";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description An ddRequest builder list */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DDRequestBuilderResponseDto"];
                    "application/xml": components["schemas"]["DDRequestBuilderResponseDto"];
                };
            };
        };
    };
    "    POST_Payment_ddRequestBuilder_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description An ddRequest builder list */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DDRequestBuilderResponseDto"];
                    "application/xml": components["schemas"]["DDRequestBuilderResponseDto"];
                };
            };
        };
    };
    "    GET_Payment_paymentMethod_listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of paymentMethods */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentMethodTokensDto"];
                    "application/xml": components["schemas"]["PaymentMethodTokensDto"];
                };
            };
        };
    };
    "    GET_Payment_paymentGateway_list": {
        parameters: {
            query?: {
                query?: string;
                fields?: string;
                offset?: number;
                limit?: number;
                sortBy?: string;
                sortOrder?: "ASCENDING" | "DESCENDING";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description An payment gateway list */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentGatewayResponseDto"];
                    "application/xml": components["schemas"]["PaymentGatewayResponseDto"];
                };
            };
        };
    };
    "    POST_Payment_paymentGateway_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description An payment gateway list */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentGatewayResponseDto"];
                    "application/xml": components["schemas"]["PaymentGatewayResponseDto"];
                };
            };
        };
    };
    "    GET_Payment_history_list": {
        parameters: {
            query?: {
                query?: string;
                fields?: string;
                offset?: number;
                limit?: number;
                sortBy?: string;
                sortOrder?: "ASCENDING" | "DESCENDING";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description An invoice list */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentHistoriesDto"];
                    "application/xml": components["schemas"]["PaymentHistoriesDto"];
                };
            };
        };
    };
    "    POST_Payment_history_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description An invoice list */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentHistoriesDto"];
                    "application/xml": components["schemas"]["PaymentHistoriesDto"];
                };
            };
        };
    };
    "    GET_Payment_paymentMethod_list": {
        parameters: {
            query?: {
                query?: string;
                fields?: string;
                offset?: number;
                limit?: number;
                sortBy?: string;
                sortOrder?: "ASCENDING" | "DESCENDING";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description An payment method list */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentMethodTokensDto"];
                    "application/xml": components["schemas"]["PaymentMethodTokensDto"];
                };
            };
        };
    };
    "    POST_Payment_paymentMethod_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description An payment method list */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentMethodTokensDto"];
                    "application/xml": components["schemas"]["PaymentMethodTokensDto"];
                };
            };
        };
    };
    "    GET_Payment_paymentScheduleInstance_list": {
        parameters: {
            query?: {
                query?: string;
                fields?: string;
                offset?: number;
                limit?: number;
                sortBy?: string;
                sortOrder?: "ASCENDING" | "DESCENDING";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description An paymentScheduleInstance dto list */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentScheduleInstancesDto"];
                    "application/xml": components["schemas"]["PaymentScheduleInstancesDto"];
                };
            };
        };
    };
    "    POST_Payment_paymentScheduleInstance_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description An PaymentScheduleInstance dto list */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentScheduleInstancesDto"];
                    "application/xml": components["schemas"]["PaymentScheduleInstancesDto"];
                };
            };
        };
    };
    "    GET_Payment_paymentScheduleTemplate_list": {
        parameters: {
            query?: {
                query?: string;
                fields?: string;
                offset?: number;
                limit?: number;
                sortBy?: string;
                sortOrder?: "ASCENDING" | "DESCENDING";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description An paymentScheduleTemplate dto list */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentScheduleTemplatesDto"];
                    "application/xml": components["schemas"]["PaymentScheduleTemplatesDto"];
                };
            };
        };
    };
    "    POST_Payment_paymentScheduleTemplate_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description An paymentScheduleTemplate dto list */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentScheduleTemplatesDto"];
                    "application/xml": components["schemas"]["PaymentScheduleTemplatesDto"];
                };
            };
        };
    };
    "    PUT_Payment_paymentScheduleInstance_{id}_items": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PaymentScheduleInstanceItemsDto"];
                "application/xml": components["schemas"]["PaymentScheduleInstanceItemsDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    PUT_Payment_paymentScheduleInstance_terminate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PaymentScheduleInstanceDto"];
                "application/xml": components["schemas"]["PaymentScheduleInstanceDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_Refund_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RefundDto"];
                "application/xml": components["schemas"]["RefundDto"];
            };
        };
        responses: {
            /** @description payment action status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RefundActionStatus"];
                    "application/xml": components["schemas"]["RefundActionStatus"];
                };
            };
        };
    };
    "    GET_RevenueRecognitionRules_search": {
        parameters: {
            query?: {
                revenueRecognitionRuleCode?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Revenue recognition rules results */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RevenueRecognitionRuleDtoResponse"];
                    "application/xml": components["schemas"]["RevenueRecognitionRuleDtoResponse"];
                };
            };
        };
    };
    "    PUT_RevenueRecognitionRules_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RevenueRecognitionRuleDto"];
                "application/xml": components["schemas"]["RevenueRecognitionRuleDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_RevenueRecognitionRules_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RevenueRecognitionRuleDto"];
                "application/xml": components["schemas"]["RevenueRecognitionRuleDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_RevenueRecognitionRules_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RevenueRecognitionRuleDto"];
                "application/xml": components["schemas"]["RevenueRecognitionRuleDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_RevenueRecognitionRules_{code}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_RevenueRecognitionRules_{code}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_90: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_RevenueRecognitionRules_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of revenue recognition rules */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RevenueRecognitionRuleDtosResponse"];
                    "application/xml": components["schemas"]["RevenueRecognitionRuleDtosResponse"];
                };
            };
        };
    };
    "    DELETE_RevenueRecognitionRules_{revenueRecognitionRuleCode}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                revenueRecognitionRuleCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    POST_RumSequencenextMandateNumber: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description next mandate value */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericSequenceValueResponseDto"];
                    "application/xml": components["schemas"]["GenericSequenceValueResponseDto"];
                };
            };
        };
    };
    index_141: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    PUT_RumSequence_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GenericSequenceDto"];
                "application/xml": components["schemas"]["GenericSequenceDto"];
            };
        };
        responses: {
            /** @description status of the operation */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    contraliaPES: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string;
            };
            path: {
                quoteNumber: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    mandates: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string;
            };
            path: {
                coclicoId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    createPayment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                };
            };
        };
    };
    getInvoiceDetails: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                no_facture: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                };
            };
        };
    };
    getUserManager: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                login: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                };
            };
        };
    };
    index_142: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    putCustomerByCoclico: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                };
            };
        };
    };
    postCustomerByCoclico: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                    "application/xml": unknown;
                };
            };
        };
    };
    comptage: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    deleteSQAJob: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    entityList: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    applyExtraCharge: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    "    GET_TaxCategory_search": {
        parameters: {
            query?: {
                code?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A Tax category's data */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaxCategoryResponseDto"];
                    "application/xml": components["schemas"]["TaxCategoryResponseDto"];
                };
            };
        };
    };
    "    PUT_TaxCategory_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TaxCategoryDto"];
                "application/xml": components["schemas"]["TaxCategoryDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_TaxCategory_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TaxCategoryDto"];
                "application/xml": components["schemas"]["TaxCategoryDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_TaxCategory_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TaxCategoryDto"];
                "application/xml": components["schemas"]["TaxCategoryDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_143: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_TaxCategory_listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of taxCategories */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaxCategoryListResponseDto"];
                    "application/xml": components["schemas"]["TaxCategoryListResponseDto"];
                };
            };
        };
    };
    "    DELETE_TaxCategory_{code}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_TaxCategory_list": {
        parameters: {
            query?: {
                query?: string;
                fields?: string;
                offset?: number;
                limit?: number;
                sortBy?: string;
                sortOrder?: "ASCENDING" | "DESCENDING";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of Tax categorys */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaxCategoryListResponseDto"];
                    "application/xml": components["schemas"]["TaxCategoryListResponseDto"];
                };
            };
        };
    };
    "    POST_TaxCategory_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description List of Tax categorys */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaxCategoryListResponseDto"];
                    "application/xml": components["schemas"]["TaxCategoryListResponseDto"];
                };
            };
        };
    };
    "    GET_TaxClass_search": {
        parameters: {
            query?: {
                code?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A Tax class's data */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaxClassResponseDto"];
                    "application/xml": components["schemas"]["TaxClassResponseDto"];
                };
            };
        };
    };
    "    PUT_TaxClass_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TaxClassDto"];
                "application/xml": components["schemas"]["TaxClassDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_TaxClass_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TaxClassDto"];
                "application/xml": components["schemas"]["TaxClassDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_TaxClass_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TaxClassDto"];
                "application/xml": components["schemas"]["TaxClassDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_144: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_TaxClass_listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of taxClasses */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaxClassListResponseDto"];
                    "application/xml": components["schemas"]["TaxClassListResponseDto"];
                };
            };
        };
    };
    "    DELETE_TaxClass_{code}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_TaxClass_list": {
        parameters: {
            query?: {
                query?: string;
                fields?: string;
                offset?: number;
                limit?: number;
                sortBy?: string;
                sortOrder?: "ASCENDING" | "DESCENDING";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of Tax classs */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaxClassListResponseDto"];
                    "application/xml": components["schemas"]["TaxClassListResponseDto"];
                };
            };
        };
    };
    "    POST_TaxClass_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description List of Tax classs */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaxClassListResponseDto"];
                    "application/xml": components["schemas"]["TaxClassListResponseDto"];
                };
            };
        };
    };
    "    GET_TaxMapping_search": {
        parameters: {
            query?: {
                id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A Tax mapping's data */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaxMappingResponseDto"];
                    "application/xml": components["schemas"]["TaxMappingResponseDto"];
                };
            };
        };
    };
    "    PUT_TaxMapping_update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TaxMappingDto"];
                "application/xml": components["schemas"]["TaxMappingDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_TaxMapping_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TaxMappingDto"];
                "application/xml": components["schemas"]["TaxMappingDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    POST_TaxMapping_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["TaxMappingDto"];
                "application/xml": components["schemas"]["TaxMappingDto"];
            };
        };
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    index_145: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_TaxMapping_listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of taxMappings */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaxMappingListResponseDto"];
                    "application/xml": components["schemas"]["TaxMappingListResponseDto"];
                };
            };
        };
    };
    "    DELETE_TaxMapping_{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_TaxMapping_list": {
        parameters: {
            query?: {
                query?: string;
                fields?: string;
                offset?: number;
                limit?: number;
                sortBy?: string;
                sortOrder?: "ASCENDING" | "DESCENDING";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of Tax mappings */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaxMappingListResponseDto"];
                    "application/xml": components["schemas"]["TaxMappingListResponseDto"];
                };
            };
        };
    };
    "    POST_TaxMapping_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PagingAndFiltering"];
                "application/xml": components["schemas"]["PagingAndFiltering"];
            };
        };
        responses: {
            /** @description List of Tax mappings */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaxMappingListResponseDto"];
                    "application/xml": components["schemas"]["TaxMappingListResponseDto"];
                };
            };
        };
    };
    "    POST_Catalog_createOfferFromBOM": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BomOfferDto"];
                "application/xml": components["schemas"]["BomOfferDto"];
            };
        };
        responses: {
            /** @description Response of the create offer BOM */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    POST_Catalog_productChargeTemplate_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ProductChargeTemplateDto"];
                "application/xml": components["schemas"]["ProductChargeTemplateDto"];
            };
        };
        responses: {
            /** @description Response of the create or update Product Charge Template */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    POST_Catalog_productTemplate_createOrUpdate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ProductTemplateDto"];
                "application/xml": components["schemas"]["ProductTemplateDto"];
            };
        };
        responses: {
            /** @description Response of the create Product Template */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    PUT_Catalog_productChargeTemplate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ProductChargeTemplateDto"];
                "application/xml": components["schemas"]["ProductChargeTemplateDto"];
            };
        };
        responses: {
            /** @description Response of the update Product Charge Template */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    POST_Catalog_productChargeTemplate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ProductChargeTemplateDto"];
                "application/xml": components["schemas"]["ProductChargeTemplateDto"];
            };
        };
        responses: {
            /** @description Response of the create Product Charge Template */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    POST_Catalog_createProductFromBPM": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BpmProductDto"];
                "application/xml": components["schemas"]["BpmProductDto"];
            };
        };
        responses: {
            /** @description Response of the create Service BPM */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    PUT_Catalog_productTemplate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ProductTemplateDto"];
                "application/xml": components["schemas"]["ProductTemplateDto"];
            };
        };
        responses: {
            /** @description Response of the update Product Template */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    POST_Catalog_productTemplate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ProductTemplateDto"];
                "application/xml": components["schemas"]["ProductTemplateDto"];
            };
        };
        responses: {
            /** @description Response of the create Product Template */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    POST_Catalog_createServiceFromBSM": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BsmServiceDto"];
                "application/xml": components["schemas"]["BsmServiceDto"];
            };
        };
        responses: {
            /** @description Response of the create Service BSM */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    POST_Catalog_productChargeTemplate_{code}_disable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    POST_Catalog_productTemplate_{code}_disable": {
        parameters: {
            query?: {
                validFrom?: string;
                validTo?: string;
            };
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    POST_Catalog_productChargeTemplate_{code}_enable": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    POST_Catalog_productTemplate_{code}_enable": {
        parameters: {
            query?: {
                validFrom?: string;
                validTo?: string;
            };
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Request processing status */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    GET_Catalog_category": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of categories */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    GET_Catalog_productOffering": {
        parameters: {
            query?: {
                validFrom?: string;
                validTo?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of product offerings matching search criteria */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    GET_Catalog_productSpecification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of product specifications matching search criteria */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    GET_Catalog_category_{code}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Single category information */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    GET_Catalog_productChargeTemplate_{code}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Single productChargeTemplate information */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    DELETE_Catalog_productChargeTemplate_{code}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response of the delete action */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    GET_Catalog_productOffering_{id}": {
        parameters: {
            query?: {
                validFrom?: string;
                validTo?: string;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Single product offering */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    GET_Catalog_productSpecification_{id}": {
        parameters: {
            query?: {
                validFrom?: string;
                validTo?: string;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A single product specification */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    GET_Catalog_productTemplate_{code}": {
        parameters: {
            query?: {
                validFrom?: string;
                validTo?: string;
            };
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Single productTemplate information */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    DELETE_Catalog_productTemplate_{code}": {
        parameters: {
            query?: {
                validFrom?: string;
                validTo?: string;
            };
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response of the remove action */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    index_146: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return action status with version number as a message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    "    GET_Catalog_productChargeTemplate_listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return productChargeTemplate list */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductChargeTemplatesResponseDto"];
                    "application/xml": components["schemas"]["ProductChargeTemplatesResponseDto"];
                };
            };
        };
    };
    "    GET_Catalog_productTemplate_listGetAll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return productTemplates list */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetListProductTemplateResponseDto"];
                    "application/xml": components["schemas"]["GetListProductTemplateResponseDto"];
                };
            };
        };
    };
    "    GET_Catalog_productChargeTemplate_list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of charge template */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    GET_Catalog_productTemplate_list": {
        parameters: {
            query?: {
                code?: string;
                validFrom?: string;
                validTo?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of product templates */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    GET_Order_{orderId}_applicableDueDateDelay": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orderId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response of the due date delay */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    GET_Order_search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of product orders matching search criteria */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    POST_Order_create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ProductOrder"];
                "application/xml": components["schemas"]["ProductOrder"];
            };
        };
        responses: {
            /** @description Product order information */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    GET_Order_{orderId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orderId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response of the request */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    DELETE_Order_{orderId}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orderId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response of the delete request */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    PUT_Order_{orderId}_simpleDueDateDelay": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orderId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ApplicableDueDateDelayDto"];
                "application/xml": components["schemas"]["ApplicableDueDateDelayDto"];
            };
        };
        responses: {
            /** @description Response of the update request */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    PATCH_Order_{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ProductOrder"];
                "application/xml": components["schemas"]["ProductOrder"];
            };
        };
        responses: {
            /** @description An updated product order information */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    "    GET_Order_validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ProductOrder"];
                "application/xml": components["schemas"]["ProductOrder"];
            };
        };
        responses: {
            /** @description Product order information */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                    "application/xml": {
                        statusInfo?: {
                            reasonPhrase?: string;
                            /** Format: int32 */
                            statusCode?: number;
                            /** @enum {string} */
                            family?: "INFORMATIONAL" | "SUCCESSFUL" | "REDIRECTION" | "CLIENT_ERROR" | "SERVER_ERROR" | "OTHER";
                        };
                        cookies?: {
                            [key: string]: {
                                name?: string;
                                value?: string;
                                /** Format: int32 */
                                version?: number;
                                path?: string;
                                domain?: string;
                                comment?: string;
                                /** Format: int32 */
                                maxAge?: number;
                                /** Format: date-time */
                                expiry?: string;
                                secure?: boolean;
                                httpOnly?: boolean;
                            };
                        };
                        stringHeaders?: {
                            empty?: boolean;
                        } & {
                            [key: string]: string[];
                        };
                        allowedMethods?: string[];
                        entityTag?: {
                            value?: string;
                            weak?: boolean;
                        };
                        links?: {
                            title?: string;
                            uriBuilder?: Record<string, never>;
                            rel?: string;
                            rels?: string[];
                            params?: {
                                [key: string]: string;
                            };
                            /** Format: uri */
                            uri?: string;
                            type?: string;
                        }[];
                        mediaType?: {
                            type?: string;
                            subtype?: string;
                            parameters?: {
                                [key: string]: string;
                            };
                            wildcardType?: boolean;
                            wildcardSubtype?: boolean;
                        };
                        metadata?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        entity?: Record<string, never>;
                        /** Format: date-time */
                        date?: string;
                        /** Format: date-time */
                        lastModified?: string;
                        headers?: {
                            empty?: boolean;
                        } & {
                            [key: string]: Record<string, never>[];
                        };
                        /** Format: int32 */
                        status?: number;
                        /** Format: int32 */
                        length?: number;
                        /** Format: uri */
                        location?: string;
                        language?: {
                            script?: string;
                            country?: string;
                            variant?: string;
                            extensionKeys?: string[];
                            unicodeLocaleAttributes?: string[];
                            unicodeLocaleKeys?: string[];
                            iso3Language?: string;
                            iso3Country?: string;
                            displayLanguage?: string;
                            displayScript?: string;
                            displayCountry?: string;
                            displayVariant?: string;
                            displayName?: string;
                            language?: string;
                        };
                    };
                };
            };
        };
    };
    findProductQuotes: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description quotes are succeffully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductQuote"];
                    "application/xml": components["schemas"]["ProductQuote"];
                };
            };
        };
    };
    createProductQuote: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Product quote information */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ProductQuote"];
                "application/xml": components["schemas"]["ProductQuote"];
            };
        };
        responses: {
            /** @description The quote is succeffully created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    createQuoteItem_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Product quote item information */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ProductQuoteItem"];
                "application/xml": components["schemas"]["ProductQuoteItem"];
            };
        };
        responses: {
            /** @description quote item is succeffully created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    updateQuoteVersion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Product quote version information */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["QuoteVersionDto"];
                "application/xml": components["schemas"]["QuoteVersionDto"];
            };
        };
        responses: {
            /** @description New quote version is succeffully created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    createQuoteVersion_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Product quote version information */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["QuoteVersionDto"];
                "application/xml": components["schemas"]["QuoteVersionDto"];
            };
        };
        responses: {
            /** @description New quote version is succeffully created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetQuoteVersionDtoResponse"];
                    "application/xml": components["schemas"]["GetQuoteVersionDtoResponse"];
                };
            };
            /** @description the quote version with code or short description  is missing */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getProductQuote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product quote code */
                quoteCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The quote is succeffully retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProductQuote"];
                    "application/xml": components["schemas"]["ProductQuote"];
                };
            };
        };
    };
    updateProductQuote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product quote code */
                quoteCode: string;
            };
            cookie?: never;
        };
        /** @description Product quote information */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ProductQuote"];
                "application/xml": components["schemas"]["ProductQuote"];
            };
        };
        responses: {
            /** @description The quote is succeffully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    deleteProductQuote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product quote code */
                quoteCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The quote is succeffully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    updateQuoteItem_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product quote code */
                quoteItemCode: string;
            };
            cookie?: never;
        };
        /** @description Product quote information */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ProductQuoteItem"];
                "application/xml": components["schemas"]["ProductQuoteItem"];
            };
        };
        responses: {
            /** @description The quote item is succeffully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    deleteQuoteItem_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product quote item code */
                quoteItemCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description quote item is succeffully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    deleteQuoteVersion_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description quote code attached to quote version */
                quoteCode: string;
                /** @description quote version number */
                quoteVersion: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Existing quote version is succeffully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
            /** @description No quote version was found with quoteCode and quoteVersion in parameter */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntityDoesNotExistsException"];
                    "application/xml": components["schemas"]["EntityDoesNotExistsException"];
                };
            };
        };
    };
    placeOrder_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Product quote code */
                quoteCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description order succeffully created from current quote */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionStatus"];
                    "application/xml": components["schemas"]["ActionStatus"];
                };
            };
        };
    };
    getApplicationVersion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description default response */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
